; Sonic the Hedgehog 2 (Simon Wai prototype) disassembly
; Originally created by Esrael L.G. Neto around 2008
;
; Alright, time for some info...
; Internally, the zone order goes like this:
; 00 - Green Hill
; 01 - Zone 01 (UNUSED)
; 02 - Wood
; 03 - Zone 03 (UNUSED)
; 04 - Metropolis
; 05 - Metropolis Act 3
; 06 - Zone 06 (UNUSED)
; 07 - Hill Top
; 08 - Hidden Palace
; 09 - Zone 09 (UNUSED)
; 0A - Oil Ocean
; 0B - Dust Hill
; 0C - Casino Night
; 0D - Chemical Plant
; 0E - Genocide City (EMPTY)
; 0F - Neo Green Hill
; 10 - Death Egg (EMPTY)
; Going off the concept art, the unused zone IDs would've been for Ocean Wind, Sand Shower,
; Blue Lake/Blue Ocean, and Rock World, so they will be referred to as such here
;
; Death Egg doesn't have its entries defined for any music lists, so, by default, the compiler
; will put up an error for missing entries; just uncomment the commented-out entries on the
; list to fix this (it's only not compiled by default for accuracy)
;
; For certain bits of information, search for "NOTE:"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; ASSEMBLY OPTIONS:
;
padToPowerOfTwo = 1
;	| If 1, pads the end of the ROM to the next power of two bytes (for real hardware)
;
zeroOffsetOptimization = 0
;	| If 1, makes a handful of zero-offset instructions smaller
;
useFullWaterTables = 0
;	| If 1, zone offset tables for water levels cover all level slots instead of only slots 8-$F
;	| Set to 1 if you've shifted level IDs around or you want water in levels with a level slot below 8
;

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; AS-specific macros and assembler settings
	CPU 68000
	include	"s2b.macrosetup.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Equates section - Names for variables.
	include	"s2b.constants.asm"
SonicDriverVer = 2
	include	"sound/_smps2asm_inc.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; Simplifying macros and functions
	include	"s2b.macros.asm"

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; start of ROM

StartOfRom:
Vectors:	dc.l    System_Stack, EntryPoint, BusError, AddressError  
		dc.l    IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
		dc.l    PrivilegeViol, Trace, Line1010Emu, Line1111Emu
		dc.l    ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
		dc.l    ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
		dc.l    ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
		dc.l    ErrorExcept, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    H_int, ErrorTrap, V_int, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap
		dc.l    ErrorTrap, ErrorTrap, ErrorTrap, ErrorTrap

Header:
	dc.b "SEGA MEGA DRIVE " ; Console name
	dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year, leftover from Sonic 1)
	dc.b "SONIC THE             HEDGEHOG 2                " ; Domestic title
	dc.b "SONIC THE             HEDGEHOG 2                " ; International title
	dc.b "GM 00004049-01"	; Serial number (leftover from Sonic 1)
Checksum:
	dc.w $AFC7		; Checksum (leftover from Sonic 1)
	dc.b "J               " ; I/O support
	dc.l StartOfRom		; Start address of ROM
RomEndLoc:
	dc.l $7FFFF		; End address of ROM (leftover from Sonic 1)
	dc.l RAM_Start&$FFFFFF	; Start address of RAM
	dc.l (RAM_End-1)&$FFFFFF; End address of RAM
	dc.b "                " ; Backup RAM
	dc.b "                                                " ; notes (can be anything, but must be 52 bytes)
	dc.b "JUE             " ; Country code 
; ===========================================================================
; Freeze execution and loop here; since Sonic 2 uses a Z80 driver, the sound
; does NOT stop playing unlike Sonic 1
; loc_200:
ErrorTrap:
		nop 
		nop  
		bra.s	ErrorTrap
; ===========================================================================
; loc_206:
EntryPoint:
		tst.l	(HW_Port_1_Control-1).l
		bne.s	PortA_OK
		tst.w	(HW_Expansion_Control-1).l
; loc_214:
PortA_OK:
		bne.s	PortC_OK		; skip the VDP and Z80 setup code if port A, B or C is ok...?
		lea	SetupValues(pc),a5	; load setup values array address
		movem.w	(a5)+,d5-d7
		movem.l	(a5)+,a0-a4
		move.b	HW_Version-Z80_Bus_Request(a1),d0	; get hardware version
		andi.b	#$F,d0
		beq.s	SkipSecurity		; if the console has no TMSS, skip the security stuff
		move.l	#'SEGA',Security_Addr-Z80_Bus_Request(a1)	; satisfy the TMSS
; loc_234:
SkipSecurity:
		move.w	(a4),d0	; check if VDP works
		moveq	#0,d0	; clear d0
		movea.l	d0,a6	; clear a6
		move	a6,usp	; set usp to $0

		moveq	#VDPInitValues_End-VDPInitValues-1,d1 ; run the following loop $18 times
; loc_23E:
VDPInitLoop:
		move.b	(a5)+,d5	; add $8000 to value
		move.w	d5,(a4)	; move value to VDP register
		add.w	d7,d5	; next register
		dbf	d1,VDPInitLoop

		move.l	(a5)+,(a4)	; set VRAM write mode
		move.w	d0,(a3)	; clear the screen
		move.w	d7,(a1)	; stop the Z80
		move.w	d7,(a2)	; reset the Z80
; loc_250:
WaitForZ80:
		btst	d0,(a1)	; has the Z80 stopped?
		bne.s	WaitForZ80	; if not, branch

		moveq	#Z80StartupCodeEnd-Z80StartupCodeBegin-1,d2
; loc_256:
Z80InitLoop:
		move.b	(a5)+,(a0)+
		dbf	d2,Z80InitLoop

		move.w	d0,(a2)
		move.w	d0,(a1)	; start the Z80
		move.w	d7,(a2)	; reset the Z80
; loc_262:
ClrRAMLoop:
		move.l	d0,-(a6)	; clear 4 bytes of RAM
		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
		move.l	(a5)+,(a4)	; set VDP to CRAM write

		moveq	#bytesToLcnt($80),d3	; set repeat times
; loc_26E:
ClrCRAMLoop:
		move.l	d0,(a3)	; clear 2 palettes
		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
		move.l	(a5)+,(a4)	; set VDP to VSRAM write

		moveq	#bytesToLcnt($50),d4	; set repeat times
; loc_278: ClrVDPStuff:
ClrVSRAMLoop:
		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
		moveq	#PSGInitValues_End-PSGInitValues-1,d5	; set repeat times.
; loc_280:
PSGInitLoop:
		move.b	(a5)+,PSG_input-VDP_data_port(a3) ; reset the PSG
		dbf	d5,PSGInitLoop	; repeat for other channels
		move.w	d0,(a2)
		movem.l	(a6),d0-a6	; clear all registers
		move	#$2700,sr	; set the sr
 ; loc_292:
PortC_OK:
		bra.s	GameProgram	; Branch to game program.
; ===========================================================================
; byte_294: InitValues:
SetupValues:
		dc.w	$8000,bytesToLcnt($10000),$100

		dc.l	Z80_RAM
		dc.l	Z80_Bus_Request
		dc.l	Z80_Reset
		dc.l	VDP_data_port, VDP_control_port

VDPInitValues:	; values for VDP registers
		dc.b 4			; Command $8004 - HInt off, Enable HV counter read
		dc.b $14		; Command $8114 - Display off, VInt off, DMA on, PAL off
		dc.b $30		; Command $8230 - Scroll A Address $C000
		dc.b $3C		; Command $833C - Window Address $F000
		dc.b 7			; Command $8407 - Scroll B Address $E000
		dc.b $6C		; Command $856C - Sprite Table Address $D800
		dc.b 0			; Command $8600 - Null
		dc.b 0			; Command $8700 - Background color Pal 0 Color 0
		dc.b 0			; Command $8800 - Null
		dc.b 0			; Command $8900 - Null
		dc.b $FF		; Command $8AFF - Hint timing $FF scanlines
		dc.b 0			; Command $8B00 - Ext Int off, VScroll full, HScroll full
		dc.b $81		; Command $8C81 - 40 cell mode, shadow/highlight off, no interlace
		dc.b $37		; Command $8D37 - HScroll Table Address $DC00
		dc.b 0			; Command $8E00 - Null
		dc.b 1			; Command $8F01 - VDP auto increment 1 byte
		dc.b 1			; Command $9001 - 64x32 cell scroll size
		dc.b 0			; Command $9100 - Window H left side, Base Point 0
		dc.b 0			; Command $9200 - Window V upside, Base Point 0
		dc.b $FF		; Command $93FF - DMA Length Counter $FFFF
		dc.b $FF		; Command $94FF - See above
		dc.b 0			; Command $9500 - DMA Source Address $0
		dc.b 0			; Command $9600 - See above
		dc.b $80		; Command $9780	- See above + VRAM fill mode
VDPInitValues_End:

		dc.l	vdpComm($0000,VRAM,DMA) ; value for VRAM write mode

	; Z80 instructions (not the sound driver; that gets loaded later)
Z80StartupCodeBegin: ; loc_2CA:
    save
    CPU Z80 ; start assembling Z80 code
    phase 0 ; pretend we're at address 0
		xor	a	; clear a to 0
		ld	bc,((Z80_RAM_End-Z80_RAM)-zStartupCodeEndLoc)-1 ; prepare to loop this many times
		ld	de,zStartupCodeEndLoc+1	; initial destination address
		ld	hl,zStartupCodeEndLoc	; initial source address
		ld	sp,hl	; set the address the stack starts at
		ld	(hl),a	; set first byte of the stack to 0
		ldir		; loop to fill the stack (entire remaining available Z80 RAM) with 0
		pop	ix	; clear ix
		pop	iy	; clear iy
		ld	i,a	; clear i
		ld	r,a	; clear r
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ex	af,af'	; swap af with af'
		exx		; swap bc/de/hl with their shadow registers too
		pop	bc	; clear bc
		pop	de	; clear de
		pop	hl	; clear hl
		pop	af	; clear af
		ld	sp,hl	; clear sp
		di		; clear iff1 (for interrupt handler)
		im	1	; interrupt handling mode = 1
		ld	(hl),0E9h ; replace the first instruction with a jump to itself
		jp	(hl)	  ; jump to the first instruction (to stay there forever)
zStartupCodeEndLoc:
    dephase ; stop pretending
	restore
    padding off ; unfortunately our flags got reset so we have to set them again...
Z80StartupCodeEnd:

		dc.w	$8104	; value for VDP display mode
		dc.w	$8F02	; value for VDP increment
		dc.l	vdpComm($0000,CRAM,WRITE)	; value for CRAM write mode
		dc.l	vdpComm($0000,VSRAM,WRITE)	; value for VSRAM write mode

PSGInitValues:
		dc.b	$9F,$BF,$DF,$FF	; values for PSG channel volumes
PSGInitValues_End:
; ===========================================================================
		even
; loc_300:
GameProgram:
		tst.w	(VDP_control_port).l
		btst	#6,(HW_Expansion_Control).l
		beq.s	ChecksumTest
		cmpi.l	#'init',(Checksum_fourcc).w
		beq.w	GameInit
; loc_31C:
ChecksumTest:
		move.l	#ErrorTrap,a0
		move.l	#RomEndLoc,a1
		move.l	(a1),d0  
		move.l	#$7FFFF,d0
		moveq	#0,d1 
; loc_332:
ChecksumLoop:
		add.w	(a0)+,d1
		cmp.l	a0,d0
		bcc.s	ChecksumLoop
		move.l	#Checksum,a1
		cmp.w	(a1),d1
		nop
		nop
		lea	(CrossResetRAM).w,a6
		moveq	#0,d7 
		move.w	#bytesToLcnt(CrossResetRAM_End-CrossResetRAM),d6
; loc_34E:
GameClrStack:               
		move.l	d7,(a6)+
		dbf	d6,GameClrStack
		move.b	(HW_Version).l,d0
		andi.b	#$C0,d0
		move.b	d0,(Graphics_Flags).w
		move.l	#'init',(Checksum_fourcc).w
; loc_36A:
GameInit:              
		lea	(RAM_Start&$FFFFFF).l,a6 
		moveq	#0,d7 
		move.w	#bytesToLcnt(CrossResetRAM-RAM_Start),d6
; loc_376: 
GameClrRAM:		
		move.l	d7,(a6)+
		dbf	d6,GameClrRAM

		bsr.w	VDPRegSetup
		bsr.w	JmpTo_SoundDriverLoad
		bsr.w	JoypadInit
		; Strangely, this loads the title screen, and not the Sega screen,
		; and the August 21st prototype suggests this was NOT done by the pirates...
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
; loc_38E:
MainGameLoop:
		move.b	(Game_Mode).w,d0
		andi.w	#$1C,d0
		jsr	GameModesArray(pc,d0.w)
		bra.s	MainGameLoop
; ===========================================================================
; loc_39C:
GameModesArray:
GameMode_SegaScreen:	bra.w	SegaScreen
GameMode_TitleScreen:	bra.w	TitleScreen
GameMode_Demo:		bra.w	Level
GameMode_Level:		bra.w	Level
GameMode_SpecialStage:	bra.w	SpecialStage
; ===========================================================================
; Leftover from Sonic 1, turned the screen red if the checksum ever failed
ChecksumError:
		bsr.w	VDPRegSetup
		move.l	#$C0000000,(VDP_control_port).l	; write to CRAM
		moveq	#$3F,d7
; loc_3C0:
Checksum_Red:
		move.w	#$E,(VDP_data_port).l		; color a line red
		dbf	d7,Checksum_Red		; repeat $3F times
; loc_3CC:
Checksum_Loop:
		bra.s	Checksum_Loop
; ===========================================================================
; loc_3CE:
BusError:
		move.b	#2,(Object_Respawn_Table+$44).w
		bra.s	ErrorMsg_TwoAddresses
; ---------------------------------------------------------------------------
; loc_3D6:
AddressError:
		move.b	#4,(Object_Respawn_Table+$44).w
		bra.s	ErrorMsg_TwoAddresses
; ---------------------------------------------------------------------------
; loc_3DE:
IllegalInstr:
		move.b	#6,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3EA:
ZeroDivide:
		move.b	#8,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3F2:
ChkInstr:
		move.b	#$A,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_3FA:
TrapvInstr:
		move.b	#$C,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_402:
PrivilegeViol:
		move.b	#$E,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_40A:
Trace:
		move.b	#$10,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_412:
Line1010Emu:
		move.b	#$12,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_41E:
Line1111Emu:
		move.b	#$14,(Object_Respawn_Table+$44).w
		addq.l	#2,2(sp)
		bra.s	ErrorMessage
; ---------------------------------------------------------------------------
; loc_42A:
ErrorExcept:
		move.b	#0,(Object_Respawn_Table+$44).w
		bra.s	ErrorMessage
; ===========================================================================
; sub_432:
ErrorMsg_TwoAddresses:
		move	#$2700,sr
		addq.w	#2,sp
		move.l	(sp)+,(Object_Respawn_Table+$40).w
		addq.w	#2,sp
		movem.l	d0-a7,(Object_Respawn_Table).w
		bsr.w	ShowErrorMsg
		move.l	2(sp),d0
		bsr.w	ShowErrAddress
		move.l	(Object_Respawn_Table+$40).w,d0
		bsr.w	ShowErrAddress
		bra.s	ErrorMsg_Wait
; ---------------------------------------------------------------------------
; loc_45A:		  
ErrorMessage:
		move	#$2700,sr
		movem.l	d0-a7,(Object_Respawn_Table).w
		bsr.w	ShowErrorMsg
		move.l	2(sp),d0
		bsr.w	ShowErrAddress
; loc_470:
ErrorMsg_Wait:
		bsr.w	Error_WaitForC
		movem.l	(Object_Respawn_Table).w,d0-a7
		move	#$2300,sr
		rte
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load an error message
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_480:
ShowErrorMsg:
		lea	(VDP_data_port).l,a6
		move.l	#$78000003,(VDP_control_port).l
		lea	(ArtUnc_DbgText).l,a0
		move.w	#$27F,d1
; loc_49A;
Error_LoadGfx:
		move.w	(a0)+,(a6)
		dbf	d1,Error_LoadGfx
		moveq	#0,d0
		move.b	(Object_Respawn_Table+$44).w,d0	; load error code
		move.w	ErrorTextTbl(pc,d0.w),d0
		lea	ErrorTextTbl(pc,d0.w),a0
		move.l	#$46040003,(VDP_control_port).l	; position on screen
		moveq	#$12,d1			; number of characters
; loc_4BA:
Error_LoopChars:
		moveq	#0,d0
		move.b	(a0)+,d0
		addi.w	#$790,d0
		move.w	d0,(a6)
		dbf	d1,Error_LoopChars	; repeat for number of characters
		rts
; End of function ShowErrorMsg

; ===========================================================================
ErrorTextTbl:	dc.w ErrTxt_Except-ErrorTextTbl
		dc.w ErrTxt_BusError-ErrorTextTbl
		dc.w ErrTxt_AddressError-ErrorTextTbl
		dc.w ErrTxt_IllegalInstr-ErrorTextTbl
		dc.w ErrTxt_ZeroDivide-ErrorTextTbl 
		dc.w ErrTxt_ChkInstr-ErrorTextTbl
		dc.w ErrTxt_TrapvInstr-ErrorTextTbl
		dc.w ErrTxt_PrivilegeViol-ErrorTextTbl
		dc.w ErrTxt_Trace-ErrorTextTbl
		dc.w ErrTxt_Line1010Emu-ErrorTextTbl
		dc.w ErrTxt_Line1111Emu-ErrorTextTbl
ErrTxt_Except:		dc.b "ERROR EXCEPTION    "
ErrTxt_BusError:	dc.b "BUS ERROR          "
ErrTxt_AddressError:	dc.b "ADDRESS ERROR      "
ErrTxt_IllegalInstr:	dc.b "ILLEGAL INSTRUCTION"
ErrTxt_ZeroDivide:	dc.b "@ERO DIVIDE        " ; '@' displays as 'Z' in-game
ErrTxt_ChkInstr:	dc.b "CHK INSTRUCTION    "
ErrTxt_TrapvInstr:	dc.b "TRAPV INSTRUCTION  "
ErrTxt_PrivilegeViol:	dc.b "PRIVILEGE VIOLATION"
ErrTxt_Trace:		dc.b "TRACE              "
ErrTxt_Line1010Emu:	dc.b "LINE 1010 EMULATOR "
ErrTxt_Line1111Emu:	dc.b "LINE 1111 EMULATOR "
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load address of where the error occurred
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_5B2:
ShowErrAddress:
		move.w	#$7CA,(a6)
		moveq	#7,d2

-		rol.l	#4,d0
		bsr.s	ShowErrDigit
		dbf	d2,-
		rts
; ---------------------------------------------------------------------------
; loc_5C2:
ShowErrDigit:
		move.w	d0,d1
		andi.w	#$F,d1
		cmpi.w	#$A,d1
		bcs.s	ShowErrDigit_NoOverflow
		addq.w	#7,d1
; loc_5D0:
ShowErrDigit_NoOverflow:
		addi.w	#$7C0,d1
		move.w	d1,(a6)
		rts
; ---------------------------------------------------------------------------
; loc_5D8:
Error_WaitForC:
		bsr.w	ReadJoypads
		cmpi.b	#$20,(Ctrl_1_Press).w
		bne.w	Error_WaitForC
		rts
; End of function ShowErrAddress

; ===========================================================================
; ---------------------------------------------------------------------------
; Uncompressed art
; Text for level select and error messages	; ArtUnc_5E8: Art_Text:
ArtUnc_DbgText:	BINCLUDE	"art/uncompressed/Error message and level select text.bin"
		even

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; vertical and horizontal interrupt handlers
; VERTICAL INTERRUPT HANDLER:
; loc_B08: VBlank:
V_int:
		movem.l	d0-a6,-(sp)
		tst.b	(Vint_routine).w
		beq.w	Vint_Lag

loc_B14:
		move.w	(VDP_control_port).l,d0
		andi.w	#8,d0
		beq.s	loc_B14
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor).w,(VDP_data_port).l
		btst	#6,(Graphics_Flags).w
		beq.s	loc_B42
		move.w	#$700,d0

loc_B3E: 
		dbf	d0,loc_B3E

loc_B42:
		move.b	(Vint_routine).w,d0
		move.b	#VintID_Lag,(Vint_routine).w
		move.w	#1,(Hint_flag).w
		andi.w	#$3E,d0
		move.w	Vint_SwitchTbl(pc,d0.w),d0
		jsr	Vint_SwitchTbl(pc,d0.w)
; loc_B5E:
VintRet:
		addq.l	#1,(Vint_runcount).w
		movem.l	(sp)+,d0-a6
		rte
; ===========================================================================
; off_B68:
Vint_SwitchTbl:		offsetTable
Vint_Lag_ptr:		offsetTableEntry.w Vint_Lag
Vint_SEGA_ptr:		offsetTableEntry.w Vint_SEGA
Vint_Title_ptr:		offsetTableEntry.w Vint_Title
Vint_Unused6_ptr:	offsetTableEntry.w Vint_Unused6
Vint_Level_ptr:		offsetTableEntry.w Vint_Level
Vint_S1SS_ptr:		offsetTableEntry.w Vint_S1SS
Vint_TitleCard_ptr:	offsetTableEntry.w Vint_TitleCard
Vint_UnusedE_ptr:	offsetTableEntry.w Vint_UnusedE
Vint_Pause_ptr:		offsetTableEntry.w Vint_Pause
Vint_Fade_ptr:		offsetTableEntry.w Vint_Fade
Vint_PCM_ptr:		offsetTableEntry.w Vint_PCM
Vint_SSResults_ptr:	offsetTableEntry.w Vint_SSResults
Vint_TitleCardDup_ptr:	offsetTableEntry.w Vint_TitleCard
; ===========================================================================
; loc_B82: VintSub00:
Vint_Lag:
		cmpi.b	#GameModeID_TitleCard|GameModeID_Level,(Game_Mode).w
		beq.s	loc_BBC
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		beq.s	loc_BBC
		cmpi.b	#GameModeID_Level,(Game_Mode).w
		beq.s	loc_BBC
		stopZ80
		jsr	(sndDriverInput).l
		startZ80
		bra.s	VintRet

loc_BBC:
		tst.b	(Water_flag).w
		beq.w	Vint0_NoWater
		move.w	(VDP_control_port).l,d0
		btst	#6,(Graphics_Flags).w
		beq.s	loc_BDA
		move.w	#$700,d0

loc_BD6:
		dbf	d0,loc_BD6

loc_BDA:
		move.w	#1,(Hint_flag).w
		stopZ80
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_C1E
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_C42
; ---------------------------------------------------------------------------

loc_C1E:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_C42:
		move.w	(Hint_counter_reserve).w,(a5)
		move.w	#$8230,(VDP_control_port).l
		jsr	(sndDriverInput).l
		startZ80
		bra.w	VintRet
; ---------------------------------------------------------------------------
; loc_C60:
Vint0_NoWater:
		move.w	(VDP_control_port).l,d0
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor).w,(VDP_data_port).l
		btst	#6,(Graphics_Flags).w
		beq.s	loc_C88
		move.w	#$700,d0

loc_C84:
		dbf	d0,loc_C84

loc_C88:
		move.w	#1,(Hint_flag).w
		move.w	(Hint_counter_reserve).w,(VDP_control_port).l
		move.w	#$8230,(VDP_control_port).l
		move.l	(Vscroll_Factor_P2).w,(Vscroll_Factor_P2_HInt).w
		stopZ80
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		bra.w	VintRet
; ===========================================================================
; loc_CEC: VintSub2:
Vint_SEGA:
		bsr.w	Do_ControllerPal
		tst.w	(Demo_Time_left).w
		beq.w	return_CFC	; Esrael's disasm has this as beq.s, which was in fact wrong
		subq.w	#1,(Demo_Time_left).w

return_CFC:
		rts
; ===========================================================================
; loc_CFE: VintSub14:
Vint_PCM:
		stopZ80
		bsr.w	ReadJoypads
		startZ80
		tst.w	(Demo_Time_left).w
		beq.w	return_D28
		subq.w	#1,(Demo_Time_left).w

return_D28:  
		rts
; ===========================================================================
; loc_D2A: VintSub4:
Vint_Title:
		bsr.w	Do_ControllerPal
		bsr.w	ProcessDPLC
		tst.w	(Demo_Time_left).w
		beq.w	return_D3E
		subq.w	#1,(Demo_Time_left).w

return_D3E:
		rts
; ===========================================================================
; loc_D40: VintSub6:
Vint_Unused6:
		bsr.w	Do_ControllerPal
		rts
; ===========================================================================
; loc_D46: VintSub10:
Vint_Pause:
		cmpi.b	#GameModeID_SpecialStage,(Game_Mode).w	; is this the Special Stage?
		beq.w	Vint_S1SS		; if yes, branch
; loc_D50: VintSub8:
Vint_Level:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_D92
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_DB6
; ---------------------------------------------------------------------------

loc_D92:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_DB6:
		move.w	(Hint_counter_reserve).w,(a5)
		move.w	#$8230,(VDP_control_port).l
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		movem.l	(Camera_RAM).w,d0-d7
		movem.l	d0-d7,(Camera_RAM_copy).w
		movem.l	(Camera_X_pos_P2).w,d0-d7
		movem.l	d0-d7,(Camera_P2_copy).w
		movem.l	(Scroll_flags).w,d0-d3
		movem.l	d0-d3,(Scroll_flags_copy).w
		move.l	(Vscroll_Factor_P2).w,(Vscroll_Factor_P2_HInt).w
		cmpi.b	#$5C,(Hint_counter_reserve+1).w
		bcc.s	Do_Updates
		move.b	#1,(Do_Updates_in_H_int).w
		rts

; ---------------------------------------------------------------------------
; Subroutine to run a demo for an amount of time
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E56: DemoTime:
Do_Updates:
		bsr.w	LoadTilesAsYouMove
		jsr	(HudUpdate).l
		bsr.w	ProcessDPLC2
		tst.w	(Demo_Time_left).w
		beq.w	return_E70
		subq.w	#1,(Demo_Time_left).w

return_E70:
		rts
; End of function Do_Updates

; ===========================================================================
; loc_E72: VintSubA:
Vint_S1SS:
		stopZ80
		bsr.w	ReadJoypads
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		bsr.w	S1_Pal_Cycle_Special_Stage
		tst.w	(Demo_Time_left).w
		beq.w	return_F16
		subq.w	#1,(Demo_Time_left).w

return_F16: 
		rts
; ===========================================================================
; loc_F18: VintSubC: VintSub16:
Vint_TitleCard:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_F5A
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_F7E
; ---------------------------------------------------------------------------

loc_F5A:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_F7E:
		move.w	(Hint_counter_reserve).w,(a5)
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		bsr.w	ProcessDMAQueue
		jsr	(sndDriverInput).l
		startZ80
		movem.l	(Camera_RAM).w,d0-d7
		movem.l	d0-d7,(Camera_RAM_copy).w
		movem.l	(Scroll_flags).w,d0-d1
		movem.l	d0-d1,(Scroll_flags_copy).w
		bsr.w	LoadTilesAsYouMove
		jsr	(HudUpdate).l
		bsr.w	ProcessDPLC
		rts
; ===========================================================================
; loc_1004: VintSubE:
Vint_UnusedE:
		bsr.w	Do_ControllerPal
		addq.b	#1,(VIntSubE_RunCount).w
		move.b	#VintID_UnusedE,(Vint_routine).w
		rts
; ===========================================================================
; loc_1014: VintSub12:
Vint_Fade:
		bsr.w	Do_ControllerPal
		move.w	(Hint_counter_reserve).w,(a5)
		bra.w	ProcessDPLC
; ===========================================================================
; loc_1020: VintSub16:
Vint_SSResults:
		stopZ80
		bsr.w	ReadJoypads
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		tst.w	(Demo_Time_left).w
		beq.w	return_10BC
		subq.w	#1,(Demo_Time_left).w

return_10BC:
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_10BE:
Do_ControllerPal:
		stopZ80
		bsr.w	ReadJoypads
		tst.b	(Water_fullscreen_flag).w
		bne.s	loc_1100
		dma68kToVDP Normal_palette,$0000,palette_line_size*4,CRAM
		bra.s	loc_1124
; ---------------------------------------------------------------------------

loc_1100:
		dma68kToVDP Underwater_palette,$0000,palette_line_size*4,CRAM

loc_1124:
		dma68kToVDP Sprite_Table,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		dma68kToVDP Horiz_Scroll_Buf,VRAM_Horiz_Scroll_Table,VRAM_Horiz_Scroll_Table_Size,VRAM
		jsr	(sndDriverInput).l
		startZ80
		rts

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; HORIZONTAL INTERRUPT HANDLER:
; loc_117C: HBlank:
H_int:
		tst.w	(Hint_flag).w
		beq.w	return_1226
		tst.w	(Two_player_mode).w
		beq.w	PalToCRAM
		move.w	#0,(Hint_flag).w
		move.l	a5,-(sp)
		move.l	d0,-(sp)

loc_1196:
		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_1196
		move.w	(VDP_Reg1_val).w,d0
		andi.b	#$BF,d0
		move.w	d0,(VDP_control_port).l
		move.w	#$8228,(VDP_control_port).l
		move.l	#$40000010,(VDP_control_port).l
		move.l	(Vscroll_Factor_P2_HInt).w,(VDP_data_port).l
		stopZ80
		dma68kToVDP Sprite_Table_2,VRAM_Sprite_Attribute_Table,VRAM_Sprite_Attribute_Table_Size,VRAM
		startZ80

loc_1208:
		move.w	(VDP_control_port).l,d0
		andi.w	#4,d0
		beq.s	loc_1208
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port).l
		move.l	(sp)+,d0
		move.l	(sp)+,a5

return_1226:
		rte
; ---------------------------------------------------------------------------
; loc_1228: H_int_Not2pMode:
PalToCRAM:
		move	#$2700,sr
		move.w	#0,(Hint_flag).w
		movem.l	a0-a1,-(sp)
		lea	(VDP_data_port).l,a1
		lea	(Underwater_palette).w,a0	; load palette from RAM
		move.l	#$C0000000,4(a1)	; set VDP to write to CRAM address $00
	rept 32
		move.l	(a0)+,(a1)	; move palette to CRAM (all 64 colors at once)
	endm
		move.w	#$8ADF,4(a1)	; write %1101 %1111 to register 10 (interrupt every 224th line)
		movem.l	(sp)+,a0-a1
		tst.b	(Do_Updates_in_H_int).w
		bne.s	loc_129A
		rte
; ---------------------------------------------------------------------------

loc_129A:
		clr.b	(Do_Updates_in_H_int).w
		movem.l	d0-a6,-(sp)
		bsr.w	Do_Updates
		movem.l	(sp)+,d0-a6
		rte

; >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
; game code

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Input our music/sound selection to the sound driver.
; loc_12AC:
sndDriverInput:
		lea	(Sound_Queue).l,a0
		lea	(Z80_RAM+$1B80).l,a1

		cmpi.b	#$80,8(a1)	; is the sound driver still processing a request?
		bne.s	loc_12E0	; if yes, branch

		_move.b	0(a0),d0
		beq.s	loc_12E0
		_clr.b	0(a0)
		move.b	d0,d1
		subi.b	#$FE,d1
		bcs.s	loc_12DC
		addi.b	#$7F,d1
		move.b	d1,3(a1)
		bra.s	loc_12E0

loc_12DC:
		move.b	d0,8(a1)

loc_12E0:
		moveq	#4-1,d1	; this is one digit too high, meaning the first byte of the voice table pointer is overwritten

loc_12E2:
		move.b	1(a0,d1.w),d0
		beq.s	loc_12F6
		tst.b	9(a1,d1.w)
		bne.s	loc_12F6
		clr.b	1(a0,d1.w)
		move.b	d0,9(a1,d1.w)

loc_12F6:
		dbf	d1,loc_12E2
		rts
; End of function sndDriverInput

; ---------------------------------------------------------------------------
; Subroutine to initialize joypads
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_12FC:
JoypadInit: 
		stopZ80
		moveq	#$40,d0
		move.b	d0,(HW_Port_1_Control).l	; init port 1 (joypad 1)
		move.b	d0,(HW_Port_2_Control).l	; init port 2 (joypad 2)
		move.b	d0,(HW_Expansion_Control).l	; init port 3 (expansion/extra)
		startZ80
		rts
; End of function JoypadInit

; ---------------------------------------------------------------------------
; Subroutine to read joypad input, and send it to the RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_132C:
ReadJoypads:
		lea	(Ctrl_1).w,a0		; address where joypad states are written
		lea	(HW_Port_1_Data).l,a1	; first joypad port
		bsr.s	Joypad_Read		; do the first joypad
		addq.w	#2,a1			; do the second joypad
; loc_133A:
Joypad_Read:
		move.b	#0,(a1)
		nop
		nop
		move.b	(a1),d0
		lsl.b	#2,d0
		andi.b	#$C0,d0
		move.b	#$40,(a1)
		nop
		nop  
		move.b	(a1),d1
		andi.b	#$3F,d1
		or.b	d1,d0
		not.b	d0
		move.b	(a0),d1
		eor.b	d0,d1
		move.b	d0,(a0)+
		and.b	d0,d1
		move.b	d1,(a0)+
		rts
; End of function ReadJoypads

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1368:
VDPRegSetup:
		lea     (VDP_control_port).l, A0
		lea     (VDP_data_port).l, A1
		lea     (VDPRegSetup_Array).l, A2 ; loc_13F2
		moveq   #$12, D7 
VDPRegSetup_Loop: ; loc_137C:		 
		move.w  (A2)+, (A0)
		dbf    D7, VDPRegSetup_Loop    ; loc_137C
		move    (VDPReg_01).l, D0         ; loc_13F4
		move.w  D0, (VDP_Reg1_val).w 
		move.w  #$8ADF, (Hint_counter_reserve).w
		moveq   #$00, D0
		move.l  #$40000010, (VDP_control_port)
		move.w  D0, (A1)
		move.w  D0, (A1)
		move.l  #$C0000000, (VDP_control_port)
		move.w  #$003F, D7
VDPRegSetup_ClearCRAM: ; loc_13B0:		 
		move.w  D0, (A1)
		dbf    D7, VDPRegSetup_ClearCRAM ; loc_13B0
		clr.l   (Vscroll_Factor).w
		clr.l   (unk_F61A).w
		move.l  D1, -(A7)
		lea     (VDP_control_port), A5
		move.w  #$8F01, (A5)
		move.l  #$94FF93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$40000080, (A5)
		move.w  #$0000, (VDP_data_port)
VDPRegSetup_DMAWait: ; loc_13E2:		
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   VDPRegSetup_DMAWait     ; loc_13E2
		move.w  #$8F02, (A5)
		move.l  (A7)+, D1
		rts
VDPRegSetup_Array: ; loc_13F2:
		dc.w    $8004
VDPReg_01: ; loc_13F4:  
		dc.w    $8134, $8230, $8328, $8407, $857C, $8600, $8700, $8800
		dc.w    $8900, $8A00, $8B00, $8C81, $8D3F, $8E00, $8F02, $9001
		dc.w    $9100, $9200

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1418:
ClearScreen:
		stopZ80
		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$40000083,(a5)
		move.w	#0,(VDP_data_port).l
; loc_144C: ClearScreen_DMAWait:
-		move.w	(a5),d1
		btst	#1,d1
		bne.s	-
		move.w	#$8F02,(a5)

		lea	(VDP_control_port).l,a5
		move.w	#$8F01,(a5)
		move.l	#$940F93FF,(a5)
		move.w	#$9780,(a5)
		move.l	#$60000083,(a5)
		move.w	#0,(VDP_data_port).l
; loc_147A: ClearScreen_DMA2Wait:
-		move.w	(a5),d1
		btst	#1,d1
		bne.s	-
		move.w	#$8F02,(a5)

		clr.l   (Vscroll_Factor).w
		clr.l   (unk_F61A).w

		; These '+4's shouldn't be here; clearRAM accidentally clears an additional 4 bytes
		clearRAM Sprite_Table,Sprite_Table_End+$80+4
		clearRAM Horiz_Scroll_Buf,Horiz_Scroll_Buf_End+4

		startZ80
		rts
; ===========================================================================
; loc_14B8:
JmpTo_SoundDriverLoad: ; JmpTo
		nop
		jmp	(SoundDriverLoad).l
		; strange, seemingly leftover Sonic 1 sound driver code isn't here...
		; I wonder if it was used whenever the code was actually meant for
		; whenver the sound driver was uncompressed

; ---------------------------------------------------------------------------
; Sound queues; they're used interchangably, however symbol tables in
; the Nick Arcade build confirm they are specific to music and sfx
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14C0:
PlayMusic:
		move.b	d0,(Sound_Queue.Music0).w
		rts 
; End of function PlayMusic


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14C6:
PlaySound:
		move.b	d0,(Sound_Queue.SFX0).w
		rts 
; End of function PlaySound


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Unreferenced sound queue, but is indeed functional unlike Sonic 1
; sub_14CC:
PlaySound2:
		move.b	d0,(Sound_Queue.SFX1).w
		rts 
; End of function PlaySound2

; ---------------------------------------------------------------------------
; Subroutine to pause the game
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_14D2: Pause:
PauseGame:
		nop
		tst.b	(Life_count).w
		beq.w	Unpause
		tst.w	(Game_paused).w
		bne.s	+
		btst	#7,(Ctrl_1_Press).w
		beq.s	Pause_DoNothing
+
		move.w	#1,(Game_paused).w
		move.b	#$FE,(Sound_Queue.Music0).w
; loc_14F6:
Pause_Loop:
		move.b	#VintID_Pause,(Vint_routine).w 
		bsr.w	DelayProgram
		tst.b	(Slow_motion_flag).w
		beq.s	Pause_ChkStart
		btst	#6,(Ctrl_1_Press).w
		beq.s	Pause_ChkBC
		move.b	#GameModeID_TitleScreen,(Game_Mode).w
		nop
		bra.s	Pause_Resume
; ===========================================================================
; loc_1518:
Pause_ChkBC:
		btst	#4,(Ctrl_1_Held).w
		bne.s	Pause_SlowMo
		btst	#5,(Ctrl_1_Press).w
		bne.s	Pause_SlowMo
; loc_1528:
Pause_ChkStart:
		btst	#7,(Ctrl_1_Press).w
		beq.s	Pause_Loop
; loc_1530:
Pause_Resume:
		move.b	#$FF,(Sound_Queue.Music0).w
; loc_1536:
Unpause:
		move.w	#0,(Game_paused).w
; return_153C:
Pause_DoNothing:
		rts
; ===========================================================================
; loc_153E:
Pause_SlowMo:
		move.w	#1,(Game_paused).w
		move.b	#$FF,(Sound_Queue.Music0).w
		rts
; End of function PauseGame

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to transfer a plane map to VRAM
; ---------------------------------------------------------------------------

; control register:
;    CD1 CD0 A13 A12 A11 A10 A09 A08     (D31-D24)
;    A07 A06 A05 A04 A03 A02 A01 A00     (D23-D16)
;     ?   ?   ?   ?   ?   ?   ?   ?      (D15-D8)
;    CD5 CD4 CD3 CD2  ?   ?  A15 A14     (D7-D0)
;
;	A00-A15 - address
;	CD0-CD3 - code
;	CD4 - 1 if VRAM copy DMA mode. 0 otherwise.
;	CD5 - DMA operation
;
;	Bits CD3-CD0:
;	0000 - VRAM read
;	0001 - VRAM write
;	0011 - CRAM write
;	0100 - VSRAM read
;	0101 - VSRAM write
;	1000 - CRAM read
;
; d0 = control register
; d1 = width
; d2 = heigth
; a1 = source address

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_154C: ShowVDPGraphics: PlaneMapToVRAM:
PlaneMapToVRAM_H40:
		lea	(VDP_data_port).l,a6
		move.l	#$800000,d4

-		move.l	d0,VDP_control_port-VDP_data_port(a6)
		move.w	d1,d3
             
-		move.w	(a1)+,(a6)	; from source address to destination in VDP
		dbf	d3,-		; next tile
		add.l	d4,d0		; increase destination address by $80 (1 line)
		dbf	d2,--		; next line
		rts
; End of function PlaneMapToVRAM_H40

; ---------------------------------------------------------------------------
; Subroutine for queueing VDP commands (seems to only queue transfers to VRAM),
; to be issued the next time ProcessDMAQueue is called.
; Can be called a maximum of 18 times before the buffer needs to be cleared
; by issuing the commands (this subroutine DOES check for overflow)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_154C: DMA_68KtoVRAM: QueueCopyToVRAM: QueueVDPCommand: Add_To_DMA_Queue:
QueueDMATransfer:
		movea.l	(VDP_Command_Buffer_Slot).w,a1
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		beq.s	QueueDMATransfer_Done	; return if there's no more room in the buffer

		; piece together some VDP commands and store them for later...
		move.w	#$9300,d0	; command to specify DMA transfer length & $00FF
		move.b	d3,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9400,d0	; command to specify DMA transfer length & $FF00
		lsr.w	#8,d3
		move.b	d3,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9500,d0	; command to specify source address & $0001FE
		lsr.l	#1,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9600,d0	; command to specify source address & $01FE00
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		move.w	#$9700,d0	; command to specify source address & $FE0000
		lsr.l	#8,d1
		move.b	d1,d0
		move.w	d0,(a1)+	; store command

		andi.l	#$FFFF,d2	; command to specify destination address and begin DMA
		lsl.l	#2,d2
		lsr.w	#2,d2
		swap	d2
		ori.l	#$40000080,d2	; set bits to specify VRAM transfer
		move.l	d2,(a1)+	; store command

		move.l	a1,(VDP_Command_Buffer_Slot).w	; set the next free slot address
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		beq.s	QueueDMATransfer_Done	; return if there's no more room in the buffer
		move.w	#0,(a1)			; put a stop token at the end of the used part of the buffer
; loc_15C8:
QueueDMATransfer_Done:
		rts
; End of function QueueDMATransfer

; ---------------------------------------------------------------------------
; Subroutine for issuing all VDP commands that were queued
; (by earlier calls to QueueDMATransfer)
; Resets the queue when it's done
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_15CA: CopyToVRAM: IssueVDPCommands: Process_DMA: Process_DMA_Queue:
ProcessDMAQueue:
		lea	(VDP_control_port).l,a5
		lea	(VDP_Command_Buffer).w,a1
; loc_15D4:	
ProcessDMAQueue_Loop:
		move.w	(a1)+,d0
		beq.s	ProcessDMAQueue_Done	; branch if we reached a stop token
		; issue a set of VDP commands
		move.w	d0,(a5)			; transfer length
		move.w	(a1)+,(a5)		; transfer length
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; source address
		move.w	(a1)+,(a5)		; destination
		move.w	(a1)+,(a5)		; destination
		cmpa.w	#VDP_Command_Buffer_Slot,a1
		bne.s	ProcessDMAQueue_Loop	; loop if we haven't reached end of buffer
; loc_15EC:
ProcessDMAQueue_Done:
		move.w	#0,(VDP_Command_Buffer).w
		move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
		rts
; End of function ProcessDMAQueue

; ---------------------------------------------------------------------------
; START OF NEMESIS DECOMPRESSOR

; For format explanation see http://info.sonicretro.org/Nemesis_compression
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to VRAM
; loc_15FC:
NemDec:
		movem.l	d0-d7/a0/a1/a3-a5,-(sp) 
		lea	(NemDec_Output).l,a3
		lea	(VDP_data_port).l,a4
		bra.s	loc_1618

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Nemesis decompression to RAM
; input: a4 = starting address of destination
; loc_160E:
NemDecToRAM:
		movem.l	d0-d7/a0/a1/a3-a5,-(sp)
		lea	(NemDec_OutputRAM).l,a3

loc_1618:		
		lea     (Decomp_Buffer).w, A1
		move.w  (A0)+, D2
		lsl.w   #$01, D2
		bcc.s   loc_1626
		adda.w  #$000A, A3
loc_1626:         
		lsl.w   #$02, D2
		move.w  D2, A5
		moveq   #$08, D3 
		moveq   #$00, D2
		moveq   #$00, D4  
		bsr.w     NemDec4             ; loc_16EA
		move.b  (A0)+, D5
		asl.w   #$08, D5
		move.b  (A0)+, D5
		move.w  #$0010, D6 
		bsr.s   loc_1646
		movem.l (A7)+, D0-D7/A0/A1/A3-A5
		rts 
loc_1646:  
		move.w  D6, D7
		subq.w  #$08, D7
		move.w  D5, D1
		lsr.w   D7, D1
		cmpi.b  #$FC, D1
		bcc.s   loc_1692
		andi.w  #$00FF, D1
		add.w   D1, D1
		move.b  $00(A1, D1), D0
		ext.w   D0
		sub.w   D0, D6
		cmpi.w  #$0009, D6
		bcc.s   loc_166E
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
loc_166E:		
		move.b  $01(A1, D1), D1
		move.w  D1, D0
		andi.w  #$000F, D1
		andi.w  #$00F0, D0
loc_167C:		  
		lsr.w   #$04, D0
loc_167E:		 
		lsl.l   #$04, D4
		or.b    D1, D4
		subq.w  #$01, D3
		bne.s   loc_168C
		jmp     (A3) 
NemDec3: ; loc_1688:		
		moveq   #$00, D4
		moveq   #$08, D3 
loc_168C:		
		dbf    D0, loc_167E
		bra.s   loc_1646   
loc_1692: 
		subq.w  #$06, D6  
		cmpi.w  #$0009, D6 
		bcc.s   loc_16A0
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
loc_16A0:        
		subq.w  #$07, D6 
		move.w  D5, D1  
		lsr.w   D6, D1
		move.w  D1, D0
		andi.w  #$000F, D1
		andi.w  #$0070, D0
		cmpi.w  #$0009, D6  
		bcc.s   loc_167C  
		addq.w  #$08, D6   
		asl.w   #$08, D5   
		move.b  (A0)+, D5  
		bra.s   loc_167C 
NemDec_Output: ; loc_16BE:
		move.l  D4, (A4) 
		subq.w  #$01, A5
		move.w  A5, D4 
		bne.s   NemDec3             ; loc_1688
		rts 
;NemDec_Output_XOR: ; loc_16C8:
		eor.l   D4, D2
		move.l  D2, (A4)  
		subq.w  #$01, A5  
		move.w  A5, D4  
		bne.s   NemDec3             ; loc_1688
		rts 
NemDec_OutputRAM: ; loc_16D4:
		move.l  D4, (A4)+
		subq.w  #$01, A5    
		move.w  A5, D4   
		bne.s   NemDec3             ; loc_1688
		rts  
;NemDec_OutputRAM_XOR: ; loc_16DE:
		eor.l   D4, D2
		move.l  D2, (A4)+   
		subq.w  #$01, A5   
		move.w  A5, D4 
		bne.s   NemDec3             ; loc_1688
		rts		      
NemDec4: ; loc_16EA: 
		move.b  (A0)+, D0 
loc_16EC:		
		cmpi.b  #$FF, D0
		bne.s   loc_16F4
		rts
loc_16F4:		
		move.w  D0, D7
loc_16F6:		
		move.b  (A0)+, D0  
		cmpi.b  #$80, D0
		bcc.s   loc_16EC 
		move.b  D0, D1		 
		andi.w  #$000F, D7
		andi.w  #$0070, D1
		or.w    D1, D7
		andi.w  #$000F, D0
		move.b  D0, D1     
		lsl.w   #$08, D1
		or.w    D1, D7
		moveq   #$08, D1
		sub.w   D0, D1
		bne.s   loc_1724
		move.b  (A0)+, D0 
		add.w   D0, D0
		move.w  D7, $00(A1, D0)
		bra.s   loc_16F6		 
loc_1724:   
		move.b  (A0)+, D0  
		lsl.w   D1, D0
		add.w   D0, D0
		moveq   #$01, D5
		lsl.w   D1, D5
		subq.w  #$01, D5 
loc_1730:		
		move.w  D7, $00(A1, D0) 
		addq.w  #$02, D0
		dbf    D5, loc_1730
		bra.s   loc_16F6

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (aka to queue pattern load requests)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; ARGUMENTS
; d0 = index of PLC list (see ArtLoadCues)

; NOTICE: This subroutine does not check for buffer overruns. The programmer
;	  (or hacker) is responsible for making sure that no more than
;	  16 (well, 15 because of a bug in ProcessDPLC_Pop) load requests
;         are copied into the buffer.
;    _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)

; sub_173C:
LoadPLC:
		movem.l	a1/a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		lea	(Plc_Buffer).w,a2 

loc_1754:
		tst.l	(a2)
		beq.s	loc_175C	; if it's zero, exit this loop
		addq.w	#6,a2
		bra.s	loc_1754

loc_175C:
		move.w	(a1)+,d0
		bmi.s	loc_1768	; if it's negative, skip the next loop

loc_1760:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+
		dbf	d0,loc_1760

loc_1768:
		movem.l (sp)+,a1/a2
		rts
; End of function LoadPLC

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load pattern load cues (but after we clear it)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_176E:
LoadPLC2:
		movem.l	a1/a2,-(sp)
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0 
		lea	(a1,d0.w),a1
		bsr.s	ClearPLC
		lea	(Plc_Buffer).w,a2 
		move.w	(a1)+,d0
		bmi.s	loc_1794	; if it's negative, skip the next loop

loc_178C:
		move.l	(a1)+,(a2)+
		move.w	(a1)+,(a2)+
		dbf	d0,loc_178C

loc_1794:
		movem.l	(sp)+,a1/a2
		rts
; End of function LoadPLC2


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; Clear the pattern load queue ($FFF680 - $FFF700)
; loc_179A:
ClearPLC:
		lea	(Plc_Buffer).w,a2

		moveq	#bytesToLcnt(Plc_Buffer_End-Plc_Buffer),d0
-		clr.l	(a2)+
		dbf	d0,-
		rts
; End of function ClearPLC

; ---------------------------------------------------------------------------
; Subroutine to use graphics listed in a pattern load cue
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_17A8: RunPLC:
RunPLC_RAM:
		tst.l	(Plc_Buffer).w
		beq.s	return_17FC
		tst.w	(Plc_Buffer_Reg18).w
		bne.s	return_17FC
		move.l	(Plc_Buffer).w,a0
		lea	NemDec_Output(pc),a3
		nop
		lea	(Decomp_Buffer).w,a1
		move.w	(a0)+,d2
		bpl.s	loc_17CA
		adda.w	#$A,a3

loc_17CA: 
		andi.w	#$7FFF,d2
		move.w	d2,(Plc_Buffer_Reg18).w
		bsr.w	NemDec4
		move.b	(a0)+,d5
		asl.w	#8,d5
		move.b	(A0)+,d5
		moveq	#$10,d6
		moveq	#0,d0
		move.l	a0,(Plc_Buffer).w
		move.l	a3,(Plc_Buffer_Reg0).w
		move.l	d0,(Plc_Buffer_Reg4).w
		move.l	d0,(Plc_Buffer_Reg8).w
		move.l	d0,(Plc_Buffer_RegC).w
		move.l	d5,(Plc_Buffer_Reg10).w
		move.l	d6,(Plc_Buffer_Reg14).w

return_17FC:    
		rts
; End of function RunPLC_RAM


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue
; loc_17FE:
ProcessDPLC:
		tst.w	(Plc_Buffer_Reg18).w
		beq.w	return_1896
		move.w	#9,(Plc_Buffer_Reg1A).w
		moveq	#0,d0
		move.w	(Plc_Buffer+4).w,d0
		addi.w	#$120, (Plc_Buffer+4).w
		bra.s	ProcessDPLC_Main

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Process one PLC from the queue
; loc_181A:
ProcessDPLC2:
		tst.w	(Plc_Buffer_Reg18).w
		beq.s	return_1896
		move.w	#3,(Plc_Buffer_Reg1A).w
		moveq	#0,d0
		move.w	(Plc_Buffer+4).w,d0
		addi.w	#$60,(Plc_Buffer+4).w
; loc_1832:
ProcessDPLC_Main:
		lea	(VDP_control_port).l,a4
		lsl.l	#2,d0	; setup target VRAM address
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(a4)
		subq.w	#4,a4
		move.l	(Plc_Buffer).w,a0
		move.l	(Plc_Buffer_Reg0).w,a3
		move.l	(Plc_Buffer_Reg4).w,d0
		move.l	(Plc_Buffer_Reg8).w,d1
		move.l	(Plc_Buffer_RegC).w,d2
		move.l	(Plc_Buffer_Reg10).w,d5
		move.l	(Plc_Buffer_Reg14).w,d6
		lea	(Decomp_Buffer).w,a1

loc_1866:
		move.w	#8,a5
		bsr.w	NemDec3
		subq.w	#1,(Plc_Buffer_Reg18).w
		beq.s	ProcessDPLC_Pop
		subq.w	#1,(Plc_Buffer_Reg1A).w
		bne.s	loc_1866
		move.l	a0,(Plc_Buffer).w
		move.l	a3,(Plc_Buffer_Reg0).w
		move.l	d0,(Plc_Buffer_Reg4).w
		move.l	d1,(Plc_Buffer_Reg8).w
		move.l	d2,(Plc_Buffer_RegC).w
		move.l	d5,(Plc_Buffer_Reg10).w
		move.l	d6,(Plc_Buffer_Reg14).w

return_1896:
		rts
; ===========================================================================
; Pop one request off the buffer so that the next one can be filled, except
; queue 16 can't be used due to a bug; link to the fix below:
; https://forums.sonicretro.org/index.php?threads/how-to-fix-pattern-load-cues-queue-shifting-bug.28339/
; loc_1898:
ProcessDPLC_Pop:
		lea	(Plc_Buffer).w,a0

		moveq	#bytesToLcnt(Plc_Buffer_Only_End-Plc_Buffer-6),d0
-		move.l	6(a0),(a0)+
		dbf	d0,-
		rts
; End of function ProcessDPLC

; ---------------------------------------------------------------------------
; Subroutine to execute a pattern load cue directly from the ROM
; rather than loading them into the queue first
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_18A8:
RunPLC_ROM:
		lea	(ArtLoadCues).l,a1
		add.w	d0,d0
		move.w	(a1,d0.w),d0
		lea	(a1,d0.w),a1
		move.w	(a1)+,d1

loc_18BA:
		move.l	(a1)+,a0
		moveq	#0,d0
		move.w	(a1)+,d0
		lsl.l	#2,d0
		lsr.w	#2,d0
		ori.w	#$4000,d0
		swap	d0
		move.l	d0,(VDP_control_port).l
		bsr.w	NemDec
		dbf	d1,loc_18BA
		rts
; End of function RunPLC_ROM


EniDec: ; loc_18DA:
		movem.l D0-D7/A1-A5, -(A7)		 
		move.w  D0, A3
		move.b  (A0)+, D0
		ext.w   D0
		move.w  D0, A5
		move.b  (A0)+, D4
		lsl.b   #$03, D4
		move.w  (A0)+, A2
		adda.w  A3, A2
		move.w  (A0)+, A4
		adda.w  A3, A4
		move.b  (A0)+, D5 
		asl.w   #$08, D5
		move.b  (A0)+, D5 
		moveq   #$10, D6
loc_18FA:		
		moveq   #$07, D0
		move.w  D6, D7
		sub.w   D0, D7
		move.w  D5, D1
		lsr.w   D7, D1
		andi.w  #$007F, D1
		move.w  D1, D2
		cmpi.w  #$0040, D1
		bcc.s   loc_1914
		moveq   #$06, D0
		lsr.w   #$01, D2
loc_1914:		
		bsr.w     loc_1A48
		andi.w  #$000F, D2
		lsr.w   #$04, D1
		add.w   D1, D1
		jmp     loc_1970(PC, D1)
loc_1924:		 
		move.w  A2, (A1)+
		addq.w  #$01, A2
		dbf    D2, loc_1924
		bra.s   loc_18FA
loc_192E:
		move.w  A4, (A1)+
		dbf    D2, loc_192E
		bra.s   loc_18FA
loc_1936:		 
		bsr.w     loc_1998 
loc_193A: 
		move.w  D1, (A1)+ 
		dbf    D2, loc_193A  
		bra.s   loc_18FA 
loc_1942:		
		bsr.w     loc_1998 
loc_1946:  
		move.w  D1, (A1)+ 
		addq.w  #$01, D1
		dbf    D2, loc_1946 
		bra.s   loc_18FA 
loc_1950:		 
		bsr.w     loc_1998  
loc_1954:  
		move.w  D1, (A1)+ 
		subq.w  #$01, D1 
		dbf    D2, loc_1954  
		bra.s   loc_18FA 
loc_195E:
		cmpi.w  #$000F, D2
		beq.s   loc_1980
loc_1964:		
		bsr.w     loc_1998  
		move.w  D1, (A1)+  
		dbf    D2, loc_1964  
		bra.s   loc_18FA             
loc_1970: 
		bra.s   loc_1924
		bra.s   loc_1924
		bra.s   loc_192E
		bra.s   loc_192E
		bra.s   loc_1936
		bra.s   loc_1942
		bra.s   loc_1950
		bra.s   loc_195E		  
loc_1980:  
		subq.w  #$01, A0
		cmpi.w  #$0010, D6
		bne.s   loc_198A
		subq.w  #$01, A0
loc_198A:  
		move.w  A0, D0  
		lsr.w   #$01, D0
		bcc.s   loc_1992
		addq.w  #$01, A0
loc_1992:  
		movem.l (A7)+, D0-D7/A1-A5
		rts             
loc_1998:		
		move.w  A3, D3
		move.b  D4, D1
		add.b   D1, D1
		bcc.s   loc_19AA
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   loc_19AA
		ori.w   #$8000, D3
loc_19AA:		 
		add.b   D1, D1
		bcc.s   loc_19B8
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   loc_19B8
		addi.w  #$4000, D3
loc_19B8:        
		add.b   D1, D1
		bcc.s   loc_19C6
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   loc_19C6
		addi.w  #$2000, D3
loc_19C6:  
		add.b   D1, D1
		bcc.s   loc_19D4
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   loc_19D4
		ori.w   #$1000, D3
loc_19D4:    
		add.b   D1, D1
		bcc.s   loc_19E2
		subq.w  #$01, D6
		btst    D6, D5
		beq.s   loc_19E2
		ori.w   #$0800, D3
loc_19E2:   
		move.w  D5, D1   
		move.w  D6, D7 
		sub.w   A5, D7 
		bcc.s   loc_1A12
		move.w  D7, D6 
		addi.w  #$0010, D6
		neg.w   D7
		lsl.w   D7, D1
		move.b  (A0), D5
		rol.b   D7, D5
		add.w   D7, D7
		and.w   loc_1A28-$02(PC, D7), D5
		add.w   D5, D1
loc_1A00:		
		move.w  A5, D0
		add.w   D0, D0  
		and.w   loc_1A28-$02(PC, D0), D1 
		add.w   D3, D1
		move.b  (A0)+, D5
		lsl.w   #$08, D5
		move.b  (A0)+, D5
		rts
loc_1A12:
		beq.s   loc_1A24
		lsr.w   D7, D1
		move.w  A5, D0
		add.w   D0, D0 
		and.w   loc_1A28-$02(PC, D0), D1
		add.w   D3, D1
		move.w  A5, D0
		bra.s   loc_1A48
loc_1A24: 
		moveq   #$10, D6
		bra.s   loc_1A00
loc_1A28:  
		dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
		dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF     
loc_1A48:    
		sub.w   D0, D6
		cmpi.w  #$0009, D6
		bcc.s   loc_1A56
		addq.w  #$08, D6
		asl.w   #$08, D5
		move.b  (A0)+, D5
loc_1A56:		
		rts
; ---------------------------------------------------------------------------
; KOSINSKI DECOMPRESSION PROCEDURE
; (sometimes called KOZINSKI decompression)

; This is the only procedure in the game that stores variables on the stack.

; ARGUMENTS:
; a0 = source address
; a1 = destination address

; For format explanation, see http://info.sonicretro.org/Kosinski_compression
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1A58:
KosDec:
		subq.l	#2,sp
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
; loc_1A64:
KosDec_Loop:
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,.chkbit
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
; loc_1A76:
.chkbit:
		move	d6,ccr
		bcc.s	KosDec_RLE
		move.b	(a0)+,(a1)+
		bra.s	KosDec_Loop
; ---------------------------------------------------------------------------
; loc_1A7E:
KosDec_RLE:
		moveq	#0,d3
		lsr.w	#1,d5
		move	sr,d6
		dbf	d4,.chkbit
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
; loc_1A92:
.chkbit:
		move	d6,ccr
		bcs.s	KosDec_SeparateRLE
		lsr.w	#1,d5
		dbf	d4,+
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp) 
		move.w	(sp),d5
		moveq	#$F,d4
; loc_1AA6:
+
		roxl.w	#1,d3
		lsr.w	#1,d5
		dbf	d4,+
		move.b	(a0)+,1(sp)
		move.b	(a0)+,(sp)
		move.w	(sp),d5
		moveq	#$F,d4
; loc_1AB8:
+
		roxl.w	#1,d3
		addq.w	#1,d3
		moveq	#-1,d2
		move.b	(a0)+,d2
		bra.s	KosDec_RLELoop
; ---------------------------------------------------------------------------
; loc_1AC2:
KosDec_SeparateRLE:
		move.b	(a0)+,d0
		move.b	(a0)+,d1
		moveq	#-1,d2
		move.b	d1,d2
		lsl.w	#5,d2
		move.b	d0,d2
		andi.w	#7,d1
		beq.s	KosDec_SeparateRLE2
		move.b	d1,d3
		addq.w	#1,d3
; loc_1AD8:
KosDec_RLELoop:
		move.b	(a1,d2.w),d0
		move.b	d0,(a1)+
		dbf	d3,KosDec_RLELoop
		bra.s	KosDec_Loop
; ---------------------------------------------------------------------------
; loc_1AE4:
KosDec_SeparateRLE2:
		move.b	(a0)+,d1
		beq.s	KosDec_Done
		cmpi.b	#1,d1
		beq.w	KosDec_Loop
		move.b	d1,d3
		bra.s	KosDec_RLELoop
; ---------------------------------------------------------------------------
; loc_1AF4:
KosDec_Done:
		addq.l	#2,sp
		rts
; End of function KosDec

; ---------------------------------------------------------------------------
; Chameleon Decompression Algorithm
; LZSS/dictionary-based, uses unrolling for fast decompression speeds, and
; stores its descriptors separately from the rest of the compressed data
;
; This was used in the Nick Arcade prototype for S1 GHZ's chunks, and is
; also used in Kid Chameleon (another STI project, hence the name)
;
; ARGUMENTS (I think...):
; a0 = starting address
; a1 = starting art tile
; a2 = destination address
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1AF8: UnknownDec:
ChaDec:
		moveq	#0,d0
		move.w	#$7FF,d4
		moveq	#0,d5
		moveq	#0,d6
		move.w	a3,d7
		subq.w	#1,d2
		beq.w	loc_1E98
		subq.w	#1,d2
		beq.w	loc_1E1A
		subq.w	#1,d2
		beq.w	loc_1D9C
		subq.w	#1,d2
		beq.w	loc_1D1E
		subq.w	#1,d2
		beq.w	loc_1CA2
		subq.w	#1,d2
		beq.w	loc_1C24
		subq.w	#1,d2
		beq.w	loc_1BAA

; loc_1B2E:
ChaDec_BitPos0:
		move.b	(a0)+,d1
		add.b	d1,d1
		bcs.s	ChaDec_BP0_DrcCpy
		move.l	a2,a6
		add.b	d1,d1
		bcs.s	ChaDec_BP0_LongRef
		move.b	(a1)+,d5
		suba.l	d5,a6
		add.b	d1,d1
		bcc.s	loc_1B44
		move.b	(a6)+,(a2)+

loc_1B44:
		move.b	(a6)+,(a2)+
		move.b	(a6)+,(a2)+
		cmp.w	a2,d7
		bls.s	loc_1B98
		bra.w	loc_1CA2
; ---------------------------------------------------------------------------
; loc_1B50:
ChaDec_BP0_LongRef:
		lsl.w	#3,d1
		move.w	d1,d6
		and.w	d4,d6
		move.b	(a1)+,d6
		suba.l	d6,a6
		add.b	d1,d1
		bcs.s	ChaDec_BP0_LongRef_2or3
		add.b	d1,d1
		bcs.s	loc_1B7A
		bra.s	loc_1B7C
; ---------------------------------------------------------------------------
; loc_1B64:
ChaDec_BP0_LongRef_2or3:
		add.b   D1, D1
		bcc.s   loc_1B78
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1B8A
		subq.w  #$06, D0
		bmi.s   loc_1B90
loc_1B72:		
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1B72
loc_1B78:         
		move.b  (A6)+, (A2)+
loc_1B7A: 
		move.b  (A6)+, (A2)+
loc_1B7C:  
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+ 
		cmp.w   A2, D7
		bls.s   loc_1BA0
		bra.w     loc_1E98
loc_1B8A: 
		move.w  #$0000, D0
		rts
loc_1B90:  
		move.w  #$FFFF, D0
		moveq   #$01, D2
		rts
loc_1B98: 
		move.w  #$0001, D0
		moveq   #$05, D2
		rts
loc_1BA0:   
		move.w  #$0001, D0
		moveq   #$01, D2
		rts
; ---------------------------------------------------------------------------
; loc_1BA8:
ChaDec_BP0_DrcCpy:     
		move.b  (A1)+, (A2)+ 
loc_1BAA:		
		add.b   D1, D1
		bcs.s   loc_1C22
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   loc_1BCA
		move.b  (A1)+, D5 
		sub.l   D5, A6
		add.b   D1, D1
		bcc.s   loc_1BBE
		move.b  (A6)+, (A2)+ 
loc_1BBE:   
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1C12
		bra.w     loc_1D1E
loc_1BCA:
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6 
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1BDE
		add.b   D1, D1
		bcs.s   loc_1BF4
		bra.s   loc_1BF6
loc_1BDE: 
		add.b   D1, D1
		bcc.s   loc_1BF2
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1C04
		subq.w  #$06, D0
		bmi.s   loc_1C0A
loc_1BEC:		
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1BEC
loc_1BF2: 
		move.b  (A6)+, (A2)+		 
loc_1BF4:
		move.b  (A6)+, (A2)+ 
loc_1BF6:
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1C1A
		bra.w     ChaDec_BitPos0
loc_1C04: 
		move.w  #$0000, D0
		rts
loc_1C0A:   
		move.w  #$FFFF, D0
		moveq   #$00, D2
		rts
loc_1C12:
		move.w  #$0001, D0
		moveq   #$04, D2
		rts
loc_1C1A: 
		move.w  #$0001, D0
		moveq   #$00, D2
		rts
loc_1C22: 
		move.b  (A1)+, (A2)+
loc_1C24:    
		add.b   D1, D1 
		bcs.s   loc_1CA0
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   loc_1C44
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   loc_1C38
		move.b  (A6)+, (A2)+
loc_1C38:    
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1C90
		bra.w     loc_1D9C
loc_1C44: 
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1C5A
		move.b  (A0)+, D1
		add.b   D1, D1
		bcs.s   loc_1C72
		bra.s   loc_1C74
loc_1C5A: 
		move.b  (A0)+, D1
		add.b   D1, D1
		bcc.s   loc_1C70
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1C82
		subq.w  #$06, D0
		bmi.s   loc_1C88
loc_1C6A:  
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1C6A
loc_1C70:  
		move.b  (A6)+, (A2)+
loc_1C72:
		move.b  (A6)+, (A2)+
loc_1C74: 
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1C98
		bra.w     loc_1BAA
loc_1C82:
		move.w  #$0000, D0
		rts
loc_1C88:  
		move.w  #$FFFF, D0
		moveq   #$07, D2
		rts
loc_1C90:  
		move.w  #$0001, D0
		moveq   #$03, D2
		rts
loc_1C98:    
		move.w  #$0001, D0
		moveq   #$07, D2
		rts
loc_1CA0:  
		move.b  (A1)+, (A2)+  
loc_1CA2:		  
		add.b   D1, D1
		bcs.s   loc_1D1C 
		move.l  A2, A6   
		add.b   D1, D1 
		bcs.s   loc_1CC2
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   loc_1CB6
		move.b  (A6)+, (A2)+ 
loc_1CB6:   
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7 
		bls.s   loc_1D0C
		bra.w     loc_1E1A
loc_1CC2:  
		lsl.w   #$03, D1
		move.b  (A0)+, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1CD8
		add.b   D1, D1
		bcs.s   loc_1CEE
		bra.s   loc_1CF0
loc_1CD8: 
		add.b   D1, D1
		bcc.s   loc_1CEC
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1CFE
		subq.w  #$06, D0
		bmi.s   loc_1D04
loc_1CE6:
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1CE6              
loc_1CEC:      
		move.b  (A6)+, (A2)+
loc_1CEE:
		move.b  (A6)+, (A2)+
loc_1CF0: 
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+  
		cmp.w   A2, D7   
		bls.s   loc_1D14    
		bra.w     loc_1C24      
loc_1CFE: 
		move.w  #$0000, D0
		rts
loc_1D04:    
		move.w  #$FFFF, D0
		moveq   #$06, D2
		rts
loc_1D0C:
		move.w  #$0001, D0
		moveq   #$02, D2
		rts
loc_1D14:   
		move.w  #$0001, D0
		moveq   #$06, D2
		rts
loc_1D1C:               
		move.b  (A1)+, (A2)+  
loc_1D1E: 
		add.b   D1, D1 
		bcs.s   loc_1D9A
		move.l  A2, A6
		add.b   D1, D1 
		bcs.s   loc_1D3E
		move.b  (A1)+, D5 
		suba.l  D5, A6
		add.b   D1, D1 
		bcc.s   loc_1D32
		move.b  (A6)+, (A2)+  
loc_1D32:    
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1D8A
		bra.w     loc_1E98
loc_1D3E:
		lsl.w   #$02, D1
		move.b  (A0)+, D1
		add.w   D1, D1
		move.w  D1, D6
		and.w   D4, D6 
		move.b  (A1)+, D6 
		suba.l  D6, A6
		add.b   D1, D1 
		bcs.s   loc_1D56
		add.b   D1, D1 
		bcs.s   loc_1D6C
		bra.s   loc_1D6E
loc_1D56:  
		add.b   D1, D1
		bcc.s   loc_1D6A
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1D7C
		subq.w  #$06, D0
		bmi.s   loc_1D82
loc_1D64:   
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1D64
loc_1D6A:     
		move.b  (A6)+, (A2)+
loc_1D6C: 
		move.b  (A6)+, (A2)+
loc_1D6E: 
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1D92
		bra.w     loc_1CA2
loc_1D7C:  
		move.w  #$0000, D0
		rts
loc_1D82:   
		move.w  #$FFFF, D0
		moveq   #$05, D2
		rts           
loc_1D8A:
		move.w  #$0001, D0
		moveq   #$01, D2
		rts  
loc_1D92:  
		move.w  #$0001, D0
		moveq   #$05, D2
		rts 
loc_1D9A:
		move.b  (A1)+, (A2)+ 
loc_1D9C:		 
		add.b   D1, D1
		bcs.s   loc_1E18
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   loc_1DBC
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   loc_1DB0
		move.b  (A6)+, (A2)+
loc_1DB0:  
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1E08
		bra.w     ChaDec_BitPos0
loc_1DBC:
		add.w   D1, D1
		move.b  (A0)+, D1
		lsl.w   #$02, D1  
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1DD4
		add.b   D1, D1
		bcs.s   loc_1DEA
		bra.s   loc_1DEC
loc_1DD4:  
		add.b   D1, D1
		bcc.s   loc_1DE8
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1DFA
		subq.w  #$06, D0
		bmi.s   loc_1E00
loc_1DE2:		
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1DE2
loc_1DE8:  
		move.b  (A6)+, (A2)+
loc_1DEA:
		move.b  (A6)+, (A2)+
loc_1DEC:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1E10
		bra.w     loc_1D1E
loc_1DFA: 
		move.w  #$0000, D0
		rts 
loc_1E00:   
		move.w  #$FFFF, D0
		moveq   #$04, D2		
		rts
loc_1E08:
		move.w  #$0001, D0
		moveq   #$08, D2		
		rts
loc_1E10:  
		move.w  #$0001, D0
		moveq   #$04, D2		
		rts
loc_1E18:
		move.b  (A1)+, (A2)+
loc_1E1A:		  
		add.b   D1, D1
		bcs.s   loc_1E96
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   loc_1E3C
		move.b  (A0)+, D1
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   loc_1E30
		move.b  (A6)+, (A2)+
loc_1E30:   
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1E86
		bra.w     loc_1BAA
loc_1E3C:
		move.b  (A0)+, D1
		lsl.w   #$03, D1
		move.w  D1, D6 
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1E52
		add.b   D1, D1
		bcs.s   loc_1E68
		bra.s   loc_1E6A
loc_1E52:
		add.b   D1, D1
		bcc.s   loc_1E66
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1E78
		subq.w  #$06, D0
		bmi.s   loc_1E7E
loc_1E60:		 
		move.b  (A6)+, (A2)+
		dbf    D0, loc_1E60		
loc_1E66:       
		move.b  (A6)+, (A2)+
loc_1E68:   
		move.b  (A6)+, (A2)+
loc_1E6A:
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1E8E
		bra.w     loc_1D9C
loc_1E78:  
		move.w  #$0000, D0
		rts
loc_1E7E:    
		move.w  #$FFFF, D0
		moveq   #$03, D2
		rts
loc_1E86:
		move.w  #$0001, D0
		moveq   #$07, D2
		rts       
loc_1E8E:          
		move.w  #$0001, D0
		moveq   #$03, D2
		rts 
loc_1E96:
		move.b  (A1)+, (A2)+		  
loc_1E98:
		add.b   D1, D1
		bcs.s   loc_1F12
		move.b  (A0)+, D1
		move.l  A2, A6
		add.b   D1, D1
		bcs.s   loc_1EBA
		move.b  (A1)+, D5
		suba.l  D5, A6
		add.b   D1, D1
		bcc.s   loc_1EAE
		move.b  (A6)+, (A2)+ 
loc_1EAE:  
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+ 
		cmp.w   A2, D7
		bls.s   loc_1F02
		bra.w     loc_1C24
loc_1EBA:  
		lsl.w   #$03, D1
		move.w  D1, D6
		and.w   D4, D6
		move.b  (A1)+, D6
		suba.l  D6, A6
		add.b   D1, D1
		bcs.s   loc_1ECE
		add.b   D1, D1
		bcs.s   loc_1EE4
		bra.s   loc_1EE6
loc_1ECE: 
		add.b   D1, D1
		bcc.s   loc_1EE2
		moveq   #$00, D0
		move.b  (A1)+, D0
		beq.s   loc_1EF4
		subq.w  #$06, D0
		bmi.s   loc_1EFA
loc_1EDC:		
		move.b  (A6)+, (A2)+ 
		dbf    D0, loc_1EDC
loc_1EE2: 
		move.b  (A6)+, (A2)+ 
loc_1EE4: 
		move.b  (A6)+, (A2)+ 
loc_1EE6: 
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+ 
		move.b  (A6)+, (A2)+
		cmp.w   A2, D7
		bls.s   loc_1F0A
		bra.w     loc_1E1A
loc_1EF4: 
		move.w  #$0000, D0
		rts
loc_1EFA:  
		move.w  #$FFFF, D0
		moveq   #$02, D2
		rts
loc_1F02: 
		move.w  #$0001, D0
		moveq   #$06, D2
		rts
loc_1F0A:   
		move.w  #$0001, D0
		moveq   #$02, D2
		rts
loc_1F12:		
		move.b  (A1)+, (A2)+ 
		bra.w     ChaDec_BitPos0

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to cycle through selected palette entries
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_1F18:
PalCycle_Load:
		bsr.w     loc_24A2
		moveq   #$00, D2
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		move.w  PalCycle(PC, D0), D0    ; loc_1F30
		jmp     PalCycle(PC, D0)        ; loc_1F30
; ---------------------------------------------------------------------------
		rts
; ===========================================================================
; off_1F30:
PalCycle:	zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w PalCycle_GHz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_Wz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_Mz
	zoneOffsetTableEntry.w PalCycle_Mz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_HTz
	zoneOffsetTableEntry.w PalCycle_HPz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_OOz
	zoneOffsetTableEntry.w PalCycle_DHz
	zoneOffsetTableEntry.w PalCycle_CNz
	zoneOffsetTableEntry.w PalCycle_CPz
	zoneOffsetTableEntry.w PalCycle_Null
	zoneOffsetTableEntry.w PalCycle_NGHz
	zoneOffsetTableEntry.w PalCycle_Null
    zoneTableEnd

; ===========================================================================
; return_1F52:
PalCycle_Null:
		rts
; ===========================================================================
PalCycle_GHz: ; loc_1F54: ; $00 - Green Hill Rotating Palette routine
		lea     (Pal_GHzCyc).l, A0        ; loc_2284
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_1F80
		move.w  #$0007, (PalCycle_Timer).w
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$01, (PalCycle_Frame).w
		andi.w  #$0003, D0
		lsl.w   #$03, D0
		move.l  $00(A0, D0), (Normal_palette_line2+6).w
		move.l  $04(A0, D0), (Normal_palette_line2+$1C).w
loc_1F80:
		rts  
PalCycle_Wz: ; loc_1F82: ; $02 - Wood Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_1FB0
		move.w  #$0002, (PalCycle_Timer).w
		lea     (Pal_WzCyc).l, A0         ; loc_2324
		move.w  (PalCycle_Frame).w, D0
		subq.w  #$02, (PalCycle_Frame).w
		bcc.s   loc_1FA4
		move.w  #$0006, (PalCycle_Frame).w		 
loc_1FA4:
		lea     (Normal_palette_line4+6).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
loc_1FB0:		
		rts  
PalCycle_Mz: ; loc_1FB2: ; $04/$05 - Metropolis Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w    
		bpl.s   loc_1FE2
		move.w  #$0011, (PalCycle_Timer).w
		lea     (Pal_MzCyc1).l, A0        ; loc_2334
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$02, (PalCycle_Frame).w
		cmpi.w  #$000C, (PalCycle_Frame).w
		bcs.s   loc_1FDA
		move.w  #$0000, (PalCycle_Frame).w
loc_1FDA:
		lea     (Normal_palette_line3+$A).w, A1
		move.w  $00(A0, D0), (A1)
loc_1FE2:
		subq.w  #$01, (PalCycle_Timer2).w
		bpl.s   loc_2016
		move.w  #$0002, (PalCycle_Timer2).w
		lea     (Pal_MzCyc2).l, A0        ; loc_2340
		move.w  (PalCycle_Frame2).w, D0
		addq.w  #$02, (PalCycle_Frame2).w
		cmpi.w  #$0006, (PalCycle_Frame2).w
		bcs.s   loc_200A
		move.w  #$0000, (PalCycle_Frame2).w
loc_200A:
		lea     (Normal_palette_line3+2).w, A1
		move.l  $00(A0, D0), (A1)+
		move.w  $04(A0, D0), (A1)
loc_2016:
		subq.w  #$01, (PalCycle_Timer3).w
		bpl.s   loc_2046
		move.w  #$0009, (PalCycle_Timer3).w
		lea     (Pal_MzCyc3).l, A0        ; loc_234C
		move.w  (PalCycle_Frame3).w, D0
		addq.w  #$02, (PalCycle_Frame3).w
		cmpi.w  #$0014, (PalCycle_Frame3).w
		bcs.s   loc_203E
		move.w  #$0000, (PalCycle_Frame3).w
loc_203E:
		lea     (Normal_palette_line3+$1E).w, A1
		move.w  $00(A0, D0), (A1)
loc_2046:
		rts		
PalCycle_HTz: ; loc_2048: ; $07 - Hill Top Rotating Palette routine
		lea     (Pal_HTzCyc1).l, A0       ; loc_22A4
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_207A
		move.w  #$0000, (PalCycle_Timer).w
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$01, (PalCycle_Frame).w
		andi.w  #$000F, D0
		move.b  Pal_HTzCyc2(PC, D0), (PalCycle_Timer+1).w  ; loc_207C
		lsl.w   #$03, D0
		move.l  $00(A0, D0), (Normal_palette_line2+6).w
		move.l  $04(A0, D0), (Normal_palette_line2+$1C).w 
loc_207A:
		rts		  
Pal_HTzCyc2: ; loc_207C:
		dc.w    $0B0B, $0B0A, $080A, $0B0B, $0B0B, $0D0F, $0D0B, $0B0B
PalCycle_HPz: ; loc_208C: ; $08 - Hidden Palace Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_20CC
		move.w  #$0004, (PalCycle_Timer).w
		lea     (Pal_HPzCyc1).l, A0       ; loc_2360
		move.w  (PalCycle_Frame).w, D0
		subq.w  #$02, (PalCycle_Frame).w
		bcc.s   loc_20AE
		move.w  #$0006, (PalCycle_Frame).w
loc_20AE:
		lea     (Normal_palette_line4+$12).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
		lea     (Pal_HPzCyc2).l, A0       ; loc_2370
		lea     (Underwater_palette_line4+$12).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
loc_20CC:
		rts             
PalCycle_OOz: ; loc_20CE: ; $0A - Oil Ocean Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_20FA
		move.w  #$0007, (PalCycle_Timer).w
		lea     (Pal_OOzCyc).l, A0        ; loc_2380
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$02, (PalCycle_Frame).w
		andi.w  #$0006, (PalCycle_Frame).w
		lea     (Normal_palette_line3+$14).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
loc_20FA:
		rts    
PalCycle_DHz: ; loc_20FC: ; $0B - Dust Hill Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_2122
		move.w  #$0001, (PalCycle_Timer).w
		lea     (Pal_DHzCyc).l, A0        ; loc_2390
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$02, (PalCycle_Frame).w
		andi.w  #$0006, (PalCycle_Frame).w
		move.w  $00(A0, D0), (Normal_palette_line2+$16).w
loc_2122:
		rts
PalCycle_CNz: ; loc_2124: ; $0C - Casino Night Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.w    loc_21C2
		move.w  #$0007, (PalCycle_Timer).w
		lea     (Pal_CNzCyc1).l, A0       ; loc_2398
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$02, (PalCycle_Frame).w
		cmpi.w  #$0006, (PalCycle_Frame).w
		bcs.s   loc_214E
		move.w  #$0000, (PalCycle_Frame).w
loc_214E:
		lea     $00(A0, D0), A0
		lea     (Normal_palette).w, A1
		_move.w  0(A0), $004A(A1)
		move.w  $0006(A0), $004C(A1)
		move.w  $000C(A0), $004E(A1)
		move.w  $0012(A0), $0056(A1)
		move.w  $0018(A0), $0058(A1)
		move.w  $001E(A0), $005A(A1)
		lea     (Pal_CNzCyc2).l, A0       ; loc_23BC
		lea     $00(A0, D0), A0
		_move.w  0(A0), $0064(A1)
		move.w  $0006(A0), $0066(A1)
		move.w  $000C(A0), $0068(A1)
		lea     (Pal_CNzCyc3).l, A0       ; loc_23CE
		move.w  (PalCycle_Frame2).w, D0
		addq.w  #$02, (PalCycle_Frame2).w
		cmpi.w  #$001C, (PalCycle_Frame2).w
		bcs.s   loc_21B2
		move.w  #$0000, (PalCycle_Frame2).w
loc_21B2:
		lea     (Normal_palette_line4+$12).w, A1
		move.w  $00(A0, D0), (A1)+
		move.w  $1C(A0, D0), (A1)+
		move.w  $38(A0, D0), (A1)+
loc_21C2:
		rts		
PalCycle_CPz: ; loc_21C4: ; $0D - Chemical Plant Rotating Palette routine
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_2234
		move.w  #$0007, (PalCycle_Timer).w
		lea     (Pal_CPzCyc1).l, A0       ; loc_2422
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$06, (PalCycle_Frame).w
		cmpi.w  #$0036, (PalCycle_Frame).w
		bcs.s   loc_21EC
		move.w  #$0000, (PalCycle_Frame).w
loc_21EC:
		lea     (Normal_palette_line4+$18).w, A1
		move.l  $00(A0, D0), (A1)+
		move.w  $04(A0, D0), (A1)
		lea     (Pal_CPzCyc2).l, A0       ; loc_2458
		move.w  (PalCycle_Frame2).w, D0
		addq.w  #$02, (PalCycle_Frame2).w
		cmpi.w  #$002A, (PalCycle_Frame2).w
		bcs.s   loc_2214
		move.w  #$0000, (PalCycle_Frame2).w
loc_2214:
		move.w  $00(A0, D0), (Normal_palette_line4+$1E).w
		lea     (Pal_CPzCyc3).l, A0       ; loc_2482
		move.w  (PalCycle_Frame3).w, D0
		addq.w  #$02, (PalCycle_Frame3).w
		andi.w  #$001E, (PalCycle_Frame3).w
		move.w  $00(A0, D0), (Normal_palette_line3+$1E).w
loc_2234:
		rts		
PalCycle_NGHz: ; loc_2236: ; $0F - Neo Green Hill Rotating Palette routine
		lea     (Pal_GHzCyc).l, A0        ; loc_2284
		subq.w  #$01, (PalCycle_Timer).w
		bpl.s   loc_2262
		move.w  #$0005, (PalCycle_Timer).w
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$01, (PalCycle_Frame).w
		andi.w  #$0003, D0
		lsl.w   #$03, D0
		lea     (Normal_palette_line3+4).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
loc_2262:
		rts  
;Pal_S1TitleCyc: ;loc_2264: ; Left Over - Unused Rotating Palette
		dc.w    $0C42, $0E86, $0ECA, $0EEC, $0EEC, $0C42, $0E86, $0ECA
		dc.w    $0ECA, $0EEC, $0C42, $0E86, $0E86, $0ECA, $0EEC, $0C42		        
Pal_GHzCyc: ; loc_2284: ; $00 - Green Hill Rotating Palette               
		dc.w    $0A86, $0E86, $0EA8, $0ECA, $0ECA, $0A86, $0E86, $0EA8
		dc.w    $0EA8, $0ECA, $0A86, $0E86, $0E86, $0EA8, $0ECA, $0A86
Pal_HTzCyc1: ; loc_22A4: ; $07 - Hill Top Rotating Palette		 
		dc.w    $000E, $006E, $00AE, $00EE, $00EE, $000E, $006E, $00AE
		dc.w    $02CE, $00EE, $000E, $006E, $006E, $04EE, $08EE, $002E
		dc.w    $004E, $008E, $06EE, $0AEE, $08EE, $002E, $006E, $04EE
		dc.w    $02CE, $00EE, $000E, $006E, $006E, $02CE, $00EE, $000E
		dc.w    $000E, $006E, $00AE, $00EE, $00CE, $000C, $004E, $008E
		dc.w    $006E, $00AC, $000A, $002E, $000C, $004C, $008E, $0008
		dc.w    $000A, $002E, $006E, $00AC, $00CE, $000C, $004E, $008E
		dc.w    $00AE, $00EE, $000E, $006E, $006E, $00AE, $00EE, $000E
Pal_WzCyc: ; loc_2324: ; $02 - Wood Rotating Palette 
		dc.w    $0248, $046A, $048C, $06CE, $0248, $046A, $048C, $06CE
Pal_MzCyc1: ; loc_2334: ; $04/$05 - Metropolis Rotating Palette 
		dc.w    $0006, $0008, $000A, $000C, $000A, $0008		 
Pal_MzCyc2: ; loc_2340: ; $04/$05 - Metropolis Rotating Palette 
		dc.w    $0422, $0866, $0ECC, $0422, $0866, $0ECC 
Pal_MzCyc3: ;loc_234C: ; $04/$05 - Metropolis Rotating Palette 
		dc.w    $00A0, $0000, $00EE, $0000, $002E, $0000, $0E2E, $0000
		dc.w    $0E80, $0000
Pal_HPzCyc1: ; loc_2360: ; $08 - Hidden Palace Rotating Palette 
		dc.w    $0E44, $0E82, $0EA8, $0EEE, $0E44, $0E82, $0EA8, $0EEE
Pal_HPzCyc2: ; loc_2370: ; $08 - Hidden Palace Rotating Palette 
		dc.w    $0E84, $0EA6, $0EC6, $0EE6, $0E84, $0EA6, $0EC6, $0EE6
Pal_OOzCyc: ; loc_2380: ; $0A - Oil Ocean Rotating Palette 
		dc.w    $0400, $0602, $0804, $0806, $0400, $0602, $0804, $0806
Pal_DHzCyc: ; loc_2390: ; $0B - Dust Hill Rotating Palette 
		dc.w    $000C, $006E, $00CE, $08EE
Pal_CNzCyc1: ; loc_2398: ; $0C - Casino Night Rotating Palette 
		dc.w    $000C, $00CC, $004C, $004C, $000C, $00CC, $00CC, $004C
		dc.w    $000C, $00EC, $0080, $00C4, $00C4, $00EC, $0080, $0080
		dc.w    $00C4, $00EC
Pal_CNzCyc2: ; loc_23BC: ; $0C - Casino Night Rotating Palette 
		dc.w    $0044, $0088, $00EE, $0088, $00EE, $0044, $00EE, $0044
		dc.w    $0088
Pal_CNzCyc3: ; loc_23CE: ; $0C - Casino Night Rotating Palette  
		dc.w    $00EC, $0EEE, $00EA, $00E4, $06C0, $0CC4, $0E80, $0E40
		dc.w    $0E04, $0C08, $0C2E, $000E, $006E, $00AE, $00AE, $00EC
		dc.w    $0EEE, $00EA, $00E4, $06C0, $0CC4, $0E80, $0E40, $0E04
		dc.w    $0C08, $0C2E, $000E, $006E, $00EE, $00AE, $00EC, $0EEE
		dc.w    $00EA, $00E4, $06C0, $0CC4, $0E80, $0E40, $0E04, $0C08
		dc.w    $0C2E, $000E
Pal_CPzCyc1: ; loc_2422: ; $0D - Chemical Plant Rotating Palette 
		dc.w    $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40, $0E40
		dc.w    $0C00, $0C20, $0E60, $0C20, $0C00, $0E40, $0C40, $0C00
		dc.w    $0C20, $0E40, $0C00, $0C00, $0E60, $0C20, $0C00, $0E40
		dc.w    $0E20, $0C00, $0C20
Pal_CPzCyc2: ; loc_2458: ; $0D - Chemical Plant Rotating Palette 
		dc.w    $00E0, $00C2, $00A4, $0086, $0068, $004A, $002C, $000E
		dc.w    $020C, $040A, $0608, $0806, $0A04, $0C02, $0E00, $0C20
		dc.w    $0A40, $0860, $0680, $04A0, $02C0
Pal_CPzCyc3: ; loc_2482: ; $0D - Chemical Plant Rotating Palette   
		dc.w    $000E, $000C, $000A, $0008, $0006, $0004, $0002, $0004
		dc.w    $0006, $0008, $000A, $000C, $000E, $002E, $004E, $002E     
loc_24A2:
		tst.b   (Super_Sonic_palette).w
		beq.s   loc_24DE
		bmi.s   loc_24E0
		subq.b  #$01, (Palette_timer).w 
		bpl.s   loc_24DE
		move.b  #$03, (Palette_timer).w
		lea     (loc_2516).l, A0
		move.w  (Palette_frame).w, D0
		addq.w  #$08, (Palette_frame).w
		cmpi.w  #$0030, (Palette_frame).w
		bcs.s   loc_24D2
		move.b  #$FF, (Super_Sonic_palette).w
loc_24D2:
		lea     (Normal_palette+4).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
loc_24DE:
		rts
loc_24E0:
		subq.b  #$01, (Palette_timer).w
		bpl.s   loc_24DE
		move.b  #$07, (Palette_timer).w
		lea     (loc_2516).l, A0
		move.w  (Palette_frame).w, D0
		addq.w  #$08, (Palette_frame).w
		cmpi.w  #$0078, (Palette_frame).w
		bcs.s   loc_2508
		move.w  #$0030, (Palette_frame).w
loc_2508:
		lea     (Normal_palette+4).w, A1
		move.l  $00(A0, D0), (A1)+
		move.l  $04(A0, D0), (A1)
		rts
loc_2516:              
		dc.w    $0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
		dc.w    $0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
		dc.w    $04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
		dc.w    $04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
		dc.w    $08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
		dc.w    $04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
		dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
		dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to fade in from black
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_2596: Pal_FadeTo:
Pal_FadeFromBlack:
		move.w	#$3F,(Palette_fade_range).w
; loc_259C: Pal_FadeTo2:
Pal_FadeFromBlack2:
		moveq	#0,d0
		lea	(Normal_palette).w,a0
		move.b	(Palette_fade_start).w,d0
		adda.w	d0,a0
		moveq	#0,d1
		move.b	(Palette_fade_length).w,d0
; loc_25AE:
.palettewrite:
		move.w	d1,(a0)+
		dbf	d0,.palettewrite	; fill palette with $000 (black)

		move.w	#$15,d4
; loc_25B8:
.nextframe:
		move.b	#VintID_Fade,(Vint_routine).w
		bsr.w	DelayProgram
		bsr.s	.UpdateAllColours
		bsr.w	RunPLC_RAM
		dbf	d4,.nextframe

		rts
; End of function Pal_FadeFromBlack

; ---------------------------------------------------------------------------
; Subroutine to update all colours once
; ---------------------------------------------------------------------------
; sub_25CE: Pal_FadeIn:
.UpdateAllColours:
		moveq   #$00, D0
		lea     (Normal_palette).w, A0
		lea     (Target_palette).w, A1
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  (Palette_fade_length).w, D0
loc_25E4:		
		bsr.s   Pal_AddColor            ; loc_260E
		dbf    D0, loc_25E4
		tst.b   (Water_flag).w
		beq.s   loc_260C
		moveq   #$00, D0
		lea     (Underwater_palette).w, A0
		lea     (Underwater_target_palette).w, A1
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  (Palette_fade_length).w, D0
loc_2606:		 
		bsr.s   Pal_AddColor            ; loc_260E		 
		dbf    D0, loc_2606
loc_260C:		
		rts
Pal_AddColor: ; loc_260E:  
		move.w  (A1)+, D2
		move.w  (A0), D3
		cmp.w   D2, D3
		beq.s   Pal_NoAdd               ; loc_2636
		move.w  D3, D1
		addi.w  #$0200, D1		 
		cmp.w   D2, D1
		bhi.s   Pal_AddGreen            ; loc_2624
		move.w  D1, (A0)+
		rts 
Pal_AddGreen: ; loc_2624:
		move.w  D3, D1
		addi.w  #$0020, D1
		cmp.w   D2, D1
		bhi.s   Pal_AddRed              ; loc_2632
		move.w  D1, (A0)+ 
		rts
Pal_AddRed: ; loc_2632:               
		addq.w  #$02, (A0)+
		rts 
Pal_NoAdd: ; loc_2636:
		addq.w  #$02, A0
		rts
Pal_FadeFrom: ; loc_263A:
		move.w  #$003F, (Palette_fade_range).w
		move.w  #$0015, D4
loc_2644:
		move.b  #VintID_Fade, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.s   Pal_FadeOut             ; loc_265A
		bsr.w     RunPLC_RAM              ; loc_17A8
		dbf    D4, loc_2644
		rts
Pal_FadeOut: ; loc_265A:		
		moveq   #$00, D0
		lea     (Normal_palette).w, A0
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		move.b  (Palette_fade_length).w, D0
loc_266A:
		bsr.s   Pal_DecColor            ; loc_2688
		dbf    D0, loc_266A
		moveq   #$00, D0
		lea     (Underwater_palette).w, A0
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		move.b  (Palette_fade_length).w, D0
loc_2680:		
		bsr.s   Pal_DecColor            ; loc_2688  
		dbf    D0, loc_2680
		rts
Pal_DecColor: ; loc_2688:
		move.w  (A0), D2
		beq.s   Pal_NoDec               ; loc_26B4
		move.w  D2, D1
		andi.w  #$000E, D1
		beq.s   Pal_DecGreen            ; loc_2698
		subq.w  #$02, (A0)+
		rts
Pal_DecGreen: ; loc_2698:
		move.w  D2, D1
		andi.w  #$00E0, D1
		beq.s   Pal_DecBlue             ; loc_26A6
		subi.w  #$0020, (A0)+
		rts
Pal_DecBlue: ; loc_26A6:
		move.w  D2, D1
		andi.w  #$0E00, D1
		beq.s   Pal_NoDec               ; loc_26B4
		subi.w  #$0200, (A0)+
		rts
Pal_NoDec: ; loc_26B4:
		addq.w  #2, A0
		rts 
Pal_MakeWhite: ; loc_26B8:               ; Special Stage Blank Screen
		move.w  #$003F, (Palette_fade_range).w
		moveq   #$00, D0
		lea     (Normal_palette).w, A0
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		move.w  #$0EEE, D1
		move.b  (Palette_fade_length).w, D0
loc_26D2:		
		move.w  D1, (A0)+
		dbf    D0, loc_26D2
		move.w  #$0015, D4
loc_26DC:		
		move.b  #VintID_Fade, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.s   Pal_WhiteToBlack        ; loc_26F2
		bsr.w     RunPLC_RAM              ; loc_17A8
		dbf    D4, loc_26DC
		rts
Pal_WhiteToBlack: ; loc_26F2:
		moveq   #$00, D0
		lea     (Normal_palette).w, A0
		lea     (Target_palette).w, A1
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  (Palette_fade_length).w, D0
loc_2708:               
		bsr.s   Pal_DecColor2           ; loc_2732
		dbf    D0, loc_2708
		tst.b   (Water_flag).w
		beq.s   loc_2730
		moveq   #$00, D0
		lea     (Underwater_palette).w, A0
		lea     (Underwater_target_palette).w, A1
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		adda.w  D0, A1
		move.b  (Palette_fade_length).w, D0
loc_272A:		
		bsr.s   Pal_DecColor2           ; loc_2732
		dbf    D0, loc_272A
loc_2730:
		rts
Pal_DecColor2: ; loc_2732:
		move.w  (A1)+, D2
		move.w  (A0), D3
		cmp.w   D2, D3
		beq.s   loc_275E
		move.w  D3, D1
		subi.w  #$0200, D1
		bcs.s   loc_274A
		cmp.w   D2, D1
		bcs.s   loc_274A
		move.w  D1, (A0)+
		rts
loc_274A:
		move.w  D3, D1
		subi.w  #$0020, D1
		bcs.s   loc_275A
		cmp.w   D2, D1
		bcs.s   loc_275A
		move.w  D1, (A0)+
		rts
loc_275A:
		subq.w  #$02, (A0)+
		rts
loc_275E:
		addq.w  #$02, A0
		rts		        ; Special Stage Blank Screen End...
Pal_MakeFlash: ; loc_2762:          ; Called by Special Stage Routine   
		move.w  #$003F, (Palette_fade_range).w
		move.w  #$0015, D4
loc_276C:		
		move.b  #VintID_Fade, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.s   Pal_ToWhite             ; loc_2782
		bsr.w     RunPLC_RAM              ; loc_17A8
		dbf    D4, loc_276C
		rts
Pal_ToWhite: ; loc_2782:
		moveq   #$00, D0
		lea     (Normal_palette).w, A0
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		move.b  (Palette_fade_length).w, D0
loc_2792:		
		bsr.s   Pal_AddColor2           ; loc_27B0
		dbf    D0, loc_2792
		moveq   #$00, D0
		lea     (Underwater_palette).w, A0
		move.b  (Palette_fade_start).w, D0
		adda.w  D0, A0
		move.b  (Palette_fade_length).w, D0
loc_27A8:		
		bsr.s   Pal_AddColor2           ; loc_27B0
		dbf    D0, loc_27A8
		rts
Pal_AddColor2: ; loc_27B0:
		move.w  (A0), D2
		cmpi.w  #$0EEE, D2
		beq.s   loc_27EC
		move.w  D2, D1
		andi.w  #$000E, D1
		cmpi.w  #$000E, D1
		beq.s   loc_27C8
		addq.w  #$02, (A0)+
		rts
loc_27C8:
		move.w  D2, D1
		andi.w  #$00E0, D1
		cmpi.w  #$00E0, D1
		beq.s   loc_27DA
		addi.w  #$0020, (A0)+
		rts
loc_27DA:
		move.w  D2, D1
		andi.w  #$0E00, D1
		cmpi.w  #$0E00, D1
		beq.s   loc_27EC
		addi.w  #$0200, (A0)+
		rts
loc_27EC:
		addq.w  #$02, A0
		rts		 
PalCycle_Sega: ; loc_27F0: ; "Sega" Logo rotating Palette
		tst.b   (PalCycle_Timer+1).w
		bne.s   loc_2850
		lea     (Normal_palette_line2).w, A1
		lea     (Pal_Sega1).l, A0  ; loc_28A6 ; Load "Sega" Logo Palette
		moveq   #$05, D1
		move.w  (PalCycle_Frame).w, D0
loc_2806:		
		bpl.s   loc_2810
		addq.w  #$02, A0
		subq.w  #$01, D1
		addq.w  #$02, D0
		bra.s   loc_2806
loc_2810:  
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   loc_281A
		addq.w  #$02, D0
loc_281A:
		cmpi.w  #$0060, D0
		bcc.s   loc_2824
		move.w  (A0)+, $00(A1, D0)
loc_2824:
		addq.w  #$02, D0
		dbf    D1, loc_2810
		move.w  (PalCycle_Frame).w, D0
		addq.w  #$02, D0
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   loc_283A
		addq.w  #$02, D0
loc_283A:
		cmpi.w  #$0064, D0
		blt.s   loc_2848
		move.w  #$0401, (PalCycle_Timer).w
		moveq   #-$C, D0
loc_2848:
		move.w  D0, (PalCycle_Frame).w
		moveq   #$01, D0
		rts		  
loc_2850:
		subq.b  #$01, (PalCycle_Timer).w
		bpl.s   loc_28A2
		move.b  #$04, (PalCycle_Timer).w
		move.w  (PalCycle_Frame).w, D0
		addi.w  #$000C, D0
		cmpi.w  #$0030, D0
		bcs.s   loc_286E
		moveq   #$00, D0
		rts
loc_286E:
		move.w  D0, (PalCycle_Frame).w
		lea     (Pal_Sega2).l, A0 ; loc_28B2 ; Load "Sega" Logo Palette
		lea     $00(A0, D0), A0
		lea     (Normal_palette+4).w, A1
		move.l  (A0)+, (A1)+
		move.l  (A0)+, (A1)+
		move.w  (A0)+, (A1)
		lea     (Normal_palette_line2).w, A1
		moveq   #$00, D0
		moveq   #$2C, D1
loc_288E:		
		move.w  D0, D2
		andi.w  #$001E, D2
		bne.s   loc_2898
		addq.w  #$02, D0
loc_2898:
		move.w  (A0), $00(A1, D0)
		addq.w  #$02, D0
		dbf    D1, loc_288E
loc_28A2:
		moveq   #$01, D0
		rts
Pal_Sega1: ; loc_28A6: ; "Sega" Logo Palette              
		dc.w    $0EEE, $0EEA, $0EE4, $0EC0, $0EE4, $0EEA
Pal_Sega2: ; loc_28B2: ; "Sega" Logo Palette              
		dc.w    $0EEC, $0EEA, $0EEA, $0EEA, $0EEA, $0EEA, $0EEC, $0EEA
		dc.w    $0EE4, $0EC0, $0EC0, $0EC0, $0EEC, $0EEA, $0EE4, $0EC0
		dc.w    $0EA0, $0E60, $0EEA, $0EE4, $0EC0, $0EA0, $0E80, $0E00
PalLoad1: ; loc_28E2:
		lea     (PalPointers).l, A1       ; loc_294E
		lsl.w   #3, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		adda.w  #$0080, A3
		move.w  (A1)+, D7
loc_28F6:
		move.l  (A2)+, (A3)+
		dbf    D7, loc_28F6
		rts
PalLoad2: ;loc_28FE:
		lea     (PalPointers).l, A1       ; loc_294E
		lsl.w   #3, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		move.w  (A1)+, D7  
loc_290E:
		move.l  (A2)+, (A3)+
		dbf    D7, loc_290E
		rts   
PalLoad3_Water: ; loc_2916: ; Load Underwater palette routine
		lea     (PalPointers).l, A1       ; loc_294E
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		suba.w  #$0080, A3
		move.w  (A1)+, D7
loc_292A:
		move.l  (A2)+, (A3)+
		dbf    D7, loc_292A
		rts
PalLoad4_Water: ;loc_2932:
		lea     (PalPointers).l, A1       ; loc_294E
		lsl.w   #$03, D0
		adda.w  D0, A1
		move.l  (A1)+, A2
		move.w  (A1)+, A3
		suba.w  #$0100, A3
		move.w  (A1)+, D7
loc_2946:
		move.l  (A2)+, (A3)+
		dbf    D7, loc_2946
		rts
PalPointers: ; loc_294E: ; Palette List		
PalPtr_SEGA:		dc.l    Pal_SEGA, $FB00001F
PalPtr_Title:		dc.l    Pal_Title, $FB00001F
PalPtr_LevelSel:	dc.l    Pal_LevelSelect, $FB00001F
PalPtr_SonicTails:	dc.l    Pal_SonicTails, $FB000007
PalPtr_GHZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_OWZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_WZ:	dc.l    Pal_WZ, $FB200017
PalPtr_SSZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_MTZ:	dc.l    Pal_MTZ, $FB200017
PalPtr_MTZ2:	dc.l    Pal_MTZ, $FB200017
PalPtr_BLZ:	dc.l    Pal_BLZ, $FB200017	; also apparently meant for CNZ2 at one point
PalPtr_HTZ:	dc.l    Pal_HTZ, $FB200017
PalPtr_HPZ:	dc.l    Pal_HPZ, $FB200017
PalPtr_RWZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_OOZ:	dc.l    Pal_OOZ, $FB200017
PalPtr_DHZ:	dc.l    Pal_DHZ, $FB200017
PalPtr_CNZ:	dc.l    Pal_CNZ, $FB200017
PalPtr_CPZ:	dc.l    Pal_CPZ, $FB200017
PalPtr_GCZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_NGHZ:	dc.l    Pal_NGHZ, $FB200017
PalPtr_DEZ:	dc.l    Pal_GHZ, $FB200017
PalPtr_HPZ_U:	dc.l    Pal_HPZ_U, $FB00001F
PalPtr_CPZ_U:	dc.l    Pal_CPZ_U, $FB00001F
PalPtr_NGHZ_U:	dc.l    Pal_NGHZ_U, $FB00001F
PalPtr_SpecStg:	dc.l    Pal_SpecialStage, $FB00001F

Pal_SEGA:		BINCLUDE	"art/palettes/Sega screen.bin"
Pal_Title:		BINCLUDE	"art/palettes/Title screen.bin"
Pal_LevelSelect:	BINCLUDE	"art/palettes/Level select.bin"
Pal_SonicTails:		BINCLUDE	"art/palettes/Sonic and Tails.bin"
Pal_GHZ:		BINCLUDE	"art/palettes/GHZ.bin"       
Pal_WZ:			BINCLUDE	"art/palettes/WZ.bin"
Pal_MTZ:		BINCLUDE	"art/palettes/MTZ.bin"
Pal_HTZ:		BINCLUDE	"art/palettes/HTZ.bin"
Pal_HPZ:		BINCLUDE	"art/palettes/HPZ.bin"
Pal_HPZ_U:		BINCLUDE	"art/palettes/HPZ underwater.bin"
Pal_OOZ:		BINCLUDE	"art/palettes/OOZ.bin"
Pal_DHZ:		BINCLUDE	"art/palettes/DHZ.bin"
Pal_CNZ:		BINCLUDE	"art/palettes/CNZ.bin"
Pal_BLZ:		BINCLUDE	"art/palettes/BLZ.bin" ; duplicate of CNZ palette
Pal_CPZ:		BINCLUDE	"art/palettes/CPZ.bin"
Pal_CPZ_U:		BINCLUDE	"art/palettes/CPZ underwater.bin"
Pal_NGHZ:		BINCLUDE	"art/palettes/NGHZ.bin"
Pal_NGHZ_U:		BINCLUDE	"art/palettes/NGHZ underwater.bin"
Pal_SpecialStage:	BINCLUDE	"art/palettes/Special Stage.bin"
		nop    
DelayProgram: ; loc_31D8: 
		move.w  #$2300, SR
loc_31DC:		 
		tst.b   (Vint_routine).w
		bne.s   loc_31DC
		rts
PseudoRandomNumber: ; loc_31E4:
		move.l  (RNG_seed).w, D1 
		bne.s   loc_31F0
		move.l  #$2A6D365A, D1
loc_31F0:		
		move.l  D1, D0
		asl.l   #$02, D1
		add.l   D0, D1
		asl.l   #$03, D1
		add.l   D0, D1		
		move.w  D1, D0
		swap  D1
		add.w   D1, D0
		move.w  D0, D1
		swap  D1
		move.l  D1, (RNG_seed).w
		rts
CalcSine: ; loc_320A:		
		andi.w  #$00FF, D0
		add.w   D0, D0
		addi.w  #$0080, D0
		move.w  Sine_Data(PC, D0), D1   ; loc_3222
		subi.w  #$0080, D0 
		move.w  Sine_Data(PC, D0), D0   ; loc_3222
		rts
Sine_Data: ; loc_3222:		 
		dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
		dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
		dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
		dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
		dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
		dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
		dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
		dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
		dc.w    $0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
		dc.w    $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
		dc.w    $00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
		dc.w    $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
		dc.w    $00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
		dc.w    $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
		dc.w    $0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
		dc.w    $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
		dc.w    $0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
		dc.w    $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
		dc.w    $FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
		dc.w    $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
		dc.w    $FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
		dc.w    $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
		dc.w    $FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
		dc.w    $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
		dc.w    $FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
		dc.w    $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
		dc.w    $FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
		dc.w    $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
		dc.w    $FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
		dc.w    $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
		dc.w    $FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
		dc.w    $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
		dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
		dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
		dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
		dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
		dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
		dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
		dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
		dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
CalcAngle: ; loc_34A2:		
		movem.l D3-D4, -(A7)
		moveq   #$00, D3
		moveq   #$00, D4
		move.w  D1, D3
		move.w  D2, D4
		or.w    D3, D4
		beq.s   loc_34FE
		move.w  D2, D4
		tst.w   D3
		bpl.w    loc_34BC
		neg.w   D3 
loc_34BC:		
		tst.w   D4
		bpl.w     loc_34C4
		neg.w   D4 
loc_34C4:		
		cmp.w   D3, D4
		bcc.w     loc_34D6
		lsl.l   #$08, D4
		divu.w  D3, D4
		moveq   #$00, D0
		move.b  AngleData(PC, D4), D0   ; loc_3508
		bra.s   loc_34E0
loc_34D6:
		lsl.l   #$08, D3
		divu.w  D4, D3
		moveq   #$40, D0
		sub.b   AngleData(PC, D3), D0   ; loc_3508
loc_34E0: 
		tst.w   D1
		bpl.w     loc_34EC
		neg.w   D0
		addi.w  #$0080, D0
loc_34EC:   
		tst.w   D2
		bpl.w     loc_34F8
		neg.w   D0
		addi.w  #$0100, D0
loc_34F8:   
		movem.l (A7)+, D3-D4
		rts              
loc_34FE:  
		move.w  #$0040, D0
		movem.l (A7)+, D3-D4
		rts
AngleData: ; loc_3508:  
		dc.b    $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02
		dc.b    $03, $03, $03, $03, $03, $03, $03, $04, $04, $04, $04, $04, $04, $05, $05, $05
		dc.b    $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
		dc.b    $08, $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $09, $0A, $0A, $0A
		dc.b    $0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
		dc.b    $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
		dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $10, $10, $10, $10, $10, $10, $10, $11, $11
		dc.b    $11, $11, $11, $11, $11, $11, $12, $12, $12, $12, $12, $12, $12, $13, $13, $13
		dc.b    $13, $13, $13, $13, $13, $14, $14, $14, $14, $14, $14, $14, $14, $15, $15, $15
		dc.b    $15, $15, $15, $15, $15, $15, $16, $16, $16, $16, $16, $16, $16, $16, $17, $17
		dc.b    $17, $17, $17, $17, $17, $17, $17, $18, $18, $18, $18, $18, $18, $18, $18, $18
		dc.b    $19, $19, $19, $19, $19, $19, $19, $19, $19, $19, $1A, $1A, $1A, $1A, $1A, $1A
		dc.b    $1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
		dc.b    $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
		dc.b    $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
		dc.b    $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $20, $20, $20, $20, $20, $20
		dc.b    $20, $00 
		nop 
;===============================================================================
; Sega Logo
; [ Begin ]              
;===============================================================================		 
SegaScreen: ; loc_360C: ; SEGA Logo
		move.b  #$FD, D0
		bsr.w     PlayMusic              ; loc_14C0
		bsr.w     ClearPLC		; loc_179A
		bsr.w     Pal_FadeFrom            ; loc_263A 
		lea     (VDP_control_port), A6
		move.w  #$8004, (A6)
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$8700, (A6)
		move.w  #$8B00, (A6)
		move.w  #$8C81, (A6)
		clr.b   (Water_fullscreen_flag).w
		move    #$2700, SR
		move.w  (VDP_Reg1_val).w, D0
		andi.b  #$BF, D0
		move.w  D0, (VDP_control_port)
		bsr.w     ClearScreen             ; loc_1418
		move.l  #$40000000, (VDP_control_port)
		lea     (SegaLogo).l, A0          ; Load Sega Sprites ; loc_70960  
		bsr.w     NemDec              ; loc_15FC
		lea     (Chunk_Table), A1
		lea     (SegaLogo_Mappings).l, A0 ; Load Sega Mappings ; loc_70DD0
		move.w  #$0000, D0
		bsr.w     EniDec               ; loc_18DA
		lea     (Chunk_Table), A1
		move.l  #$65100003, D0
		moveq   #$17, D1
		moveq   #$07, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
		lea     (Chunk_Table+$180), A1
		move.l  #$40000003, D0
		moveq   #$27, D1
		moveq   #$1B, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
		tst.b   (Graphics_Flags).w
		bmi.s   loc_36BE
		lea     (Chunk_Table+$A40), A1
		move.l  #$453A0003, D0
		moveq   #$02, D1
		moveq   #$01, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
loc_36BE:
		moveq   #PalID_SEGA, D0
		bsr.w     PalLoad2		; loc_28FE
		move.w  #$FFF6, (PalCycle_Frame).w
		move.w  #$0000, (PalCycle_Timer).w
		move.w  #$0000, (unk_F662).w
		move.w  #$0000, (unk_F660).w
		move.w  #$00B4, (Demo_Time_left).w
		move.w  (VDP_Reg1_val).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_control_port)
Sega_WaitPalette: ; loc_36F0:		   
		move.b  #VintID_SEGA, (Vint_routine).w               
		bsr.w     DelayProgram            ; loc_31D8
		bsr.w     PalCycle_Sega           ; loc_27F0 ; Load "Sega" rotating palette
		bne.s   Sega_WaitPalette        ; loc_36F0 
		move.b  #$FA, D0		; Load "Sega" sound
		bsr.w     PlaySound		; loc_14C6
		move.b  #VintID_SEGA, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		move.w  #$00B4, (Demo_Time_left).w
Sega_WaitEnd: ; loc_3718:		
		move.b  #VintID_PCM, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		tst.w   (Demo_Time_left).w
		beq.s   Sega_GoToTitleScreen    ; loc_3730
		andi.b  #$80, (Ctrl_1_Press).w
		beq.s   Sega_WaitEnd            ; loc_3718   
Sega_GoToTitleScreen: ; loc_3730:		
		move.b  #GameModeID_TitleScreen, (Game_Mode).w
		rts
;===============================================================================
; Sega Logo
; [ End ]              
;=============================================================================== 

; ---------------------------------------------------------------------------
; Title screen game screen; also contains the level select screen
; ---------------------------------------------------------------------------

; loc_3738:
TitleScreen:
		move.b	#$FD,d0
		bsr.w	PlayMusic
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		move	#$2700,sr
		lea	(VDP_control_port),a6
		move.w	#$8004,(a6)
		move.w	#$8230,(a6)
		move.w	#$8407,(a6)
		move.w	#$9001,(a6)
		move.w	#$9200,(a6)
		move.w	#$8B03,(a6)
		move.w	#$8720,(a6)
		clr.b	(Water_fullscreen_flag).w
		move.w	#$8C81,(a6)
		bsr.w	ClearScreen
		clearRAM Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM Object_RAM,Object_RAM_End
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Camera_RAM,Camera_RAM_End
		clearRAM Target_palette,Target_palette_End

		; Leftover from Sonic 1, which had a "SONIC TEAM PRESENTS"
		; screen load Sonic's palette for the font
		moveq	#PalID_SonicTails,d0
		bsr.w	PalLoad1
		bsr.w	Pal_FadeFromBlack

		move	#$2700,sr
		move.l	#$40000000,(VDP_control_port).l
		lea	(Title_Screen_Bg_Wings).l,a0
		bsr.w	NemDec
		move.l	#$40000001,(VDP_control_port).l
		lea	(Title_Screen_Sonic_Tails).l,a0
		bsr.w	NemDec
		lea	(VDP_data_port).l,a6
		move.l	#$50000003,4(a6)
		lea	(ArtUnc_DbgText).l,a5
		move.w	#$28F,d1

loc_3818:
		move.w	(a5)+,(a6)
		dbf	d1,loc_3818
		nop
		move.b	#0,(Last_star_pole_hit).w
		move.w	#0,(Debug_placement_mode).w
		move.w	#0,(Demo_mode_flag).w
		move.w	#0,(unk_FFDA).w
		move.w	#neo_green_hill_zone_act_1,(Current_ZoneAndAct).w
		move.w	#0,(PalCycle_Timer).w
		bsr.w	Pal_FadeFrom

		move	#$2700,sr
		lea	(Chunk_Table).l,a1
		lea	(TS_Wings_MapUnc_Sonic).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$40000003,d0
		moveq	#$27,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		lea	(Chunk_Table).l,a1
		lea	(Title_Screen_Bg_Mappings).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$60000003,d0
		moveq	#$1F,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		lea	(Chunk_Table).l,a1
		lea	(Title_Screen_R_Bg_Mappings).l,a0
		move.w	#0,d0
		bsr.w	EniDec
		lea	(Chunk_Table).l,a1
		move.l	#$60400003,d0
		moveq	#$1F,d1
		moveq	#$1B,d2
		bsr.w	PlaneMapToVRAM_H40
		moveq	#PalID_Title,d0
		bsr.w	PalLoad1
		move.b	#MusID_Title,d0
		bsr.w	PlayMusic
		move.b	#0,(Debug_mode_flag).w
		move.w	#0,(Two_player_mode).w
		move.w	#$178,(Demo_Time_left).w
		lea	($FFFFB080).w,a1
		moveq	#0,d0
		move.w	#$F,d1	; hilarious, they actually fixed the bug that caused the "PRESS START BUTTON" text to not display in Sonic 1

loc_38EE:
		move.l	d0,(a1)+
		dbf	d1,loc_38EE

		move.b	#$E,($FFFFB040).w
		move.b	#$E,($FFFFB080).w
		move.b	#1,($FFFFB09A).w
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		moveq	#PLCID_Std1,d0
		bsr.w	LoadPLC2
		move.w	#0,(Correct_cheat_entries).w
		move.w	#0,(Correct_cheat_entries_2).w
		move.b	#1,(Level_select_flag).w	; enable "level select" flag without using the cheat
		move.w	#4,(Sonic_Pos_Record_Index).w
		move.w	#0,(Sonic_Pos_Record_Buf).w
		move.w	(VDP_Reg1_val).w,d0
		ori.b	#$40,d0
		move.w	d0,(VDP_control_port).l
		bsr.w	Pal_FadeFromBlack
; loc_3948:
TitleScreen_Loop:
		move.b	#VintID_Title,(Vint_routine).w
		bsr.w	DelayProgram
		jsr	(RunObjects).l
		bsr.w	loc_5E38
		jsr	(BuildSprites).l
		bsr.w	RunPLC_RAM

; Title_ChkRegion:
		tst.b	(Graphics_Flags).w
		bpl.s	Title_RegionJ
		lea	(LevelSelectCode_US).l,a0
		bra.s	Title_EnterCheat
; loc_3974: Code_Sequence_J:
Title_RegionJ:
		lea	(LevelSelectCode_J).l,a0
; loc_397A: Level_Select_Cheat_Test:
Title_EnterCheat:
		move.w	(Correct_cheat_entries).w,d0
		adda.w	d0,a0
		move.b	(Ctrl_1_Press).w,d0
		andi.b	#$F,d0
		cmp.b	(a0),d0
		bne.s	Title_CheatFail
		addq.w	#1,(Correct_cheat_entries).w
		tst.b	d0
		bne.s	Title_CountC
		lea	(Level_select_flag).w,a0
		move.w	(Correct_cheat_entries_2).w,d1
		lsr.w	#1,d1
		andi.w	#3,d1
		beq.s	Title_PlayRing
		tst.b	(Graphics_Flags).w
		bpl.s	Title_PlayRing
		moveq	#1,d1
		move.b	d1,1(a0,d1.w)
; loc_39B0:
Title_PlayRing:
		move.b	#1,(a0,d1.w)
		move.b	#$B5,d0
		bsr.w	PlaySound
		bra.s	Title_CountC
; ===========================================================================
; loc_39C0: Title_Cheat_NoMatch:
Title_CheatFail:
		tst.b	d0
		beq.s	Title_CountC
		cmpi.w	#9,(Correct_cheat_entries).w
		beq.s	Title_CountC
		move.w	#0,(Correct_cheat_entries).w
; loc_39D2:
Title_CountC:
		move.b	(Ctrl_1_Press).w,d0
		andi.b	#$20,d0
		beq.s	TitleScreen_SkipC
		addq.w	#1,(Correct_cheat_entries_2).w

; loc_39E0: Title_Cheat_NoC:
TitleScreen_SkipC:
		tst.w	(Demo_Time_left).w
		beq.w	Demo_Mode
		andi.b	#$80, (Ctrl_1_Press).w
		beq.w	TitleScreen_Loop
; loc_39F2:
Title_ChkLevSel:
		tst.b	(Level_select_flag).w
		beq.w	PlayLevel
		btst	#6,(Ctrl_1_Held).w
		beq.w	PlayLevel
		move.b	#MusID_LevelSel,d0
		bsr.w	PlayMusic
		moveq	#PalID_LevelSel,d0
		bsr.w	PalLoad2

		clearRAM Horiz_Scroll_Buf,Horiz_Scroll_Buf_End

		move.l	d0,(Vscroll_Factor).w
		move	#$2700,sr
		lea	(VDP_data_port).l,a6
		move.l	#$60000003,(VDP_control_port).l
		move.w	#$3FF,d1
; loc_3A3E: LevelSelect_ClearVRAM:
Title_ClrVram:
		move.l	d0,(a6) 
		dbf	d1,Title_ClrVram
		bsr.w	LevelSelect_TextLoad
; ===========================================================================
; loc_3A48:
LevelSelect_Loop:
		move.b	#VintID_Title,(Vint_routine).w
		bsr.w	DelayProgram
		bsr.w	LevelSelect_Controls
		bsr.w	RunPLC_RAM
		tst.l	(Plc_Buffer).w
		bne.s	LevelSelect_Loop
		andi.b	#$F0,(Ctrl_1_Press).w
		beq.s	LevelSelect_Loop
		move.w	#0,(Two_player_mode).w
		btst	#4,(Ctrl_1_Held).w
		beq.s	loc_3A7C
		move.w	#1,(Two_player_mode).w

loc_3A7C:
		move.w	(Level_select_zone).w,d0
		cmpi.w	#$1A,d0
		bne.s	LevelSelect_PressStart
		btst	#6,(Ctrl_1_Press).w
		bne.s	LevelSelect_Loop
		move.w	(Sound_test_sound).w,d0
		addi.w	#$80,d0
		bsr.w	PlaySound
		bra.s	LevelSelect_Loop
; ===========================================================================
; loc_3A9C:
LevelSelect_PressStart:
		add.w	d0,d0
		move.w	LevelSelect_Order(pc,d0.w),d0
		bmi.w	LevelSelect_Loop
		; The original value was seemingly a hackish way to make the
		; Special Stages inaccessable, remove the '+1' from here and
		; from LevelSelect_Order to "access" the remnants
		cmpi.w	#$7FFF+1,d0
		bne.s	LevelSelect_StartZone

; LevelSelect_SpecialStage:
		move.b	#GameModeID_SpecialStage,(Game_Mode).w
		clr.w	(Current_ZoneAndAct).w
		move.b	#3,(Life_count).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.l	#5000,(Next_Extra_life_score).w
		rts
; ===========================================================================
; word_A3D4: Level_Select_Array:
LevelSelect_Order:
		dc.w	green_hill_zone_act_1, green_hill_zone_act_2
		dc.w	wood_zone_act_1, wood_zone_act_2
		dc.w	metropolis_zone_act_1, metropolis_zone_act_2, metropolis_zone_act_3
		dc.w	hill_top_zone_act_1, hill_top_zone_act_2
		dc.w	hidden_palace_zone_act_1, hidden_palace_zone_act_2
		dc.w	oil_ocean_zone_act_1, oil_ocean_zone_act_2
		dc.w	dust_hill_zone_act_1, dust_hill_zone_act_2
		dc.w	casino_night_zone_act_1, casino_night_zone_act_2
		dc.w	chemical_plant_zone_act_1, chemical_plant_zone_act_2
		dc.w	genocide_city_zone_act_1, genocide_city_zone_act_2
		dc.w	neo_green_hill_zone_act_1, neo_green_hill_zone_act_2
		dc.w	death_egg_zone_act_1, death_egg_zone_act_2
		dc.w	$7FFF+1			; SS
		dc.w	0			; Sound Test
; ===========================================================================
; loc_3B0A: Level_Select_Level:
LevelSelect_StartZone:
		andi.w	#$3FFF,d0
		move.w	d0,(Current_ZoneAndAct).w
; loc_3B12:
PlayLevel:
		move.b	#GameModeID_Level,(Game_Mode).w
		move.b	#3,(Life_count).w
		moveq	#0,d0
		move.w	d0,(Ring_count).w
		move.l	d0,(Timer).w
		move.l	d0,(Score).w
		move.b	d0,(Current_Special_Stage).w
		move.b	d0,(Emerald_count).w
		move.l	d0,(Got_Emeralds_array).w
		move.l	d0,(Got_Emeralds_array+4).w
		move.b	d0,(Continue_count).w
		move.l	#5000,(Next_Extra_life_score).w
		move.b	#$E0,d0
		bsr.w	PlaySound
		rts
; ===========================================================================
; byte_3B52:
LevelSelectCode_J:
		dc.b	1		; up
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	1		; up
		dc.b	0
		dc.b	$FF
		even
; byte_3B5A:
LevelSelectCode_US:
		dc.b	1		; up
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	2		; down
		dc.b	1		; up
		dc.b	0
		dc.b	$FF
		even
; ===========================================================================
Demo_Mode: ; loc_3B62:
		move.w  #$001E, (Demo_Time_left).w
loc_3B68:		
		move.b  #VintID_Title, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.w     RunPLC_RAM              ; loc_17A8
		move.w  ($FFFFB008).w, D0
		addq.w  #2, D0
		move.w  D0, ($FFFFB008).w
		cmpi.w  #$1C00, D0
		bcs.s   Run_Demo_Mode           ; loc_3B8E
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
		rts
Run_Demo_Mode: ; loc_3B8E:
		andi.b  #$80, (Ctrl_1_Press).w 
		bne.w     Title_ChkLevSel
		tst.w   (Demo_Time_left).w
		bne.w     loc_3B68
		move.b  #$E0, D0
		bsr.w     PlaySound		; loc_14C6
		move.w  (Demo_number).w, D0
		andi.w  #$0007, D0
		add.w   D0, D0
		move.w  Demo_Mode_Level_Array(PC, D0), D0 ; loc_3C16 Load Demo sequence array
		move.w  D0, (Current_ZoneAndAct).w
		addq.w  #1, (Demo_number).w
		cmpi.w  #$0004, (Demo_number).w
		bcs.s   loc_3BCC
		move.w  #$0000, (Demo_number).w
loc_3BCC:
		move.w  #$0001, (Demo_mode_flag).w
		move.b  #GameModeID_Demo, (Game_Mode).w
		cmpi.w  #$0000, D0
		bne.s   loc_3BE4
		move.w  #$0001, (Two_player_mode).w
loc_3BE4:
		cmpi.w  #$0600, D0
		bne.s   loc_3BF8
		move.b  #GameModeID_SpecialStage, (Game_Mode).w
		clr.w   (Current_ZoneAndAct).w
		clr.b   (Current_Special_Stage).w
loc_3BF8:
		move.b  #$03, (Life_count).w
		moveq   #$00, D0
		move.w  D0, (Ring_count).w
		move.l  D0, (Timer).w
		move.l  D0, (Score).w
		move.l  #$00001388, (Next_Extra_life_score).w
		rts
Demo_Mode_Level_Array: ; loc_3C16: ; Demo sequence array
		dc.w	chemical_plant_zone_act_1
		dc.w	green_hill_zone_act_1
		dc.w	hidden_palace_zone_act_1
		dc.w	hill_top_zone_act_1
		; These entries are leftovers from the Nick Arcade prototype, in which zone IDs $04 and
		; $05 were taken up by Hidden Palace and Hill Top Zone respectively
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_3
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
		dc.w	metropolis_zone_act_1
; ===========================================================================
; loc_3C2E:
LevelSelect_Controls:
		move.b	(Ctrl_1_Press).w,d1
		andi.b	#3,d1
		bne.s	loc_3C3E
		subq.w	#1,(LevSel_HoldTimer).w
		bpl.s	LevelSelect_Controls2

loc_3C3E:
		move.w	#$B,(LevSel_HoldTimer).w
		move.b	(Ctrl_1_Held).w,d1
		andi.b	#3,d1
		beq.s	LevelSelect_Controls2
		move.w	(Level_select_zone).w,d0
		btst	#0,d1
		beq.s	loc_3C5E
		subq.w	#1,d0
		bcc.s	loc_3C5E
		moveq	#$1A,d0

loc_3C5E:
		btst	#1,d1
		beq.s	loc_3C6E
		addq.w	#1,d0
		cmpi.w	#$1B,d0
		bcs.s	loc_3C6E
		moveq	#0,d0

loc_3C6E:
		move.w	d0,(Level_select_zone).w
		bsr.w	LevelSelect_TextLoad
		rts
; ===========================================================================
; loc_3C78:
LevelSelect_Controls2:
		cmpi.w	#$1A,(Level_select_zone).w
		bne.s	return_3CC2
		move.w	(Sound_test_sound).w,d0
		move.b	(Ctrl_1_Press).w,d1
		andi.b	#$C,d1
		beq.s	loc_3CAA
		btst	#2,d1
		beq.s	loc_3C9A
		subq.b	#1,d0
		bcc.s	loc_3C9A
		moveq	#$7F,d0

loc_3C9A:
		btst	#3,d1
		beq.s	loc_3CAA
		addq.b	#1,d0
		cmpi.w	#$80,d0
		bcs.s	loc_3CAA
		moveq	#0,d0

loc_3CAA:
		btst	#6,(Ctrl_1_Press).w
		beq.s	loc_3CBA
		addi.b	#$10,d0
		andi.b	#$7F,d0

loc_3CBA:
		move.w	d0,(Sound_test_sound).w
		bsr.w	LevelSelect_TextLoad

return_3CC2:		
		rts
; ===========================================================================
; loc_3CC4:
LevelSelect_TextLoad:
		lea	(Level_Select_Text).l,a1
		lea	(VDP_data_port).l,a6
		move.l	#$608C0003,d4
		move.w	#$8680,d3
		moveq	#$1A,d1

loc_3CDC:		
		move.l	d4,4(a6)
		bsr.w	loc_3D60
		addi.l	#$800000,d4
		dbf	d1,loc_3CDC 
		moveq	#0,d0
		move.w	(Level_select_zone).w,d0
		move.w	d0,d1
		move.l	#$608C0003,d4
		lsl.w	#7,d0
		swap	d0
		add.l	d0,d4
		lea	(Level_Select_Text).l,a1
		mulu.w	#$1B,d1
		adda.w	d1,a1
		move.w	#$C680,d3
		move.l	d4,4(a6)
		bsr.w	loc_3D60
		move.w	#$8680,d3
		cmpi.w	#$1A,(Level_select_zone).w
		bne.s	loc_3D2A
		move.w	#$C680,d3

loc_3D2A:
		move.l  #$6DB00003, (VDP_control_port)
		move.w  (Sound_test_sound).w, D0
		addi.w  #$0080, D0
		move.b  D0, D2
		lsr.b   #$04, D0
		bsr.w     loc_3D4C
		move.b  D2, D0
		bsr.w     loc_3D4C
		rts

loc_3D4C:
		andi.w  #$000F, D0
		cmpi.b  #$0A, D0
		bcs.s   loc_3D5A
		addi.b  #$07, D0
loc_3D5A:
		add.w   D3, D0
		move.w  D0, (A6)
		rts
loc_3D60:
		moveq   #$1A, D2
loc_3D62:		
		moveq   #$00, D0
		move.b  (A1)+, D0
		bpl.s   loc_3D72
		move.w  #$0000, (A6)
		dbf    D2, loc_3D62 
		rts
loc_3D72:
		add.w   D3, D0
		move.w  D0, (A6)
		dbf    D2, loc_3D62
		rts
; ===========================================================================

_0 = $00
_1 = $01
_2 = $02		
_A = $11
_B = $12
_C = $13
_D = $14		
_E = $15
_F = $16
_G = $17
_H = $18
_I = $19
_J = $1A
_K = $1B
_L = $1C
_M = $1D
_N = $1E
_O = $1F
_P = $20
_Q = $21
_R = $22
_S = $23
_T = $24
_U = $25
_V = $26
_W = $27
_X = $28
_Y = $0F
_Z = $10
__ = $FF		
Level_Select_Text: ; loc_3D7C: ; Level Select Menu Text		 
		dc.b    _G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
		dc.b    _W,_O,_O,_D,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
		dc.b    _M,_E,_T,_R,_O,_P,_O,_L,_I,_S,__,_Z,_O,_N,_E,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_2     
		dc.b    _H,_I,_L,_L,__,_T,_O,_P,__,_Z,_O,_N,_E,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _H,_I,_D,_D,_E,_N,__,_P,_A,_L,_A,_C,_E,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1
		dc.b    _O,_I,_L,__,_O,_C,_E,_A,_N,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
		dc.b    _D,_U,_S,_T,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1		  
		dc.b    _C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T,__,_Z,_O,_N,_E,__,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
		dc.b    _C,_H,_E,_M,_I,_C,_A,_L,__,_P,_L,_A,_N,_T,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
		dc.b    _G,_E,_N,_O,_C,_I,_D,_E,__,_C,_I,_T,_Y,__,_Z,_O,_N,_E,__,__,_S,_T,_A,_G,_E,__,_0 
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1 
		dc.b    _N,_E,_O,__,_G,_R,_E,_E,_N,__,_H,_I,_L,_L,__,_Z,_O,_N,_E,__,_S,_T,_A,_G,_E,__,_0  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
		dc.b    _D,_E,_A,_T,_H,__,_E,_G,_G,__,_Z,_O,_N,_E,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_0  
		dc.b    __,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__,_S,_T,_A,_G,_E,__,_1  
		dc.b    _S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E,__,__,__,__,__,__,__,__,__,__,__,__,__,__
		dc.b    _S,_O,_U,_N,_D,__,_S,_E,_L,_E,_C,_T,__,__,__,__,__,__,__,__,__,__,__,__,__,__,__

		dc.b    $00 ; Filler
Unused_Code1: ; loc_4056:		 
		lea     (Chunk_Table), A1
		move.w  #$02EB, D2
Unused_Code1_Loop: ; loc_4060:		
		move.w  (A1), D0
		move.w  D0, D1
		andi.w  #$F800, D1
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		or.w    D0, D1
		move.w  D1, (A1)+
		dbf    D2, Unused_Code1_Loop   ; loc_4060
		rts
Unused_Code2: ; loc_4078:		
		lea     ($00FE0000), A1
		lea     ($00FE0080), A2
		lea     (Chunk_Table), A3
		move.w  #$003F, D1
Unused_Code2_Loop: ; loc_408E:		
		bsr.w     Unused_Code4            ; loc_4120
		bsr.w     Unused_Code4            ; loc_4120
		dbf    D1, Unused_Code2_Loop   ; loc_408E
		lea     ($00FE0000), A1
		lea     ($00FF0000), A2
		move.w  #$003F, D1
Unused_Code2_Loop2: ; loc_40AA:		
		move.w  #$0000, (A2)+
		dbf    D1, Unused_Code2_Loop2  ; loc_40AA
		move.w  #$3FBF, D1
Unused_Code2_Loop3: ; loc_40B6:		
		move.w  (A1)+, (A2)+
		dbf    D1, Unused_Code2_Loop3  ; loc_40B6
		rts
Unused_Code3: ; loc_40BE:              
		lea     ($00FE0000), A1
		lea     (Chunk_Table), A3
		moveq   #$1F, D0
Unused_Code3_Loop: ; loc_40CC:		
		move.l  (A1)+, (A3)+
		dbf    D0, Unused_Code3_Loop   ; loc_40CC
		moveq   #$00, D7
		lea     ($00FE0000), A1
		move.w  #$00FF, D5
Unused_Code3_Loop2: ; loc_40DE:		
		lea     (Chunk_Table), A3
		move.w  D7, D6
Unused_Code3_Loop3: ; loc_40E6:		
		movem.l A1-A3, -(A7)
		move.w  #$003F, D0
Unused_Code3_Loop4: ; loc_40EE:		
		cmpm.w  (A1)+, (A3)+
		bne.s   Unused_Code3_loc_4104
		dbf    D0, Unused_Code3_Loop4  ; loc_40EE
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A1
		dbf    D5, Unused_Code3_Loop2  ; loc_40DE
		bra.s   Unused_Code3_loc_411E
Unused_Code3_loc_4104:
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A3
		dbf    D6, Unused_Code3_Loop3  ; loc_40E6
		moveq   #$1F, D0
Unused_Code3_Loop5: ; loc_4112:		
		move.l  (A1)+, (A3)+
		dbf    D0, Unused_Code3_Loop5  ; loc_4112
		addq.l  #$01, D7
		dbf    D5, Unused_Code3_Loop2  ; loc_40DE
Unused_Code3_loc_411E:
		bra.s   Unused_Code3_loc_411E		   
Unused_Code4: ; loc_4120:
		moveq   #$07, D0
Unused_Code4_Loop: ; loc_4122:		
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		dbf    D0, Unused_Code4_Loop   ; loc_4122
		adda.w  #$0080, A1
		adda.w  #$0080, A2
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Music Playlist
; ---------------------------------------------------------------------------
; byte_4140:
MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ, so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
    zoneTableEnd
	even

; ===========================================================================
; ---------------------------------------------------------------------------
; Level
; DEMO AND ZONE LOOP (MLS values $08, $0C; bit 7 set indicates that load routine is running)
; ---------------------------------------------------------------------------
; loc_4150:
Level:
		bset	#GameModeFlag_TitleCard,(Game_Mode).w	; add $80 to screen mode (for pre level sequence)
		tst.w	(Demo_mode_flag).w	; test the old flag for the credits demos (now unused)
		bmi.s	+
		move.b	#$F9,d0
		bsr.w	PlaySound
+
		bsr.w	ClearPLC
		bsr.w	Pal_FadeFrom
		tst.w	(Demo_mode_flag).w
		bmi.s	Level_ClrRAM
		move	#$2700,sr
		move.l	#$70000002,(VDP_control_port).l
		lea	(Title_Cards).l,a0	; load title card patterns
		bsr.w	NemDec
		bsr.w	ClearScreen
		move	#$2300,sr
		moveq	#0,d0
		move.w	d0,(Timer_frames).w
		move.b	(Current_Zone).w,d0

		; multiply d0 by 12, the size of a level art load block
		add.w	d0,d0
		add.w	d0,d0
		move.w	d0,d1
		add.w	d0,d0
		add.w	d1,d0

		lea	(LevelArtPointers).l,a2
		lea	(a2,d0.w),a2
		moveq	#0,d0
		move.b	(a2),d0		; PLC1 ID
		beq.s	+
		bsr.w	LoadPLC
+
		moveq	#PLCID_Std2,d0
		bsr.w	LoadPLC
; loc_41C0:
Level_ClrRAM:
		clearRAM Sprite_Table_Input,Sprite_Table_Input_End
		clearRAM Object_RAM,Object_RAM_End
		clearRAM MiscLevelVariables,MiscLevelVariables_End
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Oscillating_variables,Oscillating_variables_End

		cmpi.w	#chemical_plant_zone_act_2,(Current_ZoneAndAct).w	; is it CPZ2?
		beq.s	Level_InitWater			; if yes, branch
		cmpi.b	#neo_green_hill_zone,(Current_ZoneAndAct).w	; is it NGHZ?
		beq.s	Level_InitWater			; if yes, branch
		cmpi.b	#hidden_palace_zone,(Current_ZoneAndAct).w	; is it HPZ?
		bne.s	+				; if not, branch
; loc_4228: Init_Water:
Level_InitWater:
		move.b	#1,(Water_flag).w
		move.w	#0,(Two_player_mode).w
+
		lea	(VDP_control_port).l,a6
		move.w	#$8B03,(a6)		; EXT-INT disabled, V scroll by screen, H scroll by line
		move.w	#$8230,(a6)		; PNT A base: $C000
		move.w	#$8407,(a6)		; PNT B base: $E000
		move.w	#$857C,(a6)		; Sprite attribute table base: $F800
		move.w	#$9001,(a6)		; Scroll table size: 64x32
		move.w	#$8004,(a6)		; H-INT disabled
		move.w	#$8720,(a6)		; Background palette/color: 2/0
		btst	#5,(Ctrl_1_Held).w
		beq.s	loc_4262
		move.w	#$8C89,(a6)		; H res 40 cells, no interlace, S/H enabled

loc_4262:
		move.w	#$8ADF,(Hint_counter_reserve).w	; H-INT every 223rd scanline
		tst.w	(Two_player_mode).w
		beq.s	loc_427C
		move.w	#$8A6B,(Hint_counter_reserve).w	; H-INT every 108th scanline
		move.w	#$8014,(a6)		; H-INT enabled
		move.w	#$8C87,(a6)		; H res 40 cells, double res interlace

loc_427C:
		move.w	(Hint_counter_reserve).w,(a6)
		move.l	#VDP_Command_Buffer,(VDP_Command_Buffer_Slot).w
		tst.b	(Water_flag).w		; does this level have water?
		beq.s	Level_LoadPal		; if not, branch
		move.w	#$8014,(a6)		; H-INT enabled
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
		; this limits the water table to stages after HPZ
	if ~~useFullWaterTables
		subi.w	#hidden_palace_zone_act_1,d0
	endif
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		lea	(WaterHeight).l,a1	; load water height array
		move.w	(a1,d0.w),d0
		move.w	d0,(Water_Level_1).w	; set water heights
		move.w	d0,(Water_Level_2).w
		move.w	d0,(Water_Level_3).w
		clr.b	(Water_routine).w	; clear water routine counter
		clr.b	(Water_fullscreen_flag).w	; clear water movement
		move.b	#1,(Water_on).w		; enable water
; loc_42C8: LevelInit_NoWater:
Level_LoadPal:
		move.w	#$1E,(Current_Air).w

		moveq	#PalID_SonicTails,d0
		bsr.w	PalLoad2	; load Sonic's (and Tails') palette

		tst.b	(Water_flag).w	; is this a water level?
		beq.s	Level_GetBgm	; if not, branch

		moveq	#PalID_HPZ_U,d0		; use HPZ underwater palette
		cmpi.b	#hidden_palace_zone,(Current_Zone).w	; is this Hidden Palace Zone?
		beq.s	Level_WaterPal		; if yes, branch
		moveq	#PalID_CPZ_U,d0		; use CPZ underwater palette
		cmpi.b	#chemical_plant_zone,(Current_Zone).w	; if this Chemical Plant Zone?
		beq.s	Level_WaterPal		; if yes, branch
		moveq	#PalID_NGHZ_U,d0	; use NGHZ underwater palette
; loc_42F0: LevelInit_UnderwaterPalette:
Level_WaterPal:
		bsr.w	PalLoad3_Water		; ACTUALLY load the underwater palette
		tst.b	(Last_star_pole_hit).w	; is this the start of a level?
		beq.s	Level_GetBgm		; if yes, branch
		move.b	(Saved_Water_move).w,(Water_fullscreen_flag).w
; loc_4300: LevelInit_NoUnderwaterPalette:
Level_GetBgm:
		tst.w	(Demo_mode_flag).w
		bmi.s	loc_434E
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lea	MusicList(pc),a1
		move.b	(a1,d0.w),d0
		bsr.w	PlayMusic
		move.b	#$34,($FFFFB080).w
; loc_431E: LevelInit_TitleCard:
Level_TtlCard:
		move.b	#VintID_TitleCard, (Vint_routine).w
		bsr.w	DelayProgram
		jsr	(RunObjects).l
		jsr	(BuildSprites).l
		bsr.w	RunPLC_RAM
		move.w	($FFFFB108).w,d0
		cmp.w	($FFFFB130).w,d0	; has the title card sequence finished?
		bne.s	Level_TtlCard		; if not, branch
		tst.l	(Plc_Buffer).w		; are there any items in the pattern load cue?
		bne.s	Level_TtlCard		; if yes, branch
		jsr	(Head_Up_Display_Base).l

loc_434E:
		moveq   #PalID_SonicTails, D0
		bsr.w     PalLoad1		; loc_28E2
		bsr.w     LevelSizeLoad         ; loc_5904
		bsr.w     Background_Scroll_Layer ; loc_5D5C
		bset    #$02, (Scroll_flags).w
		bsr.w     Main_Level_Load_16_128_Blocks ; loc_779A
		jsr     Load_16x16_Mappings_For_Dyn_Sprites ; loc_2293A
		bsr.w     Load_Tiles_From_Start   ; loc_76BE
		jsr     loc_135DA
		bsr.w     LoadCollisionIndexes     ; loc_4AAA
		bsr.w     WaterEffects           ; loc_465A
		move.b  #$01, ($FFFFB000).w  ; Load Sonic Object
		tst.w   (Demo_mode_flag).w
		bmi.s   Skip_Head_Up_Display ; loc_4390		 
		move.b  #$21, ($FFFFB380).w  ; Load HUD Object
Skip_Head_Up_Display: ; loc_4390:		
		move.b  #$02, ($FFFFB040).w  ; Load Tails Object
		move.w  ($FFFFB008).w, ($FFFFB048).w
		move.w  ($FFFFB00C).w, ($FFFFB04C).w
		subi.w  #$0020, ($FFFFB048).w
		tst.b   (Debug_options_flag).w
		beq.s   loc_43BC
		btst    #$06, (Ctrl_1_Held).w
		beq.s   loc_43BC
		move.b  #$01, (Debug_mode_flag).w
loc_43BC:
		move.w  #$0000, (Ctrl_1_Logical).w
		move.w  #$0000, (Ctrl_1).w
		tst.b   (Water_flag).w
		beq.s   loc_43E6
		move.b  #$04, ($FFFFB780).w
		move.w  #$0060, ($FFFFB788).w
		move.b  #$04, ($FFFFB7C0).w
		move.w  #$0120, ($FFFFB7C8).w
loc_43E6:
		cmpi.b  #oil_ocean_zone, (Current_Zone).w
		bne.s   loc_43F4
		move.b  #$07, ($FFFFB780).w
loc_43F4:
		jsr     ObjectsManager         ; loc_E250
		jsr     RingsManager           ; loc_DE34
		jsr     RunObjects            ; loc_CFD0
		jsr     BuildSprites           ; loc_D4DA
		bsr.w     JumpToDynamic_Art_Cues  ; loc_51F8
		moveq   #$00, D0
		tst.b   (Last_star_pole_hit).w
		bne.s   loc_4424
		move.w  D0, (Ring_count).w
		move.l  D0, (Timer).w
		move.b  D0, (Extra_life_flags).w
loc_4424:		
		move.b  D0, (Time_Over_flag).w
		move.b  D0, (Shield).w
		move.b  D0, (Invincibility).w
		move.b  D0, (Speed_shoes).w
		move.b  D0, (unk_FE2F).w
		move.w  D0, (Debug_placement_mode).w
		move.w  D0, (Level_Inactive_flag).w
		bsr.w     OscillateNumInit      ; loc_4B64
		move.b  #$01, (Update_HUD_score).w
		move.b  #$01, (Update_HUD_rings).w
		move.b  #$01, (Update_HUD_timer).w
		move.w  #$0004, (Sonic_Pos_Record_Index).w
		move.w  #$0000, (Sonic_Pos_Record_Buf).w
		move.w  #$0000, (Demo_button_index).w
		move.w  #$0000, (Demo_button_index_2P).w
		lea     (Demo_Index).l, A1        ; loc_49F2
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		tst.w   (Demo_mode_flag).w
		bpl.s   loc_4498
		lea     (Demo_End_Index).l, A1    ; loc_4A7A
		move.w  (Ending_demo_number).w, D0
		subq.w  #$01, D0
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
loc_4498:
		move.b  $0001(A1), (Demo_press_counter).w
		subq.b  #$01, (Demo_press_counter).w
		lea     (Demo_Tails_Ghz).l, A1   ; loc_4DF8 Green Hill - Tails Demo control
		move.b  $0001(A1), (Demo_press_counter_2P).w
		subq.b  #$01, (Demo_press_counter_2P).w
		move.w  #$0668, (Demo_Time_left).w
		tst.w   (Demo_mode_flag).w
		bpl.s   loc_44D2
		move.w  #$021C, (Demo_Time_left).w
		cmpi.w  #$0004, (Ending_demo_number).w
		bne.s   loc_44D2
		move.w  #$01FE, (Demo_Time_left).w
loc_44D2:
		tst.b   (Water_flag).w
		beq.s   loc_44F2
		moveq   #PalID_HPZ_U, D0
		cmpi.b  #hidden_palace_zone, (Current_Zone).w
		beq.s   loc_44EE
		moveq   #PalID_CPZ_U, D0
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		beq.s   loc_44EE
		moveq   #PalID_NGHZ_U, D0
loc_44EE:
		bsr.w     PalLoad4_Water          ; loc_2932
loc_44F2:
		move.w  #$0003, D1
loc_44F6:		
		move.b  #VintID_Level, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		dbf    D1, loc_44F6 
		move.w  #$202F, (Palette_fade_range).w
		bsr.w     Pal_FadeFromBlack2             ; loc_259C
		tst.w   (Demo_mode_flag).w
		bmi.s   Level_ClrTitleCard      ; loc_4526
		addq.b  #$02, ($FFFFB0A4).w 
		addq.b  #$04, ($FFFFB0E4).w
		addq.b  #$04, ($FFFFB124).w
		addq.b  #$04, ($FFFFB164).w   
		bra.s   loc_452E
Level_ClrTitleCard: ; loc_4526:
		moveq   #$02, D0
		jsr     (LoadPLC).l		 ; loc_173C
loc_452E:		
		bclr    #GameModeFlag_TitleCard, (Game_Mode).w
; ===========================================================================
; ---------------------------------------------------------------------------
; Main level loop (when all title card and loading sequences are finished)
; ---------------------------------------------------------------------------
; loc_4534:
Level_MainLoop:
		bsr.w	PauseGame
		move.b	#VintID_Level,(Vint_routine).w
		bsr.w	DelayProgram
		addq.w	#1,(Timer_frames).w
		bsr.w	Move_Sonic_In_Demo
		bsr.w	WaterEffects
		jsr	(RunObjects).l
		tst.w	(Level_Inactive_flag).w
		bne.w	Level
		tst.w	(Debug_placement_mode).w
		bne.s	loc_456A
		cmpi.b	#6,($FFFFB024).w
		bcc.s	loc_456E

loc_456A:
		bsr.w	Background_Scroll_Layer

loc_456E:
		bsr.w	UpdateWaterSurface
		jsr	(RingsManager).l
		bsr.w	JumpToDynamic_Art_Cues
		bsr.w	PalCycle_Load
		bsr.w	RunPLC_RAM
		bsr.w	Oscillate_Num_Do
		bsr.w	Change_Ring_Frame
		bsr.w	End_Level_Art_Load
		jsr	(BuildSprites).l
		jsr	(ObjectsManager).l
		cmpi.b	#GameModeID_Demo,(Game_Mode).w
		beq.s	loc_45B0
		cmpi.b	#GameModeID_Level,(Game_Mode).w
		beq.w	Level_MainLoop
		rts
; ---------------------------------------------------------------------------

loc_45B0:
		tst.w   (Level_Inactive_flag).w
		bne.s   loc_45CE
		tst.w   (Demo_Time_left).w
		beq.s   loc_45CE
		cmpi.b  #GameModeID_Demo, (Game_Mode).w
		beq.w    Level_MainLoop         ; loc_4534
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
		rts
loc_45CE:
		cmpi.b  #GameModeID_Demo, (Game_Mode).w
		bne.s   loc_45E8
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
		tst.w   (Demo_mode_flag).w
		bpl.s   loc_45E8
		move.b  #S1GameModeID_Credits, (Game_Mode).w
loc_45E8:
		move.w  #$003C, (Demo_Time_left).w
		move.w  #$003F, (Palette_fade_range).w
		clr.w   (PalChangeSpeed).w
loc_45F8:		
		move.b  #VintID_Level, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.w     Move_Sonic_In_Demo      ; loc_48DE
		jsr     RunObjects            ; loc_CFD0
		jsr     BuildSprites           ; loc_D4DA
		jsr     ObjectsManager         ; loc_E250
		subq.w  #$01, (PalChangeSpeed).w
		bpl.s   loc_4628
		move.w  #$0002, (PalChangeSpeed).w
		bsr.w     Pal_FadeOut             ; loc_265A
loc_4628:
		tst.w   (Demo_Time_left).w
		bne.s   loc_45F8
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to move the water or oil surface sprites to where the screen is at
; (the closest match to this subroutine in Sonic 1 is Obj1B_Action)
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_4630:  Change_Water_Surface_Pos:
UpdateWaterSurface:
		tst.b	(Water_flag).w
		beq.s	loc_4658
		move.w	(Camera_X_pos).w,d1
		btst	#0,(Timer_frames+1).w
		beq.s	loc_4646
		addi.w	#$20,d1

loc_4646:
		move.w	d1,d0
		addi.w	#$60,d0
		move.w	d0,($FFFFB788).w
		addi.w	#$120,d1
		move.w	d1,($FFFFB7C8).w

loc_4658:
		rts
; End of function UpdateWaterSurface

; ---------------------------------------------------------------------------
; Subroutine to do special water effects
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_465A:
WaterEffects:
		tst.b	(Water_flag).w		; does the level have water?
		beq.s	return_46B6		; if not, branch
		tst.b	(Deform_lock).w
		bne.s	MoveWater
		cmpi.b	#6,($FFFFB024).w	; is Sonic dead?
		bcc.s	MoveWater		; if yes, branch
		bsr.w	DynamicWater
; loc_4672:
MoveWater:
		clr.b	(Water_fullscreen_flag).w
		moveq	#0,d0
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w	; is this NGHZ?
		beq.s	loc_4686		; if yes, branch
		move.b	(Oscillating_Data).w,d0
		lsr.w	#1,d0

loc_4686:
		add.w	(Water_Level_2).w,d0
		move.w	D0, (Water_Level_1).w
		; calculate distance between water surface and top of screen
		move.w	(Water_Level_1).w,d0
		sub.w	(Camera_Y_pos).w,d0
		bcc.s	loc_46A8
		tst.w	d0
		bpl.s	loc_46A8
		move.b	#224-1,(Hint_counter_reserve+1).w	; H-INT every 224th scanline
		move.b	#1,(Water_fullscreen_flag).w

loc_46A8:
		cmpi.w	#224-1,d0
		bcs.s	loc_46B2
		move.w	#224-1,d0

loc_46B2:
		move.b	d0,(Hint_counter_reserve+1).w	; H-INT every d0 scanlines

return_46B6:
		rts
; ===========================================================================
; The code that handles initializing the water tables effectively makes
; it start at $08 instead of $00 to save space
; word_46B8: Water_Height_Array:
    if useFullWaterTables
WaterHeight: zoneOrderedTable 2,2
	zoneTableEntry.w  $600, $600	; GHZ
	zoneTableEntry.w  $600, $600	; OWZ
	zoneTableEntry.w  $600, $600	; WZ
	zoneTableEntry.w  $600, $600	; SSZ
	zoneTableEntry.w  $600, $600	; MTZ
	zoneTableEntry.w  $600, $600	; MTZ
	zoneTableEntry.w  $600, $600	; BLZ
	zoneTableEntry.w  $600, $600	; HTZ
	zoneTableEntry.w  $600, $600	; HPZ
	zoneTableEntry.w  $600, $600	; RWZ
	zoneTableEntry.w  $600, $600	; OOZ
	zoneTableEntry.w  $600, $600	; DHZ
	zoneTableEntry.w  $600, $600	; CNZ
	zoneTableEntry.w  $600, $710	; CPZ
	zoneTableEntry.w  $600, $600	; GCZ
	zoneTableEntry.w  $410, $510	; NGHZ
	zoneTableEntry.w  $600, $600	; DEZ
    zoneTableEnd
    else
WaterHeight:
	dc.w  $600, $600	; HPZ
	dc.w  $600, $600	; RWZ
	dc.w  $600, $600	; OOZ
	dc.w  $600, $600	; DHZ
	dc.w  $600, $600	; CNZ
	dc.w  $600, $710	; CPZ
	dc.w  $600, $600	; GCZ
	dc.w  $410, $510	; NGHZ
	; no entry for DEZ...
    endif
; ===========================================================================
; sub_46D8: Dynamic_Water_Height:
DynamicWater:
		moveq	#0,d0
		move.w	(Current_ZoneAndAct).w,d0
	if ~~useFullWaterTables
		subi.w	#hidden_palace_zone_act_1,d0
	endif
		ror.b	#1,d0
		lsr.w	#6,d0
		andi.w	#$FFFE,d0
		move.w	DynamicWater_Index(pc,d0.w),d0
		jsr	DynamicWater_Index(pc,d0.w)
		moveq	#0,d1
		move.b	(Water_on).w,d1
		move.w	(Water_Level_3).w,d0
		sub.w	(Water_Level_2).w,d0
		beq.s	loc_470A
		bcc.s	loc_4706
		neg.w	d1

loc_4706:
		add.w	d1,(Water_Level_2).w

loc_470A:
		rts
; End of function DynamicWater

; ===========================================================================
; Like with the water height table, the index starts at $08, rather than $00
; off_470C:
    if useFullWaterTables
DynamicWater_Index: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w DynamicWater_Null ; GHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; GHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; OWZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; OWZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; WZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; WZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; SSZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; SSZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 3
	zoneOffsetTableEntry.w DynamicWater_Null ; MTZ 4
	zoneOffsetTableEntry.w DynamicWater_Null ; BLZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; BLZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; HTZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; HTZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; HPZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; HPZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; RWZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; RWZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; OOZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; OOZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; DHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; DHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; CNZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; CNZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; CPZ 1
	zoneOffsetTableEntry.w DynamicWater_CPZ2 ; CPZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; GCZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; GCZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; NGHZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; NGHZ 2
	zoneOffsetTableEntry.w DynamicWater_Null ; DEZ 1
	zoneOffsetTableEntry.w DynamicWater_Null ; DEZ 2
    zoneTableEnd
    else
DynamicWater_Index: offsetTable
	offsetTableEntry.w DynamicWater_Null ; HPZ 1
	offsetTableEntry.w DynamicWater_Null ; HPZ 2
	offsetTableEntry.w DynamicWater_Null ; RWZ 1
	offsetTableEntry.w DynamicWater_Null ; RWZ 2
	offsetTableEntry.w DynamicWater_Null ; OOZ 1
	offsetTableEntry.w DynamicWater_Null ; OOZ 2
	offsetTableEntry.w DynamicWater_Null ; DHZ 1
	offsetTableEntry.w DynamicWater_Null ; DHZ 2
	offsetTableEntry.w DynamicWater_Null ; CNZ 1
	offsetTableEntry.w DynamicWater_Null ; CNZ 2
	offsetTableEntry.w DynamicWater_Null ; CPZ 1
	offsetTableEntry.w DynamicWater_CPZ2 ; CPZ 2
	offsetTableEntry.w DynamicWater_Null ; GCZ 1
	offsetTableEntry.w DynamicWater_Null ; GCZ 2
	offsetTableEntry.w DynamicWater_Null ; NGHZ 1
	offsetTableEntry.w DynamicWater_Null ; NGHZ 2
    endif
; ===========================================================================
; return_472C:
DynamicWater_Null:
		rts
; ===========================================================================
; loc_472E:
DynamicWater_CPZ2:
		cmpi.w	#$1DE0,(Camera_X_pos).w
		bcs.s	return_473C
		move.w	#$510,(Water_Level_3).w

return_473C:    
		rts
; ===========================================================================

S1_LZ_Wind_Tunnels:; loc_473E: leftover from Sonic 1's LZ		             
		tst.w   (Debug_placement_mode).w
		bne.w    loc_481A
		lea     (S1_LZ_Wind_Data).l, A2   ; loc_4824
		moveq   #$00, D0
		move.b  (Current_Act).w, D0
		lsl.w   #$03, D0
		adda.w  D0, A2
		moveq   #$00, D1
		tst.b   (Current_Act).w
		bne.s   loc_4762
		moveq   #$01, D1
		subq.w  #$08, A2
loc_4762:
		lea     ($FFFFB000).w, A1
loc_4766:		
		move.w  $0008(A1), D0
		cmp.w   (A2), D0
		bcs.w     loc_4804
		cmp.w   $0004(A2), D0
		bcc.w     loc_4804
		move.w  $000C(A1), D2
		cmp.w   $0002(A2), D2
		bcs.w     loc_4804
		cmp.w   $0006(A2), D2
		bcc.s   loc_4804
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$3F, D0
		bne.s   loc_479E
		move.w  #$00D0, D0
		jsr     (PlaySound).l              ; loc_14C6
loc_479E:
		tst.b   (WindTunnel_holding_flag).w
		bne.w     loc_481A
		cmpi.b  #$04, $0024(A1)
		bcc.s   loc_4816
		move.b  #$01, (WindTunnel_flag).w
		subi.w  #$0080, D0
		cmp.w   (A2), D0
		bcc.s   loc_47CC
		moveq   #$02, D0
		cmpi.b  #$01, (Current_Act).w
		bne.s   loc_47C8
		neg.w   D0
loc_47C8:
		add.w   D0, $000C(A1)
loc_47CC:
		addi.w  #$0004, $0008(A1)
		move.w  #$0400, $0010(A1)
		move.w  #$0000, $0012(A1)
		move.b  #$0F, $001C(A1)
		bset    #$01, $0022(A1)
		btst    #$00, (Ctrl_1_Held).w
		beq.s   loc_47F6
		subq.w  #$01, $000C(A1)
loc_47F6:
		btst    #$01, (Ctrl_1_Held).w
		beq.s   loc_4802
		addq.w  #$01, $000C(A1)
loc_4802:
		rts
loc_4804:
		addq.w  #$08, A2
		dbf    D1, loc_4766
		tst.b   (WindTunnel_flag).w
		beq.s   loc_481A
		move.b  #$00, $001C(A1)
loc_4816:
		clr.b   (WindTunnel_flag).w
loc_481A:
		rts		
;loc_481C:
		dc.w    $0A80, $0300, $0C10, $0380
S1_LZ_Wind_Data: ; loc_4824:
		dc.w    $0F80, $0100, $1410, $0180, $0460, $0400, $0710, $0480
		dc.w    $0A20, $0600, $1610, $06E0, $0C80, $0600, $13D0, $0680		
S1_LZ_Water_Slides: ; loc_4844:
		lea     ($FFFFB000).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_4878
		move.w  $000C(A1), D0
		andi.w  #$0700, D0
		move.b  $0008(A1), D1
		andi.w  #$007F, D1
		add.w   D1, D0
		lea     (Level_Layout).w, A2
		move.b  $00(A2, D0), D0
		lea     loc_48DD(PC), A2
		moveq   #$06, D1
loc_4870:		
		cmp.b   -(A2), D0
		dbeq.w   D1, loc_4870
		beq.s   loc_488A
loc_4878:
		tst.b   (Sliding_flag).w
		beq.s   loc_4888
		move.w  #$0005, $002E(A1)
		clr.b   (Sliding_flag).w
loc_4888:
		rts
loc_488A:
		cmpi.w  #$0003, D1
		bcc.s   loc_4892
		nop
loc_4892:
		bclr    #$00, $0022(A1)
		move.b  loc_48CE(PC, D1), D0
		move.b  D0, $0014(A1)
		bpl.s   loc_48A8
		bset    #$00, $0022(A1)
loc_48A8:
		clr.b   $0015(A1)
		move.b  #$1B, $001C(A1)
		move.b  #$01, (Sliding_flag).w
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$1F, D0
		bne.s   loc_48CC
		move.w  #$00D0, D0
		jsr     (PlaySound).l              ; loc_14C6
loc_48CC:
		rts  
loc_48CE:
		dc.b    $0A, $F5, $0A, $F6, $F5, $F4, $0B, $00, $02, $07, $03, $4C, $4B, $08, $04 
loc_48DD:
		dc.b    $00								           
Move_Sonic_In_Demo: ; loc_48DE:
		tst.w   (Demo_mode_flag).w
		bne.s   Move_Demo_On            ; loc_495C
		rts
Move_Sonic_Demo_Record: ; unused subroutine for	recording demos		
		lea     ($00FE8000), A1
		move.w  (Demo_button_index).w, D0
		adda.w  D0, A1
		move.b  (Ctrl_1_Held).w, D0
		cmp.b   (A1), D0
		bne.s   loc_4908
		addq.b  #$01, $0001(A1)
		cmpi.b  #$FF, $0001(A1)
		beq.s   loc_4908
		bra.s   loc_491C
loc_4908:
		move.b  D0, $0002(A1)
		move.b  #$00, $0003(A1)
		addq.w  #$02, (Demo_button_index).w
		andi.w  #$03FF, (Demo_button_index).w 
loc_491C:
		cmpi.b  #green_hill_zone, (Current_Zone).w
		bne.s   loc_495A
		lea     ($00FEC000), A1
		move.w  (Demo_button_index_2P).w, D0
		adda.w  D0, A1
		move.b  (Ctrl_2_Held).w, D0
		cmp.b   (A1), D0
		bne.s   loc_4946
		addq.b  #$01, $0001(A1)
		cmpi.b  #$FF, $0001(A1)
		beq.s   loc_4946
		bra.s   loc_495A
loc_4946:
		move.b  D0, $0002(A1)
		move.b  #$00, $0003(A1)
		addq.w  #$02, (Demo_button_index_2P).w
		andi.w  #$03FF, (Demo_button_index_2P).w
loc_495A:
		rts
Move_Demo_On: ; loc_495C:
		tst.b   (Ctrl_1_Held).w
		bpl.s   loc_496E
		tst.w   (Demo_mode_flag).w
		bmi.s   loc_496E
		move.b  #GameModeID_TitleScreen, (Game_Mode).w
loc_496E:
		lea     (Demo_Index).l, A1        ; loc_49F2
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		cmpi.b  #GameModeID_SpecialStage, (Game_Mode).w
		bne.s   loc_4984
		moveq   #$06, D0
loc_4984:
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		move.w  (Demo_button_index).w, D0
		adda.w  D0, A1
		move.b  (A1), D0
		lea     (Ctrl_1).w, A0
		move.b  D0, D1
		moveq   #$00, D2
		eor.b   D2, D0
		move.b  D1, (A0)+
		and.b   D1, D0
		move.b  D0, (A0)+
		subq.b  #$01, (Demo_press_counter).w
		bcc.s   loc_49B2
		move.b  $0003(A1), (Demo_press_counter).w
		addq.w  #$02, (Demo_button_index).w
loc_49B2:
		cmpi.b  #green_hill_zone, (Current_Zone).w
		bne.s   loc_49EA
		lea     (Demo_Tails_Ghz).l, A1    ; loc_4DF8
		move.w  (Demo_button_index_2P).w, D0
		adda.w  D0, A1
		move.b  (A1), D0
		lea     (Ctrl_2).w, A0
		move.b  D0, D1
		moveq   #$00, D2
		eor.b   D2, D0
		move.b  D1, (A0)+
		and.b   D1, D0
		move.b  D0, (A0)+
		subq.b  #$01, (Demo_press_counter_2P).w
		bcc.s   loc_49E8
		move.b  $0003(A1), (Demo_press_counter_2P).w
		addq.w  #$02, (Demo_button_index_2P).w
loc_49E8:
		rts
loc_49EA:
		move.w  #$0000, (Ctrl_2).w
		rts
Demo_Index: ; loc_49F2: ; Demo sequence array
		dc.l    Demo_Green_Hill     ; $00 - Green Hill
		dc.l    Demo_Green_Hill     ; $01 
		dc.l    Demo_Green_Hill     ; $02 - Wood
		dc.l    Demo_Green_Hill     ; $03 
		dc.l    Demo_Green_Hill     ; $04 - Metropolis 
		dc.l    Demo_Green_Hill     ; $05 - Metropolis 
		dc.l    Demo_Green_Hill     ; $06
		dc.l    Demo_Hill_Top       ; $07 - Hill Top
		dc.l    Demo_Hidden_Palace  ; $08 - Hidden Palace
		dc.l    Demo_Green_Hill     ; $09
		dc.l    Demo_Green_Hill     ; $0A - Oil Ocean
		dc.l    Demo_Green_Hill     ; $0B - Dust Hill
		dc.l    Demo_Green_Hill     ; $0C - Casino Night
		dc.l    Demo_Chemical_Plant ; $0D - Chemical Plant
		dc.l    Demo_Green_Hill     ; $0E - Genocide City
		dc.l    Demo_Green_Hill     ; $0F - Neo Green Hill
		dc.l    Demo_Green_Hill     ; $10 - Death Egg
;loc_4A36:
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000, $00FE8000, $00FE8000, $00FE8000
		dc.l    $00FE8000				
Demo_End_Index: ; loc_4A7A:		
		dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
		dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
		dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_4AAA: Load_Colision_Index:
LoadCollisionIndexes:
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lsl.w	#2,d0
		move.l	#Primary_Collision,(Collision_addr).w
		move.l	Off_ColP(pc,d0.w),a1
		lea	(Primary_Collision).w,a2
		bsr.s	levelCollisionLoad
		move.l	Off_ColS(pc,d0.w),a1
		lea	(Secondary_Collision).w,a2
; loc_4ACC: Load_Colision
levelCollisionLoad:
		move.w	#$2FF,d1
		moveq	#0,d2

-		move.b	(a1)+,d2
		move.w	d2,(a2)+
		dbf	d1,-
		rts
; End of function LoadCollisionIndexes

; ===========================================================================
; ---------------------------------------------------------------------------
; Pointers to primary collision indexes

; Contains an array of pointers to the primary collision index data for each
; level. 1 pointer for each level, pointing the primary collision index.
; ---------------------------------------------------------------------------
; off_4ADC: Primary_Colision_Index:
Off_ColP: zoneOrderedTable 4,1
	zoneTableEntry.l Green_Hill_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Wood_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Green_Hill_Colision_1
	zoneTableEntry.l Hidden_Palace_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Oil_Ocean_Colision
	zoneTableEntry.l Dust_Hill_Colision
	zoneTableEntry.l Casino_Night_Colision_1
	zoneTableEntry.l Chemical_Plant_Colision_1
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Neo_Green_Hill_Colision_1
	zoneTableEntry.l Special_Stage_1
    zoneTableEnd

; ---------------------------------------------------------------------------
; Pointers to secondary collision indexes

; Contains an array of pointers to the secondary collision index data for
; each level. 1 pointer for each level, pointing the secondary collision
; index.
; ---------------------------------------------------------------------------
; off_4B20: Secundary_Colision_Index:
Off_ColS: zoneOrderedTable 4,1
	zoneTableEntry.l Green_Hill_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Wood_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Metropolis_Colision
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Green_Hill_Colision_2
	zoneTableEntry.l Hidden_Palace_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Oil_Ocean_Colision
	zoneTableEntry.l Dust_Hill_Colision
	zoneTableEntry.l Casino_Night_Colision_2
	zoneTableEntry.l Chemical_Plant_Colision_2
	zoneTableEntry.l Special_Stage_1
	zoneTableEntry.l Neo_Green_Hill_Colision_2
	zoneTableEntry.l Special_Stage_1
    zoneTableEnd

; ===========================================================================
; ---------------------------------------------------------------------------
; Oscillating number subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_4B64:
OscillateNumInit:
		lea	(Oscillating_Numbers).w,a1
		lea	(Osc_Data).l,a2
		moveq	#bytesToWcnt(Osc_Data_End-Osc_Data),d1
; loc_4B70:
Osc_Loop:
		move.w	(a2)+,(a1)+
		dbf	d1,Osc_Loop
		rts
; ===========================================================================
; word_4B78: Oscillate_Data:
Osc_Data:	dc.w	$7D,$80,0,$80,0,$80,0,$80
		dc.w	0,$80,0,$80,0,$80,0,$80
		dc.w	0,$80,0,$3848,$EE,$2080,$B4,$3080
		dc.w	$10E,$5080,$1C2,$7080,$276,$80,0,$4000
		dc.w	$FE
Osc_Data_End:

Oscillate_Num_Do: ; loc_4BBA:
		cmpi.b  #$06, ($FFFFB024).w
		bcc.s   loc_4C10
		lea     (Oscillating_Numbers).w, A1
		lea     (Oscillate_Data2).l, A2   ; loc_4C12
		move.w  (A1)+, D3
		moveq   #$0F, D1 
loc_4BD0:		
		move.w  (A2)+, D2
		move.w  (A2)+, D4
		btst    D1, D3
		bne.s   loc_4BF0
		move.w  $0002(A1), D0
		add.w   D2, D0
		move.w  D0, $0002(A1)
		_add.w   D0, 0(A1)
		_cmp.b   0(A1), D4
		bhi.s   loc_4C06
		bset    D1, D3
		bra.s   loc_4C06
loc_4BF0:
		move.w  $0002(A1), D0
		sub.w   D2, D0
		move.w  D0, $0002(A1)
		_add.w   D0, 0(A1)
		_cmp.b   0(A1), D4
		bls.s   loc_4C06
		bclr    D1, D3
loc_4C06:
		addq.w  #$04, A1
		dbf    D1, loc_4BD0   
		move.w  D3, (Oscillation_Control).w
loc_4C10:
		rts		
Oscillate_Data2: ; loc_4C12:
		dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
		dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
		dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
		dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040
Change_Ring_Frame: ; loc_4C52:
		subq.b  #$01, (Logspike_anim_counter).w
		bpl.s   loc_4C68
		move.b  #$0B, (Logspike_anim_counter).w
		subq.b  #$01, (Logspike_anim_frame).w
		andi.b  #$07, (Logspike_anim_frame).w		 
loc_4C68:
		subq.b  #$01, (Rings_anim_counter).w
		bpl.s   loc_4C7E
		move.b  #$07, (Rings_anim_counter).w
		addq.b  #$01, (Rings_anim_frame).w
		andi.b  #$03, (Rings_anim_frame).w
loc_4C7E:
		subq.b  #$01, (Unknown_anim_counter).w
		bpl.s   loc_4C9C
		move.b  #$07, (Unknown_anim_counter).w
		addq.b  #$01, (Unknown_anim_frame).w
		cmpi.b  #$06, (Unknown_anim_frame).w
		bcs.s   loc_4C9C
		move.b  #$00, (Unknown_anim_frame).w
loc_4C9C:
		tst.b   (Ring_spill_anim_counter).w
		beq.s   loc_4CBE
		moveq   #$00, D0
		move.b  (Ring_spill_anim_counter).w, D0
		add.w   (Ring_spill_anim_accum).w, D0   
		move.w  D0, (Ring_spill_anim_accum).w
		rol.w   #$07, D0
		andi.w  #$0003, D0
		move.b  D0, (Ring_spill_anim_frame).w
		subq.b  #$01, (Ring_spill_anim_counter).w
loc_4CBE:
		rts
End_Level_Art_Load: ; loc_4CC0: ; Test for load end level sprites...
		tst.w   (Debug_placement_mode).w
		bne.w     Skip_End_Level_Art_Load ; loc_4CF6
		cmpi.w  #green_hill_zone_act_1, (Current_ZoneAndAct).w
		beq.s   Skip_End_Level_Art_Load ; loc_4CF6
		move.w  (Camera_X_pos).w, D0
		move.w  (Camera_Max_X_pos).w, D1
		subi.w  #$0100, D1
		cmp.w   D1, D0
		blt.s   Skip_End_Level_Art_Load ; loc_4CF6
		tst.b   (Update_HUD_timer).w
		beq.s   Skip_End_Level_Art_Load ; loc_4CF6
		cmp.w   (Camera_Min_X_pos).w, D1
		beq.s   Skip_End_Level_Art_Load ; loc_4CF6
		move.w  D1, (Camera_Min_X_pos).w
		moveq   #$27, D0
		bra.w     LoadPLC2		; loc_176E
Skip_End_Level_Art_Load: ; loc_4CF6:
		rts		
Demo_Green_Hill: ; loc_4CF8: ; $00 - Green Hill Sonic Demo control
		dc.w    $0044, $0800, $2805, $0859, $2804, $0835, $2806, $0842
		dc.w    $2804, $0819, $000F, $080A, $2809, $084A, $2809, $0810
		dc.w    $0005, $041B, $0200, $084B, $282D, $0855, $2809, $0826
		dc.w    $281C, $0819, $2808, $08FF, $0896, $2813, $081D, $2819
		dc.w    $082A, $2807, $0900, $0100, $0520, $0402, $0501, $0000
		dc.w    $083A, $0025, $040A, $2409, $041C, $0003, $083A, $2806
		dc.w    $080C, $0016, $0800, $280F, $0833, $2807, $0804, $0046
		dc.w    $086A, $0029, $8000, $C000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000              
Demo_Tails_Ghz: ; loc_4DF8: ; $00 - Green Hill Tails Demo control
		dc.w    $0046, $081E, $280A, $085E, $2830, $0866, $000F, $080F
		dc.w    $282E, $0800, $001F, $0812, $0013, $080A, $0016, $040D
		dc.w    $0008, $0410, $0030, $086B, $2814, $0880, $0A02, $0223
		dc.w    $0007, $0813, $2817, $0800, $0003, $0403, $0500, $0100
		dc.w    $0901, $083C, $2807, $0018, $084D, $2812, $0801, $0004
		dc.w    $080B, $0007, $081B, $0009, $2005, $2813, $0804, $0021
		dc.w    $0811, $0020, $0851, $000B, $0457, $000D, $0227, $0A00
		dc.w    $0002, $0901, $082A, $2815, $0803, $2819, $080A, $000A
		dc.w    $0802, $281B, $0833, $0027, $083A, $0912, $0107, $0013
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000   
Demo_Hill_Top: ; loc_4EF8: ; $07 - Hill Top Sonic Demo control
		dc.w    $0005, $011D, $0903, $2905, $0910, $0100, $0013, $0400
		dc.w    $050A, $2507, $0510, $0401, $000C, $0804, $090C, $290A
		dc.w    $0910, $0803, $001C, $2007, $000B, $0406, $0025, $2006
		dc.w    $0022, $0805, $0025, $040E, $0033, $0807, $0039, $080A
		dc.w    $2808, $0816, $0024, $0874, $2802, $2907, $0903, $000F
		dc.w    $080D, $0005, $040C, $0001, $2002, $2800, $2A08, $2802
		dc.w    $081E, $0004, $0413, $0012, $0818, $280B, $0811, $002C
		dc.w    $080C, $000D, $2004, $2803, $0805, $0022, $0412, $0004
		dc.w    $081A, $000D, $0406, $0037, $080C, $0019, $080D, $000C
		dc.w    $0409, $0003, $0820, $001A, $0406, $0022, $0809, $0009
		dc.w    $0816, $002F, $080E, $2804, $2002, $0008, $0419, $0005
		dc.w    $0806, $2808, $0808, $0024, $0872, $0A09, $020E, $0A6B
		dc.w    $8A00, $4000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
Demo_Hidden_Palace: ; loc_4FF8: ; $07 - Hidden Palace Sonic Demo control
		dc.w    $0040, $0833, $2806, $0839, $2805, $080D, $0025, $0810
		dc.w    $282A, $081C, $0200, $2603, $2200, $2A00, $2806, $0822
		dc.w    $0200, $060F, $0408, $0600, $020E, $062F, $0279, $0601
		dc.w    $0443, $240F, $0417, $0009, $081C, $2803, $0845, $0005
		dc.w    $081A, $2833, $0872, $000F, $0415, $2410, $040B, $0024
		dc.w    $0401, $2408, $0407, $0006, $0404, $001E, $240E, $0415
		dc.w    $001E, $2003, $240F, $0400, $0007, $0812, $0409, $240F
		dc.w    $0406, $000A, $0462, $2412, $2004, $0021, $280E, $0816
		dc.w    $0019, $0829, $0063, $0415, $2409, $0439, $0031, $0825
		dc.w    $2802, $0812, $0093, $8000, $C000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000 
Demo_Chemical_Plant: ; loc_50F8: ; $07 - Chemical Plant Sonic Demo control
		dc.w    $001B, $0130, $0019, $0829, $2813, $0803, $001D, $2003
		dc.w    $281E, $0802, $0009, $0405, $002E, $081E, $2805, $2003
		dc.w    $000B, $0401, $0507, $0400, $002F, $2803, $2A04, $0A00
		dc.w    $0806, $0024, $0802, $2806, $0801, $0026, $08FF, $0814
		dc.w    $280A, $0803, $0060, $080E, $2807, $080C, $0008, $040B
		dc.w    $0023, $0805, $0093, $0819, $2811, $0878, $280F, $08FF
		dc.w    $0883, $280D, $0882, $001F, $8000, $4000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000 
JumpToDynamic_Art_Cues: ;  loc_51F8:
		jmp     Dynamic_Art_Cues ; loc_223EC 
		dc.w    $0000 ; Filler  
; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic 1 Special Stages
; You can technically "access" them, unlike the Nick Arcade prototype, but
; it has to be done on less accurate emulators such as Kega; more accurate
; emulations/hardware tends to hang before or after loading
; ---------------------------------------------------------------------------
SpecialStage: ; loc_5200:       
		move.w  #$00CA, D0
		bsr.w     PlaySound		; loc_14C6
		bsr.w     Pal_MakeFlash           ; loc_2762
		move    #$2700, SR
		lea     (VDP_control_port), A6
		move.w  #$8B03, (A6)
		move.w  #$8004, (A6)
		move.w  #$8AAF, (Hint_counter_reserve).w
		move.w  #$9011, (A6)
		move.w  (VDP_Reg1_val).w, D0
		andi.b  #$BF, D0
		move.w  D0, (VDP_control_port)
		bsr.w     ClearScreen             ; loc_1418
		move    #$2300, SR
		lea     (VDP_control_port), A5
		move.w  #$8F01, (A5)
		move.l  #$946F93FF, (A5)
		move.w  #$9780, (A5)
		move.l  #$50000081, (A5)
		move.w  #$0000, (VDP_data_port)
loc_5260:		
		move.w  (A5), D1
		btst    #$01, D1
		bne.s   loc_5260
		move.w  #$8F02, (A5)
		bsr.w     SS_Background_Load      ; loc_54CA
		moveq   #$14, D0
		bsr.w     RunPLC_ROM              ; loc_18A8
		clearRAM Primary_Collision,Primary_Collision+$2000	; this should be Object_RAM; leftover from Sonic 1
		clearRAM Misc_Variables,Misc_Variables_End
		clearRAM Oscillating_Data,Oscillating_Numbers_End
		clearRAM Decomp_Buffer,Decomp_Buffer_End
		clr.b   (Water_fullscreen_flag).w
		clr.w   (Level_Inactive_flag).w
		moveq	#S1PalID_SpecStg,d0		; loads the wrong palette; should be PalID_SpecStg
		bsr.w     PalLoad1		; loc_28E2
		jsr     (S1_Special_Stage_Load) ; loc_21A36
		move.l  #$00000000, (Camera_X_pos).w
		move.l  #$00000000, (Camera_Y_pos).w
		move.b  #$09, ($FFFFB000).w
		bsr.w     S1_Pal_Cycle_Special_Stage ; loc_5584
		clr.w   (SpecialStage_angle).w
		move.w  #$0040, (SpecialStage_speed).w
		move.w  #MusID_SpecStg, D0
		bsr.w     PlayMusic              ; loc_14C0
		move.w  #$0000, (Demo_button_index).w
		lea     (Demo_Index).l, A1        ; loc_49F2
		moveq   #$06, D0
		lsl.w   #$02, D0
		move.l  $00(A1, D0), A1
		move.b  $0001(A1), (Demo_press_counter).w
		subq.b  #$01, (Demo_press_counter).w
		clr.w   (Ring_count).w
		clr.b   (Extra_life_flags).w
		move.w  #$0000, (Debug_placement_mode).w
		move.w  #$0708, (Demo_Time_left).w
		tst.b   (Debug_options_flag).w
		beq.s   loc_533C
		btst    #$06, (Ctrl_1_Held).w
		beq.s   loc_533C
		move.b  #$01, (Debug_mode_flag).w
loc_533C:
		move.w  (VDP_Reg1_val).w, D0
		ori.b   #$40, D0
		move.w  D0, (VDP_control_port)
		bsr.w     Pal_MakeWhite           ; loc_26B8
loc_534E:		
		bsr.w     PauseGame		   ; loc_14D2
		move.b  #VintID_S1SS, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.w     Move_Sonic_In_Demo      ; loc_48DE
		move.w  (Ctrl_1).w, (Ctrl_1_Logical).w
		jsr     (RunObjects)          ; loc_CFD0
		jsr     (BuildSprites)         ; loc_D4DA
		jsr     (S1_SS_Show_Layout)     ; loc_21508
		bsr.w     S1_SS_Bg_Animate        ; loc_5806
		tst.w   (Demo_mode_flag).w
		beq.s   loc_538A
		tst.w   (Demo_Time_left).w
		beq.w    loc_54B8
loc_538A:
		cmpi.b  #GameModeID_SpecialStage, (Game_Mode).w
		beq.w     loc_534E
		tst.w   (Demo_mode_flag).w
		bne.w     loc_54C0
		move.b  #GameModeID_Level, (Game_Mode).w
		cmpi.w  #metropolis_zone_act_6, (Current_ZoneAndAct).w
		bcs.s   loc_53AE
		clr.w   (Current_ZoneAndAct).w
loc_53AE:
		move.w  #$003C, (Demo_Time_left).w
		move.w  #$003F, (Palette_fade_range).w
		clr.w   (PalChangeSpeed).w
loc_53BE:		
		move.b  #VintID_SSResults, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		bsr.w     Move_Sonic_In_Demo      ; loc_48DE
		move.w  (Ctrl_1).w, (Ctrl_1_Logical).w
		jsr     (RunObjects).l          ; loc_CFD0
		jsr     (BuildSprites).l         ; loc_D4DA
		jsr     (S1_SS_Show_Layout).l     ; loc_21508
		bsr.w     S1_SS_Bg_Animate        ; loc_5806
		subq.w  #$01, (PalChangeSpeed).w
		bpl.s   loc_53F8
		move.w  #$0002, (PalChangeSpeed).w
		bsr.w     Pal_ToWhite             ; loc_2782
loc_53F8:
		tst.w   (Demo_Time_left).w
		bne.s   loc_53BE
		move    #$2700, SR
		lea     (VDP_control_port), A6
		move.w  #$8230, (A6)
		move.w  #$8407, (A6)
		move.w  #$9001, (A6)
		bsr.w     ClearScreen             ; loc_1418
		move.l  #$70000002, (VDP_control_port)
		lea     (Title_Cards).l, A0 ; loc_7EA04
		bsr.w     NemDec              ; loc_15FC
		jsr     (Head_Up_Display_Base)  ; loc_23184
		move    #$2300, SR
		moveq	#S1PalID_SpecStg,d0	; same wrong palette
		bsr.w     PalLoad2		; loc_28FE
		moveq   #PLCID_Std1, D0
		bsr.w     LoadPLC2		; loc_176E
		moveq   #$1B, D0
		bsr.w     LoadPLC		 ; loc_173C
		move.b  #$01, (Update_HUD_score).w
		move.b  #$01, (Update_Bonus_score).w
		move.w  (Ring_count).w, D0
		mulu.w  #$000A, D0
		move.w  D0, (Bonus_Countdown_2).w
		move.w  #S1MusID_ActClear, D0
		jsr     (PlaySound).l              ; loc_14C6
		clearRAM Object_RAM,Object_RAM_End
		move.b  #$7E, ($FFFFB5C0).w
loc_5480:		
		bsr.w     PauseGame		   ; loc_14D2
		move.b  #VintID_TitleCard, (Vint_routine).w
		bsr.w     DelayProgram            ; loc_31D8
		jsr     (RunObjects)          ; loc_CFD0
		jsr     (BuildSprites)         ; loc_D4DA
		bsr.w     RunPLC_RAM              ; loc_17A8
		tst.w   (Level_Inactive_flag).w
		beq.s   loc_5480
		tst.l   (Plc_Buffer).w
		bne.s   loc_5480
		move.w  #$00CA, D0
		bsr.w     PlaySound		; loc_14C6
		bsr.w     Pal_MakeFlash           ; loc_2762
		rts
loc_54B8:
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
		rts
loc_54C0:
		cmpi.b  #GameModeID_Level, (Game_Mode).w
		beq.s   loc_54B8
		rts
SS_Background_Load: ; loc_54CA:
		lea     (Chunk_Table), A1
		move.w  #$4051, D0
		bsr.w     EniDec               ; loc_18DA
		move.l  #$50000001, D3
		lea     (Chunk_Table+$80), A2
		moveq   #$06, D7
loc_54E6:		
		move.l  D3, D0
		moveq   #$03, D6
		moveq   #$00, D4
		cmpi.w  #$0003, D7
		bcc.s   loc_54F4
		moveq   #$01, D4
loc_54F4:
		moveq   #$07, D5
loc_54F6:		
		move.l  A2, A1
		eori.b  #$01, D4
		bne.s   loc_550A
		cmpi.w  #$0006, D7
		bne.s   loc_551A
		lea     (Chunk_Table), A1
loc_550A:
		movem.l D0-D4, -(A7)
		moveq   #$07, D1
		moveq   #$07, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
		movem.l (A7)+, D0-D4
loc_551A:
		addi.l  #$00100000, D0
		dbf    D5, loc_54F6
		addi.l  #$03800000, D0
		eori.b  #$01, D4
		dbf    D6, loc_54F4
		addi.l  #$10000000, D3
		bpl.s   loc_5544
		swap  D3
		addi.l  #$0000C000, D3
		swap  D3
loc_5544:
		adda.w  #$0080, A2
		dbf    D7, loc_54E6
		lea     (Chunk_Table), A1
		move.w  #$4000, D0
		bsr.w     EniDec               ; loc_18DA
		lea     (Chunk_Table), A1
		move.l  #$40000003, D0
		moveq   #$3F, D1
		moveq   #$1F, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
		lea     (Chunk_Table), A1
		move.l  #$50000003, D0
		moveq   #$3F, D1
		moveq   #$3F, D2
		bsr.w     PlaneMapToVRAM_H40         ; loc_154C
		rts		             
S1_Pal_Cycle_Special_Stage: ; loc_5584:
		tst.w   (Game_paused).w
		bne.s   loc_5608
		subq.w  #$01, (SSPalCycle_Timer).w
		bpl.s   loc_5608
		lea     (VDP_control_port), A6
		move.w  (SSPalCycle_Frame).w, D0
		addq.w  #$01, (SSPalCycle_Frame).w
		andi.w  #$001F, D0
		lsl.w   #$02, D0
		lea     (loc_565E).l, A0
		adda.w  D0, A0 
		move.b  (A0)+, D0
		bpl.s   loc_55B4
		move.w  #$01FF, D0
loc_55B4:  
		move.w  D0, (SSPalCycle_Timer).w
		moveq   #$00, D0
		move.b  (A0)+, D0
		move.w  D0, (unk_F7A0).w 
		lea     (loc_56DE).l, A1
		lea     $00(A1, D0), A1
		move.w  #$8200, D0
		move.b  (A1)+, D0
		move.w  D0, (A6)
		move.b  (A1), (Vscroll_Factor_FG).w
		move.w  #$8400, D0
		move.b  (A0)+, D0
		move.w  D0, (A6) 
		move.l  #$40000010, (VDP_control_port) 
		move.l  (Vscroll_Factor).w, (VDP_data_port)
		moveq   #$00, D0
		move.b  (A0)+, D0
		bmi.s   loc_560A
		lea     (Pal_S1_SS_Cycle1).l, A1  ; loc_56EC
		adda.w  D0, A1
		lea     (Normal_palette_line3+$E).w, A2
		move.l  (A1)+, (A2)+
		move.l  (A1)+, (A2)+
		move.l  (A1)+, (A2)+
loc_5608: 
		rts 
loc_560A:
		move.w  (unk_F79E).w, D1
		cmpi.w  #$008A, D0 
		bcs.s   loc_5616
		addq.w  #$01, D1
loc_5616:  
		mulu.w  #$002A, D1
		lea     (Pal_S1_SS_Cycle2).l, A1  ; loc_5734
		adda.w  D1, A1
		andi.w  #$007F, D0
		bclr    #$00, D0
		beq.s   loc_563A
		lea     (Normal_palette_line4+$E).w, A2
		move.l  (A1), (A2)+
		move.l  $0004(A1), (A2)+
		move.l  $0008(A1), (A2)+
loc_563A:		
		adda.w  #$000C, A1
		lea     (Normal_palette_line3+$1A).w, A2
		cmpi.w  #$000A, D0
		bcs.s   loc_5650
		subi.w  #$000A, D0
		lea     (Normal_palette_line4+$1A).w, A2
loc_5650:      
		move.w  D0, D1   
		add.w   D0, D0  
		add.w   D1, D0  
		adda.w  D0, A1 
		move.l  (A1)+, (A2)+    
		move.w  (A1)+, (A2)+ 
		rts				     
loc_565E:  
		dc.w    $0300, $0792, $0300, $0790, $0300, $078E, $0300, $078C
		dc.w    $0300, $078B, $0300, $0780, $0300, $0782, $0300, $0784
		dc.w    $0300, $0786, $0300, $0788, $0708, $0700, $070A, $070C
		dc.w    $FF0C, $0718, $FF0C, $0718, $070A, $070C, $0708, $0700
		dc.w    $0300, $0688, $0300, $0686, $0300, $0684, $0300, $0682
		dc.w    $0300, $0681, $0300, $068A, $0300, $068C, $0300, $068E
		dc.w    $0300, $0690, $0300, $0692, $0702, $0624, $0704, $0630
		dc.w    $FF06, $063C, $FF06, $063C, $0704, $0630, $0702, $0624
loc_56DE:  
		dc.w    $1001, $1800, $1801, $2000, $2001, $2800, $2801            
Pal_S1_SS_Cycle1: ; loc_56EC: 
		dc.w    $0400, $0600, $0620, $0624, $0664, $0666, $0600, $0820
		dc.w    $0A64, $0A68, $0AA6, $0AAA, $0800, $0C42, $0E86, $0ECA
		dc.w    $0EEC, $0EEE, $0400, $0420, $0620, $0620, $0864, $0666
		dc.w    $0420, $0620, $0842, $0842, $0A86, $0AAA, $0620, $0842
		dc.w    $0A64, $0C86, $0EA8, $0EEE
Pal_S1_SS_Cycle2: ; loc_5734: 
		dc.w    $0EEA, $0EE0, $0AA0, $0880, $0660, $0440, $0EE0, $0AA0
		dc.w    $0440, $0AA0, $0AA0, $0AA0, $0860, $0860, $0860, $0640
		dc.w    $0640, $0640, $0400, $0400, $0400, $0AEC, $06EA, $04C6
		dc.w    $02A4, $0082, $0060, $06EA, $04C6, $0060, $04C6, $04C6
		dc.w    $04C6, $0484, $0484, $0484, $0442, $0442, $0442, $0400
		dc.w    $0400, $0400, $0ECC, $0E8A, $0C68, $0A46, $0824, $0602
		dc.w    $0E8A, $0C68, $0602, $0C68, $0C68, $0C68, $0846, $0846
		dc.w    $0846, $0624, $0624, $0624, $0400, $0400, $0400, $0AEC
		dc.w    $08CA, $06A8, $0486, $0264, $0042, $08CA, $06A8, $0042
		dc.w    $06A8, $06A8, $06A8, $0684, $0684, $0684, $0442, $0442
		dc.w    $0442, $0400, $0400, $0400, $0EEC, $0CCA, $0AA8, $0886
		dc.w    $0664, $0442, $0CCA, $0AA8, $0442, $0AA8, $0AA8, $0AA8
		dc.w    $0864, $0864, $0864, $0642, $0642, $0642, $0400, $0400
		dc.w    $0400  
S1_SS_Bg_Animate: ; loc_5806:
		move.w  (unk_F7A0).w, D0
		bne.s   loc_5818
		move.w  #$0000, (Camera_BG_Y_pos).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
loc_5818:
		cmpi.w  #$0008, D0
		bcc.s   loc_5870
		cmpi.w  #$0006, D0
		bne.s   loc_5832
		addq.w  #$01, (Camera_BG3_X_pos).w
		addq.w  #$01, (Camera_BG_Y_pos).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
loc_5832:
		moveq   #$00, D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
		swap  D0
		lea     (loc_58ED).l, A1
		lea     (Decomp_Buffer).w, A3
		moveq   #$09, D3
loc_5848:		
		move.w  $0002(A3), D0
		bsr.w     CalcSine		; loc_320A
		moveq   #$00, D2
		move.b  (A1)+, D2
		muls.w  D2, D0
		asr.l   #$08, D0
		move.w  D0, (A3)+
		move.b  (A1)+, D2
		ext.w   D2
		add.w   D2, (A3)+
		dbf    D3, loc_5848
		lea     (Decomp_Buffer).w, A3
		lea     (loc_58DA).l, A2
		bra.s   loc_58A0
loc_5870:
		cmpi.w  #$000C, D0
		bne.s   loc_5896
		subq.w  #$01, (Camera_BG3_X_pos).w
		lea     (Decomp_Buffer+$100).w, A3
		move.l  #$00018000, D2
		moveq   #$06, D1
loc_5886:		
		move.l  (A3), D0
		sub.l   D2, D0
		move.l  D0, (A3)+
		subi.l  #$00002000, D2
		dbf    D1, loc_5886
loc_5896:
		lea     (Decomp_Buffer+$100).w, A3
		lea     (loc_58E5).l, A2
loc_58A0:
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_BG3_X_pos).w, D0
		neg.w   D0
		swap  D0
		moveq   #$00, D3
		move.b  (A2)+, D3
		move.w  (Camera_BG_Y_pos).w, D2
		neg.w   D2
		andi.w  #$00FF, D2
		lsl.w   #$02, D2
loc_58BC:		
		move.w  (A3)+, D0
		addq.w  #$02, A3
		moveq   #$00, D1
		move.b  (A2)+, D1
		subq.w  #$01, D1
loc_58C6:		
		move.l  D0, $00(A1, D2)
		addq.w  #$04, D2
		andi.w  #$03FC, D2
		dbf    D1, loc_58C6
		dbf    D3, loc_58BC
		rts   
loc_58DA:
		dc.b    $09, $28, $18, $10, $28, $18, $10, $30, $18, $08, $10
loc_58E5:
		dc.b    $06, $30, $30, $30, $28, $18, $18, $18
loc_58ED:
		dc.b    $08, $02, $04, $FF, $02, $03, $08, $FF, $04, $02, $02, $03, $08, $FD, $04, $02
		dc.b    $02, $03, $02, $FF, $00		            
;===============================================================================
; Special Stage
; [ End ]              
;===============================================================================		  
		nop		             ; Filler   
; ---------------------------------------------------------------------------
; Subroutine to load level boundaries and start locations
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_5904:
LevelSizeLoad:
		clr.w	(Scroll_flags).w
		clr.w	(Scroll_flags_BG).w
		clr.w	(Scroll_flags_BG2).w
		clr.w	(Scroll_flags_BG3).w
		clr.w	(Scroll_flags_P2).w
		clr.w	(Scroll_flags_BG_P2).w
		clr.w	(Scroll_flags_BG2_P2).w
		clr.w	(Scroll_flags_BG3_P2).w
		clr.w	(Scroll_flags_copy).w
		clr.w	(Scroll_flags_BG_copy).w
		clr.w	(Scroll_flags_BG2_copy).w
		clr.w	(Scroll_flags_BG3_copy).w
		clr.w	(Scroll_flags_copy_P2).w
		clr.w	(Scroll_flags_BG_copy_P2).w
		clr.w	(Scroll_flags_BG2_copy_P2).w
		clr.w	(Scroll_flags_BG3_copy_P2).w
		clr.b	(Deform_lock).w
		clr.b	(Screen_Shaking_Flag_HTZ).w
		clr.b	(Screen_Shaking_Flag).w
		moveq	#0,d0
		move.b	d0,(Dynamic_Resize_Routine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#4,d0
		lea	LevelSize(pc,d0.w),a0
		move.l	(a0)+,d0
		move.l	d0,(Camera_Min_X_pos).w
		move.l	d0,(unk_EEC0).w
		move.l	(a0)+,d0
		move.l	d0,(Camera_Min_Y_pos).w
		move.l	d0,(unk_EEC4).w
		move.w	#$1010,(Horiz_block_crossed_flag).w
		move.w	#$60,(Camera_Y_pos_bias).w
		bra.w	LevelSize_CheckLamp
; ===========================================================================
; ---------------------------------------------------------------------------
; LEVEL SIZE ARRAY

; This array defines the screen boundaries for each act in the game.
; ---------------------------------------------------------------------------
; loc_5986: Level_Size_Array:
LevelSize:	zoneOrderedTable 4,4
	zoneTableEntry.l    $000029A0, $00000320, $00002940, $00000420 ; $00 - Green Hill
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $01
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $02 - Wood
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $03 
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $04 - Metropolis
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $05 - Metropolis
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $06
	zoneTableEntry.l    $00002800, $00000720, $00002880, $00000720 ; $07 - Hill Top
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $08 - Hidden Palace
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $09
	zoneTableEntry.l    $00002F80, $00000680, $00002580, $00000680 ; $0A - Oil Ocean
	zoneTableEntry.l    $00002380, $03C00720, $00002180, $00600720 ; $0B - Dust Hill
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $0C - Casino Night
	zoneTableEntry.l    $00002780, $00000720, $00002880, $00000720 ; $0D - Chemical Plant
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $0E - Genocide City
	zoneTableEntry.l    $000028C0, $020003A0, $000026C0, $018005A0 ; $0F - Neo Green Hill
	zoneTableEntry.l    $00003FFF, $00000720, $00003FFF, $00000720 ; $10 - Death Egg
    zoneTableEnd

; ===========================================================================
; loc_5A96: Level_Size_Check_Lamp_Post:
LevelSize_CheckLamp:
		tst.b	(Last_star_pole_hit).w
		beq.s	LevelSize_StartLoc
		jsr	(Lamp_Post_Load_Info).l
		move.w	($FFFFB008).w,d1
		move.w	($FFFFB00C).w,d0
		bra.s	LevelSize_PreventUnderflow
; ===========================================================================
; loc_5AAC: Level_Size_Start_Loc:
LevelSize_StartLoc:
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#5,d0
		lea	StartLocations(pc,d0.w),a1
		moveq	#0,d1
		move.w	(a1)+,d1
		move.w	d1,($FFFFB008).w
		moveq	#0,d0
		move.w	(a1),d0
		move.w	d0,($FFFFB00C).w
; loc_5AC8: Level_Size_Start_Loc_Loaded:
LevelSize_PreventUnderflow:
		subi.w	#$A0,d1
		bcc.s	loc_5AD0
		moveq	#0,d1

loc_5AD0:
		move.w  (Camera_Max_X_pos).w, D2
		cmp.w   D2, D1
		bcs.s   loc_5ADA
		move.w  D2, D1
loc_5ADA:
		move.w  D1, (Camera_X_pos).w
		move.w  D1, (Camera_X_pos_P2).w
		subi.w  #$0060, D0
		bcc.s   loc_5AEA
		moveq   #$00, D0
loc_5AEA:
		cmp.w   (Camera_Max_Y_pos_now).w, D0
		blt.s   loc_5AF4
		move.w  (Camera_Max_Y_pos_now).w, D0
loc_5AF4:
		move.w  D0, (Camera_Y_pos).w
		move.w  D0, (Camera_Y_pos_P2).w
		bsr.w     Background_Scroll_Speed ; loc_5B8A
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; CHARACTER START LOCATION ARRAY

; 2 entries per act, corresponding to the X and Y locations that you want the player to
; appear at when the level starts.
; ---------------------------------------------------------------------------
; loc_5B02: Player_Start_Position_Array:
StartLocations: zoneOrderedTable 2,4
	zoneTableBinEntry	2, "level/startpos/GHZ_1.bin"	; $00 - GHZ
	zoneTableBinEntry	2, "level/startpos/GHZ_2.bin"
	zoneTableEntry.w	$60, $28F			; $01 - OWZ
	zoneTableEntry.w	$40, $2AF
	zoneTableBinEntry	2, "level/startpos/WZ_1.bin"	; $02 - WZ
	zoneTableBinEntry	2, "level/startpos/WZ_2.bin"
	zoneTableEntry.w	$60, $28F			; $03 - SSZ
	zoneTableEntry.w	$40, $2AF
	zoneTableBinEntry	2, "level/startpos/MTZ_1.bin"	; $04 - MTZ
	zoneTableBinEntry	2, "level/startpos/MTZ_2.bin"
	zoneTableBinEntry	2, "level/startpos/MTZ_3.bin"	; $05 - MTZ2
	zoneTableBinEntry	2, "level/startpos/MTZ_4.bin"
	zoneTableEntry.w	$60, $28F			; $06 - BLZ
	zoneTableEntry.w	$40, $2AF
	zoneTableBinEntry	2, "level/startpos/HTZ_1.bin"	; $07 - HTZ
	zoneTableBinEntry	2, "level/startpos/HTZ_2.bin"
	zoneTableBinEntry	2, "level/startpos/HPZ_1.bin"	; $08 - HPZ
	zoneTableBinEntry	2, "level/startpos/HPZ_2.bin"
	zoneTableEntry.w	$60, $28F			; $09 - RWZ
	zoneTableEntry.w	$40, $2AF
	zoneTableBinEntry	2, "level/startpos/OOZ_1.bin"	; $0A - OOZ
	zoneTableBinEntry	2, "level/startpos/OOZ_2.bin"
	zoneTableBinEntry	2, "level/startpos/DHZ_1.bin"	; $0B - DHZ
	zoneTableBinEntry	2, "level/startpos/DHZ_2.bin"
	zoneTableBinEntry	2, "level/startpos/CNZ_1.bin"	; $0C - CNZ
	zoneTableBinEntry	2, "level/startpos/CNZ_2.bin"
	zoneTableBinEntry	2, "level/startpos/CPZ_1.bin"	; $0D - CPZ
	zoneTableBinEntry	2, "level/startpos/CPZ_2.bin"
	zoneTableEntry.w	$60, $28F			; $0E - GCZ
	zoneTableEntry.w	$40, $2AF
	zoneTableBinEntry	2, "level/startpos/NGHZ_1.bin"	; $0F - NGHZ
	zoneTableBinEntry	2, "level/startpos/NGHZ_2.bin"
	zoneTableEntry.w	$60, $28F			; $10 - DEZ
	zoneTableEntry.w	$40, $2AF
Background_Scroll_Speed: ; loc_5B8A: ; Background Position
		tst.b   (Last_star_pole_hit).w
		bne.s   loc_5BB8
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Camera_BG2_Y_pos).w
		move.w  D1, (Camera_BG_X_pos).w
		move.w  D1, (Camera_BG2_X_pos).w
		move.w  D1, (Camera_BG3_X_pos).w
		move.w  D0, (Camera_BG_Y_pos_P2).w
		move.w  D0, (Camera_BG2_Y_pos_P2).w
		move.w  D1, (Camera_BG_X_pos_P2).w
		move.w  D1, (Camera_BG2_X_pos_P2).w
		move.w  D1, (Camera_BG3_X_pos_P2).w   
loc_5BB8:		
		moveq   #$00, D2
		move.b  (Current_Zone).w, D2
		add.w   D2, D2
		move.w  Bg_Scroll_Speed_Index(PC, D2), D2 ; loc_5BC8
		jmp     Bg_Scroll_Speed_Index(PC, D2) ; loc_5BC8
; off_5BC8:
Bg_Scroll_Speed_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_GHz ; $00 - Green Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null ; $01 - Null Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Wz ; $02 - Wood Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null ; $03 - Null Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Mz ; $04 - Metropolis Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Mz ; $05 - Metropolis Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null ; $06 - Null Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_HTz ; $07 - Hill Top Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_HPz ; $08 - Hidden Palace Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null2 ; $09 - Null Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_OOz ; $0A - Oil Ocean Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_DHz ; $0B - Dust Hill Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_CNz ; $0C - Casino Night Background Position
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_CPz ; $0D - Chemical Plant Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null3 ; $0E - Genocide City Background Position (Null)
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_NGHz ; $0F - Neo Green Hill Background Position 
	zoneOffsetTableEntry.w    Bg_Scroll_Speed_Null4 ; $10 - Death Egg Background Position (Null)
    zoneTableEnd

Bg_Scroll_Speed_GHz: ; loc_5BEA: ; Green Hill Background Position
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG_Y_pos).w
		clr.l   (Camera_BG2_Y_pos).w
		clr.l   (Camera_BG3_Y_pos).w
		lea     (TempArray_LayerDef).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (Camera_BG_X_pos_P2).w
		clr.l   (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG2_Y_pos_P2).w
		clr.l   (Camera_BG3_Y_pos_P2).w
		rts               
Bg_Scroll_Speed_Null: ; loc_5C16: ; Null
		rts   
Bg_Scroll_Speed_Wz: ; loc_5C18: ; Wood Background Position               
		asr.w   #$02, D0
		addi.w  #$0400, D0
		move.w  D0, (Camera_BG_Y_pos).w
		asr.w   #$03, D1
		move.w  D1, (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_Mz: ; loc_5C2A: ; Metropolis Background Position		 
		asr.w   #$02, D0
		move.w  D0, (Camera_BG_Y_pos).w
		asr.w   #$03, D1
		move.w  D1, (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_HTz: ; loc_5C38: ; Hill Top Background Position  
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG_Y_pos).w
		clr.l   (Camera_BG2_Y_pos).w
		clr.l   (Camera_BG3_Y_pos).w
		lea     (TempArray_LayerDef).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (Camera_BG_X_pos_P2).w
		clr.l   (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG2_Y_pos_P2).w
		clr.l   (Camera_BG3_Y_pos_P2).w
		rts
Bg_Scroll_Speed_HPz: ; loc_5C64: ; Hidden Palace Background Position  
		asr.w   #$01, D0
		move.w  D0, (Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts 
Bg_Scroll_Speed_S1_Spring_Yard: ; loc_5C70:  
		asl.l   #$04, D0
		move.l  D0, D2
		asl.l   #$01, D0
		add.l   D2, D0
		asr.l   #$08, D0
		addq.w  #$01, D0
		move.w  D0, (Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts
Bg_Scroll_Speed_Null2: ; loc_5C86:
		rts  
Bg_Scroll_Speed_OOz: ; loc_5C88: ; Oil Ocean Background Position 
		lsr.w   #$03, D0
		addi.w  #$0050, D0
		move.w  D0, (Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts    
Bg_Scroll_Speed_S1_Spring_Yard2: ; loc_5C98: 
		asl.l   #$04, D0
		move.l  D0, D2
		asl.l   #$01, D0
		add.l   D2, D0
		asr.l   #$08, D0
		addq.w  #$01, D0
		move.w  D0, (Camera_BG_Y_pos).w
		clr.l   (Camera_BG_X_pos).w
		rts		
;loc_5CAE: 
		asr.w   #$03, D0
		move.w  D0, (Camera_BG_Y_pos).w
		rts		
Bg_Scroll_Speed_DHz: ; loc_5CB6: ; Dust Hill Background Position
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG_X_pos_P2).w
		tst.b   (Current_Act).w
		bne.s   loc_5CD6
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Camera_BG_Y_pos_P2).w
		rts
loc_5CD6: 
		divu.w  #$0006, D0
		subi.w  #$0010, D0
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Camera_BG_Y_pos_P2).w
		rts   
Bg_Scroll_Speed_CNz: ; loc_5CE8: ; Casino Night Background Position 
		lsr.w   #$06, D0
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG_X_pos).w
		lea     (TempArray_LayerDef).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (Camera_BG_X_pos_P2).w
		clr.l   (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG2_Y_pos_P2).w
		clr.l   (Camera_BG3_Y_pos_P2).w
		rts								      
Bg_Scroll_Speed_CPz: ; loc_5D12: ; Chemical Plant Background Position 
		lsr.w   #$02, D0
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Camera_BG_Y_pos_P2).w
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG2_X_pos).w
		rts
Bg_Scroll_Speed_Null3: ; loc_5D26: ; Genocide City Background Position (Null)
		rts    
Bg_Scroll_Speed_NGHz: ; loc_5D28: ; Neo Green Hill Background Position 
		tst.b   (Current_Act).w
		beq.s   loc_5D3A
		subi.w  #$00E0, D0
		lsr.w   #$01, D0
		move.w  D0, (Camera_BG_Y_pos).w
		bra.s   loc_5D42
loc_5D3A:
		subi.w  #$0180, D0
		move.w  D0, (Camera_BG_Y_pos).w
loc_5D42:
		clr.l   (Camera_BG_X_pos).w
		clr.l   (Camera_BG2_Y_pos).w
		clr.l   (Camera_BG3_Y_pos).w
		lea     (TempArray_LayerDef).w, A2
		clr.l   (A2)+
		clr.l   (A2)+
		clr.l   (A2)+
		rts		
Bg_Scroll_Speed_Null4: ; loc_5D5A: ; Death Egg Background Position (Null)
		rts              
Background_Scroll_Layer: ; loc_5D5C:
		tst.b   (Deform_lock).w
		beq.s   loc_5D64
		rts   
loc_5D64:  
		clr.w   (Scroll_flags).w
		clr.w   (Scroll_flags_BG).w
		clr.w   (Scroll_flags_BG2).w
		clr.w   (Scroll_flags_BG3).w
		clr.w   (Scroll_flags_P2).w
		clr.w   (Scroll_flags_BG_P2).w
		clr.w   (Scroll_flags_BG2_P2).w
		clr.w   (Scroll_flags_BG3_P2).w
		lea     ($FFFFB000).w, A0
		lea     (Camera_X_pos).w, A1
		lea     (Horiz_block_crossed_flag).w, A2
		lea     (Scroll_flags).w, A3
		lea     (Camera_X_pos_diff).w, A4
		lea     (Horiz_scroll_delay_val).w, A5
		lea     (Sonic_Pos_Record_Buf).w, A6
		bsr.w     Scroll_Horizontal       ; loc_6AEC
		lea     (Camera_Y_pos).w, A1
		lea     (Verti_block_crossed_flag).w, A2
		lea     (Camera_Y_pos_diff).w, A4
		bsr.w     Scroll_Vertical         ; loc_6B84
		tst.w   (Two_player_mode).w
		beq.s   loc_5DEA
		lea     ($FFFFB040).w, A0
		lea     (Camera_X_pos_P2).w, A1
		lea     (Horiz_block_crossed_flag_P2).w, A2
		lea     (Scroll_flags_P2).w, A3
		lea     (Camera_X_pos_diff_P2).w, A4
		lea     (Horiz_scroll_delay_val_P2).w, A5
		lea     (Tails_Pos_Record_Buf).w, A6
		bsr.w     Scroll_Horizontal       ; loc_6AEC
		lea     (Camera_Y_pos_P2).w, A1
		lea     (Verti_block_crossed_flag_P2).w, A2
		lea     (Camera_Y_pos_diff_P2).w, A4
		bsr.w     Scroll_Vertical         ; loc_6B84
loc_5DEA:		
		bsr.w     Dyn_Screen_Boss_Loader  ; loc_79C0
		move.w  (Camera_Y_pos).w, (Vscroll_Factor_FG).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		move.l  (Camera_X_pos).w, (Camera_X_pos_copy).w
		move.l  (Camera_Y_pos).w, (Camera_Y_pos_copy).w
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		move.w  Bg_Scroll_Index(PC, D0), D0 ; loc_5E16
		jmp     Bg_Scroll_Index(PC, D0) ; loc_5E16
; off_5E16:
Bg_Scroll_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w    Bg_Scroll_GHz; $00 - Green Hill Background Scroll   
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $01 - Null Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_Wz; $02 - Wood Background Scroll  
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $03 - Null Background Scroll  
	zoneOffsetTableEntry.w    Bg_Scroll_Mz; $04 - Metropolis Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_Mz; $05 - Metropolis Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $06 - Null Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_HTz; $07 - Hill Top Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_HPz; $08 - Hidden Palace Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $09 - Null Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_OOz; $0A - Oil Ocean Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_DHz; $0B - Dust Hill Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_CNz; $0C - Casino Night Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_CPz; $0D - Chemical Plant Background Scroll               
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $0E - Genocide City (Null) Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_NGHz; $0F - Neo Green Hill Background Scroll 
	zoneOffsetTableEntry.w    Bg_Scroll_Null; $10 - Death Egg (Null) Background Scroll    
    zoneTableEnd

loc_5E38: ; Title Screen Background Scroll
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		move.w  (Camera_X_pos).w, D0
		cmpi.w  #$1C00, D0
		bcc.s   loc_5E4A
		addq.w  #$08, D0
loc_5E4A:
		move.w  D0, (Camera_X_pos).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_X_pos).w, D2
		neg.w   D2
		moveq   #$00, D0
		bra.s   loc_5E78
Bg_Scroll_GHz: ; loc_5E5C: ; $00 - Green Hill Background Scroll		
		tst.w   (Two_player_mode).w
		bne.w    loc_5FA2
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		move.w  D0, D2
		swap  D0
loc_5E78:		
		move.w  #$0000, D0
		move.w  #$0015, D1
loc_5E80:
		move.l  D0, (A1)+
		dbf    D1, loc_5E80
		move.w  D2, D0
		asr.w   #$06, D0
		move.w  #$0039, D1  
loc_5E8E:
		move.l  D0, (A1)+
		dbf    D1, loc_5E8E
		move.w  D0, D3
		move.b  (Vint_runcount+3).w, D1
		andi.w  #$0007, D1
		bne.s   loc_5EA4
		subq.w  #$01, (TempArray_LayerDef).w
loc_5EA4:
		move.w  (TempArray_LayerDef).w, D1
		andi.w  #$001F, D1
		lea     (loc_5F60).l, A2
		lea     $00(A2, D1), A2
		move.w  #$0014, D1
loc_5EBA:
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbf    D1, loc_5EBA
		
		move.w  #$0000, D0
		move.w  #$000A, D1     
loc_5ECE:
		move.l  D0, (A1)+
		dbf    D1, loc_5ECE
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  #$000F, D1
loc_5EDC:
		move.l  D0, (A1)+
		dbf    D1, loc_5EDC
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  D0, D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  #$000F, D1
loc_5EF0:
		move.l  D0, (A1)+
		dbf    D1, loc_5EF0
		move.l  D0, D4
		swap  D4
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  D2, D1
		asr.w   #$03, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0030, D0
		ext.l   D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$03, D3
		move.w  #$000E, D1
loc_5F1A:		
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap  D3
		add.l   D0, D3
		swap  D3
		dbf    D1, loc_5F1A
		move.w  #$0008, D1               
loc_5F2C:
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		dbf    D1, loc_5F2C
		move.w  #$000E, D1
loc_5F44:		
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		move.w  D4, (A1)+
		move.w  D3, (A1)+
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		dbf    D1, loc_5F44               
		rts   
loc_5F60:		 
		dc.b    $01, $02, $01, $03, $01, $02, $02, $01, $02, $03, $01, $02, $01, $02, $00, $00
		dc.b    $02, $00, $03, $02, $02, $03, $02, $02, $01, $03, $00, $00, $01, $00, $01, $03
		dc.b    $01, $02, $01, $03, $01, $02, $02, $01, $02, $03, $01, $02, $01, $02, $00, $00
		dc.b    $02, $00, $03, $02, $02, $03, $02, $02, $01, $03, $00, $00, $01, $00, $01, $03
		dc.b    $01, $02               
loc_5FA2:
		move.b  (Vint_runcount+3).w, D1
		andi.w  #$0007, D1
		bne.s   loc_5FB0
		subq.w  #$01, (TempArray_LayerDef).w
loc_5FB0:		
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_X_pos).w, D0
		move.w  #$000A, D1 
		bsr.s   loc_5FF8
		moveq   #$00, D0
		move.w  D0, (Vscroll_Factor_P2_BG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_BG).w
		move.w  (Camera_Y_pos_P2).w, (Vscroll_Factor_P2_FG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_FG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor_P2).w
		lea     ($FFFFE1B0).w, A1
		move.w  (Camera_X_pos_P2).w, D0
		move.w  #$000E, D1
loc_5FF8:
		neg.w   D0
		move.w  D0, D2
		swap  D0
		move.w  #$0000, D0
loc_6002:
		move.l  D0, (A1)+
		dbf    D1, loc_6002
		move.w  D2, D0
		asr.w   #$06, D0
		move.w  #$001C, D1
loc_6010:
		move.l  D0, (A1)+
		dbf    D1, loc_6010
		move.w  D0, D3
		move.w  (TempArray_LayerDef).w, D1
		andi.w  #$001F, D1
		lea     loc_5F60(PC), A2
		lea     $00(A2, D1), A2
		move.w  #$000A, D1
loc_602C:		
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbf    D1, loc_602C    
		move.w  #$0000, D0
		move.w  #$0004, D1
loc_6040:
		move.l  D0, (A1)+
		dbf    D1, loc_6040
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  #$0007, D1
loc_604E:
		move.l  D0, (A1)+
		dbf    D1, loc_604E
		move.w  D2, D0
		asr.w   #$04, D0
		move.w  D0, D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  #$0007, D1
loc_6062:
		move.l  D0, (A1)+
		dbf    D1, loc_6062
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  D2, D1
		asr.w   #$03, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0030, D0
		ext.l   D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$03, D3
		move.w  #$0027, D1
loc_6088:		
		move.w  D2, (A1)+
		move.w  D3, (A1)+
		swap  D3
		add.l   D0, D3
		swap  D3
		dbf    D1, loc_6088    
		rts		  
Bg_Scroll_Wz: ; loc_6098: ; Wood Background Scroll
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$06, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_60C8:
		move.l  D0, (A1)+
		dbf    D1, loc_60C8
		rts               
Bg_Scroll_Mz: ; loc_60D0: ; Metropolis Background Scroll 
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$06, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_6100:
		move.l  D0, (A1)+
		dbf    D1, loc_6100
		rts		     
Bg_Scroll_HTz: ; loc_6108: ; Hill Top Background Scroll 
		tst.w   (Two_player_mode).w
		bne.w    loc_62B4
		tst.b   (Screen_Shaking_Flag_HTZ).w
		bne.w    loc_6236
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		move.w  D0, D2
		swap  D0
		move.w  D2, D0
		asr.w   #$03, D0
		move.w  #$007F, D1
loc_6134:
		move.l  D0, (A1)+
		dbf    D1, loc_6134
		move.l  D0, D4
		move.w  (TempArray_LayerDef+$22).w, D0
		addq.w  #$04, (TempArray_LayerDef+$22).w
		sub.w   D0, D2
		move.w  D2, D0
		move.w  D0, D1
		asr.w   #$01, D0
		asr.w   #$04, D1
		sub.w   D1, D0
		ext.l   D0
		asl.l   #$08, D0
		divs.w  #$0070, D0
		ext.l   D0
		asl.l   #$08, D0
		lea     (TempArray_LayerDef).w, A2
		moveq   #$00, D3
		move.w  D1, D3
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A2)+
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A2)+
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		moveq   #$03, D1
loc_6188:
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		move.w  D3, (A2)+
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		dbf    D1, loc_6188
		add.l   D0, D0
		add.l   D0, D0
		move.w  D3, D4
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, D4
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		move.l  D4, (A1)+
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, D4
		move.w  #$0006, D1
loc_61C6:
		move.l  D4, (A1)+
		dbf    D1, loc_61C6
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		move.w  D3, D4
		move.w  #$0007, D1
loc_61DA:
		move.l  D4, (A1)+
		dbf    D1, loc_61DA
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		move.w  D3, D4
		move.w  #$0009, D1
loc_61EE:
		move.l  D4, (A1)+
		dbf    D1, loc_61EE
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		move.w  D3, D4
		move.w  #$000E, D1
loc_6204:
		move.l  D4, (A1)+
		dbf    D1, loc_6204
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		move.w  #$0002, D2
loc_6218:
		move.w  D3, D4
		move.w  #$000F, D1
loc_621E:
		move.l  D4, (A1)+
		dbf    D1, loc_621E
		swap  D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		add.l   D0, D3
		swap  D3
		dbf    D2, loc_6218 
		rts
loc_6236:
		move.w  (Camera_BG_X_pos_diff).w, D4
		ext.l   D4
		lsl.l   #$08, D4
		moveq   #$02, D6
		bsr.w     Scroll_Block2           ; loc_6D1E
		move.w  (Camera_BG_Y_pos_diff).w, D5
		ext.l   D5
		lsl.l   #$08, D5
		moveq   #$00, D6
		bsr.w     Scroll_Block3           ; loc_6D52
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		move.w  (Camera_Y_pos).w, (Vscroll_Factor_FG).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		moveq   #$00, D2
		tst.b   (Screen_Shaking_Flag).w
		beq.s   loc_6292
		move.w  (Timer_frames).w, D0
		andi.w  #$003F, D0
		lea     loc_5F60(PC), A1
		lea     $00(A1, D0), A1
		moveq   #$00, D0
		move.b  (A1)+, D0
		add.w   D0, (Vscroll_Factor_FG).w
		add.w   D0, (Vscroll_Factor_BG).w
		add.w   D0, (Camera_Y_pos_copy).w
		move.b  (A1)+, D2
		add.w   D2, (Camera_X_pos_copy).w
loc_6292:
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		add.w   D2, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		add.w   D2, D0
		neg.w   D0
loc_62AC:
		move.l  D0, (A1)+
		dbf    D1, loc_62AC
		rts
loc_62B4:
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$02, D5
		moveq   #$00, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.b  #$00, (Scroll_flags_BG).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$006F, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_62F4:
		move.l  D0, (A1)+
		dbf    D1, loc_62F4
		move.w  (Camera_X_pos_diff_P2).w, D4
		ext.l   D4
		asl.l   #$06, D4
		add.l   D4, (Camera_BG_X_pos_P2).w
		moveq   #$00, D0
		move.w  D0, (Vscroll_Factor_P2_BG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_BG).w
		move.w  (Camera_Y_pos_P2).w, (Vscroll_Factor_P2_FG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_FG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor_P2).w
		lea     ($FFFFE1B0).w, A1
		move.w  #$0073, D1
		move.w  (Camera_X_pos_P2).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos_P2).w, D0
		neg.w   D0
loc_633C:
		move.l  D0, (A1)+
		dbf    D1, loc_633C
		rts		 
Bg_Scroll_HPz: ; loc_6344: ; Hidden Palace Background Scroll 
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$06, D4
		moveq   #$02, D6
		bsr.w     Scroll_Block2           ; loc_6D1E
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$07, D5
		moveq   #$06, D6
		bsr.w     Scroll_Block3           ; loc_6D52
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (TempArray_LayerDef).w, A1
		move.w  (Camera_X_pos).w, D2
		neg.w   D2
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  #$0007, D1
loc_6378:
		move.w  D0, (A1)+
		dbf    D1, loc_6378
		move.w  D2, D0
		asr.w   #$03, D0
		sub.w   D2, D0
		ext.l   D0
		asl.l   #$03, D0
		divs.w  #$0008, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		moveq   #$00, D3
		move.w  D2, D3
		asr.w   #$01, D3
		lea     (TempArray_LayerDef+$60).w, A2
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A1)+
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  D3, -(A2)
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		swap  D3
		add.l   D0, D3
		swap  D3
		move.w  D3, (A1)+
		move.w  D3, -(A2)
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
		move.w  #$0019, D1
loc_63DA:
		move.w  D0, (A1)+
		dbf    D1, loc_63DA
		adda.w  #$000E, A1
		move.w  D2, D0
		asr.w   #$01, D0
		move.w  #$0017, D1
loc_63EC:
		move.w  D0, (A1)+
		dbf    D1, loc_63EC
		lea     (TempArray_LayerDef).w, A2
		move.w  (Camera_BG_Y_pos).w, D0
		move.w  D0, D2
		andi.w  #$03F0, D0
		lsr.w   #$03, D0
		lea     $00(A2, D0), A2
		bra.w     loc_6AA8
Bg_Scroll_OOz: ; loc_640A: ; Oil Ocean Background Scroll               
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$05, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_643A:
		move.l  D0, (A1)+
		dbf    D1, loc_643A
		rts
Bg_Scroll_DHz: ; loc_6442: ; Dust Hill Background Scroll		
		tst.w   (Two_player_mode).w
		bne.w     loc_656C
		move.w  (Camera_Y_pos).w, D0
		move.l  (Camera_BG_Y_pos).w, D3
		tst.b   (Current_Act).w
		bne.s   loc_6462
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   loc_646A
loc_6462:  
		divu.w  #$0006, D0
		subi.w  #$0010, D0
loc_646A:   
		swap  D0
		moveq   #$06, D6
		bsr.w     loc_6D5A
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (TempArray_LayerDef).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X_pos).w, D0
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     (loc_6554).l, A3
		lea     (TempArray_LayerDef).w, A2
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_BG_Y_pos).w, D1
		moveq   #$00, D0
loc_6526:		
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   loc_6526      
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$00DF, D2
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (A2)+, D0
		neg.w   D0
loc_6542:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   loc_654E
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
loc_654E:
		dbf    D2, loc_6542
		rts
loc_6554:
		dc.b    $25, $17, $12, $07, $07, $02, $02, $30, $0D, $13, $20, $40, $20, $13, $0D, $30
		dc.b    $02, $02, $07, $07, $20, $12, $17, $25
loc_656C:
		moveq   #$00, D0
		move.w  (Camera_Y_pos).w, D0
		tst.b   (Current_Act).w
		bne.s   loc_6582
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   loc_658A
loc_6582:
		divu.w  #$0006, D0
		subi.w  #$0010, D0
loc_658A:
		move.w  D0, (Camera_BG_Y_pos).w
		move.w  D0, (Vscroll_Factor_BG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor).w
		lea     (TempArray_LayerDef).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X_pos).w, D0
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     (loc_6678).l, A3
		lea     (TempArray_LayerDef).w, A2
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_BG_Y_pos).w, D1
		lsr.w   #$01, D1
		moveq   #$00, D0
loc_664A:
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   loc_664A        
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$006F, D2
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (A2)+, D0
		neg.w   D0
loc_6666:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   loc_6672
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
loc_6672:
		dbf    D2, loc_6666   
		bra.s   loc_6690
loc_6678:
		dc.b    $13
loc_6679:
		dc.b    $0B, $09, $04, $03, $01, $01, $18, $06, $0A, $10, $20, $10, $0A, $06, $18, $01
		dc.b    $01, $03, $04, $10, $09, $0B, $13
loc_6690:
		moveq   #$00, D0
		move.w  (Camera_Y_pos_P2).w, D0
		tst.b   (Current_Act).w
		bne.s   loc_66A6
		divu.w  #$0003, D0
		subi.w  #$0140, D0
		bra.s   loc_66AE
loc_66A6:
		divu.w  #$0006, D0
		subi.w  #$0010, D0
loc_66AE:
		move.w  D0, (Camera_BG_Y_pos_P2).w
		move.w  D0, (Vscroll_Factor_P2_BG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_BG).w
		move.w  (Camera_Y_pos_P2).w, (Vscroll_Factor_P2_FG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_FG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor_P2).w
		lea     (TempArray_LayerDef).w, A2
		lea     $001E(A2), A3
		move.w  (Camera_X_pos_P2).w, D0
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000E(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $000A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0008(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0006(A2)
		move.w  D1, $0010(A2)
		move.w  D1, $001C(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0004(A2)
		move.w  D1, $0012(A2)
		move.w  D1, $001A(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, $0002(A2)
		move.w  D1, $0014(A2)
		move.w  D1, $0018(A2)
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0016(A2)
		lea     loc_6679(PC), A3
		lea     (TempArray_LayerDef).w, A2
		lea     ($FFFFE1B0).w, A1
		move.w  (Camera_BG_Y_pos_P2).w, D1
		lsr.w   #$01, D1
		moveq   #$17, D0
		bra.s   loc_6782
loc_6780:
		move.b  (A3)+, D0
loc_6782:		
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   loc_6780
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$0073, D2
		move.w  (Camera_X_pos_P2).w, D0
		neg.w   D0
		swap  D0
		move.w  (A2)+, D0
		neg.w   D0
loc_679C:
		move.l  D0, (A1)+
		subq.w  #$01, D1  
		bne.s   loc_67A8
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
loc_67A8:		
		dbf    D2, loc_679C
		rts		 
Bg_Scroll_CNz: ; loc_67AE: ; Casino Night Background Scroll 
		tst.w   (Two_player_mode).w
		bne.w     loc_67F2
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$02, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		clr.b   (Scroll_flags_BG).w
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_67EA:
		move.l  D0, (A1)+
		dbf    D1, loc_67EA
		rts
loc_67F2:
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$06, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$02, D5
		moveq   #$00, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$006F, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_682C:
		move.l  D0, (A1)+
		dbf    D1, loc_682C
		move.w  (Camera_X_pos_diff_P2).w, D4
		ext.l   D4
		asl.l   #$06, D4
		add.l   D4, (Camera_BG_X_pos_P2).w
		moveq   #$00, D0
		move.w  D0, (Vscroll_Factor_P2_BG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_BG).w
		move.w  (Camera_Y_pos_P2).w, (Vscroll_Factor_P2_FG).w
		subi.w  #$00E0, (Vscroll_Factor_P2_FG).w
		andi.l  #$FFFEFFFE, (Vscroll_Factor_P2).w
		lea     ($FFFFE1B0).w, A1
		move.w  #$0073, D1
		move.w  (Camera_X_pos_P2).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos_P2).w, D0
		neg.w   D0
loc_6874:
		move.l  D0, (A1)+
		dbf    D1, loc_6874
		rts		 
Bg_Scroll_CPz: ; loc_687C: ; Chemical Plant Background Scroll
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$06, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$07, D4
		moveq   #$04, D6
		bsr.w     Scroll_Block4           ; loc_6D86
		move.w  (Camera_BG_Y_pos).w, D0
		move.w  D0, (Camera_BG2_Y_pos).w
		move.w  D0, (Vscroll_Factor_BG).w
		move.b  (Scroll_flags_BG).w, D0
		or.b    (Scroll_flags_BG2).w, D0
		move.b  D0, (Scroll_flags_BG3).w
		clr.b   (Scroll_flags_BG).w
		clr.b   (Scroll_flags_BG2).w
		move.b  (Vint_runcount+3).w, D1
		andi.w  #$0007, D1
		bne.s   loc_68CC
		subq.w  #$01, (TempArray_LayerDef).w
loc_68CC:
		lea     (loc_718F).l, A0
		move.w  (Camera_BG_Y_pos).w, D0
		move.w  D0, D2
		andi.w  #$03F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		move.w  D0, D4
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$000E, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		andi.w  #$000F, D2
		move.w  (Camera_BG_X_pos).w, D0
		cmpi.b  #$12, D4
		beq.s   loc_694A
		bcs.s   loc_6908
		move.w  (Camera_BG2_X_pos).w, D0
loc_6908:
		neg.w   D0
		add.w   D2, D2
		jmp     loc_6922(PC, D2)
loc_6910:		
		move.w  (Camera_BG_X_pos).w, D0
		cmpi.b  #$12, D4
		beq.s   loc_6954
		bcs.s   loc_6920
		move.w  (Camera_BG2_X_pos).w, D0
loc_6920:
		neg.w   D0
loc_6922:
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		addq.b  #$01, D4
		dbf    D1, loc_6910 
		rts
loc_694A:
		move.w  #$000F, D0
		sub.w   D2, D0
		move.w  D0, D2
		bra.s   loc_6958
loc_6954:
		move.w  #$000F, D2
loc_6958:
		move.w  (Camera_BG_X_pos).w, D3
		neg.w   D3
		move.w  (TempArray_LayerDef).w, D0
		andi.w  #$001F, D0
		lea     loc_5F60(PC), A2
		lea     $00(A2, D0), A2
loc_696E:
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.l  D0, (A1)+
		dbf    D2, loc_696E   
		addq.b  #$01, D4
		dbf    D1, loc_6910
		rts				 
Bg_Scroll_NGHz: ; loc_6982: ; Neo Green Hill Background Scroll  
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		muls.w  #$0119, D4
		moveq   #$02, D6
		bsr.w     Scroll_Block2           ; loc_6D1E
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$07, D5
		tst.b   (Current_Act).w
		bne.s   loc_69A2
		asl.l   #$01, D5
loc_69A2:
		moveq   #$06, D6
		bsr.w     Scroll_Block3           ; loc_6D52
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (TempArray_LayerDef).w, A2
		lea     $0006(A2), A3
		move.w  (Camera_X_pos).w, D0
		ext.l   D0
		asl.l   #$04, D0
		divs.w  #$000A, D0
		ext.l   D0
		asl.l   #$04, D0
		asl.l   #$08, D0
		move.l  D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D1, D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		swap  D1
		add.l   D0, D1
		swap  D1
		move.w  D1, (A3)+
		move.w  D1, (A2)
		move.w  D1, $0004(A2)
		move.w  (Camera_BG_X_pos).w, D0
		move.w  D0, $0002(A2)
		move.w  D0, $0016(A2)
		_move.w  D0, 0(A2)
		move.w  D0, $0004(A2)
		lea     (loc_6A64).l, A3
		lea     (TempArray_LayerDef).w, A2
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  (Camera_BG_Y_pos).w, D1
		moveq   #$00, D0
loc_6A36:		
		move.b  (A3)+, D0
		addq.w  #$02, A2
		sub.w   D0, D1
		bcc.s   loc_6A36 
		neg.w   D1
		subq.w  #$02, A2
		move.w  #$00DF, D2
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (A2)+, D0
		neg.w   D0
loc_6A52:
		move.l  D0, (A1)+
		subq.w  #$01, D1
		bne.s   loc_6A5E
		move.b  (A3)+, D1
		move.w  (A2)+, D0
		neg.w   D0
loc_6A5E:
		dbf    D2, loc_6A52
		rts
loc_6A64:
		dc.b    $B0, $70, $30, $60, $15, $0C, $0E, $06, $0C, $1F, $30, $C0
Bg_Scroll_Null: ; loc_6A70: ; Null Background Scroll
		move.w  (Camera_X_pos_diff).w, D4
		ext.l   D4
		asl.l   #$05, D4
		move.w  (Camera_Y_pos_diff).w, D5
		ext.l   D5
		asl.l   #$06, D5
		bsr.w     Scroll_Block1           ; loc_6CB4
		move.w  (Camera_BG_Y_pos).w, (Vscroll_Factor_BG).w
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$00DF, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		move.w  (Camera_BG_X_pos).w, D0
		neg.w   D0
loc_6AA0:             
		move.l  D0, (A1)+
		dbf    D1, loc_6AA0
		rts		
loc_6AA8:
		lea     (Horiz_Scroll_Buf).w, A1
		move.w  #$000E, D1
		move.w  (Camera_X_pos).w, D0
		neg.w   D0
		swap  D0
		andi.w  #$000F, D2
		add.w   D2, D2
		move.w  (A2)+, D0
		jmp     loc_6AC6(PC, D2)
loc_6AC4:
		move.w  (A2)+, D0
loc_6AC6:
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		move.l  D0, (A1)+
		dbf    D1, loc_6AC4
		rts				
Scroll_Horizontal: ; loc_6AEC:
		move.w  (A1), D4
		bsr.s   loc_6B12
		move.w  (A1), D0
		andi.w  #$0010, D0
		move.b  (A2), D1
		eor.b   D1, D0
		bne.s   loc_6B10
		eori.b  #$10, (A2)
		move.w  (A1), D0
		sub.w   D4, D0
		bpl.s   loc_6B0C
		bset    #$02, (A3)
		rts
loc_6B0C:
		bset    #$03, (A3)
loc_6B10:
		rts
loc_6B12:
		move.w  (A5), D1
		beq.s   loc_6B34
		subi.w  #$0100, D1
		move.w  D1, (A5)
		moveq   #$00, D1
		move.b  (A5), D1
		lsl.b   #$02, D1
		addq.b  #$04, D1
		move.w  $0002(A5), D0
		sub.b   D1, D0
		move.w  $00(A6, D0), D0
		andi.w  #$3FFF, D0
		bra.s   loc_6B38
loc_6B34:
		move.w  $0008(A0), D0
loc_6B38:
		sub.w   (A1), D0
		subi.w  #$0090, D0
		blt.s   loc_6B4A
		subi.w  #$0010, D0
		bge.s   loc_6B62
		clr.w   (A4)
		rts
loc_6B4A:
		cmpi.w  #$FFF0, D0
		bgt.s   loc_6B54
		move.w  #$FFF0, D0
loc_6B54:
		add.w   (A1), D0
		cmp.w   (Camera_Min_X_pos).w, D0
		bgt.s   loc_6B78
		move.w  (Camera_Min_X_pos).w, D0
		bra.s   loc_6B78
loc_6B62:		
		cmpi.w  #$0010, D0
		bcs.s   loc_6B6C
		move.w  #$0010, D0
loc_6B6C:
		add.w   (A1), D0
		cmp.w   (Camera_Max_X_pos).w, D0
		blt.s   loc_6B78
		move.w  (Camera_Max_X_pos).w, D0
loc_6B78:
		move.w  D0, D1
		sub.w   (A1), D1
		asl.w   #$08, D1
		move.w  D0, (A1)
		move.w  D1, (A4)
		rts
Scroll_Vertical: ; loc_6B84:
		moveq   #$00, D1
		move.w  $000C(A0), D0
		sub.w   (A1), D0
		btst    #$02, $0022(A0)
		beq.s   loc_6B96
		subq.w  #$05, D0
loc_6B96:
		btst    #$01, $0022(A0)
		beq.s   loc_6BB6
		addi.w  #$0020, D0
		sub.w   (Camera_Y_pos_bias).w, D0
		bcs.s   loc_6C00
		subi.w  #$0040, D0
		bcc.s   loc_6C00
		tst.b   (Camera_Max_Y_Pos_Changing).w
		bne.s   loc_6C12
		bra.s   loc_6BC2
loc_6BB6:
		sub.w   (Camera_Y_pos_bias).w, D0
		bne.s   loc_6BC6
		tst.b   (Camera_Max_Y_Pos_Changing).w
		bne.s   loc_6C12
loc_6BC2:		
		clr.w   (A4)
		rts
loc_6BC6:
		cmpi.w  #$0060, (Camera_Y_pos_bias).w
		bne.s   loc_6BEE 
		move.w  $0014(A0), D1
		bpl.s   loc_6BD6
		neg.w   D1
loc_6BD6:
		cmpi.w  #$0800, D1
		bcc.s   loc_6C00
		move.w  #$0600, D1
		cmpi.w  #$0006, D0
		bgt.s   loc_6C5A
		cmpi.w  #$FFFA, D0
		blt.s   loc_6C28
		bra.s   loc_6C18
loc_6BEE:
		move.w  #$0200, D1
		cmpi.w  #$0002, D0
		bgt.s   loc_6C5A
		cmpi.w  #$FFFE, D0
		blt.s   loc_6C28
		bra.s   loc_6C18    
loc_6C00:
		move.w  #$1000, D1
		cmpi.w  #$0010, D0
		bgt.s   loc_6C5A
		cmpi.w  #$FFF0, D0
		blt.s   loc_6C28
		bra.s   loc_6C18
loc_6C12:
		moveq   #$00, D0
		move.b  D0, (Camera_Max_Y_Pos_Changing).w
loc_6C18:		
		moveq   #$00, D1
		move.w  D0, D1
		add.w   (A1), D1  
		tst.w   D0
		bpl.w     loc_6C62
		bra.w     loc_6C32
loc_6C28:		
		neg.w   D1
		ext.l   D1    
		asl.l   #$08, D1
		add.l   (A1), D1
		swap  D1
loc_6C32:		
		cmp.w   (Camera_Min_Y_pos).w, D1
		bgt.s   loc_6C84
loc_6C38:
		cmpi.w  #$FF00, D1
		bgt.s   loc_6C54
		andi.w  #$07FF, D1
		andi.w  #$07FF, $000C(A0)
		andi.w  #$07FF, (A1)
		andi.w  #$03FF, $0008(A1)
		bra.s   loc_6C84
loc_6C54:   
		move.w  (Camera_Min_Y_pos).w, D1
		bra.s   loc_6C84             
loc_6C5A:
		ext.l   D1
		asl.l   #$08, D1
		add.l   (A1), D1
		swap  D1
loc_6C62:		
		cmp.w   (Camera_Max_Y_pos_now).w, D1
		blt.s   loc_6C84
		subi.w  #$0800, D1
		bcs.s   loc_6C80
		andi.w  #$07FF, $000C(A0)
		subi.w  #$0800, (A1)
		andi.w  #$03FF, $0008(A1)
		bra.s   loc_6C84
loc_6C80:
		move.w  (Camera_Max_Y_pos_now).w, D1
loc_6C84:
		move.w  (A1), D4
		swap  D1
		move.l  D1, D3
		sub.l   (A1), D3
		ror.l   #$08, D3
		move.w  D3, (A4)
		move.l  D1, (A1)
		move.w  (A1), D0
		andi.w  #$0010, D0
		move.b  (A2), D1
		eor.b   D1, D0
		bne.s   loc_6CB2
		eori.b  #$10, (A2)
		move.w  (A1), D0
		sub.w   D4, D0
		bpl.s   loc_6CAE
		bset    #$00, (A3)
		rts
loc_6CAE:
		bset    #$01, (A3)
loc_6CB2:
		rts  
Scroll_Block1: ; loc_6CB4:
		move.l  (Camera_BG_X_pos).w, D2
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_BG_X_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Horiz_block_crossed_flag_BG).w, D3
		eor.b   D3, D1
		bne.s   loc_6CE8
		eori.b  #$10, (Horiz_block_crossed_flag_BG).w
		sub.l   D2, D0
		bpl.s   loc_6CE2
		bset    #$02, (Scroll_flags_BG).w
		bra.s   loc_6CE8
loc_6CE2:
		bset    #$03, (Scroll_flags_BG).w
loc_6CE8:
		move.l  (Camera_BG_Y_pos).w, D3
		move.l  D3, D0
		add.l   D5, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Verti_block_crossed_flag_BG).w, D2
		eor.b   D2, D1
		bne.s   loc_6D1C
		eori.b  #$10, (Verti_block_crossed_flag_BG).w
		sub.l   D3, D0
		bpl.s   loc_6D16
		bset    #$00, (Scroll_flags_BG).w
		rts
loc_6D16:
		bset    #$01, (Scroll_flags_BG).w
loc_6D1C:
		rts  
Scroll_Block2: ;  loc_6D1E:
		move.l  (Camera_BG_X_pos).w, D2
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_BG_X_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Horiz_block_crossed_flag_BG).w, D3
		eor.b   D3, D1
		bne.s   loc_6D50
		eori.b  #$10, (Horiz_block_crossed_flag_BG).w
		sub.l   D2, D0
		bpl.s   loc_6D4A
		bset    D6, (Scroll_flags_BG).w
		bra.s   loc_6D50
loc_6D4A:
		addq.b  #$01, D6
		bset    D6, (Scroll_flags_BG).w
loc_6D50:
		rts
Scroll_Block3: ; loc_6D52:
		move.l  (Camera_BG_Y_pos).w, D3
		move.l  D3, D0
		add.l   D5, D0
loc_6D5A:		
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Verti_block_crossed_flag_BG).w, D2
		eor.b   D2, D1
		bne.s   loc_6D84
		eori.b  #$10, (Verti_block_crossed_flag_BG).w
		sub.l   D3, D0
		bpl.s   loc_6D7E
		bset    D6, (Scroll_flags_BG).w
		rts
loc_6D7E:
		addq.b  #$01, D6
		bset    D6, (Scroll_flags_BG).w
loc_6D84:
		rts
Scroll_Block4: ; loc_6D86:
		move.l  (Camera_BG2_X_pos).w, D2
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_BG2_X_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Horiz_block_crossed_flag_BG2).w, D3
		eor.b   D3, D1
		bne.s   loc_6DB8
		eori.b  #$10, (Horiz_block_crossed_flag_BG2).w
		sub.l   D2, D0
		bpl.s   loc_6DB2
		bset    D6, (Scroll_flags_BG2).w
		bra.s   loc_6DB8
loc_6DB2:
		addq.b  #$01, D6
		bset    D6, (Scroll_flags_BG2).w
loc_6DB8:
		rts		  
; Scroll_Block5: ;loc_6DBA:  Left Over GHz S1 Scroll
		move.l  (Camera_BG3_X_pos).w, D2
		move.l  D2, D0
		add.l   D4, D0
		move.l  D0, (Camera_BG3_X_pos).w
		move.l  D0, D1
		swap  D1
		andi.w  #$0010, D1
		move.b  (Horiz_block_crossed_flag_BG3).w, D3
		eor.b   D3, D1
		bne.s   loc_6DEC
		eori.b  #$10, (Horiz_block_crossed_flag_BG3).w
		sub.l   D2, D0
		bpl.s   loc_6DE6
		bset    D6, (Scroll_flags_BG3).w
		bra.s   loc_6DEC
loc_6DE6:
		addq.b  #$01, D6
		bset    D6, (Scroll_flags_BG3).w
loc_6DEC:
		rts
; ============================================================================
; ----------------------------------------------------------------------------
; Unused subroutine to display the correct BACKGROUND tiles as you move
; Used in Sonic 1 on its title screen
; ----------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6DEE: LoadTilesAsYouMove_BGOnly:
		lea	(VDP_control_port).l,a5
		lea	(VDP_data_port).l,a6
		lea	(Scroll_flags_BG).w,a2
		lea	(Camera_BG_X_pos).w,a3
		lea	(Level_Layout+$80).w,a4
		move.w	#$6000,d2
		bsr.w	Draw_BG1
		lea	(Scroll_flags_BG2).w,a2
		lea	(Camera_BG2_X_pos).w,a3
		bra.w	Draw_BG2

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to display correct tiles as you move
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6E1A:
LoadTilesAsYouMove:
		lea	(VDP_control_port).l,a5
		lea	(VDP_data_port).l,a6
		lea	(Scroll_flags_BG_copy).w,a2
		lea	(Camera_BG_copy).w,a3
		lea	(Level_Layout+$80).w,a4	; first background line
		move.w	#$6000,d2
		bsr.w	Draw_BG1

		lea	(Scroll_flags_BG2_copy).w,a2
		lea	(Camera_BG2_copy).w,a3
		bsr.w	Draw_BG2

		lea	(Scroll_flags_BG3_copy).w,a2
		lea	(Camera_BG3_copy).w,a3 
		bsr.w	Draw_BG3

		tst.w	(Two_player_mode).w
		beq.s	loc_6E6C
		lea	(Scroll_flags_copy_P2).w,a2
		lea	(Camera_P2_copy).w,a3
		lea	(Level_Layout).w,a4
		move.w	#$6000,d2
		bsr.w	Draw_FG_P2

loc_6E6C:
		lea	(Scroll_flags_copy).w,a2
		lea	(Camera_RAM_copy).w,a3
		lea	(Level_Layout).w,a4
		move.w	#$4000,d2

		tst.b	(Screen_redraw_flag).w	; is the screen redraw flag set?
		beq.s	Draw_FG			; is not, branch

		move.b	#0,(Screen_redraw_flag).w	; clear the flag immediately

		moveq	#-16,d4			; X (relative to camera)
		moveq	#(1+224/16+1)-1,d6	; cover the screen, plus an extra row at the top and bottom
; loc_6E8C:
Draw_All:
		; This redraws the WHOLE screen, although it is only used
		; by the unused CPZ background routine at this point.
		movem.l	d4-d6,-(sp)
		moveq	#-16,d5		; X (relative)
		move.w	d4,d1
		bsr.w	loc_7644
		move.w	d1,d4
		moveq	#-16,d5		; X (relative)
		bsr.w	loc_7350	; draw the current row
		movem.l	(sp)+,d4-d6
		addi.w	#16,d4		; move onto the next row
		dbf	d6,Draw_All	; repeat for all rows

		move.b	#0,(Scroll_flags_copy).w
		rts
; ===========================================================================
; loc_6EB4:
Draw_FG:
		tst.b	(a2)
		beq.s	loc_6F18
		bclr	#0,(a2)
		beq.s	loc_6ECE
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7350

loc_6ECE:
		bclr	#1,(a2)
		beq.s	loc_6EE8
		move.w	#224,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		move.w	#224,d4
		moveq	#-16,d5
		bsr.w	loc_7350

loc_6EE8:
		bclr	#2,(a2)
		beq.s	loc_6EFE
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		moveq	#-16,d5
		bsr.w	loc_72C2

loc_6EFE:
		bclr	#3,(a2)
		beq.s	loc_6F18
		moveq	#-16,d4
		move.w	#320,d5
		bsr.w	loc_7644
		moveq	#-16,d4
		move.w	#320,d5
		bsr.w	loc_72C2

loc_6F18:
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_6F1A:
Draw_FG_P2: 
		tst.b   (A2)
		beq.s   loc_6F7E
		bclr    #$00, (A2)
		beq.s   loc_6F34
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7680
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7350
loc_6F34:  
		bclr    #$01, (A2)
		beq.s   loc_6F4E
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr.w     loc_7680
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr.w     loc_7350
loc_6F4E: 
		bclr    #$02, (A2)
		beq.s   loc_6F64
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7680
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_72C2
loc_6F64:   
		bclr    #$03, (A2)
		beq.s   loc_6F7E
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr.w     loc_7680
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr.w     loc_72C2
loc_6F7E:   
		rts		            
; loc_6F80:
Draw_BG1: 
		tst.b   (A2)
		beq.w    loc_704E
		bclr    #$00, (A2)
		beq.s   loc_6F9C 
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7644
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7350
loc_6F9C:      
		bclr    #$01, (A2)
		beq.s   loc_6FB6
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr.w     loc_7644
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr.w     loc_7350
loc_6FB6:    
		bclr    #$02, (A2)
		beq.s   loc_6FCC
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7644
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_72C2		   
loc_6FCC:    
		bclr    #$03, (A2)
		beq.s   loc_6FE6
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr.w     loc_7644
		moveq   #-$10, D4
		move.w  #$0140, D5
		bsr.w     loc_72C2
loc_6FE6:     
		bclr    #$04, (A2)
		beq.s   loc_6FFE
		moveq   #-$10, D4
		moveq   #$00, D5
		bsr.w     loc_7646
		moveq   #-$10, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		bsr.w     loc_7354		  
loc_6FFE:     
		bclr    #$05, (A2)
		beq.s   loc_701A
		move.w  #$00E0, D4
		moveq   #$00, D5
		bsr.w     loc_7646
		move.w  #$00E0, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		bsr.w     loc_7354 
loc_701A:    
		bclr    #$06, (A2)
		beq.s   loc_7032
		moveq   #-$10, D4
		moveq   #-$10, D5
		bsr.w     loc_7644
		moveq   #-$10, D4
		moveq   #-$10, D5
		moveq   #$1F, D6
		bsr.w     loc_7348
loc_7032:    
		bclr    #$07, (A2)
		beq.s   loc_704E
		move.w  #$00E0, D4
		moveq   #-$10, D5
		bsr.w     loc_7644  
		move.w  #$00E0, D4
		moveq   #-$10, D5
		moveq   #$1F, D6
		bsr.w     loc_7348
loc_704E:
		rts		 
; loc_7050:
Draw_BG2:  
		tst.b   (A2)
		beq.w     loc_7092
		bclr    #$00, (A2)
		beq.s   loc_7072
		move.w  #$0070, D4
		moveq   #-$10, D5
		bsr.w     loc_7644 
		move.w  #$0070, D4
		moveq   #-$10, D5
		moveq   #$02, D6
		bsr.w     loc_72C4		   
loc_7072:  
		bclr    #$01, (A2)
		beq.s   loc_7092
		move.w  #$0070, D4
		move.w  #$0140, D5
		bsr.w     loc_7644 
		move.w  #$0070, D4
		move.w  #$0140, D5
		moveq   #$02, D6
		bsr.w     loc_72C4
loc_7092:     
		rts

loc_7094:
		dc.b    $00
loc_7095:
		dc.b    $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $04, $04
		dc.b    $04, $04, $04, $04, $04, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $00		
;loc_70B6:
		moveq   #-$10, D4
		bclr    #$00, (A2)
		bne.s   loc_70C8
		bclr    #$01, (A2)
		beq.s   loc_7110
		move.w  #$00E0, D4
loc_70C8:
		lea     loc_7095(PC), A0
		move.w  (Camera_BG_Y_pos).w, D0
		add.w   D4, D0
		andi.w  #$01F0, D0
		lsr.w   #$04, D0
		move.b  $00(A0, D0), D0
		lea     (loc_723C).l, A3
		move.w  $00(A3, D0), A3
		beq.s   loc_70FC
		moveq   #-$10, D5
		movem.l D4/D5, -(A7)
		bsr.w     loc_7644
		movem.l (A7)+, D4/D5
		bsr.w     loc_7350
		bra.s   loc_7110
loc_70FC:
		moveq   #$00, D5
		movem.l D4/D5, -(A7)
		bsr.w     loc_7646
		movem.l (A7)+, D4/D5
		moveq   #$1F, D6
		bsr.w     loc_7354
loc_7110:
		tst.b   (A2)
		bne.s   loc_7116
		rts
loc_7116:
		moveq   #-$10, D4
		moveq   #-$10, D5
		move.b  (A2), D0
		andi.b  #$A8, D0
		beq.s   loc_712A
		lsr.b   #$01, D0
		move.b  D0, (A2)
		move.w  #$0140, D5
loc_712A:
		lea     loc_7094(PC), A0
		move.w  (Camera_BG_Y_pos).w, D0
		andi.w  #$01F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		bra.w     loc_7244		
; loc_7140:
Draw_BG3:
		tst.b   (A2)
		beq.w     loc_718C
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		beq.w     loc_71D0
		bclr    #$00, (A2)
		beq.s   loc_716C
		move.w  #$0040, D4
		moveq   #-$10, D5
		bsr.w     loc_7644 
		move.w  #$0040, D4
		moveq   #-$10, D5
		moveq   #$02, D6
		bsr.w     loc_72C4
loc_716C: 
		bclr    #$01, (A2)
		beq.s   loc_718C
		move.w  #$0040, D4
		move.w  #$0140, D5
		bsr.w     loc_7644 
		move.w  #$0040, D4
		move.w  #$0140, D5
		moveq   #$02, D6
		bsr.w     loc_72C4
loc_718C:
		rts
loc_718E:		 
		dc.b    $02 
loc_718F:  
		dc.b    $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $02, $02, $02, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $00    ; filler           
loc_71D0:    
		moveq   #-$10, D4
		bclr    #$00, (A2)
		bne.s   loc_71E2
		bclr    #$01, (A2) 
		beq.s   loc_720C
		move.w  #$00E0, D4
loc_71E2:		 
		lea     loc_718F(PC), A0
		move.w  (Camera_BG_Y_pos).w, D0
		add.w   D4, D0
		andi.w  #$03F0, D0 
		lsr.w   #$04, D0
		move.b  $00(A0, D0), D0
		move.w  loc_723C(PC, D0), A3
		moveq   #-$10, D5
		movem.l D4-D5, -(A7)		 
		bsr.w     loc_7644
		movem.l (A7)+, D4-D5
		bsr.w     loc_7350
loc_720C: 
		tst.b   (A2)
		bne.s   loc_7212
		rts 
loc_7212:
		moveq   #-$10, D4
		moveq   #-$10, D5
		move.b  (A2), D0
		andi.b  #$A8, D0
		beq.s   loc_7226
		lsr.b   #$01, D0
		move.b  D0, (A2)
		move.w  #$0140, D5
loc_7226:		
		lea     loc_718E(PC), A0
		move.w  (Camera_BG_Y_pos).w, D0
		andi.w  #$07F0, D0
		lsr.w   #$04, D0
		lea     $00(A0, D0), A0
		bra.w     loc_7244
loc_723C: 
		dc.w    $EE68, $EE68, $EE70, $EE78
loc_7244:
		tst.w   (Two_player_mode).w   
		bne.s   loc_7286
		moveq   #$0F, D6
		move.l  #$00800000, D7
loc_7252:		
		moveq   #$00, D0
		move.b  (A0)+, D0
		btst    D0, (A2)
		beq.s   loc_727A
		move.w  loc_723C(PC, D0), A3
		movem.l D4-D5/A0, -(A7) 
		movem.l D4-D5, -(A7) 
		bsr.w     loc_7602
		movem.l (A7)+, D4-D5
		bsr.w     loc_7644
		bsr.w     loc_7532
		movem.l (A7)+, D4-D5/A0
loc_727A:   
		addi.w  #$0010, D4
		dbf    D6,  loc_7252  
		clr.b   (A2)
		rts          
loc_7286:      
		moveq   #$0F, D6
		move.l  #$00800000, D7 
loc_728E:
		moveq   #$00, D0
		move.b  (A0)+, D0
		btst    D0, (A2)
		beq.s   loc_72B6
		move.w  loc_723C(PC, D0), A3
		movem.l D4-D5/A0, -(A7) 
		movem.l D4-D5, -(A7) 
		bsr.w     loc_7602
		movem.l (A7)+, D4-D5
		bsr.w     loc_7644
		bsr.w     loc_75B8
		movem.l (A7)+, D4-D5/A0
loc_72B6:  
		addi.w  #$0010, D4
		dbf    D6,  loc_728E  
		clr.b   (A2)
		rts		             
loc_72C2:
		moveq   #$0F, D6
loc_72C4:
		add.w   (A3), D5
		add.w   $0004(A3), D4
		move.l  #$00800000, D7 
		move.l  D0, D1
		bsr.w     loc_745C
		tst.w   (Two_player_mode).w
		bne.s   loc_7312
loc_72DC:		
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Block_Table).w, A1
		adda.w  D3, A1
		move.l  D1, D0
		bsr.w     loc_7532
		adda.w  #$0010, A0
		addi.w  #$0100, D1
		andi.w  #$0FFF, D1
		addi.w  #$0010, D4
		move.w  D4, D0
		andi.w  #$0070, D0
		bne.s   loc_730C
		bsr.w     loc_745C
loc_730C:		 
		dbf    D6, loc_72DC
		rts		
loc_7312:     
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Block_Table).w, A1
		adda.w  D3, A1
		move.l  D1, D0
		bsr.w     loc_75B8
		adda.w  #$0010, A0
		addi.w  #$0080, D1
		andi.w  #$0FFF, D1
		addi.w  #$0010, D4
		move.w  D4, D0
		andi.w  #$0070, D0
loc_733C:		
		bne.s   loc_7342
		bsr.w     loc_745C
loc_7342:
		dbf    D6, loc_7312
		rts
loc_7348:
		add.w   (A3), D5
		add.w   $0004(A3), D4
		bra.s   loc_7358
loc_7350:
		moveq   #$15, D6
		add.w   (A3), D5
loc_7354:		
		add.w   $0004(A3), D4  
loc_7358:		 
		tst.w   (Two_player_mode).w
		bne.s   loc_73D6
		move.l  A2, -(A7)
		move.w  D6, -(A7)
		lea     (Block_cache).w, A2
		move.l  D0, D1
		or.w    D2, D1
		swap  D1
		move.l  D1, -(A7)
		move.l  D1, (A5)
		swap  D1
		bsr.w     loc_745C
loc_7376:		    
		move.w  (A0), D3              
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Block_Table).w, A1
		adda.w  D3, A1
		bsr.w     loc_7492
		addq.w  #$02, A0
		addq.b  #$04, D1
		bpl.s   loc_7398
		andi.b  #$7F, D1
		swap  D1
		move.l  D1, (A5)
		swap  D1
loc_7398:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   loc_73A8
		bsr.w     loc_745C  
loc_73A8:
		dbf    D6, loc_7376   
		move.l  (A7)+, D1
		addi.l  #$00800000, D1
		lea     (Block_cache).w, A2   
		move.l  D1, (A5)
		swap  D1
		move.w  (A7)+, D6  
loc_73BE:
		move.l  (A2)+, (A6)
		addq.b  #4, D1
		bmi.s   loc_73CE
		ori.b   #$80, D1
		swap  D1
		move.l  D1, (A5)
		swap  D1
loc_73CE:
		dbf    D6, loc_73BE
		move.l  (A7)+, A2
		rts
loc_73D6:
		move.l  D0, D1
		or.w    D2, D1
		swap  D1
		move.l  D1, (A5)
		swap  D1
		tst.b   D1
		bmi.s   loc_7420
		bsr.w     loc_745C
loc_73E8:		
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Block_Table).w, A1
		adda.w  D3, A1
		bsr.w     loc_74F4
		addq.w  #$02, A0
		addq.b  #$04, D1
		bpl.s   loc_740A
		andi.b  #$7F, D1
		swap  D1
		move.l  D1, (A5)
		swap  D1
loc_740A:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   loc_741A
		bsr.w     loc_745C
loc_741A:
		dbf    D6, loc_73E8
		rts 
loc_7420:
		bsr.w     loc_745C
loc_7424:		
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		lea     (Block_Table).w, A1
		adda.w  D3, A1
		bsr.w     loc_74F4
		addq.w  #$02, A0
		addq.b  #$04, D1
		bmi.s   loc_7446
		ori.b   #$80, D1
		swap  D1
		move.l  D1, (A5)
		swap  D1
loc_7446:
		addi.w  #$0010, D5
		move.w  D5, D0
		andi.w  #$0070, D0
		bne.s   loc_7456
		bsr.w     loc_745C
loc_7456:
		dbf    D6, loc_7424
		rts		
loc_745C:               
		movem.l D4-D5, -(A7)
		move.w  D4, D3
		add.w   D3, D3
		andi.w  #$0F00, D3
		lsr.w   #3, D5
		move.w  D5, D0
		lsr.w   #4, D0
		andi.w  #$007F, D0
		add.w   D3, D0
		moveq   #-1, D3
		clr.w   D3
		move.b  $00(A4, D0), D3
		lsl.w   #7, D3
		andi.w  #$0070, D4
		andi.w  #$000E, D5
		add.w   D4, D3
		add.w   D5, D3
		move.l  D3, A0
		movem.l (A7)+, D4-D5
		rts  
loc_7492:
		btst    #$03, (A0)
		bne.s   loc_74BE
		btst    #$02, (A0)
		bne.s   loc_74A4
		move.l  (A1)+, (A6)
		move.l  (A1)+, (A2)+
		rts
loc_74A4:
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A6)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A2)+
		rts
loc_74BE:
		btst    #$02, (A0)
		bne.s   loc_74DA
		move.l  (A1)+, D0
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		eori.l  #$10001000, D0
		move.l  D0, (A2)+
		rts
loc_74DA:
		move.l  (A1)+, D0
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap  D3
		move.l  D3, (A6)
		eori.l  #$18001800, D0
		swap  D0
		move.l  D0, (A2)+
		rts  
loc_74F4:
		btst    #$03, (A0)
		bne.s   loc_7512
		btst    #$02, (A0)
		bne.s   loc_7504
		move.l  (A1)+, (A6)
		rts
loc_7504:
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A6)
		rts
loc_7512:
		btst    #$02, (A0)
		bne.s   loc_7524
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		rts
loc_7524:
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap  D3
		move.l  D3, (A6)
		rts
loc_7532:
		or.w    D2, D0
		swap  D0
		btst    #$03, (A0)
		bne.s   loc_756E
		btst    #$02, (A0)
		bne.s   loc_754E
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		rts
loc_754E:
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A6)
		rts
loc_756E:
		btst    #$02, (A0)
		bne.s   loc_7594
		move.l  D5, -(A7)
		move.l  D0, (A5)
		move.l  (A1)+, D5
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		eori.l  #$10001000, D5
		move.l  D5, (A6)
		move.l  (A7)+, D5
		rts
loc_7594:
		move.l  D5, -(A7)
		move.l  D0, (A5)
		move.l  (A1)+, D5
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap  D3
		move.l  D3, (A6)
		add.l   D7, D0
		move.l  D0, (A5)
		eori.l  #$18001800, D5
		swap  D5
		move.l  D5, (A6)
		move.l  (A7)+, D5
		rts
loc_75B8:
		or.w    D2, D0
		swap  D0
		btst    #$03, (A0)
		bne.s   loc_75DE
		btst    #$02, (A0)
		bne.s   loc_75CE
		move.l  D0, (A5)
		move.l  (A1)+, (A6)
		rts
loc_75CE:
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$08000800, D3
		swap  D3
		move.l  D3, (A6)
		rts
loc_75DE:
		btst    #$02, (A0)
		bne.s   loc_75F2
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$10001000, D3
		move.l  D3, (A6)
		rts
loc_75F2:
		move.l  D0, (A5)
		move.l  (A1)+, D3
		eori.l  #$18001800, D3
		swap  D3
		move.l  D3, (A6)
		rts
loc_7602:
		add.w   (A3), D5
		add.w   $0004(A3), D4
		lea     (Block_Table).w, A1
		move.w  D4, D3
		add.w   D3, D3
		andi.w  #$0F00, D3
		lsr.w   #$03, D5
		move.w  D5, D0
		lsr.w   #$04, D0
		andi.w  #$007F, D0
		add.w   D3, D0
		moveq   #-1, D3
		clr.w   D3
		move.b  $00(A4, D0), D3
		lsl.w   #$07, D3
		andi.w  #$0070, D4
		andi.w  #$000E, D5
		add.w   D4, D3
		add.w   D5, D3
		move.l  D3, A0
		move.w  (A0), D3
		andi.w  #$03FF, D3
		lsl.w   #$03, D3
		adda.w  D3, A1
		rts
loc_7644:
		add.w   (A3), D5   
loc_7646:
		tst.w   (Two_player_mode).w
		bne.s   loc_7666
		add.w   $0004(A3), D4
		andi.w  #$00F0, D4
		andi.w  #$01F0, D5
		lsl.w   #$04, D4
		lsr.w   #$02, D5
		add.w   D5, D4
		moveq   #$03, D0
		swap  D0
		move.w  D4, D0
		rts
loc_7666:
		add.w   $0004(A3), D4
loc_766A:		
		andi.w  #$01F0, D4
		andi.w  #$01F0, D5  
		lsl.w   #3, D4
		lsr.w   #2, D5
		add.w   D5, D4
		moveq   #$03, D0
		swap  D0
		move.w  D4, D0
		rts
loc_7680:
		tst.w   (Two_player_mode).w
		bne.s   loc_76A2
		add.w   $0004(A3), D4
		add.w   (A3), D5
		andi.w  #$00F0, D4
		andi.w  #$01F0, D5
		lsl.w   #4, D4
		lsr.w   #2, D5
		add.w   D5, D4
		moveq   #$02, D0
		swap  D0
		move.w  D4, D0
		rts
loc_76A2:
		add.w   $0004(A3), D4
		add.w   (A3), D5
		andi.w  #$01F0, D4
		andi.w  #$01F0, D5
		lsl.w   #3, D4
		lsr.w   #2, D5
		add.w   D5, D4
		moveq   #$02, D0
		swap  D0
		move.w  D4, D0
		rts  
Load_Tiles_From_Start: ; loc_76BE:
		lea     (VDP_control_port), A5
		lea     (VDP_data_port), A6
		tst.w   (Two_player_mode).w
		beq.s   loc_76DE
		lea     (Camera_X_pos_P2).w, A3
		lea     (Level_Layout).w, A4
		move.w  #$6000, D2
		bsr.s   loc_773A
loc_76DE:
		lea     (Camera_X_pos).w, A3
		lea     (Level_Layout).w, A4
		move.w  #$4000, D2
		bsr.s   loc_770A
		lea     (Camera_BG_X_pos).w, A3
		lea     (Level_Layout+$80).w, A4
		move.w  #$6000, D2
		tst.w   (Two_player_mode).w
		beq.w     loc_770A
		cmpi.b  #dust_hill_zone, (Current_Zone).w
		beq.w     loc_776A
loc_770A:
		moveq   #-$10, D4
		moveq   #$0F, D6
loc_770E		
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr.w     loc_7644
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr.w     loc_7348
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbf    D6, loc_770E
		rts		  
loc_773A:
		moveq   #-$10, D4
		moveq   #$0F, D6
loc_773E		
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr.w     loc_7680
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr.w     loc_7348
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbf    D6, loc_773E
		rts     
loc_776A:
		moveq   #$00, D4
		moveq   #$1F, D6
loc_776E:
		movem.l D4-D6, -(A7)
		moveq   #$00, D5
		move.w  D4, D1
		bsr.w     loc_766A
		move.w  D1, D4
		moveq   #$00, D5
		moveq   #$1F, D6
		move    #$2700, SR
		bsr.w     loc_7358
		move    #$2300, SR
		movem.l (A7)+, D4-D6
		addi.w  #$0010, D4
		dbf    D6, loc_776E
		rts  
		
;=============================================================================== 
; Sub Routine Main_Level_Load_16_128_Blocks
; [ Begin ]		         
;===============================================================================		    
Main_Level_Load_16_128_Blocks: ; loc_779A: Load 16x16/128x128 Tiles
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		lea     (LevelArtPointers).l, A2    ; loc_24354
		lea     $00(A2, D0), A2
		move.l  A2, -(A7)
		addq.w  #$04, A2
		move.l  (A2)+, A0
		bra.s   Main_Level_Load_Blocks_Convert16 ; loc_77CA
;===============================================================================
; loc_77BC:		
		lea     (Block_Table).w, A1       ; 16x16 Tiles
		move.w  #$0000, D0
		bsr.w     EniDec               ; loc_18DA
		bra.s   loc_77EE
;===============================================================================		
Main_Level_Load_Blocks_Convert16: ; loc_77CA:
		lea     (Block_Table).w, A1
		move.w  #bytesToWcnt(Block_Table_End-Block_Table), D2
Main_Level_Load_16_Blocks_Loop: ; loc_77D2:
		move.w  (A0)+, D0
		tst.w   (Two_player_mode).w
		beq.s   Main_Level_Load_16_Blocks_Not2p ; loc_77E8
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
Main_Level_Load_16_Blocks_Not2p: ; loc_77E8:		
		move.w  D0, (A1)+
		dbf    D2, Main_Level_Load_16_Blocks_Loop ; loc_77D2    
loc_77EE:    
		cmpi.b  #hill_top_zone, (Current_Zone).w
		bne.s   loc_7820
		lea     (Block_Table+$980).w, A1
		lea     (BM16_HTZ).l, A0 ; loc_84A50
		move.w  #$03FF, D2
loc_7804:           
		move.w  (A0)+, D0
		tst.w   (Two_player_mode).w
		beq.s   loc_781A
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
loc_781A:
		move.w  D0, (A1)+
		dbf    D2, loc_7804 
loc_7820:		
		move.l  (A2)+, A0
		lea     (Chunk_Table), A1         ; 128x128 Tiles
		bsr.w     KosDec             ; loc_1A58
		bra.s   Load_Level_Sprites      ; loc_785E 
;=============================================================================== 
; Sub Routine Main_Level_Load_16_128_Blocks
; [ End ]		         
;===============================================================================		 
		
;=============================================================================== 
; Sub Routine Unused #1
; [ Begin ]		         
;===============================================================================		  
;loc_782E:
		bra.s   loc_784E		
;loc_7830:
		moveq   #$00, D1
		moveq   #$00, D2
		move.w  (A0)+, D0
		lea     $00(A0, D0), A1
		lea     (Chunk_Table), A2
		lea     (Level_Layout).w, A3
loc_7844:
		bsr.w     ChaDec              ; loc_1AF8
		tst.w   D0
		bmi.s   loc_7844
		bra.s   Load_Level_Sprites      ; loc_785E
loc_784E:
		lea     (Chunk_Table), A1
		move.w  #$3FFF, D0
loc_7858:		
		move.w  (A0)+, (A1)+
		dbf    D0, loc_7858
;=============================================================================== 
; Sub Routine Unused #1
; [ End ]		         
;===============================================================================		    

;=============================================================================== 
; Sub Routine Load_Level_Sprites
; [ Begin ]		         
;===============================================================================		  
Load_Level_Sprites: ; loc_785E: ; Load Palette for Levels
		bsr.w     Load_Level_Layout ; loc_7886
		move.l  (A7)+, A2
		addq.w  #$04, A2
		moveq   #$00, D0
		move.b  (A2), D0
		beq.s   Load_Level_Palete       ; loc_7870
		bsr.w     LoadPLC		 ; loc_173C
;=============================================================================== 
; Sub Routine Load_Level_Sprites
; [ End ]		         
;=============================================================================== 
		   
;=============================================================================== 
; Sub Routine Load_Level_Palete
; [ Begin ]		         
;===============================================================================		
Load_Level_Palete: ; loc_7870:		
		addq.w  #$04, A2
		moveq   #$00, D0
		move.b  (A2), D0
		cmpi.w  #casino_night_zone_act_2, (Current_ZoneAndAct).w
		bne.s   loc_7880         
		moveq   #PalID_CNZ2, D0		
loc_7880:
		bsr.w     PalLoad1		; loc_28E2
		rts  
;=============================================================================== 
; Sub Routine Load_Level_Palete
; [ End ]		         
;===============================================================================
		              
;=============================================================================== 
; Sub Routine Load_Level_Layout
; [ Begin ]		         
;===============================================================================
Load_Level_Layout: ; loc_7886: ; Load Level Layout
		clearRAM Level_Layout,Level_Layout_End
		lea     (Level_Layout).w, A3 ; Foreground
		moveq   #$00, D1
		bsr.w     Interleave_Level_Layout ; loc_78A6
		lea     (Level_Layout+$80).w, A3 ; Background
		moveq   #$02, D1
Interleave_Level_Layout: ; loc_78A6:		
		moveq   #$00, D0
		move.w  (Current_ZoneAndAct).w, D0
		ror.b   #$01, D0
		lsr.w   #$05, D0
		add.w   D1, D0
		lea     (Off_Level).l, A1   ; loc_3334E
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0.l), A1
		moveq   #$00, D1
		move.w  D1, D2
		move.b  (A1)+, D1
		move.b  (A1)+, D2
		move.l  D1, D5
		addq.l  #$01, D5
		moveq   #$00, D3
		move.w  #$0080, D3
		divu.w  D5, D3
		subq.w  #$01, D3
loc_78D6:		
		move.l  A3, A0
		move.w  D3, D4
loc_78DA:		
		move.l  A1, -(A7)
		move.w  D1, D0
loc_78DE:		
		move.b  (A1)+, (A0)+  
		dbf    D0, loc_78DE
		move.l  (A7)+, A1
		dbf    D4, loc_78DA 
		lea     $00(A1, D5), A1
		lea     $0100(A3), A3
		dbf    D2, loc_78D6
		rts
;=============================================================================== 
; Sub Routine Load_Level_Layout
; [ End ]		         
;===============================================================================

;=============================================================================== 
; Sub Routine Unused #2
; [ Begin ]		         
;===============================================================================		 
;loc_78F8:
		lea     ($00FE0000), A1
		lea     ($00FE0080), A2
		lea     (Chunk_Table), A3
		move.w  #$003F, D1
loc_790E:		
		bsr.w     loc_79A0
		bsr.w     loc_79A0
		dbf    D1, loc_790E
		lea     ($00FE0000), A1
		lea     ($00FF0000), A2
		move.w  #$003F, D1
loc_792A:		
		move.w  #$0000, (A2)+
		dbf    D1, loc_792A
		move.w  #$3FBF, D1
loc_7936:		  
		move.w  (A1)+, (A2)+
		dbf    D1, loc_7936
		rts
		lea     ($00FE0000), A1
		lea     (Chunk_Table), A3
		moveq   #$1F, D0
loc_794C:              
		move.l  (A1)+, (A3)+
		dbf    D0, loc_794C
		moveq   #$00, D7
		lea     ($00FE0000), A1
		move.w  #$00FF, D5
loc_795E:		
		lea     (Chunk_Table), A3
		move.w  D7, D6
loc_7966:		
		movem.l A1-A3, -(A7)
		move.w  #$003F, D0
loc_796E:		
		cmpm.w  (A1)+, (A3)+
		bne.s   loc_7984
		dbf    D0, loc_796E
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A1
		dbf    D5, loc_795E
		bra.s   loc_799E
loc_7984:
		movem.l (A7)+, A1-A3
		adda.w  #$0080, A3
		dbf    D6, loc_7966
		moveq   #$1F, D0
loc_7992:		
		move.l  (A1)+, (A3)+
		dbf    D0, loc_7992
		addq.l  #$01, D7
		dbf    D5, loc_795E
loc_799E:
		bra.s   loc_799E
loc_79A0:
		moveq   #$07, D0
loc_79A2:		
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A1)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		move.l  (A3)+, (A2)+
		dbf    D0, loc_79A2
		adda.w  #$0080, A1
		adda.w  #$0080, A2
		rts            
;=============================================================================== 
; Sub Routine Unused #2
; [ Begin ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine Dyn_Screen_Boss_Loader
; [ Begin ]		         
;===============================================================================		    
Dyn_Screen_Boss_Loader: ; loc_79C0: ; Boss Loader / Level Dynamic Resize
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		move.w  DynResize_Index(PC, D0), D0 ; loc_7A26
		jsr     DynResize_Index(PC, D0)     ; loc_7A26
		moveq   #$02, D1
		move.w  (Camera_Max_Y_pos).w, D0
		sub.w   (Camera_Max_Y_pos_now).w, D0
		beq.s   loc_79FE
		bcc.s   loc_7A00
		neg.w   D1
		move.w  (Camera_Y_pos).w, D0
		cmp.w   (Camera_Max_Y_pos).w, D0
		bls.s   loc_79F4
		move.w  D0, (Camera_Max_Y_pos_now).w
		andi.w  #$FFFE, (Camera_Max_Y_pos_now).w
loc_79F4:
		add.w   D1, (Camera_Max_Y_pos_now).w
		move.b  #$01, (Camera_Max_Y_Pos_Changing).w
loc_79FE:
		rts
loc_7A00:
		move.w  (Camera_Y_pos).w, D0
		addi.w  #$0008, D0
		cmp.w   (Camera_Max_Y_pos_now).w, D0
		bcs.s   loc_7A1A
		btst    #$01, ($FFFFB022).w
		beq.s   loc_7A1A
		add.w   D1, D1
		add.w   D1, D1
loc_7A1A:
		add.w   D1, (Camera_Max_Y_pos_now).w
		move.b  #$01, (Camera_Max_Y_Pos_Changing).w
		rts
; off_7A26:
DynResize_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w    loc_7A48
	zoneOffsetTableEntry.w    loc_7AD8
	zoneOffsetTableEntry.w    loc_7ADA
	zoneOffsetTableEntry.w    loc_7ADC
	zoneOffsetTableEntry.w    loc_7ADE
	zoneOffsetTableEntry.w    loc_7AE0
	zoneOffsetTableEntry.w    loc_7AE2
	zoneOffsetTableEntry.w    loc_7AE4
	zoneOffsetTableEntry.w    loc_7FC8
	zoneOffsetTableEntry.w    loc_7FCA
	zoneOffsetTableEntry.w    loc_7FCC
	zoneOffsetTableEntry.w    loc_7FCE
	zoneOffsetTableEntry.w    DynResize_CNz  ; loc_7FD0
	zoneOffsetTableEntry.w    DynResize_CPz  ; loc_7FD2
	zoneOffsetTableEntry.w    DynResize_GCz  ; loc_7FD4
	zoneOffsetTableEntry.w    DynResize_NGHz ; loc_7FD6
	zoneOffsetTableEntry.w    DynResize_DEz  ; loc_7FD8
    zoneTableEnd

loc_7A48:
		tst.b   (Current_Act).w
		bne.s   loc_7A50
		rts
loc_7A50:
		moveq   #$00, D0
		move.b  (Dynamic_Resize_Routine).w, D0
		move.w  loc_7A5E(PC, D0), D0
		jmp     loc_7A5E(PC, D0)
loc_7A5E:
		dc.w    loc_7A64-loc_7A5E
		dc.w    loc_7AB4-loc_7A5E
		dc.w    loc_7AC8-loc_7A5E
loc_7A64:
		cmpi.w  #$26E0, (Camera_X_pos).w
		bcs.s   loc_7AB2
		move.w  (Camera_X_pos).w, (Camera_Min_X_pos).w
		move.w  #$0390, (Camera_Max_Y_pos).w
		move.w  #$0390, (Camera_Max_Y_pos_now).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_7A9E
		move.b  #$55, (A1)
		move.b  #$81, $0028(A1)
		move.w  #$29D0, $0008(A1)
		move.w  #$0426, $000C(A1)
loc_7A9E:
		move.w  #MusID_Boss, D0
		bsr.w     PlayMusic              ; loc_14C0
		move.b  #$01, (Current_Boss_ID).w
		moveq   #$28, D0
		bra.w     LoadPLC		 ; loc_173C
loc_7AB2:
		rts
loc_7AB4:
		cmpi.w  #$2880, (Camera_X_pos).w
		bcs.s   loc_7AC6
		move.w  #$2880, (Camera_Min_X_pos).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
loc_7AC6:
		rts
loc_7AC8:
		tst.b   (Boss_defeated_flag).w
		beq.s   loc_7AD4
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
loc_7AD4:
		rts
		rts
loc_7AD8:
		rts
loc_7ADA:
		rts
loc_7ADC:
		rts
loc_7ADE:
		rts
loc_7AE0:
		rts
loc_7AE2:
		rts
loc_7AE4:
		tst.b   (Current_Act).w
		bne.w     loc_7CF6
		moveq   #$00, D0
		move.b  (Dynamic_Resize_Routine).w, D0
		move.w  loc_7AFA(PC, D0), D0
		jmp     loc_7AFA(PC, D0)
loc_7AFA:
		dc.w    loc_7B00-loc_7AFA
		dc.w    loc_7B6C-loc_7AFA
		dc.w    loc_7C20-loc_7AFA
loc_7B00:
		cmpi.w  #$0400, (Camera_Y_pos).w
		bcs.s   loc_7B48
		cmpi.w  #$1800, (Camera_X_pos).w
		bcs.s   loc_7B48
		move.b  #$01, (Screen_Shaking_Flag_HTZ).w
		move.l  (Camera_X_pos).w, (Camera_BG_X_pos).w
		move.l  (Camera_Y_pos).w, (Camera_BG_Y_pos).w
		moveq   #$00, D0
		move.w  D0, (Camera_BG_X_pos_diff).w
		move.w  D0, (Camera_BG_Y_pos_diff).w
		move.w  D0, (Camera_BG_X_offset).w
		move.w  #$0140, (Camera_BG_Y_offset).w
		subi.w  #$0100, (Camera_BG_Y_pos).w
		move.w  #$0000, (HTZ_Terrain_Delay).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
loc_7B46:		
		rts
loc_7B48:
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.s   loc_7B46
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Camera_BG_X_pos_diff).w
		move.w  D1, (Camera_BG_Y_pos_diff).w
		bsr.w     loc_7C84
		or.w    D0, D1
		bne.s   loc_7B46
		move.b  #$00, (Screen_Shaking_Flag_HTZ).w
		rts
loc_7B6C:
		tst.b   (HTZ_Terrain_Direction).w
		bne.s   loc_7B8A
		cmpi.w  #$0140, (Camera_BG_Y_offset).w
		beq.s   loc_7BA2
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7BC0
		addq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7BC0
loc_7B8A:
		cmpi.w  #$00E0, (Camera_BG_Y_offset).w
		beq.s   loc_7BA2
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7BC0
		subq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7BC0
loc_7BA2:
		move.b  #$00, (Screen_Shaking_Flag).w
		subq.w  #$01, (HTZ_Terrain_Delay).w
		bpl.s   loc_7BC0
		move.w  #$0078, (HTZ_Terrain_Delay).w
		eori.b  #$01, (HTZ_Terrain_Direction).w
		move.b  #$01, (Screen_Shaking_Flag).w
loc_7BC0:
		cmpi.w  #$1800, (Camera_X_pos).w
		bcs.s   loc_7BE8
		cmpi.w  #$1F00, (Camera_X_pos).w
		bcc.s   loc_7C04
		move.w  (Camera_X_pos_diff).w, (Camera_BG_X_pos_diff).w
		move.w  (Camera_Y_pos_diff).w, (Camera_BG_Y_pos_diff).w
		move.w  (Camera_X_pos).w, D0
		move.w  (Camera_Y_pos).w, D1
		bra.w     loc_7C84
loc_7BE8:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		subq.b  #$02, (Dynamic_Resize_Routine).w
		rts
loc_7C04:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
		rts
loc_7C20:
		cmpi.w  #$1F00, (Camera_X_pos).w
		bcc.s   loc_7C60
		move.b  #$01, (Screen_Shaking_Flag_HTZ).w
		move.l  (Camera_X_pos).w, (Camera_BG_X_pos).w
		move.l  (Camera_Y_pos).w, (Camera_BG_Y_pos).w
		moveq   #$00, D0
		move.w  D0, (Camera_BG_X_pos_diff).w
		move.w  D0, (Camera_BG_Y_pos_diff).w
		move.w  D0, (Camera_BG_X_offset).w
		move.w  #$0140, (Camera_BG_Y_offset).w
		subi.w  #$0100, (Camera_BG_Y_pos).w
		move.w  #$0000, (HTZ_Terrain_Delay).w
		subq.b  #$02, (Dynamic_Resize_Routine).w
loc_7C5E:		
		rts
loc_7C60:
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.s   loc_7C5E
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Camera_BG_X_pos_diff).w
		move.w  D1, (Camera_BG_Y_pos_diff).w
		bsr.w     loc_7C84
		or.w    D0, D1
		bne.s   loc_7C5E
		move.b  #$00, (Screen_Shaking_Flag_HTZ).w
		rts
loc_7C84:
		sub.w   (Camera_BG_X_pos).w, D0
		sub.w   (Camera_BG_X_offset).w, D0
		bpl.s   loc_7C9A
		cmpi.w  #$FFF0, D0
		bgt.s   loc_7C98
		move.w  #$FFF0, D0
loc_7C98:
		bra.s   loc_7CA4
loc_7C9A:
		cmpi.w  #$0010, D0
		bcs.s   loc_7CA4
		move.w  #$0010, D0
loc_7CA4:
		move.b  D0, (Camera_BG_X_pos_diff).w
		sub.w   (Camera_BG_Y_pos).w, D1
		sub.w   (Camera_BG_Y_offset).w, D1
		bpl.s   loc_7CBE
		cmpi.w  #$FFF0, D1
		bgt.s   loc_7CBC
		move.w  #$FFF0, D1
loc_7CBC:
		bra.s   loc_7CC8
loc_7CBE:
		cmpi.w  #$0010, D1
		bcs.s   loc_7CC8
		move.w  #$0010, D1
loc_7CC8:
		move.b  D1, (Camera_BG_Y_pos_diff).w
		rts
		btst    #$00, (Ctrl_2_Held).w
		beq.s   loc_7CE0
		tst.w   (Camera_BG_Y_offset).w
		beq.s   loc_7CE0
		subq.w  #$01, (Camera_BG_Y_offset).w
loc_7CE0:
		btst    #$01, (Ctrl_2_Held).w
		beq.s   loc_7CF4
		cmpi.w  #$0700, (Camera_BG_Y_offset).w
		beq.s   loc_7CF4
		addq.w  #$01, (Camera_BG_Y_offset).w
loc_7CF4:
		rts
loc_7CF6:
		moveq   #$00, D0
		move.b  (Dynamic_Resize_Routine).w, D0
		move.w  loc_7D04(PC, D0), D0
		jmp     loc_7D04(PC, D0)
loc_7D04:
		dc.w    loc_7D0E-loc_7D04
		dc.w    loc_7D90-loc_7D04
		dc.w    loc_7E44-loc_7D04
		dc.w    loc_7EA8-loc_7D04
		dc.w    loc_7F5C-loc_7D04
loc_7D0E:
		cmpi.w  #$14C0, (Camera_X_pos).w
		bcs.s   loc_7D6C
		move.b  #$01, (Screen_Shaking_Flag_HTZ).w
		move.l  (Camera_X_pos).w, (Camera_BG_X_pos).w
		move.l  (Camera_Y_pos).w, (Camera_BG_Y_pos).w
		moveq   #$00, D0
		move.w  D0, (Camera_BG_X_pos_diff).w
		move.w  D0, (Camera_BG_Y_pos_diff).w
		move.w  D0, (Camera_BG_X_offset).w
		move.w  #$02C0, (Camera_BG_Y_offset).w
		subi.w  #$0100, (Camera_BG_Y_pos).w
		move.w  #$0000, (HTZ_Terrain_Delay).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
		cmpi.w  #$0380, (Camera_Y_pos).w
		bcs.s   loc_7D6A
		move.w  #$F980, (Camera_BG_X_offset).w
		addi.w  #$0480, (Camera_BG_X_pos).w
		move.w  #$0300, (Camera_BG_Y_offset).w
		addq.b  #$06, (Dynamic_Resize_Routine).w
loc_7D6A:
		rts
loc_7D6C:
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.s   loc_7D6A
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Camera_BG_X_pos_diff).w
		move.w  D1, (Camera_BG_Y_pos_diff).w
		bsr.w     loc_7C84
		or.w    D0, D1
		bne.s   loc_7D6A
		move.b  #$00, (Screen_Shaking_Flag_HTZ).w
		rts
loc_7D90:
		tst.b   (HTZ_Terrain_Direction).w
		bne.s   loc_7DAE
		cmpi.w  #$02C0, (Camera_BG_Y_offset).w
		beq.s   loc_7DC6
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7DE4
		addq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7DE4
loc_7DAE:
		cmpi.w  #$0000, (Camera_BG_Y_offset).w
		beq.s   loc_7DC6
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7DE4
		subq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7DE4
loc_7DC6:
		move.b  #$00, (Screen_Shaking_Flag).w
		subq.w  #$01, (HTZ_Terrain_Delay).w
		bpl.s   loc_7DE4
		move.w  #$0078, (HTZ_Terrain_Delay).w
		eori.b  #$01, (HTZ_Terrain_Direction).w
		move.b  #$01, (Screen_Shaking_Flag).w
loc_7DE4:
		cmpi.w  #$14C0, (Camera_X_pos).w
		bcs.s   loc_7E0C
		cmpi.w  #$1B00, (Camera_X_pos).w
		bcc.s   loc_7E28
		move.w  (Camera_X_pos_diff).w, (Camera_BG_X_pos_diff).w
		move.w  (Camera_Y_pos_diff).w, (Camera_BG_Y_pos_diff).w
		move.w  (Camera_X_pos).w, D0
		move.w  (Camera_Y_pos).w, D1
		bra.w     loc_7C84
loc_7E0C:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		subq.b  #$02, (Dynamic_Resize_Routine).w
		rts
loc_7E28:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
		rts
loc_7E44:
		cmpi.w  #$1B00, (Camera_X_pos).w
		bcc.s   loc_7E84
		move.b  #$01, (Screen_Shaking_Flag_HTZ).w
		move.l  (Camera_X_pos).w, (Camera_BG_X_pos).w
		move.l  (Camera_Y_pos).w, (Camera_BG_Y_pos).w
		moveq   #$00, D0
		move.w  D0, (Camera_BG_X_pos_diff).w
		move.w  D0, (Camera_BG_Y_pos_diff).w
		move.w  D0, (Camera_BG_X_offset).w
		move.w  #$02C0, (Camera_BG_Y_offset).w
		subi.w  #$0100, (Camera_BG_Y_pos).w
		move.w  #$0000, (HTZ_Terrain_Delay).w
		subq.b  #$02, (Dynamic_Resize_Routine).w
loc_7E82:		
		rts
loc_7E84:
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.s   loc_7E82
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Camera_BG_X_pos_diff).w
		move.w  D1, (Camera_BG_Y_pos_diff).w
		bsr.w     loc_7C84
		or.w    D0, D1
		bne.s   loc_7E82
		move.b  #$00, (Screen_Shaking_Flag_HTZ).w
		rts
loc_7EA8:
		tst.b   (HTZ_Terrain_Direction).w
		bne.s   loc_7EC6
		cmpi.w  #$0300, (Camera_BG_Y_offset).w
		beq.s   loc_7EDE
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7EFC
		addq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7EFC
loc_7EC6:
		cmpi.w  #$0000, (Camera_BG_Y_offset).w
		beq.s   loc_7EDE
		move.w  (Timer_frames).w, D0
		andi.w  #$0003, D0
		bne.s   loc_7EFC
		subq.w  #$01, (Camera_BG_Y_offset).w
		bra.s   loc_7EFC
loc_7EDE:
		move.b  #$00, (Screen_Shaking_Flag).w
		subq.w  #$01, (HTZ_Terrain_Delay).w
		bpl.s   loc_7EFC
		move.w  #$0078, (HTZ_Terrain_Delay).w
		eori.b  #$01, (HTZ_Terrain_Direction).w
		move.b  #$01, (Screen_Shaking_Flag).w
loc_7EFC:
		cmpi.w  #$14C0, (Camera_X_pos).w
		bcs.s   loc_7F24
		cmpi.w  #$1B00, (Camera_X_pos).w
		bcc.s   loc_7F40
		move.w  (Camera_X_pos_diff).w, (Camera_BG_X_pos_diff).w
		move.w  (Camera_Y_pos_diff).w, (Camera_BG_Y_pos_diff).w
		move.w  (Camera_X_pos).w, D0
		move.w  (Camera_Y_pos).w, D1
		bra.w     loc_7C84
loc_7F24:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		subq.b  #$06, (Dynamic_Resize_Routine).w
		rts
loc_7F40:
		move.l  #$04000000, (Camera_BG_X_pos).w
		moveq   #$00, D0
		move.l  D0, (Camera_BG_Y_pos).w
		move.l  D0, (Camera_BG_X_offset).w
		move.b  D0, (HTZ_Terrain_Direction).w
		addq.b  #$02, (Dynamic_Resize_Routine).w
		rts
loc_7F5C:
		cmpi.w  #$1B00, (Camera_X_pos).w
		bcc.s   loc_7FA4
		move.b  #$01, (Screen_Shaking_Flag_HTZ).w
		move.l  (Camera_X_pos).w, (Camera_BG_X_pos).w
		move.l  (Camera_Y_pos).w, (Camera_BG_Y_pos).w
		moveq   #$00, D0
		move.w  D0, (Camera_BG_X_pos_diff).w
		move.w  D0, (Camera_BG_Y_pos_diff).w
		move.w  #$F980, (Camera_BG_X_offset).w
		addi.w  #$0480, (Camera_BG_X_pos).w
		move.w  #$0300, (Camera_BG_Y_offset).w
		subi.w  #$0100, (Camera_BG_Y_pos).w
		move.w  #$0000, (HTZ_Terrain_Delay).w
		subq.b  #$02, (Dynamic_Resize_Routine).w
loc_7FA2:		
		rts
loc_7FA4:
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.s   loc_7FA2
		move.w  #$0200, D0
		moveq   #$00, D1
		move.w  D1, (Camera_BG_X_pos_diff).w
		move.w  D1, (Camera_BG_Y_pos_diff).w
		bsr.w     loc_7C84
		or.w    D0, D1
		bne.s   loc_7FA2
		move.b  #$00, (Screen_Shaking_Flag_HTZ).w
		rts
loc_7FC8:
		rts
loc_7FCA:
		rts
loc_7FCC:
		rts
loc_7FCE:
		rts
DynResize_CNz: ; loc_7FD0:
		rts
DynResize_CPz: ;loc_7FD2:
		rts
DynResize_GCz: ;loc_7FD4:
		rts
DynResize_NGHz: ;loc_7FD6:
		rts
DynResize_DEz: ;loc_7FD8:
		rts   
		nop		             ; Filler    
;===============================================================================		 
; Object 0x11 - Bridge
; [ Begin ] 
;===============================================================================		
Obj_0x11_Bridge:  ; loc_7FDC:
		btst    #$06, $0001(A0)
		bne.w     loc_7FF4
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_7FFC(PC, D0), D1
		jmp     loc_7FFC(PC, D1)
loc_7FF4:
		move.w  #$0180, D0
		bra.w     DisplaySprite_Param     ; loc_D3FE
loc_7FFC:		
		dc.w    loc_8004-loc_7FFC
		dc.w    loc_80EA-loc_7FFC
		dc.w    loc_817C-loc_7FFC
		dc.w    loc_8180-loc_7FFC
loc_8004:		
		addq.b  #$02, $0024(A0)
		move.l  #Obj11_MapUnc_85E0, $0004(A0) ; loc_85E0
		move.w  #$43C6, $0002(A0)
		move.b  #$03, $0018(A0)
		cmpi.b  #hidden_palace_zone, (Current_Zone).w
		bne.s   loc_8036
		addq.b  #$04, $0024(A0)
		move.l  #Obj11_MapUnc_8598, $0004(A0) ; loc_8598
		move.w  #$6300, $0002(A0)
loc_8036:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$80, $0019(A0)
		move.w  $000C(A0), D2
		move.w  D2, $003C(A0)
		move.w  $0008(A0), D3
		lea     $0028(A0), A2
		moveq   #$00, D1
		move.b  (A2), D1
		move.w  D1, D0
		lsr.w   #$01, D0
		lsl.w   #$04, D0
		sub.w   D0, D3
		swap  D1
		move.w  #$0008, D1
		bsr.s   loc_8098
		move.w  $0028(A1), D0
		subq.w  #$08, D0
		move.w  D0, $0008(A1)
		move.l  A1, $0030(A0)
		swap  D1
		subq.w  #$08, D1
		bls.s   loc_8096
		move.w  D1, D4
		bsr.s   loc_8098
		move.l  A1, $0034(A0)
		move.w  D4, D0
		add.w   D0, D0
		add.w   D4, D0
		move.w  $10(A1, D0), D0
		subq.w  #$08, D0
		move.w  D0, $0008(A1)
loc_8096:
		bra.s   loc_80EA
loc_8098:		
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_80E8
		_move.b  0(A0), 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  $0001(A0), $0001(A1)
		bset    #$06, $0001(A1)
		move.b  #$40, $000E(A1)
		move.b  D1, $000F(A1)
		subq.b  #$01, D1
		lea     $0010(A1), A2
loc_80D8:		
		move.w  D3, (A2)+
		move.w  D2, (A2)+
		move.w  #$0000, (A2)+
		addi.w  #$0010, D3
		dbf    D1, loc_80D8
loc_80E8:
		rts  
loc_80EA:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_8100
		tst.b   $003E(A0)
		beq.s   loc_812C
		subq.b  #$04, $003E(A0)
		bra.s   loc_8128
loc_8100:
		andi.b  #$10, D0
		beq.s   loc_811C
		move.b  $003F(A0), D0
		sub.b   $003B(A0), D0
		beq.s   loc_811C
		bcc.s   loc_8118
		addq.b  #$01, $003F(A0)
		bra.s   loc_811C
loc_8118:
		subq.b  #$01, $003F(A0)
loc_811C:
		cmpi.b  #$40, $003E(A0)
		beq.s   loc_8128
		addq.b  #$04, $003E(A0)
loc_8128:
		bsr.w     loc_8358
loc_812C:
		moveq   #$00, D1
		move.b  $0028(A0), D1
		lsl.w   #$03, D1
		move.w  D1, D2
		addq.w  #$08, D1
		add.w   D2, D2
		moveq   #$08, D3
		move.w  $0008(A0), D4
		bsr.w     loc_81E2
loc_8144:		
		tst.w   (Two_player_mode).w
		beq.s   loc_814C
		rts
loc_814C:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_8160
		rts
loc_8160:
		move.l  $0030(A0), A1
		bsr.w     loc_D3B6
		cmpi.b  #$08, $0028(A0)
		bls.s   loc_8178
		move.l  $0034(A0), A1
		bsr.w     loc_D3B6
loc_8178:		
		bra.w     DeleteObject            ; loc_D3B4
loc_817C:
		bra.w     DisplaySprite           ; loc_D3C2
loc_8180:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_8196
		tst.b   $003E(A0)
		beq.s   loc_81C2
		subq.b  #$04, $003E(A0)
		bra.s   loc_81BE
loc_8196:
		andi.b  #$10, D0
		beq.s   loc_81B2
		move.b  $003F(A0), D0
		sub.b   $003B(A0), D0
		beq.s   loc_81B2
		bcc.s   loc_81AE
		addq.b  #$01, $003F(A0)
		bra.s   loc_81B2
loc_81AE:
		subq.b  #$01, $003F(A0)
loc_81B2:
		cmpi.b  #$40, $003E(A0)
		beq.s   loc_81BE
		addq.b  #$04, $003E(A0)
loc_81BE:
		bsr.w     loc_8358
loc_81C2:		
		moveq   #$00, D1
		move.b  $0028(A0), D1
		lsl.w   #$03, D1
		move.w  D1, D2
		addq.w  #$08, D1
		add.w   D2, D2
		moveq   #$08, D3
		move.w  $0008(A0), D4		
		bsr.w     loc_81E2
		bsr.w     loc_8282
		bra.w     loc_8144
loc_81E2:
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		moveq   #$3B, D5
		movem.l D1-D4, -(A7)		
		bsr.s   loc_81FC
		movem.l (A7)+, D1-D4
		lea     ($FFFFB000).w, A1
		subq.b  #$01, D6
		moveq   #$3F, D5
loc_81FC:
		btst    D6, $0022(A0)
		beq.s   loc_8260
		btst    #$01, $0022(A1)
		bne.s   loc_821C
		moveq   #$00, D0
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_821C
		cmp.w   D2, D0
		bcs.s   loc_822A
loc_821C:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_822A:
		lsr.w   #$04, D0
		move.b  D0, $00(A0, D5)
		move.l  $0030(A0), A2
		cmpi.w  #$0008, D0
		bcs.s   loc_8242
		move.l  $0034(A0), A2
		subi.w  #$0008, D0
loc_8242:
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		move.w  $12(A2, D0), D0
		subq.w  #$08, D0
		moveq   #$00, D1
		move.b  $0016(A1), D1
		sub.w   D1, D0
		move.w  D0, $000C(A1)
		moveq   #$00, D4
		rts
loc_8260:
		move.w  D1, -(A7)
		bsr.w     loc_FA7A
		move.w  (A7)+, D1
		btst    D6, $0022(A0)
		beq.s   loc_8280
		moveq   #$00, D0
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		lsr.w   #$04, D0
		move.b  D0, $00(A0, D5)
loc_8280:
		rts          

loc_8282:
		moveq   #$00, D0
		tst.w   ($FFFFB010).w
		bne.s   loc_8294
		move.b  (Vint_runcount+3).w, D0
		andi.w  #$001C, D0
		lsr.w   #$01, D0
loc_8294:		
		moveq   #$00, D2
		move.b  loc_82C1(PC, D0), D2
		swap  D2
		move.b  loc_82C0(PC, D0), D2
		moveq   #$00, D0
		tst.w   ($FFFFB050).w
		bne.s   loc_82B2
		move.b  (Vint_runcount+3).w, D0
		andi.w  #$001C, D0
		lsr.w   #$01, D0
loc_82B2:		
		moveq   #$00, D6
		move.b  loc_82C1(PC, D0), D6
		swap  D6
		move.b  loc_82C0(PC, D0), D6
		bra.s   loc_82D0
loc_82C0:
		dc.b    $01
loc_82C1:
		dc.b    $02, $01, $02, $01, $02, $01, $02, $00, $01, $00, $00, $00, $00, $00, $01
loc_82D0:
		moveq   #-2, D3
		moveq   #-2, D4
		move.b  $0022(A0), D0
		andi.b  #$08, D0
		beq.s   loc_82E2
		move.b  $003F(A0), D3
loc_82E2:		
		move.b  $0022(A0), D0
		andi.b  #$10, D0
		beq.s   loc_82F0
		move.b  $003B(A0), D4
loc_82F0:		
		move.l  $0030(A0), A1
		lea     $0045(A1), A2
		lea     $0015(A1), A1
		moveq   #$00, D1
		move.b  $0028(A0), D1
		subq.b  #$01, D1
		moveq   #$00, D5
loc_8306:
		moveq   #$00, D0
		subq.w  #$01, D3
		cmp.b   D3, D5
		bne.s   loc_8310
		move.w  D2, D0
loc_8310:
		addq.w  #$02, D3
		cmp.b   D3, D5
		bne.s   loc_8318
		move.w  D2, D0
loc_8318:
		subq.w  #$01, D3
		subq.w  #$01, D4
		cmp.b   D4, D5
		bne.s   loc_8322
		move.w  D6, D0
loc_8322:
		addq.w  #$02, D4
		cmp.b   D4, D5
		bne.s   loc_832A
		move.w  D6, D0
loc_832A:
		subq.w  #$01, D4
		cmp.b   D3, D5
		bne.s   loc_8336
		swap  D2
		move.w  D2, D0
		swap  D2
loc_8336:
		cmp.b   D4, D5
		bne.s   loc_8340
		swap  D6
		move.w  D6, D0
		swap  D6
loc_8340:
		move.b  D0, (A1)
		addq.w  #$01, D5
		addq.w  #$06, A1
		cmpa.w  A2, A1
		bne.s   loc_8352
		move.l  $0034(A0), A1
		lea     $0015(A1), A1
loc_8352:
		dbf    D1, loc_8306
		rts

loc_8358:
		move.b  $003E(A0), D0
		bsr.w     CalcSine		; loc_320A
		move.w  D0, D4
		lea     (loc_8498).l, A4
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsl.w   #$04, D0
		moveq   #$00, D3
		move.b  $003F(A0), D3
		move.w  D3, D2
		add.w   D0, D3
		moveq   #$00, D5
		lea     (loc_8408-$80).l, A5
		move.b  $00(A5, D3), D5
		andi.w  #$000F, D3
		lsl.w   #$04, D3
		lea     $00(A4, D3), A3
		move.l  $0030(A0), A1
		lea     $0042(A1), A2
		lea     $0012(A1), A1
loc_839C:
		moveq   #$00, D0
		move.b  (A3)+, D0
		addq.w  #$01, D0
		mulu.w  D5, D0
		mulu.w  D4, D0
		swap  D0
		add.w   $003C(A0), D0
		move.w  D0, (A1)
		addq.w  #$06, A1
		cmpa.w  A2, A1
		bne.s   loc_83BC
		move.l  $0034(A0), A1
		lea     $0012(A1), A1
loc_83BC:
		dbf    D2, loc_839C
		moveq   #$00, D0
		move.b  $0028(A0), D0
		moveq   #$00, D3
		move.b  $003F(A0), D3
		addq.b  #$01, D3
		sub.b   D0, D3
		neg.b   D3
		bmi.s   loc_8406
		move.w  D3, D2
		lsl.w   #$04, D3
		lea     $00(A4, D3), A3
		adda.w  D2, A3
		subq.w  #$01, D2
		bcs.s   loc_8406
loc_83E2:
		moveq   #$00, D0
		move.b  -(A3), D0
		addq.w  #$01, D0
		mulu.w  D5, D0
		mulu.w  D4, D0
		swap  D0
		add.w   $003C(A0), D0
		move.w  D0, (A1)
		addq.w  #$06, A1
		cmpa.w  A2, A1
		bne.s   loc_8402
		move.l  $0034(A0), A1
		lea     $0012(A1), A1
loc_8402:
		dbf    D2, loc_83E2
loc_8406:
		rts
loc_8408:   
		dc.b    $02, $04, $06, $08, $08, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $08, $06, $04, $02, $00, $00, $00, $00, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0A, $08, $06, $04, $02, $00, $00, $00, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0A, $08, $06, $04, $02, $00, $00, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0C, $0A, $08, $06, $04, $02, $00, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $0C, $0A, $08, $06, $04, $02, $00, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $0E, $0C, $0A, $08, $06, $04, $02, $00, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $10, $0E, $0C, $0A, $08, $06, $04, $02, $00
		dc.b    $02, $04, $06, $08, $0A, $0C, $0E, $10, $10, $0E, $0C, $0A, $08, $06, $04, $02              
loc_8498:
		dc.b    $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $B5, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $7E, $DB, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $61, $B5, $EC, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $4A, $93, $CD, $F3, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $3E, $7E, $B0, $DB, $F6, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $38, $6D, $9D, $C5, $E4, $F8, $FF, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $31, $61, $8E, $B5, $D4, $EC, $FB, $FF, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $2B, $56, $7E, $A2, $C1, $DB, $EE, $FB, $FF, $00, $00, $00, $00, $00, $00, $00
		dc.b    $25, $4A, $73, $93, $B0, $CD, $E1, $F3, $FC, $FF, $00, $00, $00, $00, $00, $00
		dc.b    $1F, $44, $67, $88, $A7, $BD, $D4, $E7, $F4, $FD, $FF, $00, $00, $00, $00, $00
		dc.b    $1F, $3E, $5C, $7E, $98, $B0, $C9, $DB, $EA, $F6, $FD, $FF, $00, $00, $00, $00
		dc.b    $19, $38, $56, $73, $8E, $A7, $BD, $D1, $E1, $EE, $F8, $FE, $FF, $00, $00, $00
		dc.b    $19, $38, $50, $6D, $83, $9D, $B0, $C5, $D8, $E4, $F1, $F8, $FE, $FF, $00, $00
		dc.b    $19, $31, $4A, $67, $7E, $93, $A7, $BD, $CD, $DB, $E7, $F3, $F9, $FE, $FF, $00
		dc.b    $19, $31, $4A, $61, $78, $8E, $A2, $B5, $C5, $D4, $E1, $EC, $F4, $FB, $FE, $FF
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj11_MapUnc_8598:	BINCLUDE	"mappings/sprite/obj11_HPZ.bin"	; HPZ bridge
Obj11_MapUnc_85E0:	BINCLUDE	"mappings/sprite/obj11_GHZ.bin"	; GHZ bridge
;===============================================================================           
; Object 0x11 - Bridge 
; [ End ]
;=============================================================================== 

;=============================================================================== 
; Object 0x15 - Swing Platforms - Dust Hill / Oil Ocean
; [ Begin ]
;===============================================================================   
Obj_0x15_Swing_Platform: ; loc_85F8:
		btst    #$06, $0001(A0)
		bne.w     loc_8610
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_8618(PC, D0), D1
		jmp     loc_8618(PC, D1)
loc_8610:
		move.w  #$0200, D0
		bra.w     DisplaySprite_Param     ; loc_D3FE
loc_8618:
		dc.w    loc_8626-loc_8618
		dc.w    loc_8764-loc_8618
		dc.w    loc_892A-loc_8618
		dc.w    loc_892E-loc_8618
		dc.w    loc_89E8-loc_8618
		dc.w    loc_89F0-loc_8618
		dc.w    loc_8A56-loc_8618
loc_8626:
		addq.b  #$02, $0024(A0)
		move.l  #Swing_Platforms_Mappings, $0004(A0) ; loc_8AD8
		move.w  #$43E3, $0002(A0)
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$20, $0019(A0)
		move.b  #$10, $0016(A0)
		move.w  $000C(A0), $0038(A0)
		move.w  $0008(A0), $003A(A0)
		cmpi.b  #dust_hill_zone, (Current_Zone).w
		bne.s   loc_867E
		move.l  #Dhz_Swing_Platforms_Mappings, $0004(A0) ; loc_8B46 
		move.w  #$0000, $0002(A0)		       
		move.b  #$18, $0019(A0)
		move.b  #$08, $0016(A0)
loc_867E:
		cmpi.b  #neo_green_hill_zone, (Current_Zone).w
		bne.s   loc_86A0
		move.l  #Obj15_MapUnc_8B0E, $0004(A0) ; loc_8B0E
		move.w  #$0000, $0002(A0)
		move.b  #$20, $0019(A0)
		move.b  #$08, $0016(A0)
loc_86A0:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		moveq   #$00, D1
		move.b  $0028(A0), D1
		bpl.s   loc_86B0
		addq.b  #$04, $0024(A0)
loc_86B0:
		andi.w  #$000F, D1
		move.w  D1, D2
		lsl.w   #$04, D2
		addi.b  #$08, D2
		move.b  D2, $003C(A0)
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_8738
		_move.b  0(A0), 0(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  #$04, $0001(A1)
		bset    #$06, $0001(A1)
		move.b  #$48, $000E(A1)
		move.b  D1, $000F(A1)
		subq.b  #$01, D1
		lea     $0010(A1), A2
loc_86FC:		
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		move.w  #$0001, (A2)+
		addi.w  #$0010, D3
		dbf    D1, loc_86FC
		move.b  #$02, $0015(A1)
		move.w  D2, $0008(A1)
		move.w  D3, $000C(A1)
		move.b  #$01, $000B(A1)
		move.l  A1, $0030(A0)
		addi.w  #$0008, D3
		move.w  D3, $000C(A0)
		move.b  #$50, $0014(A1)
		bset    #$04, $0001(A1)
loc_8738:
		move.w  #$8000, $0026(A0)
		move.w  #$0000, $003E(A0)
		move.b  $0028(A0), D1
		andi.w  #$0070, D1
		move.b  D1, $0028(A0)
		cmpi.b  #$40, D1
		bne.s   loc_8764
		move.l  #Dhz_Swing_Platforms_Mappings_2, $0004(A0) ; loc_8B7A
		move.b  #$A7, $0020(A0)
loc_8764:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_8784
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$00, D3
		move.b  $0016(A0), D3
		addq.b  #$01, D3
		move.w  (A7)+, D4
		bsr.w     loc_FA28
		bra.w     loc_88FC
loc_8784:
		move.b  (Oscillating_Data+$18).w, D0
		move.b  $0028(A0), D1
		beq.s   loc_87C4
		cmpi.b  #$10, D1
		bne.s   loc_879E
		cmpi.b  #$40, D0
		bcc.s   loc_87C4
		moveq   #$40, D0
		bra.s   loc_87C4
loc_879E:
		cmpi.b  #$20, D1
		bne.s   loc_87AA
		moveq   #$40, D0
		bra.w     loc_885C
loc_87AA:
		cmpi.b  #$30, D1
		bne.s   loc_87BA
		cmpi.b  #$40, D0
		bcs.s   loc_87C4
		moveq   #$40, D0
		bra.s   loc_87C4
loc_87BA:
		cmpi.b  #$40, D1
		bne.s   loc_87C4
		bsr.w     loc_885E
loc_87C4:
		move.w  #$0080, D1
		btst    #$00, $0022(A0)
		beq.s   loc_87D4
		neg.w   D0
		add.w   D1, D0
loc_87D4:
		bsr.w     CalcSine		; loc_320A
		move.w  $0038(A0), D2
		move.w  $003A(A0), D3
		moveq   #$00, D4
		move.b  $003C(A0), D4
		move.l  D4, D5
		muls.w  D0, D4
		asr.l   #$08, D4
		muls.w  D1, D5
		asr.l   #$08, D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  D4, $000C(A0)
		move.w  D5, $0008(A0)
		moveq   #$00, D6
		move.l  $0030(A0), A1
		move.b  $000F(A1), D6
		subq.w  #$01, D6
		bcs.s   loc_885C
		asl.w   #$04, D0
		ext.l   D0
		asl.l   #$08, D0
		asl.w   #$04, D1
		ext.l   D1
		asl.l   #$08, D1
		moveq   #$00, D4
		moveq   #$00, D5
		lea     $0010(A1), A2
loc_881E:		
		movem.l D4/D5, -(A7)
		swap  D4
		swap  D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  D5, (A2)+
		move.w  D4, (A2)+
		movem.l (A7)+, D4/D5
		add.l   D0, D4
		add.l   D1, D5
		addq.w  #$02, A2
		dbf    D6, loc_881E
		swap  D4
		swap  D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  $0028(A1), D0
		move.w  $002A(A1), D1
		move.w  D5, $0028(A1)
		move.w  D4, $002A(A1)
		move.w  D0, $0008(A1)
		move.w  D1, $000C(A1)
loc_885C:
		rts
loc_885E:
		tst.w   $0036(A0)
		beq.s   loc_886C
		subq.w  #$01, $0036(A0)
		bra.w     loc_88F6
loc_886C:
		tst.b   $0034(A0)
		bne.s   loc_8892
		move.w  ($FFFFB008).w, D0
		sub.w   $003A(A0), D0
		addi.w  #$0020, D0
		cmpi.w  #$0040, D0
		bcc.s   loc_88F6
		tst.w   (Debug_placement_mode).w
		bne.w     loc_88F6
		move.b  #$01, $0034(A0)
loc_8892:
		tst.b   $003D(A0)
		beq.s   loc_88C8
		move.w  $003E(A0), D0
		addi.w  #$0008, D0
		move.w  D0, $003E(A0)
		add.w   D0, $0026(A0)
		cmpi.w  #$0200, D0
		bne.s   loc_88F6
		move.w  #$0000, $003E(A0)
		move.w  #$8000, $0026(A0)
		move.b  #$00, $003D(A0)
		move.w  #$003C, $0036(A0)
		bra.s   loc_88F6
loc_88C8:
		move.w  $003E(A0), D0
		subi.w  #$0008, D0
		move.w  D0, $003E(A0)
		add.w   D0, $0026(A0)
		cmpi.w  #$FE00, D0
		bne.s   loc_88F6
		move.w  #$0000, $003E(A0)
		move.w  #$4000, $0026(A0)
		move.b  #$01, $003D(A0)
		move.w  #$003C, $0036(A0)
loc_88F6:
		move.b  $0026(A0), D0
		rts
loc_88FC:
		tst.w   (Two_player_mode).w
		beq.s   loc_8906
		bra.w     DisplaySprite           ; loc_D3C2
loc_8906:
		move.w  $003A(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w     loc_891E
		bra.w     DisplaySprite           ; loc_D3C2
loc_891E:
		move.l  $0030(A0), A1
		bsr.w     loc_D3B6
		bra.w     DeleteObject            ; loc_D3B4
loc_892A:
		bra.w     DisplaySprite           ; loc_D3C2
loc_892E:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_8784
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$00, D3
		move.b  $0016(A0), D3
		addq.b  #$01, D3
		move.w  (A7)+, D4
		bsr.w     loc_FA28
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.w     loc_89E4
		tst.b   (Oscillating_Data+$18).w
		bne.w     loc_89E4
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_89D4
		moveq   #$00, D0
		move.w  #$000F, D1
loc_896A:		
		move.l  $00(A0, D0), $00(A1, D0)
		addq.w  #$04, D0
		dbf    D1, loc_896A
		move.b  #$0A, $0024(A1)
		cmpi.b  #neo_green_hill_zone, (Current_Zone).w
		bne.s   loc_8988
		addq.b  #$02, $0024(A1)
loc_8988:
		move.w  #$0200, $0010(A1)
		btst    #$00, $0022(A0)
		beq.s   loc_899A
		neg.w   $0010(A1)
loc_899A:
		bset    #$01, $0022(A1)
		move.w  A0, D0
		subi.w  #$B000, D0
		lsr.w   #$06, D0
		andi.w  #$007F, D0
		move.w  A1, D1
		subi.w  #$B000, D1
		lsr.w   #$06, D1
		andi.w  #$007F, D1
		lea     ($FFFFB000).w, A1
		cmp.b   $003D(A1), D0
		bne.s   loc_89C6
		move.b  D1, $003D(A1)
loc_89C6:
		lea     ($FFFFB040).w, A1
		cmp.b   $003D(A1), D0
		bne.s   loc_89D4
		move.b  D1, $003D(A1)
loc_89D4:
		move.b  #$03, $001A(A0)
		addq.b  #$02, $0024(A0)
		andi.b  #$E7, $0022(A0)
loc_89E4:
		bra.w     loc_88FC
loc_89E8:
		bsr.w     loc_8784
		bra.w     loc_88FC
loc_89F0:
		move.w  $0008(A0), -(A7)
		btst    #$01, $0022(A0)
		beq.s   loc_8A2E
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		cmpi.w  #$0720, $000C(A0)
		bcs.s   loc_8A3E
		move.w  #$0720, $000C(A0)
		bclr    #$01, $0022(A0)
		move.w  #$0000, $0010(A0)
		move.w  #$0000, $0012(A0)
		move.w  $000C(A0), $0038(A0)
		bra.s   loc_8A3E
loc_8A2E:
		moveq   #$00, D0
		move.b  (Oscillating_Data+$14).w, D0
		lsr.w   #$01, D0
		add.w   $0038(A0), D0
		move.w  D0, $000C(A0)
loc_8A3E:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$00, D3
		move.b  $0016(A0), D3
		addq.b  #$01, D3
		move.w  (A7)+, D4
		bsr.w     loc_FA28
		bra.w     MarkObjGone             ; loc_D2A0
loc_8A56:
		move.w  $0008(A0), -(A7)
		bsr.w     SpeedToPos              ; loc_D27A
		btst    #$01, $0022(A0)
		beq.s   loc_8A92
		addi.w  #$0018, $0012(A0)
		move.w  (Water_Level_2).w, D0
		cmp.w   $000C(A0), D0
		bhi.s   loc_8AC0
		move.w  D0, $000C(A0)
		move.w  D0, $0038(A0)
		bclr    #$01, $0022(A0)
		move.w  #$0100, $0010(A0)
		move.w  #$0000, $0012(A0)
		bra.s   loc_8AC0
loc_8A92:
		moveq   #$00, D0
		move.b  (Oscillating_Data+$14).w, D0
		lsr.w   #$01, D0
		add.w   $0038(A0), D0
		move.w  D0, $000C(A0)
		tst.w   $0010(A0)
		beq.s   loc_8AC0
		moveq   #$00, D3
		move.b  $0019(A0), D3
		bsr.w     JmpTo_ObjHitWallRight
		tst.w   D1
		bpl.s   loc_8AC0
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_8AC0:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$00, D3
		move.b  $0016(A0), D3
		addq.b  #$01, D3
		move.w  (A7)+, D4
		bsr.w     loc_FA28
		bra.w     MarkObjGone             ; loc_D2A0
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Swing_Platforms_Mappings: ; loc_8AD8:
		dc.w    Swing_Platforms_Map_01-Swing_Platforms_Mappings
		dc.w    Swing_Platforms_Map_02-Swing_Platforms_Mappings
		dc.w    Swing_Platforms_Map_02-Swing_Platforms_Mappings
		dc.w    Swing_Platforms_Map_Null-Swing_Platforms_Mappings
Swing_Platforms_Map_01: ; loc_8AE0:
		dc.w    $0004
		dc.l    $F00D2004, $2002FFE0, $F00D200C, $20060000
		dc.l    $000D2014, $200AFFE0, $000D2814, $280A0000
Swing_Platforms_Map_02: ; loc_8B02:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
Swing_Platforms_Map_Null: ; loc_8B0C:
		dc.w    $0000
Obj15_MapUnc_8B0E:	BINCLUDE	"mappings/sprite/obj15_NGHZ.bin"

Dhz_Swing_Platforms_Mappings: ; loc_8B46:
		dc.w    Dhz_Swing_Platforms_Map_01-Dhz_Swing_Platforms_Mappings
		dc.w    Dhz_Swing_Platforms_Map_02-Dhz_Swing_Platforms_Mappings
		dc.w    Dhz_Swing_Platforms_Map_03-Dhz_Swing_Platforms_Mappings
Dhz_Swing_Platforms_Map_01: ; loc_8B4C:
		dc.w    $0002
		dc.l    $F8096060, $6030FFE8, $F8096860, $68300000
Dhz_Swing_Platforms_Map_02: ; loc_8B5E:
		dc.w    $0001
		dc.l    $F8056066, $6033FFF8
Dhz_Swing_Platforms_Map_03: ; loc_8B68:
		dc.w    $0002
		dc.l    $E805406A, $4035FFF4, $F80B406E, $4037FFF4   
Dhz_Swing_Platforms_Mappings_2: ; loc_8B7A:
		dc.w    Dhz_Swing_Platforms_Map_04-Dhz_Swing_Platforms_Mappings_2
		dc.w    Dhz_Swing_Platforms_Map_02-Dhz_Swing_Platforms_Mappings_2
		dc.w    Dhz_Swing_Platforms_Map_03-Dhz_Swing_Platforms_Mappings_2
Dhz_Swing_Platforms_Map_04: ; loc_8B80:
		dc.w    $0002
		dc.l    $F80D6058, $602CFFE0, $F80D6858, $682C0000				          
;=============================================================================== 
; Object 0x15 - Swing Platforms - Dust Hill / Oil Ocean
; [ End ]
;===============================================================================   
		nop

; NOTE:
; It seems like the compiler the developers used (which evidently was for a Macintosh-like environment) automatically generated these "Jump To"s blocks
; whenever said subroutine referenced was very out of bounds; in fact, using this, we can even predict where the blocks of code compiled begin and end.
; This continued into the final game, only to be removed entirely in the Classics and Jam re-releases, and even Sonic 3, suggesting a compiler switch
; (presumably back to the DOS environment used for Sonic 1 due to having the same absolute lea-pointers, even when they shouldn't need any).

; loc_8B94:
JmpTo_ObjHitWallRight:
		jmp	(ObjHitWallRight).l

		align 4

;=============================================================================== 
; Object 0x17
; [ Begin ]
;===============================================================================		  
Obj_0x17: ; loc_8B9C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_8BAA(PC, D0), D1
		jmp     loc_8BAA(PC, D1)
loc_8BAA:		
		dc.w    loc_8BB0-loc_8BAA
		dc.w    loc_8C74-loc_8BAA
		dc.w    loc_8CD6-loc_8BAA
loc_8BB0:
		addq.b  #$02, $0024(A0)
		move.l  #loc_8CDE, $0004(A0)
		move.w  #$4398, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$08, $0019(A0)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		_move.b  0(A0), D4
		lea     $0028(A0), A2
		moveq   #$00, D1
		move.b  (A2), D1
		move.b  #$00, (A2)+
		move.w  D1, D0
		lsr.w   #$01, D0
		lsl.w   #$04, D0
		sub.w   D0, D3
		subq.b  #$02, D1
		bcs.s   loc_8C74
		moveq   #$00, D6
loc_8BFE:		
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_8C74
		addq.b  #$01, $0028(A0)
		move.w  A1, D5
		subi.w  #$B000, D5
		lsr.w   #$06, D5
		andi.w  #$007F, D5
		move.b  D5, (A2)+
		move.b  #$04, $0024(A1)
		_move.b  D4, 0(A1)
		move.w  D2, $000C(A1)
		move.w  D3, $0008(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  #$4398, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$08, $0019(A1)
		move.b  D6, $003E(A1)
		addq.b  #$01, D6
		andi.b  #$07, D6
		addi.w  #$0010, D3
		cmp.w   $0008(A0), D3
		bne.s   loc_8C70
		move.b  D6, $003E(A0)
		addq.b  #$01, D6
		andi.b  #$07, D6
		addi.w  #$0010, D3
		addq.b  #$01, $0028(A0)
loc_8C70:
		dbf    D1, loc_8BFE
loc_8C74:
		bsr.w     loc_8CB6
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w     loc_8C90
		bra.w     DisplaySprite           ; loc_D3C2
loc_8C90:
		moveq   #$00, D2
		lea     $0028(A0), A2
		move.b  (A2)+, D2
		subq.b  #$02, D2
		bcs.s   loc_8CB2
loc_8C9C:		
		moveq   #$00, D0             
		move.b  (A2)+, D0
		lsl.w   #$06, D0
		addi.l  #$FFFFB000, D0
		move.l  D0, A1
		bsr.w     loc_D3B6
		dbf    D2, loc_8C9C
loc_8CB2:
		bra.w     DeleteObject            ; loc_D3B4
loc_8CB6:
		move.b  (Logspike_anim_frame).w, D0
		move.b  #$00, $0020(A0)
		add.b   $003E(A0), D0
		andi.b  #$07, D0
		move.b  D0, $001A(A0)
		bne.s   loc_8CD4
		move.b  #$84, $0020(A0)
loc_8CD4:
		rts
loc_8CD6:
		bsr.w     loc_8CB6
		bra.w     DisplaySprite           ; loc_D3C2
loc_8CDE:
		dc.w    loc_8CEE-loc_8CDE
		dc.w    loc_8CF8-loc_8CDE
		dc.w    loc_8D02-loc_8CDE
		dc.w    loc_8D0C-loc_8CDE
		dc.w    loc_8D16-loc_8CDE
		dc.w    loc_8D20-loc_8CDE
		dc.w    loc_8D34-loc_8CDE
		dc.w    loc_8D2A-loc_8CDE
loc_8CEE:
		dc.w    $0001
		dc.l    $F0010000, $0000FFFC
loc_8CF8:
		dc.w    $0001
		dc.l    $F5050002, $0001FFF8
loc_8D02:
		dc.w    $0001
		dc.l    $F8050006, $0003FFF8
loc_8D0C:
		dc.w    $0001
		dc.l    $FB05000A, $0005FFF8
loc_8D16:
		dc.w    $0001
		dc.l    $0001000E, $0007FFFC
loc_8D20:
		dc.w    $0001
		dc.l    $04000010, $0008FFFD
loc_8D2A:
		dc.w    $0001
		dc.l    $F4000011, $0008FFFD
loc_8D34:
		dc.w    $0000           
;=============================================================================== 
; Object 0x17
; [ End ]
;===============================================================================		
		nop		             ; Filler
;=============================================================================== 
; Object 0x18 - Platforms 
; [ Begin ]
;===============================================================================   
Obj_0x18_Platforms: ; loc_8D38:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_8D46(PC, D0), D1
		jmp     loc_8D46(PC, D1)		 
loc_8D46:
		dc.w    loc_8D5A-loc_8D46
		dc.w    loc_8DF6-loc_8D46
		dc.w    loc_8E5C-loc_8D46
		dc.w    loc_8E34-loc_8D46
		dc.w    loc_8E60-loc_8D46
loc_8D50:
		dc.w    $2000, $2001, $2002, $4003, $3004   
loc_8D5A: 
		addq.b  #$02, $0024(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$000E, D0
		lea     loc_8D50(PC, D0), A2
		move.b  (A2)+, $0019(A0)
		move.b  (A2)+, $001A(A0)
		move.l  #Obj18_MapUnc_9078, $0004(A0) ; loc_9078
		move.w  #$4000, $0002(A0)
		cmpi.b  #neo_green_hill_zone, (Current_Zone).w
		bne.s   loc_8D9A
		move.l  #Obj18_MapUnc_90D0, $0004(A0) ; loc_90D0
		move.w  #$4000, $0002(A0)
loc_8D9A:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.w  $000C(A0), $002C(A0)
		move.w  $000C(A0), $0034(A0)
		move.w  $0008(A0), $0032(A0)
		move.w  #$0080, $0026(A0)
		tst.b   $0028(A0)
		bpl.s   loc_8DF0
		addq.b  #$06, $0024(A0)
		andi.b  #$0F, $0028(A0)
		move.b  #$30, $0016(A0)
		cmpi.b  #neo_green_hill_zone, (Current_Zone).w
		bne.s   loc_8DE6
		move.b  #$28, $0016(A0)
loc_8DE6:
		bset    #$04, $0001(A0)
		bra.w     loc_8E60		 
loc_8DF0:
		andi.b  #$0F, $0028(A0)
loc_8DF6:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_8E0C
		tst.b   $0038(A0)
		beq.s   loc_8E18
		subq.b  #$04, $0038(A0)
		bra.s   loc_8E18
loc_8E0C:
		cmpi.b  #$40, $0038(A0)
		beq.s   loc_8E18
		addq.b  #$04, $0038(A0)
loc_8E18:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_8EC4
		bsr.w     loc_8EAA
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$08, D3
		move.w  (A7)+, D4
		bsr.w     PlatformObject
		bra.s   loc_8E3C
loc_8E34:
		bsr.w     loc_8EC4
		bsr.w     loc_8EAA
loc_8E3C:
		tst.w   (Two_player_mode).w
		beq.s   loc_8E46
		bra.w     DisplaySprite           ; loc_D3C2
loc_8E46:
		move.w  $0032(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_8E5C
		bra.w     DisplaySprite           ; loc_D3C2
loc_8E5C:
		bra.w     DeleteObject            ; loc_D3B4
loc_8E60:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_8E76
		tst.b   $0038(A0)
		beq.s   loc_8E82
		subq.b  #$04, $0038(A0)
		bra.s   loc_8E82
loc_8E76:
		cmpi.b  #$40, $0038(A0)
		beq.s   loc_8E82
		addq.b  #$04, $0038(A0)
loc_8E82:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_8EC4
		bsr.w     loc_8EAA
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  (A7)+, D4
		bsr.w     SolidObject             ; loc_F4A0
		bra.s   loc_8E3C
loc_8EAA:
		move.b  $0038(A0), D0
		bsr.w     CalcSine		; loc_320A
		move.w  #$0400, D1
		muls.w  D1, D0
		swap  D0
		add.w   $002C(A0), D0
		move.w  D0, $000C(A0)
		rts
loc_8EC4:
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		add.w   D0, D0
		move.w  loc_8ED8(PC, D0), D1
		jmp     loc_8ED8(PC, D1)
loc_8ED8:
		dc.w    loc_8EF4-loc_8ED8
		dc.w    loc_8F06-loc_8ED8
		dc.w    loc_8F4C-loc_8ED8
		dc.w    loc_8F64-loc_8ED8
		dc.w    loc_8F8C-loc_8ED8
		dc.w    loc_8EF6-loc_8ED8
		dc.w    loc_8F3C-loc_8ED8
		dc.w    loc_8FFA-loc_8ED8
		dc.w    loc_9026-loc_8ED8
		dc.w    loc_8EF4-loc_8ED8
		dc.w    loc_903E-loc_8ED8
		dc.w    loc_9058-loc_8ED8
		dc.w    loc_8F2E-loc_8ED8
		dc.w    loc_8F1E-loc_8ED8
loc_8EF4:               
		rts
loc_8EF6:   
		move.w  $0032(A0), D0
		move.b  $0026(A0), D1
		neg.b   D1
		addi.b  #$40, D1
		bra.s   loc_8F12
loc_8F06:
		move.w  $0032(A0), D0
		move.b  $0026(A0), D1
		subi.b  #$40, D1
loc_8F12:
		ext.w   D1
		add.w   D1, D0
		move.w  D0, $0008(A0)
		bra.w     loc_9070
loc_8F1E:
		move.w  $0034(A0), D0
		move.b  (Oscillating_Data+$C).w, D1
		neg.b   D1
		addi.b  #$30, D1
		bra.s   loc_8F58
loc_8F2E:
		move.w  $0034(A0), D0
		move.b  (Oscillating_Data+$C).w, D1
		subi.b  #$30, D1
		bra.s   loc_8F58
loc_8F3C:
		move.w  $0034(A0), D0
		move.b  $0026(A0), D1
		neg.b   D1
		addi.b  #$40, D1
		bra.s   loc_8F58
loc_8F4C:
		move.w  $0034(A0), D0
		move.b  $0026(A0), D1
		subi.b  #$40, D1
loc_8F58:
		ext.w   D1
		add.w   D1, D0
		move.w  D0, $002C(A0)
		bra.w     loc_9070
loc_8F64:
		tst.w   $003A(A0)
		bne.s   loc_8F7A
		btst    #$03, $0022(A0)
		beq.s   loc_8F78
		move.w  #$001E, $003A(A0)
loc_8F78:
		rts
loc_8F7A:
		subq.w  #$01, $003A(A0)
		bne.s   loc_8F78
		move.w  #$0020, $003A(A0)
		addq.b  #$01, $0028(A0)
		rts
loc_8F8C:
		tst.w   $003A(A0)
		beq.s   loc_8FCC
		subq.w  #$01, $003A(A0)
		bne.s   loc_8FCC
		btst    #$03, $0022(A0)
		beq.s   loc_8FC6
		lea     ($FFFFB000).w, A1
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		bclr    #$03, $0022(A0)
		clr.b   $0025(A0)
		move.w  $0012(A0), $0012(A1)
loc_8FC6:
		move.b  #$06, $0024(A0)
loc_8FCC:
		move.l  $002C(A0), D3
		move.w  $0012(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D3, $002C(A0)
		addi.w  #$0038, $0012(A0)
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $002C(A0), D0
		bcc.s   loc_8FF8
		move.b  #$04, $0024(A0)
loc_8FF8:
		rts
loc_8FFA:
		tst.w   $003A(A0)
		bne.s   loc_901A
		lea     (ButtonVine_Trigger).w, A2
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$04, D0
		tst.b   $00(A2, D0)
		beq.s   loc_9018
		move.w  #$003C, $003A(A0)
loc_9018:
		rts
loc_901A:
		subq.w  #$01, $003A(A0)
		bne.s   loc_9018
		addq.b  #$01, $0028(A0)
		rts
loc_9026:
		subq.w  #$02, $002C(A0)
		move.w  $0034(A0), D0
		subi.w  #$0200, D0
		cmp.w   $002C(A0), D0
		bne.s   loc_903C
		clr.b   $0028(A0)
loc_903C:
		rts
loc_903E:
		move.w  $0034(A0), D0
		move.b  $0026(A0), D1
		subi.b  #$40, D1
		ext.w   D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  D0, $002C(A0)
		bra.w     loc_9070
loc_9058:
		move.w  $0034(A0), D0
		move.b  $0026(A0), D1
		neg.b   D1
		addi.b  #$40, D1
		ext.w   D1
		asr.w   #$01, D1
		add.w   D1, D0
		move.w  D0, $002C(A0)
loc_9070:
		move.b  (Oscillating_Data+$18).w, $0026(A0)
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj18_MapUnc_9078:	BINCLUDE	"mappings/sprite/obj18_GHZ.bin"
Obj18_MapUnc_90D0:	BINCLUDE	"mappings/sprite/obj18_NGHZ.bin"
; ===========================================================================

;=============================================================================== 
; Object 0x1A - Collapsing Platforms - Hidden Palace / Oil Ocean ...
; [ Begin ]
;===============================================================================		   
Obj_0x1A_Collapsing_Platforms: ; loc_9128:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9136(PC, D0), D1
		jmp     loc_9136(PC, D1)
loc_9136:
		dc.w    loc_913C-loc_9136
		dc.w    loc_91E8-loc_9136
		dc.w    loc_9220-loc_9136
loc_913C:               
		addq.b  #$02, $0024(A0)
		move.l  #Collapsing_Platforms_Mappings, $0004(A0) ; loc_94A8
		move.w  #$4000, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$07, $0038(A0)
		move.b  $0028(A0), $001A(A0)
		move.l  #loc_9436, $0034(A0)
		cmpi.b  #hidden_palace_zone, (Current_Zone).w
		bne.s   loc_91A4
		move.l  #Obj1A_MapUnc_9858, $0004(A0) ; loc_9858
		move.w  #$434A, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$30, $0019(A0)
		move.l  #loc_9828, $003C(A0)
		move.l  #loc_944F, $0034(A0)
		bra.s   loc_91E8
loc_91A4:
		cmpi.b  #oil_ocean_zone, (Current_Zone).w
		bne.s   loc_91CE
		move.l  #Obj1A_MapUnc_9902, $0004(A0) ; loc_9902
		move.w  #$639D, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$40, $0019(A0)
		move.l  #loc_9818, $003C(A0)
		bra.s   loc_91E8
loc_91CE:		
		move.l  #loc_9478, $003C(A0)
		move.b  #$34, $0019(A0)
		move.b  #$38, $0016(A0)
		bset    #$04, $0001(A0)
loc_91E8:
		tst.b   $003A(A0)
		beq.s   loc_91FA
		tst.b   $0038(A0)
		beq.w    loc_93AC
		subq.b  #$01, $0038(A0)
loc_91FA:		
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_920A
		move.b  #$01, $003A(A0)
loc_920A:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.l  $003C(A0), A2
		move.w  $0008(A0), D4
		bsr.w     loc_F9D6
		bra.w     MarkObjGone             ; loc_D2A0 
loc_9220:
		tst.b   $0038(A0)
		beq.s   loc_9264
		tst.b   $003A(A0)
		bne.s   loc_9234
		subq.b  #$01, $0038(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_9234:
		bsr.w     loc_920A
		subq.b  #$01, $0038(A0)
		bne.s   loc_9262
		lea     ($FFFFB000).w, A1
		bsr.s   loc_9248
		lea     ($FFFFB040).w, A1
loc_9248:
		btst    #$03, $0022(A1)
		beq.s   loc_9262
		bclr    #$03, $0022(A1)
		bclr    #$05, $0022(A1)
		move.b  #$01, $001D(A1)
loc_9262:
		rts
loc_9264:
		bsr.w     ObjectFall              ; loc_D24E
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2		    
;=============================================================================== 
; Object 0x1A - Collapsing Platforms - Hidden Palace / Oil Ocean ...
; [ End ]
;===============================================================================   
		
;=============================================================================== 
; Object 0x1F - Collapsing Platforms - Dust Hill / Oil Ocean ...
; [ Begin ]
;===============================================================================		   
Obj_0x1F_Collapsing_Platforms: ; loc_9274:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9282(PC, D0), D1
		jmp     loc_9282(PC, D1)  
loc_9282:
		dc.w    loc_9288-loc_9282
		dc.w    loc_931A-loc_9282
		dc.w    loc_9352-loc_9282
loc_9288:
		addq.b  #$02, $0024(A0)
		move.l  #loc_9748, $0004(A0)
		move.w  #$42B8, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$07, $0038(A0)
		move.b  #$44, $0019(A0)
		lea     (loc_945B).l, A4
		btst    #$00, $0028(A0)
		beq.s   loc_92C6
		lea     (loc_9463).l, A4
loc_92C6:
		move.l  A4, $0034(A0)
		cmpi.b  #oil_ocean_zone, (Current_Zone).w
		bne.s   loc_92F2
		move.l  #Obj1A_MapUnc_9902, $0004(A0) ; loc_9902
		move.w  #$639D, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$40, $0019(A0)
		move.l  #loc_946B, $0034(A0)
loc_92F2:
		cmpi.b  #dust_hill_zone, (Current_Zone).w
		bne.s   loc_931A
		move.l  #Obj1A_MapUnc_9942, $0004(A0) ; loc_9942
		move.w  #$63F4, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$20, $0019(A0)
		move.l  #loc_9472, $0034(A0)
loc_931A:
		tst.b   $003A(A0)
		beq.s   loc_932C
		tst.b   $0038(A0)
		beq.w     loc_93A6
		subq.b  #$01, $0038(A0)
loc_932C:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_933C
		move.b  #$01, $003A(A0)
loc_933C:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  #$0010, D3
		move.w  $0008(A0), D4
		bsr.w     PlatformObject
		bra.w     MarkObjGone             ; loc_D2A0
loc_9352:
		tst.b   $0038(A0)
		beq.s   loc_9396
		tst.b   $003A(A0)
		bne.s   loc_9366
		subq.b  #$01, $0038(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_9366:
		bsr.w     loc_933C
		subq.b  #$01, $0038(A0)
		bne.s   loc_9394
		lea     ($FFFFB000).w, A1
		bsr.s   loc_937A
		lea     ($FFFFB040).w, A1
loc_937A:
		btst    #$03, $0022(A1)
		beq.s   loc_9394
		bclr    #$03, $0022(A1)
		bclr    #$05, $0022(A1)
		move.b  #$01, $001D(A1)
loc_9394:
		rts
loc_9396:
		bsr.w     ObjectFall              ; loc_D24E
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_93A6:
		addq.b  #$01, $001A(A0)
		bra.s   loc_93B0              
loc_93AC:
		addq.b  #$02, $001A(A0)
loc_93B0:		
		move.l  $0034(A0), A4		  
		moveq   #$00, D0
		move.b  $001A(A0), D0
		add.w   D0, D0
		move.l  $0004(A0), A3
		adda.w  $00(A3, D0), A3
		move.w  (A3)+, D1
		subq.w  #$01, D1
		bset    #$05, $0001(A0)
		_move.b  0(A0), D4
		move.b  $0001(A0), D5
		move.l  A0, A1
		bra.s   loc_93E2
loc_93DA:
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_9428
		addq.w  #$08,  A3
loc_93E2:
		move.b  #$04, $0024(A1)
		_move.b  D4, 0(A1)
		move.l  A3, $0004(A1)
		move.b  D5, $0001(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  $0018(A0), $0018(A1)
		move.b  $0019(A0), $0019(A1)
		move.b  $0016(A0), $0016(A1)
		move.b  (A4)+, $0038(A1)
		cmpa.l  A0, A1
		bcc.s   loc_9424
		bsr.w     DisplayA1Sprite         ; loc_D3E0
loc_9424:
		dbf    D1, loc_93DA
loc_9428:		
		bsr.w     DisplaySprite           ; loc_D3C2
		move.w  #$00B9, D0
		jmp     (PlaySound).l              ; loc_14C6
loc_9436:		
		dc.b    $1C, $18, $14, $10, $1A, $16, $12, $0E, $0A, $06, $18, $14, $10, $0C, $08, $04
		dc.b    $16, $12, $0E, $0A, $06, $02, $14, $10, $0C		    
loc_944F:
		dc.b    $18, $1C, $20, $1E, $1A, $16, $06, $0E, $14, $12, $0A, $02
loc_945B:              
		dc.b    $1E, $16, $0E, $06, $1A, $12, $0A, $02
loc_9463:
		dc.b    $16, $1E, $1A, $12, $06, $0E, $0A, $02
loc_946B:
		dc.b    $1A, $12, $0A, $02, $16, $0E, $06              
loc_9472:		
		dc.b    $1A, $16, $12, $0E, $0A, $02				         
loc_9478:
		dc.b    $20, $20, $20, $20, $20, $20, $20, $20, $21, $21, $22, $22, $23, $23, $24, $24
		dc.b    $25, $25, $26, $26, $27, $27, $28, $28, $29, $29, $2A, $2A, $2B, $2B, $2C, $2C
		dc.b    $2D, $2D, $2E, $2E, $2F, $2F, $30, $30, $30, $30, $30, $30, $30, $30, $30, $30		  
Collapsing_Platforms_Mappings: ; loc_94A8:
		dc.w    Collapsing_Platforms_Map_01-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_02-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_03-Collapsing_Platforms_Mappings
		dc.w    Collapsing_Platforms_Map_04-Collapsing_Platforms_Mappings
Collapsing_Platforms_Map_01: ; loc_94B0:
		dc.w    $0010
		dc.l    $C80E0057, $002B0010, $D00D0063, $0031FFF0
		dc.l    $E00D006B, $00350010, $E00D0073, $0039FFF0
		dc.l    $D806007B, $003DFFE0, $D8060081, $0040FFD0
		dc.l    $F00D0087, $00430010, $F00D008F, $0047FFF0
		dc.l    $F0050097, $004BFFE0, $F005009B, $004DFFD0
		dc.l    $000D009F, $004F0010, $000500A7, $00530000
		dc.l    $000D00AB, $0055FFE0, $000500B3, $0059FFD0
		dc.l    $100D00AB, $00550010, $100500B7, $005B0000
Collapsing_Platforms_Map_02: ; loc_9532:
		dc.w    $0010
		dc.l    $C80E0057, $002B0010, $D00D0063, $0031FFF0
		dc.l    $E00D006B, $00350010, $E00D0073, $0039FFF0
		dc.l    $D806007B, $003DFFE0, $D80600BB, $005DFFD0
		dc.l    $F00D0087, $00430010, $F00D008F, $0047FFF0
		dc.l    $F0050097, $004BFFE0, $F00500C1, $0060FFD0
		dc.l    $000D009F, $004F0010, $000500A7, $00530000
		dc.l    $000D00AB, $0055FFE0, $000500B7, $005BFFD0
		dc.l    $100D00AB, $00550010, $100500B7, $005B0000
Collapsing_Platforms_Map_03: ; loc_95B4:
		dc.w    $0019
		dc.l    $C806005D, $002E0020, $C8060057, $002B0010
		dc.l    $D0050067, $00330000, $D0050063, $0031FFF0
		dc.l    $E005006F, $00370020, $E005006B, $00350010
		dc.l    $E0050077, $003B0000, $E0050073, $0039FFF0
		dc.l    $D806007B, $003DFFE0, $D8060081, $0040FFD0
		dc.l    $F005008B, $00450020, $F0050087, $00430010
		dc.l    $F0050093, $00490000, $F005008F, $0047FFF0
		dc.l    $F0050097, $004BFFE0, $F005009B, $004DFFD0
		dc.l    $0005008B, $00450020, $0005008B, $00450010
		dc.l    $000500A7, $00530000, $000500AB, $0055FFF0
		dc.l    $000500AB, $0055FFE0, $000500B3, $0059FFD0
		dc.l    $100500AB, $00550020, $100500AB, $00550010
		dc.l    $100500B7, $005B0000
Collapsing_Platforms_Map_04: ; loc_967E:
		dc.w    $0019
		dc.l    $C806005D, $002E0020, $C8060057, $002B0010
		dc.l    $D0050067, $00330000, $D0050063, $0031FFF0
		dc.l    $E005006F, $00370020, $E005006B, $00350010
		dc.l    $E0050077, $003B0000, $E0050073, $0039FFF0
		dc.l    $D806007B, $003DFFE0, $D80600BB, $005DFFD0
		dc.l    $F005008B, $00450020, $F0050087, $00430010
		dc.l    $F0050093, $00490000, $F005008F, $0047FFF0
		dc.l    $F0050097, $004BFFE0, $F00500C1, $0060FFD0
		dc.l    $0005008B, $00450020, $0005008B, $00450010
		dc.l    $000500A7, $00530000, $000500AB, $0055FFF0
		dc.l    $000500AB, $0055FFE0, $000500B7, $005BFFD0
		dc.l    $100500AB, $00550020, $100500AB, $00550010
		dc.l    $100500B7, $005B0000              
loc_9748:
		dc.w    loc_9750-loc_9748
		dc.w    loc_9772-loc_9748
		dc.w    loc_97B4-loc_9748
		dc.w    loc_97D6-loc_9748
loc_9750:
		dc.w    $0004
		dc.l    $F80D0000, $0000FFE0, $080D0000, $0000FFE0
		dc.l    $F80D0000, $00000000, $080D0000, $00000000
loc_9772:
		dc.w    $0008
		dc.l    $F8050000, $0000FFE0, $F8050000, $0000FFF0
		dc.l    $F8050000, $00000000, $F8050000, $00000010
		dc.l    $08050000, $0000FFE0, $08050000, $0000FFF0
		dc.l    $08050000, $00000000, $08050000, $00000010
loc_97B4:
		dc.w    $0004
		dc.l    $F80D0000, $0000FFE0, $080D0008, $0004FFE0
		dc.l    $F80D0000, $00000000, $080D0008, $00040000
loc_97D6:
		dc.w    $0008
		dc.l    $F8050000, $0000FFE0, $F8050004, $0002FFF0
		dc.l    $F8050000, $00000000, $F8050004, $00020010
		dc.l    $08050008, $0004FFE0, $0805000C, $0006FFF0
		dc.l    $08050008, $00040000, $0805000C, $00060010
loc_9818:         
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10		    
loc_9828:
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10		   
Obj1A_MapUnc_9858:	BINCLUDE	"mappings/sprite/obj1A_HPZ.bin"
Obj1A_MapUnc_9902:	BINCLUDE	"mappings/sprite/obj1A_OOZ.bin"
Obj1A_MapUnc_9942:	BINCLUDE	"mappings/sprite/obj1F_DHZ.bin"
;=============================================================================== 
; Object 0x1F - Collapsing Platforms - Dust Hill / Oil Ocean ...
; [ End ]
;===============================================================================		     
		nop		             ; Filler    
;=============================================================================== 
; Object 0x1C - Bridge, Support, Hill Top Posts... 
; [ Begin ]
;===============================================================================        
Obj_0x1C_Misc: ; loc_999C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_99AA(PC, D0), D1
		jmp     loc_99AA(PC, D1)   
loc_99AA:		             
		dc.w    loc_9A1E-loc_99AA
		dc.w    loc_9A50-loc_99AA
loc_99AE:
		dc.l    Obj1C_MapUnc_9B9A
		dc.w    $43FD
		dc.b    $04, $06
		
		dc.l    ($01<<$18)|Obj1C_MapUnc_9B9A
		dc.w    $43FD
		dc.b    $04, $06
		
		dc.l    ($01<<$18)|Obj11_MapUnc_85E0 ; loc_85E0 
		dc.w    $43C6
		dc.b    $04, $01
		
		dc.l    ($02<<$18)|Obj1C_MapUnc_9B9A
		dc.w    $23FD
		dc.b    $10, $06
		
		dc.l    ($03<<$18)|Obj16_MapUnc_1611E ; loc_1611E 
		dc.w    $43E6
		dc.b    $08, $04
		
		dc.l    ($04<<$18)|Obj16_MapUnc_1611E ; loc_1611E 
		dc.w    $43E6
		dc.b    $08, $04
		
		dc.l    ($01<<$18)|Obj16_MapUnc_1611E ; loc_1611E 
		dc.w    $43E6
		dc.b    $20, $01
		
		dc.l    Obj1C_MapUnc_9B3A 
		dc.w    $4000
		dc.b    $08, $01
		
		dc.l    ($01<<$18)|Obj1C_MapUnc_9B3A 
		dc.w    $4000
		dc.b    $08, $01
		
		dc.l    Obj1C_MapUnc_9B52 
		dc.w    $4428
		dc.b    $04, $04
		
		dc.l    loc_9B6A 
		dc.w    $4346
		dc.b    $08, $04
		
		dc.l    ($01<<$18)|loc_9B6A 
		dc.w    $4346
		dc.b    $08, $04
		
		dc.l    ($02<<$18)|loc_9B6A 
		dc.w    $4346
		dc.b    $08, $04
		
		dc.l    ($03<<$18)|loc_9B6A 
		dc.w    $4346
		dc.b    $08, $04		  
loc_9A1E:		      
		addq.b  #$02, $0024(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsl.w   #$03, D0
		lea     loc_99AE(PC), A1  
		lea     $00(A1, D0), A1
		move.b  (A1), $001A(A0)
		move.l  (A1)+, $0004(A0)
		move.w  (A1)+, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  (A1)+, $0019(A0)
		move.b  (A1)+, $0018(A0)
loc_9A50:
		bra.w     MarkObjGone             ; loc_D2A0
;=============================================================================== 
; Object 0x1C - Bridge, Support, Hill Top Posts... 
; [ End ]
;=============================================================================== 
 
;=============================================================================== 
; Object 0x71 - Bridge, Support, Hidden Palace Orbs, Metropolis Lava Bubbles... 
; [ Begin ]
;===============================================================================    
Obj_0x71_Hpz_Misc: ; loc_9A54: 
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9A62(PC, D0), D1
		jmp     loc_9A62(PC, D1)
loc_9A62:
		dc.w    loc_9A7E-loc_9A62
		dc.w    loc_9AC0-loc_9A62
loc_9A66:
		dc.l    ($03<<$18)|Obj11_MapUnc_8598 ; loc_8598
		dc.w    $6300
		dc.b    $04, 01 
		dc.l    Obj71_MapUnc_9AFA              ; loc_9AFA
		dc.w    $E35A
		dc.b    $10, $01   
		dc.l    Obj71_MapUnc_9BBE           ; loc_9BBE 
		dc.w    $4536
		dc.b    $10, $01		
loc_9A7E:
		addq.b  #$02, $0024(A0)
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		lsl.w   #$03, D0
		lea     loc_9A66(PC), A1
		lea     $00(A1, D0), A1
		move.b  (A1), $001A(A0)
		move.l  (A1)+, $0004(A0)
		move.w  (A1)+, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  (A1)+, $0019(A0)
		move.b  (A1)+, $0018(A0)
		move.b  $0028(A0), D0
		andi.w  #$00F0, D0
		lsr.b   #$04, D0
		move.b  D0, $001C(A0)
loc_9AC0:		
		lea     (loc_9ACE).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		bra.w     MarkObjGone             ; loc_D2A0
loc_9ACE:
		dc.w    loc_9AD6-loc_9ACE
		dc.w    loc_9ADE-loc_9ACE
		dc.w    loc_9AED-loc_9ACE
		dc.w    loc_9AF6-loc_9ACE
loc_9AD6:
		dc.b    $08, $03, $03, $04, $05, $05, $04, $FF
loc_9ADE:
		dc.b    $05, $00, $00, $00, $01, $02, $03, $03, $02, $01, $02, $03, $03, $01, $FF
loc_9AED:
		dc.b    $0B, $00, $01, $02, $03, $04, $05, $FD, $03
loc_9AF6:
		dc.b    $7F, $06, $FD, $02               
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj71_MapUnc_9AFA:	BINCLUDE	"mappings/sprite/obj71_a.bin"	; glowing orbs
Obj1C_MapUnc_9B3A:	BINCLUDE	"mappings/sprite/obj1C_a.bin"	; level art
Obj1C_MapUnc_9B52:	BINCLUDE	"mappings/sprite/obj1C_b.bin"	; ARZ waterfall

loc_9B6A:
		dc.w    loc_9B72-loc_9B6A
		dc.w    loc_9B7C-loc_9B6A
		dc.w    loc_9B86-loc_9B6A
		dc.w    loc_9B90-loc_9B6A
loc_9B72:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_9B7C:
		dc.w    $0001
		dc.l    $F8050004, $0002FFF8
loc_9B86:
		dc.w    $0001
		dc.l    $F8052008, $2004FFF8
loc_9B90:
		dc.w    $0001
		dc.l    $F801000C, $0006FFFC		  
Obj1C_MapUnc_9B9A:	BINCLUDE	"mappings/sprite/obj1C_d.bin"	; MTZ thingy
Obj71_MapUnc_9BBE:	BINCLUDE	"mappings/sprite/obj71_b.bin"
; ===========================================================================
		nop

;=============================================================================== 
; Object 0x2A - Dust Hill - Up and Down Pillar
; [ Begin ]
;===============================================================================		    
Obj_0x2A_Up_Down_Pillar: ; loc_9C0C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9C1A(PC, D0), D1
		jmp     loc_9C1A(PC, D1)
loc_9C1A:
		dc.w    loc_9C1E-loc_9C1A
		dc.w    loc_9C58-loc_9C1A
loc_9C1E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj2A_MapUnc_9CAE, $0004(A0) ; loc_9CAE
		move.w  #$4000, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  #$50, $0016(A0)
		bset    #$04, $0001(A0)
loc_9C58:
		tst.b   $0025(A0)
		bne.s   loc_9C72
		addq.w  #$01, $0030(A0)
		cmpi.w  #$0060, $0030(A0)
		bne.s   loc_9C84
		move.b  #$02, $0025(A0)
		bra.s   loc_9C84
loc_9C72:
		subq.w  #$08, $0030(A0)
		bhi.s   loc_9C84
		move.w  #$0000, $0030(A0)
		move.b  #$00, $0025(A0)
loc_9C84:
		move.w  $0032(A0), D0
		sub.w   $0030(A0), D0
		move.w  D0, $000C(A0)
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0040, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     SolidObject             ; loc_F4A0
		bra.w     MarkObjGone             ; loc_D2A0
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj2A_MapUnc_9CAE:	BINCLUDE	"mappings/sprite/obj2A.bin"
; ===========================================================================

;=============================================================================== 
; Object 0x2D - Hill Top / Chemical Plant - Automatic Door. 
; [ Begin ]
;===============================================================================		  
Obj_0x2D_Automatic_Door: ; loc_9CE2:		
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9CF0(PC, D0), D1
		jmp     loc_9CF0(PC, D1)
loc_9CF0:
		dc.w    loc_9CF4-loc_9CF0
		dc.w    loc_9D76-loc_9CF0
loc_9CF4:
		addq.b  #$02, $0024(A0)
		move.l  #Obj2D_MapUnc_9E1E, $0004(A0) ; loc_9E1E
		move.w  #$2426, $0002(A0)
		move.b  #$08, $0019(A0)
		cmpi.b  #metropolis_zone, (Current_Zone).w
		bne.s   loc_9D20
		move.w  #$6000, $0002(A0)
		move.b  #$0C, $0019(A0)
loc_9D20:
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		bne.s   loc_9D34
		move.w  #$2394, $0002(A0)
		move.b  #$0C, $0019(A0)
loc_9D34:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  $0028(A0), $001A(A0)
		move.w  $0008(A0), D2
		move.w  D2, D3
		subi.w  #$0200, D2
		addi.w  #$0018, D3
		btst    #$00, $0022(A0)
		beq.s   loc_9D6E
		subi.w  #$FE18, D2
		addi.w  #$01E8, D3
loc_9D6E:
		move.w  D2, $0038(A0)
		move.w  D3, $003A(A0)
loc_9D76:
		btst    #$00, $0022(A0)
		bne.s   loc_9D92
		move.w  $0038(A0), D2
		move.w  $0008(A0), D3
		tst.b   $0025(A0)
		beq.s   loc_9DA4
		move.w  $003A(A0), D3
		bra.s   loc_9DA4
loc_9D92:
		move.w  $0008(A0), D2
		move.w  $003A(A0), D3
		tst.b   $0025(A0)
		beq.s   loc_9DA4
		move.w  $0038(A0), D2
loc_9DA4:
		move.b  #$00, $0025(A0)
		move.w  ($FFFFB008).w, D0
		cmp.w   D2, D0
		bcs.w     loc_9DC0
		cmp.w   D3, D0
		bcc.w     loc_9DC0
		move.b  #$02, $0025(A0)
loc_9DC0:
		move.w  ($FFFFB048).w, D0
		cmp.w   D2, D0
		bcs.w     loc_9DD6
		cmp.w   D3, D0
		bcc.w     loc_9DD6
		move.b  #$02, $0025(A0)
loc_9DD6:
		tst.b   $0025(A0)
		beq.s   loc_9DEA
		cmpi.w  #$0040, $0030(A0)
		beq.s   loc_9E00
		addq.w  #$08,  $0030(A0)
		bra.s   loc_9DF4
loc_9DEA:
		tst.w   $0030(A0)
		beq.s   loc_9E00
		subq.w  #$08, $0030(A0)
loc_9DF4:
		move.w  $0032(A0), D0
		sub.w   $0030(A0), D0
		move.w  D0, $000C(A0)
loc_9E00:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0020, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     SolidObject             ; loc_F4A0
		bra.w     MarkObjGone             ; loc_D2A0
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj2D_MapUnc_9E1E:	BINCLUDE	"mappings/sprite/obj2D.bin"
; ===========================================================================
		nop
;=============================================================================== 
; Object ??? - Unknow Object 0x009E6C
; [ Begin ]    Sonic 1 Object 1E - leftover Ballhog object
;===============================================================================		
S1_Ballhog: ; Unknow_Obj_0x009E6C: ; loc_9E6C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9E7A(PC, D0), D1
		jmp     loc_9E7A(PC, D1)
loc_9E7A:
		dc.w    loc_9E7E-loc_9E7A
		dc.w    loc_9ED2-loc_9E7A
loc_9E7E:
		move.b  #$13, $0016(A0)
		move.b  #$08, $0017(A0)
		move.l  #S1_Ballhog_Mappings, $0004(A0) ;  loc_A18E
		move.w  #$2302, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$05, $0020(A0)
		move.b  #$0C, $0019(A0)
		bsr.w     ObjectFall              ; loc_D24E
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_9ED0
		add.w   D1, $000C(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
loc_9ED0:
		rts
loc_9ED2:
		lea     (Ani_S1_Ballhog).l, A1    ; loc_A174
		bsr.w     AnimateSprite           ; loc_D412
		cmpi.b  #$01, $001A(A0)
		bne.s   loc_9EEC
		tst.b   $0032(A0)
		beq.s   loc_9EF4
		bra.s   loc_9EF0
loc_9EEC:
		clr.b   $0032(A0)
loc_9EF0:
		bra.w     MarkObjGone             ; loc_D2A0
loc_9EF4:
		move.b  #$01, $0032(A0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_9F38
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$FF00, $0010(A1)
		move.w  #$0000, $0012(A1)
		moveq   #-4, D0
		btst    #$00, $0022(A0)
		beq.s   loc_9F28
		neg.w   D0
		neg.w   $0010(A1)
loc_9F28:
		add.w   D0, $0008(A1)
		addi.w  #$000C, $000C(A1)
		move.b  $0028(A0), $0028(A1)
loc_9F38:
		bra.s   loc_9EF0				
;=============================================================================== 
; Object ??? - Unknow Object 0x009E6C
; [ End ]
;===============================================================================		   
;=============================================================================== 
; Object ??? - Unknow Object 0x009F3A    
; [ Begin ]  Sonic1 Object 20 - leftover object for the ball that Ballhog throws
;===============================================================================  
S1_BallHog_Ball: ; Unknow_Obj_0x009F3A: ; loc_9F3A:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_9F48(PC, D0), D1
		jmp     loc_9F48(PC, D1)
loc_9F48:
		dc.w    loc_9F4C-loc_9F48
		dc.w    loc_9F94-loc_9F48
loc_9F4C:
		addq.b  #$02, $0024(A0)
		move.b  #$07, $0016(A0)
		move.l  #S1_Ballhog_Mappings, $0004(A0) ; loc_A18E
		move.w  #$2302, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$87, $0020(A0)
		move.b  #$08, $0019(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		mulu.w  #$003C, D0
		move.w  D0, $0030(A0)
		move.b  #$04, $001A(A0)
loc_9F94:
		jsr     ObjectFall              ; (loc_D24E)
		tst.w   $0012(A0)
		bmi.s   loc_9FD0
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_9FD0
		add.w   D1, $000C(A0)
		move.w  #$FD00, $0012(A0)
		tst.b   D3
		beq.s   loc_9FD0
		bmi.s   loc_9FC6
		tst.w   $0010(A0)
		bpl.s   loc_9FD0
		neg.w   $0010(A0)
		bra.s   loc_9FD0
loc_9FC6:
		tst.w   $0010(A0)
		bmi.s   loc_9FD0
		neg.w   $0010(A0)
loc_9FD0:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_9FEC
		_move.b  #$24, 0(A0)
		_move.b  #$3F, 0(A0)
		move.b  #$00, $0024(A0)
		bra.w     Obj_0x3F		; loc_A11E
loc_9FEC:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_9FFE
		move.b  #$05, $001E(A0)
		bchg    #0, $001A(A0)
loc_9FFE:
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
;=============================================================================== 
; Object ??? - Unknow Object 0x009F3A
; [ End ]
;===============================================================================  

;=============================================================================== 
; Object 0x24 
; [ Begin ]
;===============================================================================		    
Obj_0x24: ; loc_A012:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_A020(PC, D0), D1
		jmp     loc_A020(PC, D1)
loc_A020:
		dc.w    loc_A024-loc_A020
		dc.w    loc_A068-loc_A020
loc_A024:
		addq.b  #$02, $0024(A0)
		move.l  #loc_A1F6, $0004(A0)
		move.w  #$041C, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$00, $0020(A0)
		move.b  #$0C, $0019(A0)
		move.b  #$09, $001E(A0)
		move.b  #$00, $001A(A0)
		move.w  #$00A5, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_A068:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_A082
		move.b  #$09, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$04, $001A(A0)
		beq.w    DeleteObject            ; loc_D3B4
loc_A082:
		bra.w     DisplaySprite           ; loc_D3C2
;=============================================================================== 
; Object 0x24 
; [ End ]
;=============================================================================== 
		     
;=============================================================================== 
; Object 0x27 - Object Hit - Enemies / Monitors 
; [ Begin ]
;===============================================================================		 
Obj_0x27_Object_Hit: ; loc_A086:             
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Object_Hit_Index(PC, D0), D1 ; loc_A094
		jmp     Object_Hit_Index(PC, D1)     ; loc_A094
Object_Hit_Index: ; loc_A094:
		dc.w    loc_A09A-Object_Hit_Index
		dc.w    loc_A0BC-Object_Hit_Index
		dc.w    loc_A100-Object_Hit_Index
loc_A09A:
		addq.b  #$02, $0024(A0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_A0BC
		_move.b  #$28, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $003E(A0), $003E(A1)
loc_A0BC:
		addq.b  #$02, $0024(A0)
		move.l  #Object_Hit_Mappings, $0004(A0) ;  loc_A226
		move.w  #$05A0, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$00, $0020(A0)
		move.b  #$0C, $0019(A0)
		move.b  #$07, $001E(A0)
		move.b  #$00, $001A(A0)
		move.w  #$00C1, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_A100:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_A11A
		move.b  #$07, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$05, $001A(A0)
		beq.w    DeleteObject            ; loc_D3B4
loc_A11A:
		bra.w     DisplaySprite           ; loc_D3C2  
;=============================================================================== 
; Object 0x27 - Object Hit - Enemies / Monitors 
; [ End ]
;===============================================================================   
;=============================================================================== 
; Object 0x3F 
; [ Begin ]
;===============================================================================  
Obj_0x3F: ; loc_A11E:               
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_A12C(PC, D0), D1
		jmp     loc_A12C(PC, D1)
loc_A12C:
		dc.w    loc_A130-loc_A12C
		dc.w    loc_A100-loc_A12C
loc_A130:
		addq.b  #$02, $0024(A0)
		move.l  #loc_A292, $0004(A0)
		move.w  #$05A0, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$00, $0020(A0)
		move.b  #$0C, $0019(A0)
		move.b  #$07, $001E(A0)
		move.b  #$00, $001A(A0)
		move.w  #$00C4, D0
		jmp     (PlaySound).l             ; loc_14C6		   
;=============================================================================== 
; Object 0x3F
; [ End ]
;===============================================================================		
Ani_S1_Ballhog: ; Unknow_Obj_0x009E6C_Data: ; loc_A174:
		dc.w    loc_A176-Ani_S1_Ballhog
loc_A176:
		dc.b    $09, $00, $00, $02, $02, $03, $02, $00, $00, $02, $02, $03, $02, $00, $00, $02
		dc.b    $02, $03, $02, $00, $00, $01, $FF, $00    
S1_Ballhog_Mappings: ; Unknow_Obj_0x009E6C_Mappings:  loc_A18E:
		dc.w    loc_A19A-S1_Ballhog_Mappings
		dc.w    loc_A1AC-S1_Ballhog_Mappings
		dc.w    loc_A1BE-S1_Ballhog_Mappings
		dc.w    loc_A1D0-S1_Ballhog_Mappings
		dc.w    loc_A1E2-S1_Ballhog_Mappings
		dc.w    loc_A1EC-S1_Ballhog_Mappings
loc_A19A:
		dc.w    $0002
		dc.l    $EF090000, $0000FFF4, $FF0A0006, $0003FFF4
loc_A1AC:
		dc.w    $0002
		dc.l    $EF090000, $0000FFF4, $FF0A000F, $0007FFF4
loc_A1BE:
		dc.w    $0002
		dc.l    $F4090000, $0000FFF4, $04090018, $000CFFF4
loc_A1D0:
		dc.w    $0002
		dc.l    $E4090000, $0000FFF4, $F40A001E, $000FFFF4
loc_A1E2:
		dc.w    $0001
		dc.l    $F8050027, $0013FFF8
loc_A1EC:
		dc.w    $0001
		dc.l    $F805002B, $0015FFF8              
loc_A1F6:
		dc.w    loc_A1FE-loc_A1F6
		dc.w    loc_A208-loc_A1F6
		dc.w    loc_A212-loc_A1F6
		dc.w    loc_A21C-loc_A1F6
loc_A1FE:
		dc.w    $0001
		dc.l    $F40A0000, $0000FFF4
loc_A208:
		dc.w    $0001
		dc.l    $F40A0009, $0004FFF4
loc_A212:
		dc.w    $0001
		dc.l    $F40A0012, $0009FFF4
loc_A21C:
		dc.w    $0001
		dc.l    $F40A001B, $000DFFF4
Object_Hit_Mappings: ; loc_A226:
		dc.w    Object_Hit_Map_01-Object_Hit_Mappings
		dc.w    Object_Hit_Map_02-Object_Hit_Mappings
		dc.w    Object_Hit_Map_03-Object_Hit_Mappings
		dc.w    Object_Hit_Map_04-Object_Hit_Mappings
		dc.w    Object_Hit_Map_05-Object_Hit_Mappings
Object_Hit_Map_01: ; loc_A230:
		dc.w    $0001
		dc.l    $F8090000, $0000FFF4
Object_Hit_Map_02: ;loc_A23A:
		dc.w    $0001
		dc.l    $F00F0006, $0003FFF0
Object_Hit_Map_03: ;loc_A244:
		dc.w    $0001
		dc.l    $F00F0016, $000BFFF0
Object_Hit_Map_04: ;loc_A24E:
		dc.w    $0004
		dc.l    $EC0A0026, $0013FFEC, $EC05002F, $00170004
		dc.l    $0405182F, $1817FFEC, $FC0A1826, $1813FFFC
Object_Hit_Map_05: ;loc_A270:
		dc.w    $0004
		dc.l    $EC0A0033, $0019FFEC, $EC05003C, $001E0004
		dc.l    $0405183C, $181EFFEC, $FC0A1833, $1819FFFC
loc_A292:
		dc.w    Object_Hit_Map_01-loc_A292
		dc.w    loc_A29C-loc_A292
		dc.w    loc_A2A6-loc_A292
		dc.w    Object_Hit_Map_04-loc_A292
		dc.w    Object_Hit_Map_05-loc_A292
loc_A29C:
		dc.w    $0001
		dc.l    $F00F0040, $0020FFF0
loc_A2A6:
		dc.w    $0001
		dc.l    $F00F0050, $0028FFF0 
;=============================================================================== 
; Object 0x28 - Flickies
; [ Begin ]
;===============================================================================						 
Obj_0x28_Flickies: ; loc_A2B0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Flickies_Index(PC, D0), D1 ; loc_A2BE
		jmp     Flickies_Index(PC, D1)     ; loc_A2BE
Flickies_Index: ; loc_A2BE:
		dc.w    loc_A3B2-Flickies_Index
		dc.w    loc_A4D8-Flickies_Index
		dc.w    loc_A532-Flickies_Index
		dc.w    loc_A56E-Flickies_Index
		dc.w    loc_A532-Flickies_Index
		dc.w    loc_A532-Flickies_Index
		dc.w    loc_A532-Flickies_Index
		dc.w    loc_A56E-Flickies_Index
		dc.w    loc_A532-Flickies_Index
		dc.w    loc_A5EE-Flickies_Index
		dc.w    loc_A60E-Flickies_Index
		dc.w    loc_A60E-Flickies_Index
		dc.w    loc_A62E-Flickies_Index
		dc.w    loc_A668-Flickies_Index
		dc.w    loc_A6C2-Flickies_Index
		dc.w    loc_A6E0-Flickies_Index
		dc.w    loc_A6C2-Flickies_Index
		dc.w    loc_A6E0-Flickies_Index
		dc.w    loc_A6C2-Flickies_Index
		dc.w    loc_A71E-Flickies_Index
		dc.w    loc_A684-Flickies_Index
loc_A2E8: zoneOrderedTable 1,2
	zoneTableEntry.b $00, $05
	zoneTableEntry.b $02, $03
	zoneTableEntry.b $06, $03
	zoneTableEntry.b $04, $05
	zoneTableEntry.b $04, $01
	zoneTableEntry.b $00, $01
	zoneTableEntry.b $00, $05
	zoneTableEntry.b $02, $03
	zoneTableEntry.b $06, $03
	zoneTableEntry.b $04, $05
	zoneTableEntry.b $04, $01
	zoneTableEntry.b $00, $01
	zoneTableEntry.b $00, $05
	zoneTableEntry.b $02, $03
	zoneTableEntry.b $06, $03
	zoneTableEntry.b $04, $05
	zoneTableEntry.b $04, $01
    zoneTableEnd
	dc.b 0, 1	; entry for non-existant zone $11

loc_A30C:
		dc.w    $FE00, $FC00
		dc.l    loc_A816
		dc.w    $FE00, $FD00
		dc.l    loc_A83A
		dc.w    $FE80, $FD00
		dc.l    loc_A816
		dc.w    $FEC0, $FE80
		dc.l    loc_A83A
		dc.w    $FE40, $FD00
		dc.l    loc_A85E
		dc.w    $FD00, $FC00
		dc.l    loc_A83A
		dc.w    $FD80, $FC80
		dc.l    loc_A85E
loc_A344:
		dc.w    $FBC0, $FC00, $FBC0, $FC00, $FBC0, $FC00, $FD00, $FC00
		dc.w    $FD00, $FC00, $FE80, $FD00, $FE80, $FD00, $FEC0, $FE80
		dc.w    $FE40, $FD00, $FE00, $FD00, $FD80, $FC80
loc_A370:
		dc.l    loc_A83A
		dc.l    loc_A83A
		dc.l    loc_A83A
		dc.l    loc_A816
		dc.l    loc_A816
		dc.l    loc_A816
		dc.l    loc_A816
		dc.l    loc_A83A
		dc.l    loc_A85E
		dc.l    loc_A83A
		dc.l    loc_A85E		
loc_A39C:
		dc.w    $05A5, $05A5, $05A5, $0553, $0553, $0573, $0573, $0585
		dc.w    $0593, $0565, $05B3
loc_A3B2:
		tst.b   $0028(A0)
		beq.w     loc_A420
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.b  D0, $0024(A0)
		subi.w  #$0014, D0
		move.w  loc_A39C(PC, D0), $0002(A0)
		add.w   D0, D0
		move.l  loc_A370(PC, D0), $0004(A0)
		lea     loc_A344(PC), A1
		move.w  $00(A1, D0), $0032(A0)
		move.w  $00(A1, D0), $0010(A0)
		move.w  $02(A1, D0), $0034(A0)
		move.w  $02(A1, D0), $0012(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$0C, $0016(A0)
		move.b  #$04, $0001(A0)
		bset    #$00, $0001(A0)
		move.b  #$06, $0018(A0)
		move.b  #$08, $0019(A0)
		move.b  #$07, $001E(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_A420:
		addq.b  #$02, $0024(A0)
		bsr.w     PseudoRandomNumber      ; loc_31E4
		andi.w  #$0001, D0
		moveq   #$00, D1
		move.b  (Current_Zone).w, D1
		add.w   D1, D1
		add.w   D0, D1
		lea     loc_A2E8(PC), A1
		move.b  $00(A1, D1), D0
		move.b  D0, $0030(A0)
		lsl.w   #$03, D0
		lea     loc_A30C(PC), A1
		adda.w  D0, A1
		move.w  (A1)+, $0032(A0)
		move.w  (A1)+, $0034(A0)
		move.l  (A1)+, $0004(A0)
		move.w  #$0580, $0002(A0)
		btst    #$00, $0030(A0)
		beq.s   loc_A46A
		move.w  #$0592, $0002(A0)
loc_A46A:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$0C, $0016(A0)
		move.b  #$04, $0001(A0)
		bset    #$00, $0001(A0)
		move.b  #$06, $0018(A0)
		move.b  #$08, $0019(A0)
		move.b  #$07, $001E(A0)
		move.b  #$02, $001A(A0)
		move.w  #$FC00, $0012(A0)
		tst.b   (Boss_defeated_flag).w
		bne.s   loc_A4CA
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_A4C6
		_move.b  #$29, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $003E(A0), D0
		lsr.w   #$01, D0
		move.b  D0, $001A(A1)
loc_A4C6:
		bra.w     DisplaySprite           ; loc_D3C2
loc_A4CA:
		move.b  #$12, $0024(A0)
		clr.w   $0010(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_A4D8:
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bsr.w     ObjectFall              ; loc_D24E
		tst.w   $0012(A0)
		bmi.s   loc_A52E
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A52E
		add.w   D1, $000C(A0)
		move.w  $0032(A0), $0010(A0)
		move.w  $0034(A0), $0012(A0)
		move.b  #$01, $001A(A0)
		move.b  $0030(A0), D0
		add.b   D0, D0
		addq.b  #$04, D0
		move.b  D0, $0024(A0)
		tst.b   (Boss_defeated_flag).w
		beq.s   loc_A52E
		btst    #$04, (Vint_runcount+3).w
		beq.s   loc_A52E
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
loc_A52E:
		bra.w     DisplaySprite           ; loc_D3C2
loc_A532:
		bsr.w     ObjectFall              ; loc_D24E
		move.b  #$01, $001A(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A55C
		move.b  #$00, $001A(A0)
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A55C
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
loc_A55C:
		tst.b   $0028(A0)
		bne.s   loc_A5D2
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_A56E:
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A5AA
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A5AA
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
		tst.b   $0028(A0)
		beq.s   loc_A5AA
		cmpi.b  #$0A, $0028(A0)
		beq.s   loc_A5AA
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
loc_A5AA:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_A5C0
		move.b  #$01, $001E(A0)
		addq.b  #$01, $001A(A0)
		andi.b  #$01, $001A(A0)
loc_A5C0:
		tst.b   $0028(A0)
		bne.s   loc_A5D2
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_A5D2:
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bcs.s   loc_A5EA
		subi.w  #$0180, D0
		bpl.s   loc_A5EA
		tst.b   $0001(A0)
		bpl.w    DeleteObject            ; loc_D3B4
loc_A5EA:
		bra.w     DisplaySprite           ; loc_D3C2
loc_A5EE:
		tst.b   $0001(A0)
		bpl.w     DeleteObject            ; loc_D3B4
		subq.w  #$01, $0036(A0)
		bne.w     loc_A60A
		move.b  #$02, $0024(A0)
		move.b  #$03, $0018(A0)
loc_A60A:
		bra.w     DisplaySprite           ; loc_D3C2
loc_A60E:
		bsr.w     loc_A7B2
		bcc.s   loc_A62A
		move.w  $0032(A0), $0010(A0)
		move.w  $0034(A0), $0012(A0)
		move.b  #$0E, $0024(A0)
		bra.w     loc_A56E
loc_A62A:
		bra.w     loc_A5D2
loc_A62E:
		bsr.w     loc_A7B2
		bpl.s   loc_A664
		clr.w   $0010(A0)
		clr.w   $0032(A0)
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		bsr.w     loc_A772
		bsr.w     loc_A79A
		subq.b  #$01, $001E(A0)
		bpl.s   loc_A664
		move.b  #$01, $001E(A0)
		addq.b  #$01, $001A(A0)
		andi.b  #$01, $001A(A0)
loc_A664:
		bra.w     loc_A5D2
loc_A668:
		bsr.w     loc_A7B2
		bpl.s   loc_A6BE
		move.w  $0032(A0), $0010(A0)
		move.w  $0034(A0), $0012(A0)
		move.b  #$04, $0024(A0)
		bra.w     loc_A532
loc_A684:
		bsr.w     ObjectFall              ; loc_D24E
		move.b  #$01, $001A(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A6BE
		move.b  #$00, $001A(A0)
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A6BE
		not.b  $0029(A0)
		bne.s   loc_A6B4
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
loc_A6B4:
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
loc_A6BE:
		bra.w     loc_A5D2
loc_A6C2:
		bsr.w     loc_A7B2
		bpl.s   loc_A6DC
		clr.w   $0010(A0)
		clr.w   $0032(A0)
		bsr.w     ObjectFall              ; loc_D24E
		bsr.w     loc_A772
		bsr.w     loc_A79A
loc_A6DC:
		bra.w     loc_A5D2
loc_A6E0:
		bsr.w     loc_A7B2
		bpl.s   loc_A71A
		bsr.w     ObjectFall              ; loc_D24E
		move.b  #$01, $001A(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A71A
		move.b  #$00, $001A(A0)
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A71A
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
loc_A71A:
		bra.w     loc_A5D2
loc_A71E:
		bsr.w     loc_A7B2
		bpl.s   loc_A76E
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A758
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A758
		not.b  $0029(A0)
		bne.s   loc_A74E
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
loc_A74E:
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
loc_A758:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_A76E
		move.b  #$01, $001E(A0)
		addq.b  #$01, $001A(A0)
		andi.b  #$01, $001A(A0)
loc_A76E:
		bra.w     loc_A5D2
loc_A772:
		move.b  #$01, $001A(A0)
		tst.w   $0012(A0)
		bmi.s   loc_A798
		move.b  #$00, $001A(A0)
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A798
		add.w   D1, $000C(A0)
		move.w  $0034(A0), $0012(A0)
loc_A798:
		rts
loc_A79A:
		bset    #$00, $0001(A0)
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bcc.s   loc_A7B0
		bclr    #$00, $0001(A0)
loc_A7B0:
		rts
loc_A7B2:
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		subi.w  #$00B8, D0
		rts   
;=============================================================================== 
; Object 0x28 - Flickies
; [ End ]
;===============================================================================  
;=============================================================================== 
; Object 0x29 - Enemy Points
; [ Begin ]
;===============================================================================		    
Obj_0x29_Enemy_Points: ; loc_A7C0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Enemy_Points_Index(PC, D0), D1  ; loc_A7CE
		jmp     Enemy_Points_Index(PC, D1)      ; loc_A7CE
Enemy_Points_Index: ; loc_A7CE:
		dc.w    loc_A7D2-Enemy_Points_Index
		dc.w    loc_A800-Enemy_Points_Index
loc_A7D2:
		addq.b  #$02, $0024(A0)
		move.l  #Enemy_Points_Mappings, $0004(A0) ; loc_A882
		move.w  #$04AC, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$08, $0019(A0)
		move.w  #$FD00, $0012(A0)
loc_A800:
		tst.w   $0012(A0)
		bpl.w    DeleteObject            ; loc_D3B4
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		bra.w     DisplaySprite           ; loc_D3C2
;=============================================================================== 
; Object 0x29 - Enemy Points
; [ End ]
;===============================================================================		 
loc_A816:
		dc.w    loc_A826-loc_A816
		dc.w    loc_A830-loc_A816
		dc.w    loc_A81C-loc_A816
loc_A81C:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
loc_A826:
		dc.w    $0001
		dc.l    $F4060006, $0003FFF8
loc_A830:
		dc.w    $0001
		dc.l    $F406000C, $0006FFF8		             
loc_A83A:
		dc.w    loc_A84A-loc_A83A
		dc.w    loc_A854-loc_A83A
		dc.w    loc_A840-loc_A83A
loc_A840:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
loc_A84A:
		dc.w    $0001
		dc.l    $FC050006, $0003FFF8
loc_A854:
		dc.w    $0001
		dc.l    $FC05000A, $0005FFF8
loc_A85E:
		dc.w    loc_A86E-loc_A85E
		dc.w    loc_A878-loc_A85E
		dc.w    loc_A864-loc_A85E
loc_A864:
		dc.w    $0001
		dc.l    $F4060000, $0000FFF8
loc_A86E:
		dc.w    $0001
		dc.l    $FC090006, $0003FFF4
loc_A878:
		dc.w    $0001
		dc.l    $FC09000C, $0006FFF4		            
Enemy_Points_Mappings:
loc_A882:
		dc.w    loc_A890-loc_A882
		dc.w    loc_A89A-loc_A882
		dc.w    loc_A8A4-loc_A882
		dc.w    loc_A8AE-loc_A882
		dc.w    loc_A8C0-loc_A882
		dc.w    loc_A8CA-loc_A882
		dc.w    loc_A8DC-loc_A882
loc_A890:
		dc.w    $0001
		dc.l    $F8050002, $0001FFF8
loc_A89A:
		dc.w    $0001
		dc.l    $F8050006, $0003FFF8
loc_A8A4:
		dc.w    $0001
		dc.l    $F805000A, $0005FFF8
loc_A8AE:
		dc.w    $0002
		dc.l    $F8010000, $0000FFF8, $F805000E, $00070000
loc_A8C0:
		dc.w    $0001
		dc.l    $F8010000, $0000FFFC
loc_A8CA:
		dc.w    $0002
		dc.l    $F8050002, $0001FFF0, $F805000E, $00070000
loc_A8DC:
		dc.w    $0002
		dc.l    $F805000A, $0005FFF0, $F805000E, $00070000		          
               
		nop		             ; Filler						
;=============================================================================== 
; Object ??? - Unknow Object 0x00A8F0  (Sonic 1 Object 1F - GHZ Crabmeat)
; [ Begin ]
;===============================================================================		  
S1_Crabmeat: ; Unknow_Obj_0x00A8F0: ; loc_A8F0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_A8FE(PC, D0), D1
		jmp     loc_A8FE(PC, D1)
loc_A8FE:
		dc.w    loc_A908-loc_A8FE
		dc.w    loc_A960-loc_A8FE
		dc.w    loc_AABC-loc_A8FE
		dc.w    loc_AAC0-loc_A8FE
		dc.w    loc_AAFA-loc_A8FE
loc_A908:
		move.b  #$10, $0016(A0)
		move.b  #$08, $0017(A0)
		move.l  #Crabmeat_Mappings, $0004(A0) ; loc_AB4C
		move.w  #$0400, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$06, $0020(A0)
		move.b  #$15, $0019(A0)
		bsr.w     ObjectFall              ; loc_D24E
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_A95E
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
loc_A95E:
		rts
loc_A960:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_A97C(PC, D0), D1
		jsr     loc_A97C(PC, D1)
		lea     (loc_AB1C).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		bra.w     MarkObjGone             ; loc_D2A0
loc_A97C:
		dc.w    loc_A980-loc_A97C
		dc.w    loc_AA1E-loc_A97C
loc_A980:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_A9BA
		tst.b   $0001(A0)
		bpl.s   loc_A994
		bchg    #1, $0032(A0)
		bne.s   loc_A9BC
loc_A994:
		addq.b  #$02, $0025(A0)
		move.w  #$007F, $0030(A0)
		move.w  #$0080, $0010(A0)
		bsr.w     loc_AA8C
		addq.b  #$03, D0
		move.b  D0, $001C(A0)
		bchg    #0, $0022(A0)
		bne.s   loc_A9BA
		neg.w   $0010(A0)
loc_A9BA:
		rts
loc_A9BC:
		move.w  #$003B, $0030(A0)
		move.b  #$06, $001C(A0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_A9F2
		_move.b  #$1F, 0(A1)
		move.b  #$06, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		subi.w  #$0010, $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$FF00, $0010(A1)
loc_A9F2:
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_AA1C
		_move.b  #$1F, 0(A1)
		move.b  #$06, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		addi.w  #$0010, $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$0100, $0010(A1)
loc_AA1C:
		rts
loc_AA1E:
		subq.w  #$01, $0030(A0)
		bmi.s   loc_AA72
		bsr.w     SpeedToPos              ; loc_D27A
		bchg    #0, $0032(A0)
		bne.s   loc_AA58
		move.w  $0008(A0), D3
		addi.w  #$0010, D3
		btst    #$00, $0022(A0)
		beq.s   loc_AA44
		subi.w  #$0020, D3
loc_AA44:
		jsr     ObjHitFloor2            ; (loc_1389C)
		cmpi.w  #$FFF8, D1
		blt.s   loc_AA72
		cmpi.w  #$000C, D1
		bge.s   loc_AA72
		rts
loc_AA58:
		jsr     ObjHitFloor             ; (loc_13898)
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		bsr.w     loc_AA8C
		addq.b  #$03, D0
		move.b  D0, $001C(A0)
		rts
loc_AA72:
		subq.b  #$02, $0025(A0)
		move.w  #$003B, $0030(A0)
		move.w  #$0000, $0010(A0)
		bsr.w     loc_AA8C
		move.b  D0, $001C(A0)
		rts
loc_AA8C:
		moveq   #$00, D0
		move.b  $0026(A0), D3
		bmi.s   loc_AAA8
		cmpi.b  #$06, D3
		bcs.s   loc_AAA6
		moveq   #$01, D0
		btst    #$00, $0022(A0)
		bne.s   loc_AAA6
		moveq   #$02, D0
loc_AAA6:
		rts
loc_AAA8:
		cmpi.b  #$FA, D3
		bhi.s   loc_AABA
		moveq   #$02, D0
		btst    #$00, $0022(A0)
		bne.s   loc_AABA
		moveq   #$01, D0
loc_AABA:
		rts
loc_AABC:
		bra.w     DeleteObject            ; loc_D3B4
loc_AAC0:
		addq.b  #$02, $0024(A0)
		move.l  #Crabmeat_Mappings, $0004(A0) ; loc_AB4C
		move.w  #$0400, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$87, $0020(A0)
		move.b  #$08, $0019(A0)
		move.w  #$FC00, $0012(A0)
		move.b  #$07, $001C(A0)
loc_AAFA:
		lea     (loc_AB1C).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		bsr.w     ObjectFall              ; loc_D24E
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2  
loc_AB1C:
		dc.w    loc_AB2C-loc_AB1C
		dc.w    loc_AB2F-loc_AB1C
		dc.w    loc_AB32-loc_AB1C
		dc.w    loc_AB35-loc_AB1C
		dc.w    loc_AB3A-loc_AB1C
		dc.w    loc_AB3F-loc_AB1C
		dc.w    loc_AB44-loc_AB1C
		dc.w    loc_AB47-loc_AB1C
loc_AB2C:
		dc.b    $0F, $00, $FF
loc_AB2F:
		dc.b    $0F, $02, $FF
loc_AB32:
		dc.b    $0F, $22, $FF
loc_AB35:
		dc.b    $0F, $01, $21, $00, $FF
loc_AB3A:
		dc.b    $0F, $21, $03, $02, $FF
loc_AB3F:
		dc.b    $0F, $01, $23, $22, $FF
loc_AB44:
		dc.b    $0F, $04, $FF
loc_AB47:
		dc.b    $01, $05, $06, $FF, $00     
Crabmeat_Mappings: ; loc_AB4C:
		dc.w    loc_AB5A-Crabmeat_Mappings
		dc.w    loc_AB7C-Crabmeat_Mappings
		dc.w    loc_AB9E-Crabmeat_Mappings
		dc.w    loc_ABC0-Crabmeat_Mappings
		dc.w    loc_ABE2-Crabmeat_Mappings
		dc.w    loc_AC14-Crabmeat_Mappings
		dc.w    loc_AC1E-Crabmeat_Mappings
loc_AB5A:
		dc.w    $0004
		dc.l    $F0090000, $0000FFE8, $F0090800, $08000000
		dc.l    $00050006, $0003FFF0, $00050806, $08030000
loc_AB7C:
		dc.w    $0004
		dc.l    $F009000A, $0005FFE8, $F0090010, $00080000
		dc.l    $00050016, $000BFFF0, $0009001A, $000D0000
loc_AB9E:
		dc.w    $0004
		dc.l    $EC090000, $0000FFE8, $EC090800, $08000000
		dc.l    $FC050806, $08030000, $FC060020, $0010FFF0
loc_ABC0:
		dc.w    $0004
		dc.l    $EC09000A, $0005FFE8, $EC090010, $00080000
		dc.l    $FC090026, $00130000, $FC06002C, $0016FFF0
loc_ABE2:
		dc.w    $0006
		dc.l    $F0040032, $0019FFF0, $F0040832, $08190000
		dc.l    $F8090034, $001AFFE8, $F8090834, $081A0000
		dc.l    $0804003A, $001DFFF0, $0804083A, $081D0000
loc_AC14:
		dc.w    $0001
		dc.l    $F805003C, $001EFFF8
loc_AC1E:
		dc.w    $0001
		dc.l    $F8050040, $0020FFF8		           
;=============================================================================== 
; Object ??? - Unknow Object 0x00A8F0
; [ End ]
;===============================================================================		  
		          
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 25 - A ring (usually only placed through placement mode)
; ---------------------------------------------------------------------------
; Sprite_AC28: Obj_0x25_Rings:
Obj25:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj25_Index(pc,d0.w),d1
		jmp	Obj25_Index(pc,d1.w)
; ===========================================================================
; off_AC36: Rings_Index
Obj25_Index:	offsetTable
		offsetTableEntry.w Obj25_MakeRings
		offsetTableEntry.w Obj25_Animate
		offsetTableEntry.w Obj25_Collect
		offsetTableEntry.w Obj25_Sparkle
		offsetTableEntry.w Obj25_Delete
; ===========================================================================
; This was used in Sonic 1, which didn't have a separate ring manager
; byte_AC40: Obj25_PosData:
		;     x distance, y distance
		dc.b	$10, 0		; horizontal tight
		dc.b	$18, 0
		dc.b	$20, 0
		dc.b	0, $10		; vertical
		dc.b	0, $18
		dc.b	0, $20
		dc.b	$10, $10	; diagonal
		dc.b	$18, $18
		dc.b    $20, $20
		dc.b	$F0, $10
		dc.b	$E8, $18
		dc.b	$E0, $20
		dc.b	$10, 8
		dc.b	$18, $10
		dc.b	$F0, 8
		dc.b	$E8, $10
; ===========================================================================
; Evidently, there are still leftovers in the code itself relating to spawning
; and positioning the ring objects, even though it's unneeded now
; loc_AC60:
Obj25_MakeRings:
		move.l	a0,a1
		moveq	#0,d1
		move.w	8(a0),d2
		move.w	$C(a0),d3
		bra.s	loc_AC76

loc_AC6E:
		swap	d1
		bsr.w	SingleObjLoad
		bne.s	Obj25_Animate

loc_AC76:
		_move.b	#$25,0(a1)	; load obj25
		addq.b	#2,$24(a1)
		move.w	d2,8(a1)
		move.w	8(a0),$32(a1)
		move.w	d3,$C(a1)
		move.l	#Obj25_MapUnc_B036,4(a1)
		move.w	#$26BC,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#4,1(a1)
		move.b	#2,$18(a1)
		move.b	#$47,$20(a1)
		move.b	#8,$19(a1)
		move.b	$23(a0),$23(a1)
		move.b	d1,$34(a1)
		addq.w	#1,d1
		add.w	d5,d2
		add.w	d6,d3
		swap	d1
		dbf	d1,loc_AC6E
; loc_ACCE:
Obj25_Animate:
		move.b	(Rings_anim_frame).w,$1A(a0)
		move.w	$32(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	Obj25_Delete
		bra.w	DisplaySprite
; ===========================================================================
; loc_ACEA:
Obj25_Collect:
		addq.b	#2,$24(a0)
		move.b	#0,$20(a0)
		move.b	#1,$18(a0)
		bsr.w	CollectRing
		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d0
		move.b	$23(a0),d0
		move.b	$34(a0),d1
		bset	d1,2(a2,d0.w)
; loc_AD10:
Obj25_Sparkle:
		lea	(loc_B02E).l,a1
		bsr.w	AnimateSprite
		bra.w	DisplaySprite
; ===========================================================================
; loc_AD1E:
Obj25_Delete:
		bra.w	DeleteObject

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_AD22:
CollectRing:
		addq.w	#1,(Ring_count).w
		ori.b	#1,(Update_HUD_rings).w
		move.w	#$B5,d0
		cmpi.w	#$64,(Ring_count).w
		bcs.s	loc_AD5C
		bset	#1,(Extra_life_flags).w
		beq.s	loc_AD50
		cmpi.w	#$C8,(Ring_count).w
		bcs.s	loc_AD5C
		bset	#2,(Extra_life_flags).w
		bne.s	loc_AD5C

loc_AD50:
		addq.b	#1,(Life_count).w
		addq.b	#1,(Update_HUD_lives).w
		; leftover from Sonic 1, which had the extra life music in slot
		; $88 instead if $98 (which is now the Death Egg music slot)
		move.w	#S1MusID_ExtraLife,d0

loc_AD5C:
		jmp	(PlaySound).l
; End of function CollectRing

;=============================================================================== 
; Object 0x37 - Rings flying out of you when you get hit 
; [ End ]
;=============================================================================== 
Obj_0x37_Rings_Out: ; loc_AD62:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Rings_Out_Index(PC, D0), D1 ; loc_AD70
		jmp     Rings_Out_Index(PC, D1)     ; loc_AD70
Rings_Out_Index: ; loc_AD70:
		dc.w    loc_AD7A-Rings_Out_Index
		dc.w    loc_AE3E-Rings_Out_Index
		dc.w    loc_AE90-Rings_Out_Index
		dc.w    loc_AEA4-Rings_Out_Index
		dc.w    loc_AEB2-Rings_Out_Index
loc_AD7A:
		move.l  A0, A1
		moveq   #$00, D5
		move.w  (Ring_count).w, D5
		moveq   #$20, D0
		cmp.w   D0, D5
		bcs.s   loc_AD8A
		move.w  D0, D5
loc_AD8A:
		subq.w  #$01, D5
		move.w  #$0288, D4
		bra.s   loc_AD9A
loc_AD92:  
		bsr.w     SingleObjLoad        ; loc_E772
		bne.w    loc_AE22
loc_AD9A:
		_move.b  #$37, 0(A1)
		addq.b  #$02, $0024(A1)
		move.b  #$08, $0016(A1)
		move.b  #$08, $0017(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  #Obj25_MapUnc_B036, $0004(A1)  ; loc_B036
		move.w  #$26BC, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$47, $0020(A1)
		move.b  #$08, $0019(A1)
		move.b  #$FF, (Ring_spill_anim_counter).w
		tst.w   D4
		bmi.s   loc_AE12
		move.w  D4, D0
		bsr.w     CalcSine		; loc_320A
		move.w  D4, D2
		lsr.w   #$08, D2
		asl.w   D2, D0
		asl.w   D2, D1
		move.w  D0, D2
		move.w  D1, D3
		addi.b  #$10, D4
		bcc.s   loc_AE12
		subi.w  #$0080, D4
		bcc.s   loc_AE12
		move.w  #$0288, D4
loc_AE12:
		move.w  D2, $0010(A1)
		move.w  D3, $0012(A1)
		neg.w   D2
		neg.w   D4
		dbf    D5, loc_AD92 
loc_AE22:		 
		move.w  #$0000, (Ring_count).w
		move.b  #$80, (Update_HUD_rings).w
		move.b  #$00, (Extra_life_flags).w
		move.w  #$00C6, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_AE3E:
		move.b  (Ring_spill_anim_frame).w, $001A(A0)
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		bmi.s   loc_AE78
		move.b  (Vint_runcount+3).w, D0
		add.b   D7, D0
		andi.b  #$03, D0
		bne.s   loc_AE78
		jsr     loc_138F4
		tst.w   D1
		bpl.s   loc_AE78
		add.w   D1, $000C(A0)
		move.w  $0012(A0), D0
		asr.w   #$02, D0
		sub.w   D0, $0012(A0)
		neg.w   $0012(A0)
loc_AE78:
		tst.b   (Ring_spill_anim_counter).w
		beq.s   loc_AEB2
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.s   loc_AEB2
		bra.w     DisplaySprite           ; loc_D3C2
loc_AE90:
		addq.b  #$02, $0024(A0)
		move.b  #$00, $0020(A0)
		move.b  #$01, $0018(A0)
		bsr.w     CollectRing
loc_AEA4:
		lea     (loc_B02E).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		bra.w     DisplaySprite           ; loc_D3C2
loc_AEB2:
		bra.w     DeleteObject            ; loc_D3B4
;=============================================================================== 
; Object 0x37 - Rings flying out of you when you get hit   
; [ End ]
;===============================================================================		 
		
;=============================================================================== 
; Object 0x4B - Big Ring (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ Begin ]
;===============================================================================		     
Obj_0x4B_Big_Ring: ; loc_AEB6:  
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Big_Ring_Index(PC, D0), D1  ; loc_AEC4
		jmp     Big_Ring_Index(PC, D1)      ; loc_AEC4
Big_Ring_Index: ; loc_AEC4:
		dc.w    loc_AECC-Big_Ring_Index
		dc.w    loc_AF1A-Big_Ring_Index
		dc.w    loc_AF38-Big_Ring_Index
		dc.w    loc_AF7C-Big_Ring_Index
loc_AECC:		
		move.l  #Big_Ring_Mappings, $0004(A0) ; loc_B09A
		move.w  #$2400, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$40, $0019(A0)
		tst.b   $0001(A0)
		bpl.s   loc_AF1A
		cmpi.b  #$06, (Emerald_count).w
		beq.w    loc_AF7C
		cmpi.w  #$0032, (Ring_count).w
		bcc.s   loc_AF04
		rts
loc_AF04:
		addq.b  #$02, $0024(A0)
		move.b  #$02, $0018(A0)
		move.b  #$52, $0020(A0)
		move.w  #$0C40, (BigRingGraphics).w
loc_AF1A:
		move.b  (Rings_anim_frame).w, $001A(A0)
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_AF38:
		subq.b  #$02, $0024(A0)
		move.b  #$00, $0020(A0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.w    loc_AF70
		_move.b  #$7C, 0(A1)     ; Call Object 0x7C - Big Ring Flash
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  A0, $003C(A1)
		move.w  ($FFFFB008).w, D0
		cmp.w   $0008(A0), D0
		bcs.s   loc_AF70
		bset    #$00, $0001(A1)
loc_AF70:
		move.w  #$00C3, D0
		jsr     (PlaySound).l             ; loc_14C6
		bra.s   loc_AF1A
loc_AF7C:
		bra.w     DeleteObject            ; loc_D3B4
;=============================================================================== 
; Object 0x4B - Big Ring (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ End ]
;===============================================================================  

;=============================================================================== 
; Object 0x7C - Big Ring Flash (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ Begin ]
;===============================================================================   
Obj_0x7C_Big_Ring_Flash: ; loc_AF80: 
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Big_Ring_Flash_Index(PC, D0), D1   ; loc_AF8E
		jmp     Big_Ring_Flash_Index(PC, D1)       ; loc_AF8E
Big_Ring_Flash_Index: ; loc_AF8E:
		dc.w    loc_AF94-Big_Ring_Flash_Index
		dc.w    loc_AFC2-Big_Ring_Flash_Index
		dc.w    loc_B02A-Big_Ring_Flash_Index
loc_AF94:		
		addq.b  #$02, $0024(A0)
		move.l  #Big_Ring_Flash_Mappings, $0004(A0) ; loc_B19A
		move.w  #$2462, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$00, $0018(A0)
		move.b  #$20, $0019(A0)
		move.b  #$FF, $001A(A0)
loc_AFC2:  
		bsr.s   loc_AFDC
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2 
loc_AFDC:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_B01A
		move.b  #$01, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$08, $001A(A0)
		bcc.s   loc_B01C
		cmpi.b  #$03, $001A(A0)
		bne.s   loc_B01A
		move.l  $003C(A0), A1
		move.b  #$06, $0024(A1)
		move.b  #$1C, ($FFFFB01C).w
		move.b  #$01, (Enter_SpecialStage_flag).w
		clr.b   (Invincibility).w
		clr.b   (Shield).w
loc_B01A:
		rts
loc_B01C:
		addq.b  #$02, $0024(A0)
		move.w  #$0000, ($FFFFB000).w
		addq.l  #$04, A7
		rts
loc_B02A:
		bra.w     DeleteObject            ; loc_D3B4
;=============================================================================== 
; Object 0x7C - Big Ring Flash (Special Stage Access)   
;               Unused - Sonic 1 LeftOver
; [ End ]
;===============================================================================  
loc_B02E:
		dc.w    $0002, $0504, $0506, $07FC  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj25_MapUnc_B036:	BINCLUDE	"mappings/sprite/obj25.bin"

Big_Ring_Mappings: ; loc_B09A:
		dc.w    Big_Ring_Map_01-Big_Ring_Mappings
		dc.w    Big_Ring_Map_02-Big_Ring_Mappings
		dc.w    Big_Ring_Map_03-Big_Ring_Mappings
		dc.w    Big_Ring_Map_04-Big_Ring_Mappings
Big_Ring_Map_01: ; loc_B0A2:
		dc.w    $000A
		dc.l    $E0080000, $0000FFE8, $E0080003, $00010000
		dc.l    $E80C0006, $0003FFE0, $E80C000A, $00050000
		dc.l    $F007000E, $0007FFE0, $F0070016, $000B0010
		dc.l    $100C001E, $000FFFE0, $100C0022, $00110000
		dc.l    $18080026, $0013FFE8, $18080029, $00140000
Big_Ring_Map_02: ; loc_B0F4:
		dc.w    $0008
		dc.l    $E00C002C, $0016FFF0, $E8080030, $0018FFE8
		dc.l    $E8090033, $00190000, $F0070039, $001CFFE8
		dc.l    $F8050041, $00200008, $08090045, $00220000
		dc.l    $1008004B, $0025FFE8, $180C004E, $0027FFF0
Big_Ring_Map_03: ; loc_B136:
		dc.w    $0004
		dc.l    $E0070052, $0029FFF4, $E0030852, $08290004
		dc.l    $0007005A, $002DFFF4, $0003085A, $082D0004
Big_Ring_Map_04: ; loc_B158:
		dc.w    $0008
		dc.l    $E00C082C, $0816FFF0, $E8080830, $08180000
		dc.l    $E8090833, $0819FFE8, $F0070839, $081C0008
		dc.l    $F8050841, $0820FFE8, $08090845, $0822FFE8
		dc.l    $1008084B, $08250000, $180C084E, $0827FFF0 
Big_Ring_Flash_Mappings: ; loc_B19A:
		dc.w    Big_Ring_Flash_Map_01-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_02-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_03-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_04-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_05-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_06-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_07-Big_Ring_Flash_Mappings
		dc.w    Big_Ring_Flash_Map_08-Big_Ring_Flash_Mappings
Big_Ring_Flash_Map_01: ; loc_B1AA:
		dc.w    $0002
		dc.l    $E00F0000, $00000000, $000F1000, $10000000
Big_Ring_Flash_Map_02: ; loc_B1BC:
		dc.w    $0004
		dc.l    $E00F0010, $0008FFF0, $E0070020, $00100010
		dc.l    $000F1010, $1008FFF0, $00071020, $10100010
Big_Ring_Flash_Map_03: ; loc_B1DE:
		dc.w    $0004
		dc.l    $E00F0028, $0014FFE8, $E00B0038, $001C0008
		dc.l    $000F1028, $1014FFE8, $000B1038, $101C0008
Big_Ring_Flash_Map_04: ; loc_B200:
		dc.w    $0004
		dc.l    $E00F0834, $081AFFE0, $E00F0034, $001A0000
		dc.l    $000F1834, $181AFFE0, $000F1034, $101A0000
Big_Ring_Flash_Map_05: ; loc_B222:
		dc.w    $0004
		dc.l    $E00B0838, $081CFFE0, $E00F0828, $0814FFF8
		dc.l    $000B1838, $181CFFE0, $000F1828, $1814FFF8
Big_Ring_Flash_Map_06: ; loc_B244:
		dc.w    $0004
		dc.l    $E0070820, $0810FFE0, $E00F0810, $0808FFF0
		dc.l    $00071820, $1810FFE0, $000F1810, $1808FFF0
Big_Ring_Flash_Map_07: ; loc_B266:
		dc.w    $0002
		dc.l    $E00F0800, $0800FFE0, $000F1800, $1800FFE0
Big_Ring_Flash_Map_08: ; loc_B278:
		dc.w    $0004
		dc.l    $E00F0044, $0022FFE0, $E00F0844, $08220000
		dc.l    $000F1044, $1022FFE0, $000F1844, $18220000
		nop		             ; Filler
;=============================================================================== 
; Object 0x26 - Monitors 
; [ Begin ]
;===============================================================================		  
Obj_0x26_Monitors: ; loc_B29C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Monitors_Index(PC, D0), D1 ; loc_B2AA
		jmp     Monitors_Index(PC, D1)     ; loc_B2AA
Monitors_Index: ; loc_B2AA:
		dc.w    loc_B2B4-Monitors_Index
		dc.w    loc_B31A-Monitors_Index
		dc.w    loc_B40C-Monitors_Index
		dc.w    loc_B3FE-Monitors_Index
		dc.w    loc_B408-Monitors_Index
loc_B2B4:
		addq.b  #$02, $0024(A0)
		move.b  #$0E, $0016(A0)
		move.b  #$0E, $0017(A0)
		move.l  #Obj26_MapUnc_B6D2, $0004(A0) ; loc_B6D2
		move.w  #$0680, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$0F, $0019(A0)
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		bclr    #$07, $02(A2, D0)
		btst    #$00, $02(A2, D0)
		beq.s   loc_B30E
		move.b  #$08, $0024(A0)
		move.b  #$0B, $001A(A0)
		rts
loc_B30E:
		move.b  #$46, $0020(A0)
		move.b  $0028(A0), $001C(A0)
loc_B31A:
		move.b  $0025(A0), D0
		beq.s   loc_B374
		subq.b  #$02, D0
		bne.s   loc_B354
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		bsr.w     loc_FBC0
		btst    #$03, $0022(A1)
		bne.w    loc_B344
		clr.b   $0025(A0)
		bra.w     loc_B3FE
loc_B344:
		move.w  #$0010, D3
		move.w  $0008(A0), D2
		bsr.w     loc_F8E4
		bra.w     loc_B3FE
loc_B354:
		bsr.w     ObjectFall              ; loc_D24E
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.w    loc_B3FE
		add.w   D1, $000C(A0)
		clr.w   $0012(A0)
		clr.b   $0025(A0)
		bra.w     loc_B3FE
loc_B374:
		move.w  #$001A, D1
		move.w  #$000F, D2
		bsr.w     loc_B5F0
		beq.w    loc_B3E4
		tst.w   $0012(A1)
		bmi.s   loc_B392
		cmpi.b  #$02, $001C(A1)
		beq.s   loc_B3E4
loc_B392:
		tst.w   D1
		bpl.s   loc_B3A8
		sub.w   D3, $000C(A1)
		bsr.w     loc_FAF2
		move.b  #$02, $0025(A0)
		bra.w     loc_B3FE
loc_B3A8:
		tst.w   D0
		beq.w    loc_B3CE
		bmi.s   loc_B3B8
		tst.w   $0010(A1)
		bmi.s   loc_B3CE
		bra.s   loc_B3BE
loc_B3B8:
		tst.w   $0010(A1)
		bpl.s   loc_B3CE
loc_B3BE:
		sub.w   D0, $0008(A1)
		move.w  #$0000, $0014(A1)
		move.w  #$0000, $0010(A1)
loc_B3CE:
		btst    #$01, $0022(A1)
		bne.s   loc_B3F2
		bset    #$05, $0022(A1)
		bset    #$05, $0022(A0)
		bra.s   loc_B3FE
loc_B3E4:
		btst    #$05, $0022(A0)
		beq.s   loc_B3FE
		move.w  #$0001, $001C(A1)
loc_B3F2:
		bclr    #$05, $0022(A0)
		bclr    #$05, $0022(A1)
loc_B3FE:
		lea     (loc_B66A).l, A1
		bsr.w     AnimateSprite           ; loc_D412
loc_B408:
		bra.w     MarkObjGone             ; loc_D2A0
loc_B40C:
		addq.b  #$02, $0024(A0)
		move.b  #$00, $0020(A0)
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_B434
		_move.b  #$2E, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  $001C(A0), $001C(A1)
loc_B434:
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_B450
		_move.b  #$27, 0(A1)
		addq.b  #$02, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
loc_B450:
		lea     (Object_Respawn_Table).w, A2		   
		moveq   #$00, D0
		move.b  $0023(A0), D0
		bset    #$00, $02(A2, D0)
		move.b  #$0A, $001C(A0)
		bra.w     DisplaySprite           ; loc_D3C2
;=============================================================================== 
; Object 0x26 - Monitors 
; [ End ]
;===============================================================================   
;=============================================================================== 
; Object 0x2E - Monitors Contents
; [ Begin ]
;===============================================================================		   
Obj_0x2E_Monitors_Contents: ; loc_B46A:		
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_B478(PC, D0), D1
		jmp     loc_B478(PC, D1)
loc_B478:
		dc.w    loc_B47E-loc_B478
		dc.w    loc_B4C2-loc_B478
		dc.w    loc_B5E4-loc_B478
loc_B47E:
		addq.b  #$02, $0024(A0)
		move.w  #$0680, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$24, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$08, $0019(A0)
		move.w  #$FD00, $0012(A0)
		moveq   #$00, D0
		move.b  $001C(A0), D0
		addq.b  #$01, D0
		move.b  D0, $001A(A0)
		move.l  #Obj26_MapUnc_B6D2, A1  ; loc_B6D2
		add.b   D0, D0
		adda.w  $00(A1, D0), A1
		addq.w  #$02, A1
		move.l  A1, $0004(A0)
loc_B4C2:
		bsr.s   loc_B4C8
		bra.w     DisplaySprite           ; loc_D3C2
loc_B4C8:
		tst.w   $0012(A0)
		bpl.w    loc_B4DC
		bsr.w     SpeedToPos              ; loc_D27A
		addi.w  #$0018, $0012(A0)
		rts
loc_B4DC:
		addq.b  #$02, $0024(A0)
		move.w  #$001D, $001E(A0)
		moveq   #$00, D0
		move.b  $001C(A0), D0
		add.w   D0, D0
		move.w  Monitor_Subroutines(PC, D0), D0 ; loc_B4F6
		jmp     Monitor_Subroutines(PC, D0)     ; loc_B4F6
Monitor_Subroutines: ; loc_B4F6:
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
		dc.w    Monitor_SonicLife-Monitor_Subroutines     ; loc_B50C
		dc.w    Monitor_TailsLife-Monitor_Subroutines     ; loc_B51E
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
		dc.w    Monitor_Rings-Monitor_Subroutines         ; loc_B530
		dc.w    Monitor_Shoes-Monitor_Subroutines         ; loc_B56A
		dc.w    Monitor_Shield-Monitor_Subroutines        ; loc_B592
		dc.w    Monitor_Invincibility-Monitor_Subroutines ; loc_B5A8
		dc.w    Monitor_SuperSonic-Monitor_Subroutines    ; loc_B5D4
		dc.w    Monitor_Null-Monitor_Subroutines          ; loc_B50A
Monitor_Null: ; loc_B50A:
		rts
Monitor_SonicLife: ; loc_B50C:
		addq.b  #$01, (Life_count).w
		addq.b  #$01, (Update_HUD_lives).w
		move.w  #MusID_ExtraLife, D0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_TailsLife: ; loc_B51E:
		addq.b  #$01, (Life_count).w
		addq.b  #$01, (Update_HUD_lives).w
		move.w  #MusID_ExtraLife, D0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Rings: ; loc_B530:
		addi.w  #$000A, (Ring_count).w
		ori.b   #$01, (Update_HUD_rings).w
		cmpi.w  #$0064, (Ring_count).w
		bcs.s   loc_B560
		bset    #$01, (Extra_life_flags).w
		beq.w    Monitor_SonicLife       ; loc_B50C
		cmpi.w  #$00C8, (Ring_count).w
		bcs.s   loc_B560
		bset    #$02, (Extra_life_flags).w
		beq.w    Monitor_SonicLife       ; loc_B50C
loc_B560:
		move.w  #$00B5, D0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Shoes: ; loc_B56A:
		move.b  #$01, (Speed_shoes).w
		move.w  #$04B0, ($FFFFB034).w
		move.w  #$0C00, (Sonic_top_speed).w
		move.w  #$0018, (Sonic_acceleration).w
		move.w  #$0080, (Sonic_deceleration).w
		move.w  #$00FB, D0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Shield: ; loc_B592:
		move.b  #$01, (Shield).w
		move.b  #$38, ($FFFFB180).w
		move.w  #$00AF, D0
		jmp     (PlayMusic).l            ; loc_14C0
Monitor_Invincibility: ; loc_B5A8:
		move.b  #$01, (Invincibility).w
		move.w  #$04B0, ($FFFFB032).w
		move.b  #$35, ($FFFFB200).w
		tst.b   (Current_Boss_ID).w
		bne.s   loc_B5D2
		cmpi.w  #$000C, (Current_Air).w
		bls.s   loc_B5D2
		move.w  #MusID_Invinc, D0
		jmp     (PlayMusic).l            ; loc_14C0
loc_B5D2:
		rts
Monitor_SuperSonic: ; loc_B5D4:
		move.b  #$01, (Super_Sonic_palette).w
		move.w  #$00AF, D0
		jmp     (PlayMusic).l            ; loc_14C0
loc_B5E4:
		subq.w  #$01, $001E(A0)
		bmi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_B5F0:
		lea     ($FFFFB000).w, A1
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_B648
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi.s   loc_B648
		move.b  $0016(A1), D3
		ext.w   D3
		add.w   D3, D2
		move.w  $000C(A1), D3
		sub.w   $000C(A0), D3
		add.w   D2, D3
		bmi.s   loc_B648
		add.w   D2, D2
		cmp.w   D2, D3
		bcc.s   loc_B648
		tst.b   $002A(A1)
		bmi.s   loc_B648
		cmpi.b  #$06, ($FFFFB024).w
		bcc.s   loc_B648
		tst.w   (Debug_placement_mode).w
		bne.s   loc_B648
		cmp.w   D0, D1
		bcc.s   loc_B63E
		add.w   D1, D1
		sub.w   D1, D0
loc_B63E:
		cmpi.w  #$0010, D3
		bcs.s   loc_B64C
loc_B644:		
		moveq   #$01, D1
		rts
loc_B648:
		moveq   #$00, D1
		rts
loc_B64C:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addq.w  #$04, D1
		move.w  D1, D2
		add.w   D2, D2
		add.w   $0008(A1), D1
		sub.w   $0008(A0), D1
		bmi.s   loc_B644
		cmp.w   D2, D1
		bcc.s   loc_B644
		moveq   #-1, D1
		rts    
loc_B66A:
		dc.w    loc_B680-loc_B66A
		dc.w    loc_B684-loc_B66A
		dc.w    loc_B68C-loc_B66A
		dc.w    loc_B694-loc_B66A
		dc.w    loc_B69C-loc_B66A
		dc.w    loc_B6A4-loc_B66A
		dc.w    loc_B6AC-loc_B66A
		dc.w    loc_B6B4-loc_B66A
		dc.w    loc_B6BC-loc_B66A
		dc.w    loc_B6C4-loc_B66A
		dc.w    loc_B6CC-loc_B66A
loc_B680:
		dc.b    $01, $00, $01, $FF
loc_B684:
		dc.b    $01, $00, $02, $02, $01, $02, $02, $FF
loc_B68C:
		dc.b    $01, $00, $03, $03, $01, $03, $03, $FF
loc_B694:
		dc.b    $01, $00, $04, $04, $01, $04, $04, $FF
loc_B69C:
		dc.b    $01, $00, $05, $05, $01, $05, $05, $FF
loc_B6A4:
		dc.b    $01, $00, $06, $06, $01, $06, $06, $FF
loc_B6AC:
		dc.b    $01, $00, $07, $07, $01, $07, $07, $FF
loc_B6B4:
		dc.b    $01, $00, $08, $08, $01, $08, $08, $FF
loc_B6BC:
		dc.b    $01, $00, $09, $09, $01, $09, $09, $FF
loc_B6C4:
		dc.b    $01, $00, $0A, $0A, $01, $0A, $0A, $FF
loc_B6CC:
		dc.b    $02, $00, $01, $0B, $FE, $01
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj26_MapUnc_B6D2:	BINCLUDE	"mappings/sprite/obj26.bin"
; ===========================================================================
		nop
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0E - Sonic and Tails on the title screen
; ---------------------------------------------------------------------------
; Sprite_B7B4: Obj_0x0E_Sonic_Tails:
Obj0E:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj0E_Index(pc,d0.w),d1
		jmp	Obj0E_Index(pc,d1.w)
; ===========================================================================
; off_B7C2:
Obj0E_Index:	offsetTable
		offsetTableEntry.w Obj0E_Init
		offsetTableEntry.w Obj0E_Display
		offsetTableEntry.w Obj0E_Move
		offsetTableEntry.w Obj0E_Display2
; ===========================================================================
; loc_B7CA:
Obj0E_Init:
		addq.b	#2,$24(a0)
		move.w	#$148,8(a0)
		move.w	#$C4,$A(a0)
		move.l	#Obj0E_MapUnc_BAA2,4(a0)
		move.w	#$4200,2(a0)
		move.b	#1,$18(a0)
		move.b	#$1D,$1F(a0)
		tst.b	$1A(a0)
		beq.s	Obj0E_Display
		move.w	#$FC,8(a0)
		move.w	#$CC,$A(a0)
		move.w	#$2200,2(a0)
; loc_B80C:
Obj0E_Display:
		bra.w     DisplaySprite
; ---------------------------------------------------------------------------
; The rest of this object's code is unused due to the above branch to
; DisplaySprite; causes Sonic and Tails to rise like the Sonic 1 title
; loc_B810:
		subq.b	#1,$1F(a0)
		bpl.s	+
		addq.b	#2,$24(a0)
		bra.w	DisplaySprite
+
		rts
; ===========================================================================
; loc_B820:
Obj0E_Move:
		subi.w	#8,$A(a0)
		cmpi.w	#$96,$A(a0)
		bne.s	+
		addq.b	#2,$24(a0)
+
		bra.w	DisplaySprite
; ===========================================================================
; loc_B836:
Obj0E_Display2:
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0F - Mappings test?
; ---------------------------------------------------------------------------
; Pressing C causes its mappings to increment by one, while pressing B changes
; a value before crashing the game; this did NOT exist in Sonic 1's prototype
; Sprite_B83E: Obj_0x0F:
Obj0F:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj0F_Index(pc,d0.w),d1
		jsr	Obj0F_Index(pc,d1.w)
		bra.w	DisplaySprite
; ===========================================================================
; off_B84C:
Obj0F_Index:	offsetTable
		offsetTableEntry.w Obj0F_Init
		offsetTableEntry.w Obj0F_Main
		offsetTableEntry.w Obj0F_Main
; ===========================================================================
; loc_B852:
Obj0F_Init:
		addq.b	#2,$24(a0)
		move.w	#$90,8(a0)
		move.w	#$90,$A(a0)
		move.l	#Obj0F_MapUnc_B896,4(a0)
		move.w	#$680,2(a0)
		bsr.w	Adjust2PArtPointer
; loc_B874:
Obj0F_Main:
		move.b	(Ctrl_1_Press).w,d0
		btst	#5,d0		; is C pressed?
		beq.s	loc_B888	; if not, branch
		addq.b	#1,$1A(a0)	; increment mappings by one
		andi.b	#$F,$1A(a0)	; limit to $F mappings

loc_B888:
		btst	#4,d0		; is B pressed?
		beq.s	return_B894	; if not, branch
		bchg	#0,(Two_player_mode+1).w	; clear this value and... crash the game?

return_B894:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0F_MapUnc_B896:	BINCLUDE	"mappings/sprite/obj0F.bin"

; ---------------------------------------------------------------------------
; (unknown) animation script
off_B956:	dc.w	byte_B958-off_B956
byte_B958:	dc.b    7, 0, 1, 2, 3, 4, 5, 6, 7, $FE, 2, 0, 0, 2, $1F, 0
		dc.b    1, $FF

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
S1Obj0F_MapUnc_B96A:	BINCLUDE	"mappings/sprite/obj0F_S1.bin"	; "PRESS START BUTTON" text and TM; leftover from Sonic 1
Obj0E_MapUnc_BAA2:	BINCLUDE	"mappings/sprite/obj0E.bin"	; Sonic and Tails on the title screen
; ===========================================================================
		nop

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 34 - Sonic 1 title cards
; ---------------------------------------------------------------------------
; Sprite_BB54: Obj_0x34_Title_Cards:
Obj34:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj34_Index(pc,d0.w),d1
		jmp	Obj34_Index(pc,d1.w)
; ===========================================================================
; off_BB62: Title_Cards_Index:
Obj34_Index:	offsetTable
		offsetTableEntry.w Obj34_Init
		offsetTableEntry.w Obj34_ChkPos
		offsetTableEntry.w Obj34_Wait
		offsetTableEntry.w Obj34_Wait
; ===========================================================================
; loc_BB6A:
Obj34_Init:
		move.l	a0,a1
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		move.w	d0,d2
		lea	(Obj34_ConData).l,a3
		lsl.w	#4,d0
		adda.w	d0,a3
		lea	(Obj34_ItemData).l,a2
		moveq	#3,d1
; loc_BB86: Title_Card_Loop:
Obj34_Loop:
		_move.b	#$34,0(a1)
		move.w	(a3),8(a1)
		move.w	(a3)+,$32(a1)
		move.w	(a3)+,$30(a1)
		move.w	(a2)+,$A(a1)
		move.b	(a2)+,$24(a1)
		move.b	(a2)+,d0
		bne.s	Obj34_MakeSprite
		move.b	d2,d0
; loc_BBA6: Title_Cards_MakeSprite:
Obj34_MakeSprite:
		move.b	d0,$1A(a1)
		move.l	#Obj34_MapUnc_C2A0,4(a1)
		move.w	#$8580,2(a1)
		bsr.w	Adjust2PArtPointer2
		move.b	#$78,$19(a1)
		move.b	#0,1(a1)
		move.b	#0,$18(a1)
		move.w	#$3C,$1E(a1)
		lea	$40(a1),a1
		dbf	d1,Obj34_Loop

; loc_BBDC:
Obj34_ChkPos:
		moveq	#$10,d1
		move.w	$30(a0),d0
		cmp.w	8(a0),d0
		beq.s	loc_BBF0
		bge.s	Obj34_Move
		neg.w	d1
; loc_BBEC:
Obj34_Move:
		add.w	d1,8(a0)

loc_BBF0:		
		move.w	8(a0),d0
		bmi.s	return_BC02
		cmpi.w	#$200,d0
		bcc.s	return_BC02
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite

return_BC02:
		rts
; ===========================================================================
; loc_BC04:
Obj34_Wait:
		tst.w	$1E(a0)
		beq.s	Obj34_ChkPos2
		subq.w	#1,$1E(a0)
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite
; ===========================================================================
; loc_BC14:
Obj34_ChkPos2:
		tst.b	1(a0)
		bpl.s	Obj34_ChangeArt
		moveq	#$20,d1
		move.w	$32(a0),d0
		cmp.w	8(a0),d0
		beq.s	Obj34_ChangeArt
		bge.s	Obj34_Move2
		neg.w	d1
; loc_BC2A:
Obj34_Move2:
		add.w	d1,8(a0)
		move.w	8(a0),d0
		bmi.s	return_BC40
		cmpi.w	#$200,d0
		bcc.s	return_BC40
		rts
; ---------------------------------------------------------------------------
		bra.w	DisplaySprite

return_BC40:
		rts
; ===========================================================================
; loc_BC42:
Obj34_ChangeArt:
		cmpi.b	#4,$24(a0)
		bne.s	Obj34_Delete
		moveq	#2,d0
		jsr	(LoadPLC).l
; loc_BC52:
Obj34_Delete:
		bra.w	DeleteObject
; ===========================================================================

results_screen_object macro y, routine, frame
	dc.w	y
	dc.b	routine, frame
    endm
; byte_BC56: Title_Cards_Main_Position:
Obj34_ItemData:
		results_screen_object	$D0,   2,  0		; name of zone
		results_screen_object	$E4,   2,  6		; ZONE
		results_screen_object	$EA,   2,  7		; ACT
		results_screen_object	$E0,   2, $A		; oval
; ---------------------------------------------------------------------------
; Title	card configuration data
; Format:
; 4 bytes per item (YYYY XXXX)
; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
; ---------------------------------------------------------------------------
; word_BC66: Title_Cards_Config:
Obj34_ConData:	dc.w	0, $120, $FEFC, $13C, $414, $154, $214, $154
		dc.w	0, $120, $FEF4, $134, $40C, $14C, $20C, $14C
		dc.w	0, $120, $FEE0, $120, $3F8, $138, $1F8, $138
		dc.w	0, $120, $FEFC, $13C, $414, $154, $214, $154
		dc.w	0, $120, $FF04, $144, $41C, $15C, $21C, $15C
		dc.w	0, $120, $FF04, $144, $41C, $15C, $21C, $15C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C
		dc.w	0, $120, $FEE4, $124, $3EC, $3EC, $1EC, $12C

;=============================================================================== 
; Object 0x34 - Title Cards / Splash Screen
; [ End ]
;===============================================================================  
;=============================================================================== 
; Object 0x39 - Time Over / Game Over
; [ Begin ]
;=============================================================================== 
Obj_0x39_Time_Game_Over: ; loc_BD76:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Time_Game_Over_Index(PC, D0), D1 ; loc_BD84
		jmp     Time_Game_Over_Index(PC, D1)     ; loc_BD84
Time_Game_Over_Index: ; loc_BD84:
		dc.w    loc_BD8A-Time_Game_Over_Index
		dc.w    loc_BDCE-Time_Game_Over_Index
		dc.w    loc_BDF0-Time_Game_Over_Index
loc_BD8A:
		tst.l   (Plc_Buffer).w
		beq.s   loc_BD92
		rts
loc_BD92:
		addq.b  #$02, $0024(A0)
		move.w  #$0050, $0008(A0)
		btst    #$00, $001A(A0)
		beq.s   loc_BDAA
		move.w  #$01F0, $0008(A0)
loc_BDAA:
		move.w  #$00F0, $000A(A0)
		move.l  #Time_Game_Over_Mappings, $0004(A0) ; loc_C558
		move.w  #$855E, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$00, $0001(A0)
		move.b  #$00, $0018(A0)
loc_BDCE:
		moveq   #$10, D1
		cmpi.w  #$0120, $0008(A0)
		beq.s   loc_BDE4
		bcs.s   loc_BDDC
		neg.w   D1
loc_BDDC:
		add.w   D1, $0008(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_BDE4:
		move.w  #$02D0, $001E(A0)
		addq.b  #$02, $0024(A0)
		rts
loc_BDF0:
		move.b  (Ctrl_1_Press).w, D0
		andi.b  #$70, D0
		bne.s   loc_BE10
		btst    #$00, $001A(A0)
		bne.s   loc_BE34
		tst.w   $001E(A0)
		beq.s   loc_BE10
		subq.w  #$01, $001E(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_BE10:
		tst.b   (Time_Over_flag).w
		bne.s   loc_BE2A
		move.b  #S1GameModeID_ContinueScreen, (Game_Mode).w
		tst.b   (Continue_count).w
		bne.s   loc_BE34
		move.b  #GameModeID_SegaScreen, (Game_Mode).w
		bra.s   loc_BE34
loc_BE2A:
		clr.l   (Saved_Timer).w
		move.w  #$0001, (Level_Inactive_flag).w
loc_BE34:
		bra.w     DisplaySprite           ; loc_D3C2
;=============================================================================== 
; Object 0x39 - Time Over / Game Over
; [ End ]
;=============================================================================== 
;=============================================================================== 
; Object 0x3A - Level Results
; [ Begin ]
;=============================================================================== 
Obj_0x3A_Level_Results: ; loc_BE38:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Level_Results_Index(PC, D0), D1  ; loc_BE46
		jmp     Level_Results_Index(PC, D1)      ; loc_BE46
Level_Results_Index: ; loc_BE46:
		dc.w    loc_BE4E-Level_Results_Index
		dc.w    loc_BEAA-Level_Results_Index
		dc.w    loc_BEF6-Level_Results_Index
		dc.w    loc_BF66-Level_Results_Index
loc_BE4E:
		tst.l   (Plc_Buffer).w
		beq.s   loc_BE56
		rts
loc_BE56:
		move.l  A0, A1
		lea     (loc_C030).l, A2
		moveq   #$06, D1
loc_BE60:		
		_move.b  #$3A, 0(A1)
		move.w  (A2), $0008(A1)
		move.w  (A2)+, $0032(A1)
		move.w  (A2)+, $0030(A1)
		move.w  (A2)+, $000A(A1)
		move.b  (A2)+, $0024(A1)
		move.b  (A2)+, D0
		cmpi.b  #$06, D0
		bne.s   loc_BE86
		add.b   (Current_Act).w, D0
loc_BE86:
		move.b  D0, $001A(A1)
		move.l  #Level_Results_Mappings, $0004(A1) ; loc_C5A8
		move.w  #$8580, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$00, $0001(A1)
		lea     $0040(A1), A1
		dbf    D1, loc_BE60
loc_BEAA:
		moveq   #$10, D1
		move.w  $0030(A0), D0
		cmp.w   $0008(A0), D0
		beq.s   loc_BEDC
		bge.s   loc_BEBA
		neg.w   D1
loc_BEBA:
		add.w   D1, $0008(A0)
loc_BEBE:		
		move.w  $0008(A0), D0
		bmi.s   loc_BED0
		cmpi.w  #$0200, D0
		bcc.s   loc_BED0
		rts
		bra.w     DisplaySprite           ; loc_D3C2
loc_BED0:
		rts
loc_BED2:		
		move.b  #$0E, $0024(A0)
		bra.w     loc_BFDE
loc_BEDC:
		cmpi.b  #$0E, ($FFFFB724).w
		beq.s   loc_BED2
		cmpi.b  #$04, $001A(A0)
		bne.s   loc_BEBE
		addq.b  #$02, $0024(A0)
		move.w  #$00B4, $001E(A0)
loc_BEF6:
		subq.w  #$01, $001E(A0)
		bne.s   loc_BF00
		addq.b  #$02, $0024(A0)
loc_BF00:
		rts
		bra.w     DisplaySprite           ; loc_D3C2
		bsr.w     DisplaySprite           ; loc_D3C2
		move.b  #$01, (Update_Bonus_score).w
		moveq   #$00, D0
		tst.w   (Bonus_Countdown_1).w
		beq.s   loc_BF22
		addi.w  #$000A, D0
		subi.w  #$000A, (Bonus_Countdown_1).w
loc_BF22:
		tst.w   (Bonus_Countdown_2).w
		beq.s   loc_BF32
		addi.w  #$000A, D0
		subi.w  #$000A, (Bonus_Countdown_2).w
loc_BF32:
		tst.w   D0
		bne.s   loc_BF4C
		move.w  #$00C5, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, $0024(A0)
		move.w  #$00B4, $001E(A0)
loc_BF4A:		
		rts
loc_BF4C:
		jsr     AddPoints               ; (loc_22FD0)      
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$03, D0
		bne.s   loc_BF4A
		move.w  #$00CD, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_BF66:
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		add.b   (Current_Act).w, D0
		add.w   D0, D0
		move.w  word_BF9A(PC, D0), D0
		move.w  D0, (Current_ZoneAndAct).w
		clr.b   (Last_star_pole_hit).w
		tst.b   (Enter_SpecialStage_flag).w
		beq.s   loc_BF8E
		move.b  #GameModeID_SpecialStage, (Game_Mode).w
		bra.s   loc_BF94
loc_BF8E:
		move.w  #$0001, (Level_Inactive_flag).w
loc_BF94:
		rts
		bra.w     DisplaySprite           ; loc_D3C2
; ===========================================================================
; -------------------------------------------------------------------------------
; Main game level order

; One value per act. That value is the level/act number of the level to load when
; that act finishes.
; -------------------------------------------------------------------------------
word_BF9A: zoneOrderedTable 2,2
	zoneTableEntry.w  green_hill_zone_act_2		; GHZ1
	zoneTableEntry.w  wood_zone_act_1		; GHZ2
	zoneTableEntry.w  green_hill_zone_act_1		; OWZ1
	zoneTableEntry.w  green_hill_zone_act_1		; OWZ2
	zoneTableEntry.w  wood_zone_act_2		; WZ1
	zoneTableEntry.w  metropolis_zone_act_1		; WZ2
	zoneTableEntry.w  green_hill_zone_act_1		; SSZ1
	zoneTableEntry.w  green_hill_zone_act_1		; SSZ2
	zoneTableEntry.w  metropolis_zone_act_2		; MTZ1
	zoneTableEntry.w  hill_top_zone_act_1		; MTZ2
	zoneTableEntry.w  green_hill_zone_act_1		; MTZ3
	zoneTableEntry.w  green_hill_zone_act_1		; MTZ4
	zoneTableEntry.w  green_hill_zone_act_1		; BLZ1
	zoneTableEntry.w  green_hill_zone_act_1		; BLZ2
	zoneTableEntry.w  hill_top_zone_act_2		; HTZ1
	zoneTableEntry.w  green_hill_zone_act_1		; HTZ2
	zoneTableEntry.w  hidden_palace_zone_act_2	; HPZ1
	zoneTableEntry.w  oil_ocean_zone_act_1		; HPZ2
	zoneTableEntry.w  green_hill_zone_act_1		; RWZ1
	zoneTableEntry.w  green_hill_zone_act_1		; RWZ2
	zoneTableEntry.w  oil_ocean_zone_act_2		; OOZ1
	zoneTableEntry.w  dust_hill_zone_act_1		; OOZ2
	zoneTableEntry.w  dust_hill_zone_act_2		; DHZ1
	zoneTableEntry.w  casino_night_zone_act_1	; DHZ2
	zoneTableEntry.w  casino_night_zone_act_2	; CNZ1
	zoneTableEntry.w  chemical_plant_zone_act_1	; CNZ2
	zoneTableEntry.w  chemical_plant_zone_act_2	; CPZ1
	zoneTableEntry.w  hill_top_zone_act_1		; CPZ2
	zoneTableEntry.w  genocide_city_zone_act_2	; GCZ1
	zoneTableEntry.w  neo_green_hill_zone_act_1	; GCZ2
	zoneTableEntry.w  neo_green_hill_zone_act_2	; NGHZ1
	zoneTableEntry.w  chemical_plant_zone_act_1	; NGHZ2
	zoneTableEntry.w  death_egg_zone_act_2		; DEZ1
	zoneTableEntry.w  green_hill_zone_act_1		; DEZ2
    zoneTableEnd
loc_BFDE:
		moveq   #$20, D1
		move.w  $0032(A0), D0
		cmp.w   $0008(A0), D0
		beq.s   loc_C004
		bge.s   loc_BFEE
		neg.w   D1
loc_BFEE:
		add.w   D1, $0008(A0)
		move.w  $0008(A0), D0
		bmi.s   loc_C002
		cmpi.w  #$0200, D0
		bcc.s   loc_C002
		bra.w     DisplaySprite           ; loc_D3C2
loc_C002:
		rts
loc_C004:
		cmpi.b  #$04, $001A(A0)
		bne.w    DeleteObject            ; loc_D3B4
		addq.b  #$02, $0024(A0)
		clr.b   (Control_Locked).w
		move.w  #MusID_ActClear, D0
		jmp     (PlayMusic).l            ; loc_14C0
		addq.w  #$02, (Camera_Max_X_pos).w
		cmpi.w  #$2100, (Camera_Max_X_pos).w
		beq.w    DeleteObject            ; loc_D3B4
		rts
loc_C030:
		dc.w    $0004, $0124, $00BC, $0200, $FEE0, $0120, $00D0, $0201
		dc.w    $040C, $014C, $00D6, $0206, $0520, $0120, $00EC, $0202
		dc.w    $0540, $0120, $00FC, $0203, $0560, $0120, $010C, $0204
		dc.w    $020C, $014C, $00CC, $0205		
;=============================================================================== 
; Object 0x3A - Level Results
; [ End ]
;=============================================================================== 

;=============================================================================== 
; Object 0x?? - Special Stage Results Screen
; [ Begin ]
;=============================================================================== 
Special_Stage_Results: ; loc_C068:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  SS_Results_Index(PC, D0), D1  ; loc_C076
		jmp     SS_Results_Index(PC, D1)      ; loc_C076
SS_Results_Index: ; loc_C076:
		dc.w    loc_C08C-SS_Results_Index
		dc.w    loc_C104-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C14A-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1A4-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1AE-SS_Results_Index
		dc.w    loc_C13C-SS_Results_Index
		dc.w    loc_C1A4-SS_Results_Index
		dc.w    loc_C1D2-SS_Results_Index
loc_C08C:
		tst.l   (Plc_Buffer).w
		beq.s   loc_C094
		rts
loc_C094:
		move.l  A0, A1
		lea     (loc_C1E6).l, A2
		moveq   #$03, D1
		cmpi.w  #$0032, (Ring_count).w
		bcs.s   loc_C0A8
		addq.w  #$01, D1
loc_C0A8:
		_move.b  0(A0), 0(A1)
		move.w  (A2)+, $0008(A1)
		move.w  (A2)+, $0030(A1)
		move.w  (A2)+, $000A(A1)
		move.b  (A2)+, $0024(A1)
		move.b  (A2)+, $001A(A1)
		move.l  #Special_Stage_Results_Mappings, $0004(A1) ; loc_C6D4
		move.w  #$8580, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$00, $0001(A1)
		lea     $0040(A1), A1
		dbf    D1, loc_C0A8
		moveq   #$07, D0
		move.b  (Emerald_count).w, D1
		beq.s   loc_C100
		moveq   #$00, D0
		cmpi.b  #$06, D1
		bne.s   loc_C100
		moveq   #$08, D0
		move.w  #$0018, $0008(A0)
		move.w  #$0118, $0030(A0)
loc_C100:
		move.b  D0, $001A(A0)
loc_C104:
		moveq   #$10, D1
		move.w  $0030(A0), D0
		cmp.w   $0008(A0), D0
		beq.s   loc_C12A
		bge.s   loc_C114
		neg.w   D1
loc_C114:
		add.w   D1, $0008(A0)
loc_C118:		
		move.w  $0008(A0), D0
		bmi.s   loc_C128
		cmpi.w  #$0200, D0
		bcc.s   loc_C128
		bra.w     DisplaySprite           ; loc_D3C2
loc_C128:
		rts
loc_C12A:
		cmpi.b  #$02, $001A(A0)
		bne.s   loc_C118
		addq.b  #$02, $0024(A0)
		move.w  #$00B4, $001E(A0)
loc_C13C:
		subq.w  #$01, $001E(A0)
		bne.s   loc_C146
		addq.b  #$02, $0024(A0)
loc_C146:
		bra.w     DisplaySprite           ; loc_D3C2
loc_C14A:
		bsr.w     DisplaySprite           ; loc_D3C2
		move.b  #$01, (Update_Bonus_score).w
		tst.w   (Bonus_Countdown_2).w
		beq.s   loc_C17C
		subi.w  #$000A, (Bonus_Countdown_2).w
		moveq   #$0A, D0
		jsr     AddPoints               ; (loc_22FD0)
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$03, D0
		bne.s   loc_C1A2
		move.w  #$00CD, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_C17C:
		move.w  #$00C5, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, $0024(A0)
		move.w  #$00B4, $001E(A0)
		cmpi.w  #$0032, (Ring_count).w
		bcs.s   loc_C1A2
		move.w  #$003C, $001E(A0)
		addq.b  #$04, $0024(A0)
loc_C1A2:
		rts
loc_C1A4:
		move.w  #$0001, (Level_Inactive_flag).w
		bra.w     DisplaySprite           ; loc_D3C2
loc_C1AE:
		move.b  #$04, ($FFFFB6DA).w
		move.b  #$14, ($FFFFB6E4).w
		move.w  #$00BF, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, $0024(A0)
		move.w  #$0168, $001E(A0)
		bra.w     DisplaySprite           ; loc_D3C2
loc_C1D2:
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$0F, D0
		bne.s   loc_C1E2
		bchg    #0, $001A(A0)
loc_C1E2:
		bra.w     DisplaySprite           ; loc_D3C2
loc_C1E6:
		dc.w    $0020, $0120, $00C4, $0200, $0320, $0120, $0118, $0201
		dc.w    $0360, $0120, $0128, $0202, $01EC, $011C, $00C4, $0203
		dc.w    $03A0, $0120, $0138, $0206		
;=============================================================================== 
; Object 0x?? - Special Stage Results Screen
; [ End ]
;===============================================================================		 
;=============================================================================== 
; Object 0x?? - Emeralds From Special Stage Results Screen
; [ Begin ]
;===============================================================================    
Emeralds: ; loc_C20E:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_C21C(PC, D0), D1
		jmp     loc_C21C(PC, D1)
loc_C21C:
		dc.w    loc_C22C-loc_C21C
		dc.w    loc_C286-loc_C21C
loc_C220:
		dc.w    $0110, $0128, $00F8, $0140, $00E0, $0158
loc_C22C:
		move.l  A0, A1
		lea     loc_C220(PC), A2
		moveq   #$00, D2
		moveq   #$00, D1
		move.b  (Emerald_count).w, D1
		subq.b  #$01, D1
		bcs.w     DeleteObject            ; loc_D3B4
loc_C240:		
		_move.b  0(A0), 0(A1)
		move.w  (A2)+, $0008(A1)
		move.w  #$00F0, $000A(A1)
		lea     (Got_Emeralds_array).w, A3
		move.b  $00(A3, D2), D3
		move.b  D3, $001A(A1)
		move.b  D3, $001C(A1)
		addq.b  #$01, D2
		addq.b  #$02, $0024(A1)
		move.l  #Emeralds_Mappings, $0004(A1) ; loc_C8F6
		move.w  #$8541, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$00, $0001(A1)
		lea     $0040(A1), A1
		dbf    D1, loc_C240
loc_C286:
		move.b  $001A(A0), D0
		move.b  #$06, $001A(A0)
		cmpi.b  #$06, D0
		bne.s   loc_C29C
		move.b  $001C(A0), $001A(A0)
loc_C29C:
		bra.w     DisplaySprite           ; loc_D3C2
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; Can't split some of these due to reusing mappings between each other
; ---------------------------------------------------------------------------
Obj34_MapUnc_C2A0: ; loc_C2A0: ; Object $34 - Mappings
		dc.w    TC_GHz_Map-Obj34_MapUnc_C2A0  ; Green Hill
		dc.w    TC_Lz_Map-Obj34_MapUnc_C2A0   ; Labyrinth
		dc.w    TC_Mz_Map-Obj34_MapUnc_C2A0   ; Marble  
		dc.w    TC_SLz_Map-Obj34_MapUnc_C2A0  ; Star Light
		dc.w    TC_SYz_Map-Obj34_MapUnc_C2A0  ; Spring Yard
		dc.w    TC_SBz_Map-Obj34_MapUnc_C2A0  ; Scrap Brain
		dc.w    TC_Zone_Map-Obj34_MapUnc_C2A0 ; Zone
		dc.w    TC_Act1_Map-Obj34_MapUnc_C2A0 ; Act 1
		dc.w    TC_Act2_Map-Obj34_MapUnc_C2A0 ; Act 2
		dc.w    TC_Act3_Map-Obj34_MapUnc_C2A0 ; Act 3
		dc.w    TC_Oval_Map-Obj34_MapUnc_C2A0 ; Oval
		dc.w    TC_Fz_Map-Obj34_MapUnc_C2A0   ; Final  
TC_GHz_Map: ; loc_C2B8: ; Green Hill		 
		dc.w    $0009 
		dc.l    $F8050018, $000CFFB4, $F805003A, $001DFFC4
		dc.l    $F8050010, $0008FFD4, $F8050010, $0008FFE4
		dc.l    $F805002E, $0017FFF4, $F805001C, $000E0014
		dc.l    $F8010020, $00100024, $F8050026, $0013002C
		dc.l    $F8050026, $0013003C
TC_Lz_Map: ; loc_C302: ; Labyrinth
		dc.w    $0009
		dc.l    $F8050026, $0013FFBC, $F8050000, $0000FFCC
		dc.l    $F8050004, $0002FFDC, $F805004A, $0025FFEC
		dc.l    $F805003A, $001DFFFC, $F8010020, $0010000C
		dc.l    $F805002E, $00170014, $F8050042, $00210024
		dc.l    $F805001C, $000E0034
TC_Mz_Map: ; loc_C34C: ; Marble 
		dc.w    $0006
		dc.l    $F805002A, $0015FFCF, $F8050000, $0000FFE0
		dc.l    $F805003A, $001DFFF0, $F8050004, $00020000
		dc.l    $F8050026, $00130010, $F8050010, $00080020 
TC_SLz_Map: ; loc_C37E: ; Star Light
		dc.w    $0009
		dc.l    $F805003E, $001FFFB4, $F8050042, $0021FFC4
		dc.l    $F8050000, $0000FFD4, $F805003A, $001DFFE4
		dc.l    $F8050026, $00130004, $F8010020, $00100014
		dc.l    $F8050018, $000C001C, $F805001C, $000E002C
		dc.l    $F8050042, $0021003C
TC_SYz_Map: ; loc_C3C8: ; Spring Yard
		dc.w    $000A
		dc.w    $F805, $003E, $001F, $FFAC, $F805, $0036, $001B, $FFBC
		dc.w    $F805, $003A, $001D, $FFCC, $F801, $0020, $0010, $FFDC
		dc.w    $F805, $002E, $0017, $FFE4, $F805, $0018, $000C, $FFF4
		dc.w    $F805, $004A, $0025, $0014, $F805, $0000, $0000, $0024
		dc.w    $F805, $003A, $001D, $0034, $F805, $000C, $0006, $0044 
TC_SBz_Map: ; loc_C41A: ; Scrap Brain
		dc.w    $000A
		dc.l    $F805003E, $001FFFAC, $F8050008, $0004FFBC
		dc.l    $F805003A, $001DFFCC, $F8050000, $0000FFDC
		dc.l    $F8050036, $001BFFEC, $F8050004, $0002000C
		dc.l    $F805003A, $001D001C, $F8050000, $0000002C
		dc.l    $F8010020, $0010003C, $F805002E, $00170044
TC_Zone_Map: ; loc_C46C: ; Zone
		dc.w    $0004
		dc.l    $F805004E, $0027FFE0, $F8050032, $0019FFF0
		dc.l    $F805002E, $00170000, $F8050010, $00080010
TC_Act1_Map: ; loc_C48E: ; Act 1
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC, $F4020057, $002B000C
TC_Act2_Map: ; loc_C4A0: ; Act 2
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC, $F406005A, $002D0008
TC_Act3_Map: ; loc_C4B2: ; Act 3
		dc.w    $0002
		dc.l    $040C0053, $0029FFEC, $F4060060, $00300008
TC_Oval_Map: ; loc_C4C4: ; Oval
		dc.w    $000D
		dc.l    $E40C0070, $0038FFF4, $E4020074, $003A0014
		dc.l    $EC040077, $003BFFEC, $F4050079, $003CFFE4
		dc.l    $140C1870, $1838FFEC, $04021874, $183AFFE4
		dc.l    $0C041877, $183B0004, $FC051879, $183C000C
		dc.l    $EC08007D, $003EFFFC, $F40C007C, $003EFFF4
		dc.l    $FC08007C, $003EFFF4, $040C007C, $003EFFEC
		dc.l    $0C08007C, $003EFFEC
TC_Fz_Map: ; loc_C52E: ; Final
		dc.w    $0005
		dc.l    $F8050014, $000AFFDC, $F8010020, $0010FFEC
		dc.l    $F805002E, $0017FFF4, $F8050000, $00000004
		dc.l    $F8050026, $00130014
Time_Game_Over_Mappings: ; loc_C558:
		dc.w    loc_C560-Time_Game_Over_Mappings
		dc.w    loc_C572-Time_Game_Over_Mappings
		dc.w    loc_C584-Time_Game_Over_Mappings
		dc.w    loc_C596-Time_Game_Over_Mappings
loc_C560:
		dc.w    $0002
		dc.l    $F80D0000, $0000FFB8, $F80D0008, $0004FFD8
loc_C572:
		dc.w    $0002
		dc.l    $F80D0014, $000A0008, $F80D000C, $00060028
loc_C584:
		dc.w    $0002
		dc.l    $F809001C, $000EFFC4, $F80D0008, $0004FFDC
loc_C596:
		dc.w    $0002
		dc.l    $F80D0014, $000A000C, $F80D000C, $0006002C  
Level_Results_Mappings: ; loc_C5A8:
		dc.w    LR_Sonic_Has_Map-Level_Results_Mappings
		dc.w    LR_Passed_Map-Level_Results_Mappings
		dc.w    LR_Score_Map-Level_Results_Mappings
		dc.w    LR_Time_Bonus_Map-Level_Results_Mappings
		dc.w    LR_Ring_Bonus_Map-Level_Results_Mappings
		dc.w    TC_Oval_Map-Level_Results_Mappings
		dc.w    TC_Act1_Map-Level_Results_Mappings
		dc.w    TC_Act2_Map-Level_Results_Mappings
		dc.w    TC_Act3_Map-Level_Results_Mappings
LR_Sonic_Has_Map: ; loc_C5BA: ; Sonic Has
		dc.w    $0008
		dc.l    $F805003E, $001FFFB8, $F8050032, $0019FFC8
		dc.l    $F805002E, $0017FFD8, $F8010020, $0010FFE8
		dc.l    $F8050008, $0004FFF0, $F805001C, $000E0010
		dc.l    $F8050000, $00000020, $F805003E, $001F0030
LR_Passed_Map: ; loc_C5FC: ; Passed
		dc.w    $0006
		dc.l    $F8050036, $001BFFD0, $F8050000, $0000FFE0
		dc.l    $F805003E, $001FFFF0, $F805003E, $001F0000
		dc.l    $F8050010, $00080010, $F805000C, $00060020
LR_Score_Map: ; loc_C62E:
		dc.w    $0006
		dc.l    $F80D014A, $00A5FFB0, $F8010162, $00B1FFD0
		dc.l    $F8090164, $00B20018, $F80D016A, $00B50030
		dc.l    $F704006E, $0037FFCD, $FF04186E, $1837FFCD
LR_Time_Bonus_Map: ; loc_C660:
		dc.w    $0007
		dc.l    $F80D015A, $00ADFFB0, $F80D0066, $0033FFD9
		dc.l    $F801014A, $00A5FFF9, $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6, $F80DFFF0, $FBF80028
		dc.l    $F8010170, $00B80048
LR_Ring_Bonus_Map: ; loc_C69A:
		dc.w    $0007
		dc.l    $F80D0152, $00A9FFB0, $F80D0066, $0033FFD9
		dc.l    $F801014A, $00A5FFF9, $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6, $F80DFFF8, $FBFC0028
		dc.l    $F8010170, $00B80048    
Special_Stage_Results_Mappings: ; loc_C6D4:
		dc.w    loc_C6E6-Special_Stage_Results_Mappings
		dc.w    loc_C750-Special_Stage_Results_Mappings
		dc.w    loc_C782-Special_Stage_Results_Mappings
		dc.w    TC_Oval_Map-Special_Stage_Results_Mappings
		dc.w    loc_C7BC-Special_Stage_Results_Mappings
		dc.w    loc_C7DE-Special_Stage_Results_Mappings
		dc.w    loc_C800-Special_Stage_Results_Mappings
		dc.w    loc_C81A-Special_Stage_Results_Mappings
		dc.w    loc_C87C-Special_Stage_Results_Mappings
loc_C6E6:
		dc.w    $000D
		dc.l    $F8050008, $0004FF90, $F805001C, $000EFFA0
		dc.l    $F8050000, $0000FFB0, $F8050032, $0019FFC0
		dc.l    $F805003E, $001FFFD0, $F8050010, $0008FFF0
		dc.l    $F805002A, $00150000, $F8050010, $00080010
		dc.l    $F805003A, $001D0020, $F8050000, $00000030
		dc.l    $F8050026, $00130040, $F805000C, $00060050
		dc.l    $F805003E, $001F0060
loc_C750:
		dc.w    $0006
		dc.l    $F80D014A, $00A5FFB0, $F8010162, $00B1FFD0
		dc.l    $F8090164, $00B20018, $F80D016A, $00B50030
		dc.l    $F704006E, $0037FFCD, $FF04186E, $1837FFCD
loc_C782:
		dc.w    $0007
		dc.l    $F80D0152, $00A9FFB0, $F80D0066, $0033FFD9
		dc.l    $F801014A, $00A5FFF9, $F704006E, $0037FFF6
		dc.l    $FF04186E, $1837FFF6, $F80DFFF8, $FBFC0028
		dc.l    $F8010170, $00B80048
loc_C7BC:
		dc.w    $0004
		dc.l    $F80DFFD1, $7FC8FFB0, $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0, $F8061FE3, $2FE30040
loc_C7DE:
		dc.w    $0004
		dc.l    $F80DFFD1, $7FC8FFB0, $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0, $F8061FE9, $2FEC0040
loc_C800:
		dc.w    $0003
		dc.l    $F80DFFD1, $7FC8FFB0, $F80DFFD9, $7FD4FFD0
		dc.l    $F801FFE1, $7FE0FFF0
loc_C81A:
		dc.w    $000C
		dc.l    $F805003E, $001FFF9C, $F8050036, $001BFFAC
		dc.l    $F8050010, $0008FFBC, $F8050008, $0004FFCC
		dc.l    $F8010020, $0010FFDC, $F8050000, $0000FFE4
		dc.l    $F8050026, $0013FFF4, $F805003E, $001F0014
		dc.l    $F8050042, $00210024, $F8050000, $00000034
		dc.l    $F8050018, $000C0044, $F8050010, $00080054
loc_C87C:
		dc.w    $000F
		dc.l    $F805003E, $001FFF88, $F8050032, $0019FF98
		dc.l    $F805002E, $0017FFA8, $F8010020, $0010FFB8
		dc.l    $F8050008, $0004FFC0, $F8050018, $000CFFD8
		dc.l    $F8050032, $0019FFE8, $F8050042, $0021FFF8
		dc.l    $F8050042, $00210010, $F805001C, $000E0020
		dc.l    $F8050010, $00080030, $F805002A, $00150040
		dc.l    $F8050000, $00000058, $F8050026, $00130068
		dc.l    $F8050026, $00130078		
Emeralds_Mappings: ; loc_C8F6:
		dc.w    loc_C904-Emeralds_Mappings
		dc.w    loc_C90E-Emeralds_Mappings
		dc.w    loc_C918-Emeralds_Mappings
		dc.w    loc_C922-Emeralds_Mappings
		dc.w    loc_C92C-Emeralds_Mappings
		dc.w    loc_C936-Emeralds_Mappings
		dc.w    loc_C940-Emeralds_Mappings
loc_C904:
		dc.w    $0001
		dc.l    $F8052004, $2002FFF8
loc_C90E:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_C918:
		dc.w    $0001
		dc.l    $F8054004, $4002FFF8
loc_C922:
		dc.w    $0001
		dc.l    $F8056004, $6002FFF8
loc_C92C:
		dc.w    $0001
		dc.l    $F8052008, $2004FFF8
loc_C936:
		dc.w    $0001
		dc.l    $F805200C, $2006FFF8
loc_C940:
		dc.w    $0000		   ; Filler		            
		nop		   
;=============================================================================== 
; Object 0x36 - Vertical Spikes 
; [ Begin ]		         
;===============================================================================		 
Obj_0x36_Spikes: ; loc_C944:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_C952(PC, D0), D1
		jmp     loc_C952(PC, D1)
loc_C952:
		dc.w    loc_C96A-loc_C952
		dc.w    loc_C9D6-loc_C952
		dc.w    loc_CA26-loc_C952
		dc.w    loc_CA82-loc_C952		
loc_C95A:
		dc.b    $10, $10, $20, $10, $30, $10, $40, $10, $10, $10, $10, $20, $10, $30, $10, $40		  
loc_C96A:
		addq.b  #$02, $0024(A0)
		move.l  #Obj36_MapUnc_CAB0, $0004(A0) ; loc_CBA0
		move.w  #$2434, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  $0028(A0), D0
		andi.b  #$0F, $0028(A0)
		andi.w  #$00F0, D0  
		lea     loc_C95A(PC), A1
		lsr.w   #$03, D0
		adda.w  D0, A1
		move.b  (A1)+, $0019(A0)
		move.b  (A1)+, $0016(A0)
		lsr.w   #$01, D0
		move.b  D0, $001A(A0)
		cmpi.b  #$04, D0
		bcs.s   loc_C9BA
		addq.b  #$02, $0024(A0)
loc_C9BA:
		btst    #$01, $0022(A0)
		beq.s   loc_C9C8
		move.b  #$06, $0024(A0)
loc_C9C8:
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0032(A0)
		rts
loc_C9D6:
		bsr.w     loc_CAFE
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     SolidObject             ; loc_F4A0
		move.b  $0022(A0), D6
		andi.b  #$18, D6
		beq.s   loc_CA1E
		move.b  D6, D0
		andi.b  #$08, D0
		beq.s   loc_CA10
		lea     ($FFFFB000).w, A1
		bsr.w     Touch_Spikes            ; loc_CAD0
loc_CA10:
		andi.b  #$10, D6
		beq.s   loc_CA1E
		lea     ($FFFFB040).w, A1
		bsr.w     Touch_Spikes            ; loc_CAD0
loc_CA1E:
		move.w  $0030(A0), D0
		bra.w     loc_D2D8
loc_CA26:		
		move.w  $0008(A0), -(A7)
		bsr.w     loc_CAFE
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  (A7)+, D4
		bsr.w     SolidObject             ; loc_F4A0
		swap  D6
		andi.w  #$0003, D6
		beq.s   loc_CA7A
		move.b  D6, D0
		andi.b  #$01, D0
		beq.s   loc_CA66
		lea     ($FFFFB000).w, A1
		bsr.w     Touch_Spikes            ; loc_CAD0
		bclr    #$05, $0022(A0)
loc_CA66:		
		andi.b  #$02, D6
		beq.s   loc_CA7A
		lea     ($FFFFB040).w, A1  
		bsr.w     Touch_Spikes            ; loc_CAD0
		bclr    #$06, $0022(A0)
loc_CA7A:
		move.w  $0030(A0), D0
		bra.w     loc_D2D8
loc_CA82:
		bsr.w     loc_CAFE
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     SolidObject             ; loc_F4A0
		swap  D6
		andi.w  #$000C, D6
		beq.s   loc_CAC8
		move.b  D6, D0
		andi.b  #$04, D0
		beq.s   loc_CABA
		lea     ($FFFFB000).w, A1
		bsr.w     Touch_Spikes            ; loc_CAD0
loc_CABA:
		andi.b  #$08, D6
		beq.s   loc_CAC8
		lea     ($FFFFB040).w, A1
		bsr.w     Touch_Spikes            ; loc_CAD0
loc_CAC8:
		move.w  $0030(A0), D0
		bra.w     loc_D2D8
;===============================================================================
; Sub Routine Touch_Spikes
;[ Begin ]
;===============================================================================		
Touch_Spikes: ; loc_CAD0:
		tst.b   (Invincibility).w           ; Invincibility Running ?
		bne.s   Touch_Spikes_No_Hurt    ; loc_CAFC
		cmpi.b  #$04, $0024(A1)
		bcc.s   Touch_Spikes_No_Hurt    ; loc_CAFC
		move.l  $000C(A1), D3
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		sub.l   D0, D3
		move.l  D3, $000C(A1)
		move.l  A0, A2
		move.l  A1, A0
		jsr     HurtSonic               ; loc_21384
		move.l  A2, A0
Touch_Spikes_No_Hurt: ; loc_CAFC:		
		rts
;===============================================================================
; Sub Routine Touch_Spikes
;[ End ]
;===============================================================================		    
loc_CAFE:
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.w  loc_CB0E(PC, D0), D1
		jmp     loc_CB0E(PC, D1)
loc_CB0E:
		dc.w    loc_CB14-loc_CB0E
		dc.w    loc_CB16-loc_CB0E
		dc.w    loc_CB2A-loc_CB0E
loc_CB14:		  
		rts
loc_CB16:
		bsr.w     loc_CB3E
		moveq   #$00, D0
		move.b  $0034(A0), D0
		add.w   $0032(A0), D0
		move.w  D0, $000C(A0)
		rts
loc_CB2A:
		bsr.w     loc_CB3E
		moveq   #$00, D0
		move.b  $0034(A0), D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		rts
loc_CB3E:
		tst.w   $0038(A0)
		beq.s   loc_CB5C
		subq.w  #$01, $0038(A0)
		bne.s   loc_CB9E
		tst.b   $0001(A0)
		bpl.s   loc_CB9E
		move.w  #$00B6, D0
		jsr     (PlaySound).l             ; loc_14C6
		bra.s   loc_CB9E
loc_CB5C:
		tst.w   $0036(A0)
		beq.s   loc_CB7E
		subi.w  #$0800, $0034(A0)
		bcc.s   loc_CB9E
		move.w  #$0000, $0034(A0)
		move.w  #$0000, $0036(A0)
		move.w  #$003C, $0038(A0)
		bra.s   loc_CB9E
loc_CB7E:
		addi.w  #$0800, $0034(A0)
		cmpi.w  #$2000, $0034(A0)
		bcs.s   loc_CB9E
		move.w  #$2000, $0034(A0)
		move.w  #$0001, $0036(A0)
		move.w  #$003C, $0038(A0)
loc_CB9E:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj36_MapUnc_CAB0:	BINCLUDE	"mappings/sprite/obj36.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3B - Purple rock (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_CD00: Obj_0x3B:
Obj3B:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj3B_Index(pc,d0.w),d1
		jmp	Obj3B_Index(pc,d1.w)
; ===========================================================================
; off_CD0E:
Obj3B_Index:	offsetTable
		offsetTableEntry.w Obj3B_Init
		offsetTableEntry.w Obj3B_Main
; ===========================================================================
; loc_CD12:
Obj3B_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj3B_MapUnc_CD66,4(a0)
		move.w	#$66C0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$13,$19(a0)
		move.b	#4,$18(a0)
; loc_CD3A:
Obj3B_Main:
		move.w	#$1B,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj3B_MapUnc_CD66:	BINCLUDE	"mappings/sprite/obj3B.bin"
; ===========================================================================
		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 3C - Breakable wall (leftover from S1) (mostly unused)
; ---------------------------------------------------------------------------
; Sprite_CD7C: Obj_0x3C:
Obj3C:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj3C_Index(pc,d0.w),d1
		jsr	Obj3C_Index(pc,d1.w)
		bra.w	MarkObjGone
; ===========================================================================
; off_CD8E:
Obj3C_Index:	offsetTable
		offsetTableEntry.w Obj3C_Init
		offsetTableEntry.w Obj3C_Main
		offsetTableEntry.w Obj3C_Fragment
; ===========================================================================
; loc_CD94:
Obj3C_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj3C_MapUnc_CF04,4(a0)
		move.w	#$4590,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.b	$28(a0),$1A(a0)
; loc_CDC2:
Obj3C_Main:
		move.w	($FFFFB010).w,$30(a0)
		move.w	#$1B,d1
		move.w	#$20,d2
		move.w	#$20,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		btst	#5,$22(a0)
		bne.s	loc_CDE6

return_CDE4:
		rts
; ===========================================================================

loc_CDE6:
		lea	($FFFFB000).w,a1	; a1=character
		cmpi.b	#2,$1C(a1)
		bne.s	return_CDE4
		move.w	$30(a0),d0
		bpl.s	loc_CDFA
		neg.w	d0

loc_CDFA:
		cmpi.w	#$480,d0
		bcs.s	return_CDE4
		move.w	$30(a0),$10(a1)
		addq.w	#4,8(a1)
		lea	(Obj3C_FragmentSpeeds_LeftToRight).l,a4
		move.w	8(a0),d0
		cmp.w	8(a1),d0
		bcs.s	loc_CE26
		subi.w	#8,8(a1)
		lea	(Obj3C_FragmentSpeeds_RightToLeft).l,a4

loc_CE26:
		move.w	$10(a1),$14(a1)
		bclr	#5,$22(a0)
		bclr	#5,$22(a1)
		bsr.s	BreakObjectToPieces
; loc_CE3A:
Obj3C_Fragment:
		bsr.w	SpeedToPos
		addi.w	#$70,$12(a0)
		tst.b	1(a0)
		bpl.w	DeleteObject
		bra.w	DisplaySprite

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to break an object into its current sprite mappings
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_CE50:
BreakObjectToPieces:
		moveq	#0,d0
		move.b	$1A(A0),d0
		add.w	d0,d0
		move.l	4(a0),a3
		adda.w	(a3,d0.w),a3	; put address of appropriate frame to a3
		move.w	(a3)+,d1	; amount of pieces the frame consists of
		subq.w	#1,d1
		bset	#5,1(a0)
		_move.b	0(a0),d4
		move.b	1(a0),d5
		move.l	a0,a1
		bra.s	BreakObjectToPieces_InitObject
; ===========================================================================
; loc_CE76:
BreakObjectToPieces_Loop:
		bsr.w	SingleObjLoad2
		bne.s	loc_CEBA
		addq.w	#8,a3
; loc_CE7E:
BreakObjectToPieces_InitObject:
		move.b	#4,$24(a1)
		_move.b	d4,0(a1)	; load object with ID of parent object and routine 4
		move.l	a3,4(a1)
		move.b	d5,1(a1)
		move.w	8(a0),8(a1)
		move.w	$C(a0),$C(a1)
		move.w	2(a0),2(a1)
		move.b	$18(a0),$18(a1)
		move.b	$19(a0),$19(a1)
		move.w	(a4)+,$10(a1)
		move.w	(a4)+,$12(a1)
		dbf	d1,BreakObjectToPieces_Loop

loc_CEBA:
		move.w	#$CB,d0
		jmp	(PlaySound).l
; End of function BreakObjectToPieces

; ===========================================================================
; word_CEC4:
Obj3C_FragmentSpeeds_LeftToRight:
		;    x velocity,y velocity
		dc.w  $400,-$500
		dc.w  $600,-$100
		dc.w  $600, $100
		dc.w  $400, $500
		dc.w  $600,-$600
		dc.w  $800,-$200
		dc.w  $800, $200
		dc.w  $600, $600
; word_CEE4:
Obj3C_FragmentSpeeds_RightToLeft:
		dc.w -$600,-$600
		dc.w -$800,-$200
		dc.w -$800, $200
		dc.w -$600, $600
		dc.w -$400,-$500
		dc.w -$600,-$100
		dc.w -$600, $100
		dc.w -$400, $500
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj3C_MapUnc_CF04:	BINCLUDE	"mappings/sprite/obj3C.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; This runs the code of all the objects that are in object RAM
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_CDD0: Load_Objects:
RunObjects:
		lea	($FFFFB000).w,a0	; a0=object
		moveq	#$7F,d7			; run the first $80 objects out of levels
		moveq	#0,d0
		cmpi.b	#6,($FFFFB024).w	; is Sonic dead?
		bcc.s	RunObjectsWhenPlayerIsDead	; if yes, branch
		; continue straight into RunObject

; ---------------------------------------------------------------------------
; This is THE place where each individual object's code gets called from
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_CFE0:
RunObject:
		move.b	(a0),d0		; get object ID
		beq.s	RunNextObject	; skip if invalid (e.g. Obj00)

		add.w	d0,d0
		add.w	d0,d0	; d0 = object ID *4
		move.l	Obj_Index-4(pc,d0.w),a1	; load the address of the object's code
		jsr	(a1)	; dynamic call! to one of the the entries in Obj_Index
		moveq	#0,d0
; loc_CFF0:
RunNextObject:
		lea	$40(a0),a0	; load Obj address
		dbf	d7,RunObject
		rts
; ---------------------------------------------------------------------------
; this skips certain objects to make enemies and things pause when Sonic dies
; loc_CFFA:
RunObjectsWhenPlayerIsDead:
		moveq	#$1F,d7
		bsr.s	RunObject	; run the first $10 objects normally
		moveq	#$5F,d7		; all objects in this range are paused

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; sub_D000:
RunObjectDisplayOnly:
		moveq	#0,d0
		move.b	(a0),d0		; get object ID
		beq.s	loc_D010	; skip if invalid (e.g. Obj00)
		tst.b	1(a0)		; has the object been fully initalized?
		bpl.s	loc_D010	; if not, branch
		bsr.w	DisplaySprite

loc_D010:
		lea	$40(a0),a0	; load Obj address
		dbf	d7,RunObjectDisplayOnly
		rts
; End of function RunObjects

; ===========================================================================
; ---------------------------------------------------------------------------
; OBJECT POINTER ARRAY ; object pointers ; sprite pointers ; object list ; sprite list
;
; This array contains the pointers to all the objects used in the game.
; ---------------------------------------------------------------------------
; loc_D01A:
Obj_Index:
		dc.l	Obj01			; Sonic
		dc.l    Obj_0x02_Tails		    ; loc_10E38
		dc.l	Obj03			; Collision plane/layer switcher
		dc.l	Obj04			; Surface of the water
		dc.l	Obj05			; Tails' tails
		dc.l	Obj06			; Twisting spiral pathway in GHZ
		dc.l    Obj_0x07		          ; loc_180D0 
		dc.l    Obj_0x08_Water_Splash             ; loc_12B42 
		dc.l    Obj_0x09_Sonic_In_Special_Stage   ; loc_21D40
		dc.l    Obj_0x0A_Bubbles_And_Numbers      ; loc_1207C 
		dc.l	Obj0B			; Section of pipe that tips you off from CPZ
		dc.l	Obj0C			; Small floating platform (used in CPZ in the Nick Arcade prototype)
		dc.l    Obj_0x0D_End_Panel		; loc_F1F4 
		dc.l	Obj0E			; Sonic and Tails on the title screen
		dc.l	Obj0F			; Mappings test?
		dc.l    Obj_0x10		          ; loc_223E2
		dc.l    Obj_0x11_Bridge		   ; loc_7FDC 
		dc.l	Obj12			; Emerald from Hidden Palace Zone
		dc.l    Obj_0x13_Hpz_Waterfalls           ; loc_14B78  
		dc.l    Obj_0x14_See_Saw		  ; loc_15B8C 
		dc.l    Obj_0x15_Swing_Platform           ; loc_85F8
		dc.l    Obj_0x16_Teleferics               ; loc_1600C 
		dc.l    Obj_0x17		          ; loc_8B9C
		dc.l    Obj_0x18_Platforms		; loc_8D38 
		dc.l    Obj_0x19_Elevator		 ; loc_1621C		 
		dc.l    Obj_0x1A_Collapsing_Platforms     ; loc_9128 
		dc.l    Obj_0x1B_Speed_Booster            ; loc_16468
		dc.l    Obj_0x1C_Misc		     ; loc_999C 
		dc.l    Obj_0x1D_Worms		    ; loc_165B0   
		dc.l    Obj_0x1E_Tube_Attributes          ; loc_16724 
		dc.l    Obj_0x1F_Collapsing_Platforms     ; loc_9274 
		dc.l    Obj_0x20_Fireball		 ; loc_17174
		dc.l    Obj_0x21_Head_Up_Display          ; loc_22DFC
		dc.l    Obj_0x22_Arrow_Shooter            ; loc_19660
		dc.l    Obj_0x23_Pillar		   ; loc_19850    
		dc.l    Obj_0x24		          ; loc_A012
		dc.l	Obj25			; A ring
		dc.l    Obj_0x26_Monitors		 ; loc_B29C
		dc.l    Obj_0x27_Object_Hit               ; loc_A086
		dc.l    Obj_0x28_Flickies		 ; loc_A2B0
		dc.l    Obj_0x29_Enemy_Points             ; loc_A7C0
		dc.l    Obj_0x2A_Up_Down_Pillar           ; loc_9C0C
		dc.l    Obj_0x2B_Breakable_Pillar         ; loc_19A1E
		dc.l    Obj_0x2C_Leaves		   ; loc_1A0C4
		dc.l    Obj_0x2D_Automatic_Door           ; loc_9CE2   
		dc.l    Obj_0x2E_Monitors_Contents        ; loc_B46A
		dc.l    Obj_0x2F_Breakable_Floor          ; loc_1747C
		dc.l    Obj_0x30		          ; loc_17A4C
		dc.l    Obj_0x31_Lava_Attributes          ; loc_155A0 
		dc.l    Obj_0x32_Breakable_Obstacule      ; loc_1768A
		dc.l    Obj_0x33_Touch_Booster            ; loc_17CA0   
		dc.l	Obj34			; Sonic 1 title cards
		dc.l    Obj_0x35_Invincibility            ; loc_1264E
		dc.l    Obj_0x36_Spikes		   ; loc_C944 
		dc.l    Obj_0x37_Rings_Out		; loc_AD62 
		dc.l    Obj_0x38_Shield		   ; loc_125CE
		dc.l    Obj_0x39_Time_Game_Over           ; loc_BD76
		dc.l    Obj_0x3A_Level_Results            ; loc_BE38 
		dc.l	Obj3B			; Purple rock (leftover from S1)
		dc.l	Obj3C			; Breakable wall (leftover from S1) (mostly unused)
		dc.l    Obj_0x3D_Break_Boost              ; loc_18E78   
		dc.l    Obj_0x3E_Egg_Prison               ; loc_20E5C
		dc.l    Obj_0x3F		          ; loc_A11E
		dc.l    Obj_0x40_Diagonal_Springs         ; loc_1A30C
		dc.l    Obj_0x41_Springs		  ; loc_E7B8 
		dc.l    Obj_0x42_Steam_Vent               ; loc_1A5CC
		dc.l    Obj_0x43_Giant_Spikeball          ; loc_17F0C  
		dc.l    Obj_0x44		          ; loc_F10C
		dc.l    Obj_0x45_Spring_Push_Boost        ; loc_181A0
		dc.l    Obj_0x46_Spring_Ball              ; loc_18ABE 
		dc.l    Obj_0x47_Switch		   ; loc_18D9C
		dc.l    Obj_0x48_Cannon		   ; loc_19250
		dc.l    Obj_0x49_Waterfall		; loc_15352 
		dc.l    Obj_0x4A_Octus		    ; loc_1EBB8
		dc.l    Obj_0x4B_Buzz_Bomber              ; loc_1E89C 
		dc.l    Obj_0x4C_Batbot		   ; loc_1EE68 
		dc.l    Obj_0x4D_Rhinobot		 ; loc_1D984 
		dc.l    Obj_0x4E_Crocobot		 ; loc_1F2F0
		dc.l    Obj_0x4F_Dinobot		  ; loc_1DEAC
		dc.l    Obj_0x50_Aquis		    ; loc_1E010
		dc.l    Obj_0x51_Aquis		    ; loc_1E62C
		dc.l    Obj_0x52_Piranha		  ; loc_1DC54
		dc.l	Obj53			; Masher (jumping piranha fish badnik) from GHZ
		dc.l    Obj_0x54_Motobug		  ; loc_1F6E8 
		dc.l    Obj_0x55_Ghz_Boss		 ; loc_2030C
		dc.l    Obj_0x56		          ; loc_205A6
		dc.l    Obj_0x57		          ; loc_1F99C
		dc.l    Obj_0x58		          ; loc_1FC0A
		dc.l    Obj_Null		          ; loc_D24A ; Object $59
		dc.l    Obj_Null		          ; loc_D24A ; Object $5A
		dc.l    Obj_Null		          ; loc_D24A ; Object $5B
		dc.l    Obj_Null		          ; loc_D24A ; Object $5C
		dc.l    Obj_Null		          ; loc_D24A ; Object $5D   
		dc.l    Obj_Null		          ; loc_D24A ; Object $5E
		dc.l    Obj_Null		          ; loc_D24A ; Object $5F
		dc.l    Obj_Null		          ; loc_D24A ; Object $60
		dc.l    Obj_Null		          ; loc_D24A ; Object $61
		dc.l    Obj_Null		          ; loc_D24A ; Object $62
		dc.l    Obj_Null		          ; loc_D24A ; Object $63   
		dc.l    Obj_0x64_Pistons		  ; loc_1A8B4
		dc.l    Obj_0x65_Platform		 ; loc_1AA74 
		dc.l    Obj_0x66_Spring_Wall              ; loc_1AEBC
		dc.l    Obj_0x67_Teleport_Attributes      ; loc_1B0C4
		dc.l    Obj_0x68_Block_Arrow              ; loc_1B520
		dc.l    Obj_0x69_Screw_Nut		; loc_1B810
		dc.l    Obj_0x6A_Rotating_Boxes           ; loc_1BA30
		dc.l    Obj_0x6B_Mz_Platform              ; loc_1BCEC
		dc.l    Obj_0x6C_Mz_Moving_Platforms      ; loc_1BF6C
		dc.l    Obj_0x6D_Harpoon		  ; loc_1B720   
		dc.l    Obj_0x6E_Machine		  ; loc_1C2E4
		dc.l    Obj_Ox6F_Parallelogram_Elevator   ; loc_1C4F8
		dc.l    Obj_0x70_Rotating_Gears           ; loc_1C850
		dc.l    Obj_0x71_Hpz_Misc		 ; loc_9A54 
		dc.l    Obj_0x72_Conveyor_Belt_Attributes ; loc_1CBCC
		dc.l    Obj_0x73_Rotating_Rings           ; loc_1CC54   
		dc.l    Obj_0x74_Invisible_Block          ; loc_1561A
		dc.l    Obj_0x75_Spikeball_Chain          ; loc_1CE48
		dc.l    Obj_0x76_Platform_Spikes          ; loc_1D078
		dc.l    Obj_0x77_Bridge		   ; loc_1D208
		dc.l    Obj_0x78_Rotating_Platforms       ; loc_1D3C0
		dc.l    Obj_0x79_Lamp_Post		; loc_13B54
		dc.l    Obj_0x7A_Platform_Horizontal      ; loc_1D594
		dc.l    Obj_0x7B_Spring_Tubes             ; loc_1D74C
		dc.l    Obj_Null		          ; loc_D24A ; Object $7C
		dc.l    Obj_0x7D_Hidden_Bonus             ; loc_13DFC 
		dc.l    Obj_Null		          ; loc_D24A ; Object $7E
		dc.l    Obj_Null		          ; loc_D24A ; Object $7F
		dc.l    Obj_Null		          ; loc_D24A ; Object $80
		dc.l    Obj_Null		          ; loc_D24A ; Object $81
		dc.l    Obj_Null		          ; loc_D24A ; Object $82
		dc.l    Obj_Null		          ; loc_D24A ; Object $83   
		dc.l    Obj_Null		          ; loc_D24A ; Object $84
		dc.l    Obj_Null		          ; loc_D24A ; Object $85
		dc.l    Obj_Null		          ; loc_D24A ; Object $86
		dc.l    Obj_Null		          ; loc_D24A ; Object $87
		dc.l    Obj_Null		          ; loc_D24A ; Object $88
		dc.l    Obj_Null		          ; loc_D24A ; Object $89
		dc.l	Obj8A			; "SONIC TEAM PRESENTS"/credits (leftover from S1)
		dc.l    Obj_Null		          ; loc_D24A ; Object $8B
		dc.l    Obj_Null		          ; loc_D24A ; Object $8C
; ===========================================================================
; ---------------------------------------------------------------------------
; Used for blank objects, dealocate its array to prevent memory leaks
; ---------------------------------------------------------------------------
; loc_D24A:
Obj_Null:
		bra.w	DeleteObject

;=============================================================================== 
; Sub Routine ObjectFall
; [ Begin ]		         
;===============================================================================		 
ObjectFall: ; loc_D24E:
		move.l  $0008(A0), D2
		move.l  $000C(A0), D3
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A0), D0
		addi.w  #$0038, $0012(A0)
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A0)
		move.l  D3, $000C(A0)
		rts
;=============================================================================== 
; Sub Routine ObjectFall
; [ End ]		         
;===============================================================================  
		
;=============================================================================== 
; Sub Routine SpeedToPos
; [ Begin ]		         
;===============================================================================               
SpeedToPos: ; loc_D27A:
		move.l  $0008(A0), D2
		move.l  $000C(A0), D3
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A0)
		move.l  D3, $000C(A0)
		rts     
;=============================================================================== 
; Sub Routine SpeedToPos
; [ End ]		         
;=============================================================================== 
 
;=============================================================================== 
; Sub Routine MarkObjGone
; [ Begin ]		         
;===============================================================================		           
MarkObjGone: ; loc_D2A0:
		tst.w   (Two_player_mode).w
		beq.s   loc_D2AA
		bra.w     DisplaySprite           ; loc_D3C2
loc_D2AA:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_D2C2
		bra.w     DisplaySprite           ; loc_D3C2
loc_D2C2:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_D2D4
		bclr    #$07, $02(A2, D0)
loc_D2D4:
		bra.w     DeleteObject            ; loc_D3B4
loc_D2D8:		
		tst.w   (Two_player_mode).w
		beq.s   loc_D2E2
		bra.w     DisplaySprite           ; loc_D3C2
loc_D2E2:
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_D2F6
		bra.w     DisplaySprite           ; loc_D3C2
loc_D2F6:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_D308
		bclr    #$07, $02(A2, D0)
loc_D308:
		bra.w     DeleteObject            ; loc_D3B4
loc_D30C:		 
		tst.w   (Two_player_mode).w
		beq.s   loc_D314
		rts
loc_D314:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_D32A
		rts
loc_D32A:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_D33C
		bclr    #$07, $02(A2, D0)
loc_D33C:
		bra.w     DeleteObject            ; loc_D3B4
loc_D340:		
		tst.w   (Two_player_mode).w
		bne.s   loc_D374
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_D35E
		bra.w     DisplaySprite           ; loc_D3C2
loc_D35E:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_D370
		bclr    #$07, $02(A2, D0)
loc_D370:
		bra.w     DeleteObject            ; loc_D3B4
loc_D374:
		move.w  $0008(A0), D0
		andi.w  #$FF00, D0
		move.w  D0, D1
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0300, D0
		bhi.w    loc_D38E
		bra.w     DisplaySprite           ; loc_D3C2
loc_D38E:
		sub.w   (Camera_X_pos_coarse_P2).w, D1
		cmpi.w  #$0300, D1
		bhi.w    loc_D39E
		bra.w     DisplaySprite           ; loc_D3C2
loc_D39E:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_D3B0
		bclr    #$07, $02(A2, D0)
loc_D3B0:
		bra.w     DeleteObject            ; loc_D3B4
;=============================================================================== 
; Sub Routine MarkObjGone
; [ End ]		         
;===============================================================================		 

;=============================================================================== 
; Sub Routine DeleteObject
; [ Begin ]		         
;===============================================================================		 
DeleteObject:  ; loc_D3B4: ; Delete Object / Null Object
		move.l  A0, A1
loc_D3B6:		
		moveq   #$00, D1
		moveq   #$0F, D0  
loc_D3BA:
		move.l  D1, (A1)+
		dbf    D0, loc_D3BA
		rts   
;=============================================================================== 
; Sub Routine DeleteObject
; [ End ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine DisplaySprite
; [ Begin ]		         
;===============================================================================				   
DisplaySprite: ; loc_D3C2: ; Display Object
		lea     (Sprite_Table_Input).w, A1
		move.w  $0018(A0), D0
		lsr.w   #$01, D0
		andi.w  #$0380, D0
		adda.w  D0, A1
		cmpi.w  #$007E, (A1)
		bcc.s   loc_D3DE
		addq.w  #$02, (A1)
		adda.w  (A1), A1
		move.w  A0, (A1)
loc_D3DE:
		rts
;=============================================================================== 
; Sub Routine DisplaySprite
; [ End ]		         
;===============================================================================
 
;=============================================================================== 
; Sub Routine DisplaySprite
; [ Begin ]		         
;===============================================================================		   
DisplayA1Sprite: ; loc_D3E0:
		lea     (Sprite_Table_Input).w, A2
		move.w  $0018(A1), D0
		lsr.w   #$01, D0
		andi.w  #$0380, D0
		adda.w  D0, A2
		cmpi.w  #$007E, (A2)
		bcc.s   loc_D3FC
		addq.w  #$02, (A2)
		adda.w  (A2), A2
		move.w  A1, (A2)
loc_D3FC:
		rts
;=============================================================================== 
; Sub Routine DisplaySprite
; [ End ]		         
;===============================================================================  

;=============================================================================== 
; Sub Routine DisplaySprite_Param
; [ Begin ]		         
;===============================================================================   
DisplaySprite_Param: ;  loc_D3FE:
		lea     (Sprite_Table_Input).w, A1
		adda.w  D0, A1
		cmpi.w  #$007E, (A1)
		bcc.s   loc_D410
		addq.w  #$02, (A1)
		adda.w  (A1), A1
		move.w  A0, (A1)
loc_D410:
		rts   
;=============================================================================== 
; Sub Routine DisplaySprite_Param
; [ End ]		         
;=============================================================================== 
		  
;=============================================================================== 
; Sub Routine AnimateSprite
; [ Begin ]		         
;===============================================================================		   
AnimateSprite: ; loc_D412:
		moveq   #$00, D0
		move.b  $001C(A0), D0
		cmp.b   $001D(A0), D0
		beq.s   loc_D42E
		move.b  D0, $001D(A0)
		move.b  #$00, $001B(A0)
		move.b  #$00, $001E(A0)
loc_D42E:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_D468
		add.w   D0, D0
		adda.w  $00(A1, D0), A1
		move.b  (A1), $001E(A0)
		moveq   #$00, D1
		move.b  $001B(A0), D1
		move.b  $01(A1, D1), D0
		bmi.s   loc_D46A
loc_D44A: 
		andi.b  #$7F, D0
		move.b  D0, $001A(A0)
		move.b  $0022(A0), D1
		andi.b  #$03, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		addq.b  #$01, $001B(A0)
loc_D468:
		rts
loc_D46A:
		addq.b  #$01, D0
		bne.s   loc_D47A
		move.b  #$00, $001B(A0)
		move.b  $0001(A1), D0
		bra.s   loc_D44A
loc_D47A:
		addq.b  #$01, D0 
		bne.s   loc_D48E
		move.b  $02(A1, D1), D0
		sub.b   D0, $001B(A0)
		sub.b   D0, D1
		move.b  $01(A1, D1), D0
		bra.s   loc_D44A
loc_D48E:
		addq.b  #$01, D0
		bne.s   loc_D49A
		move.b  $02(A1, D1), $001C(A0)
		rts
loc_D49A:
		addq.b  #$01, D0
		bne.s   loc_D4AE
		addq.b  #$02, $0024(A0)
		move.b  #$00, $001E(A0)
		addq.b  #$01, $001B(A0)
		rts
loc_D4AE:
		addq.b  #$01, D0
		bne.s   loc_D4BE
		move.b  #$00, $001B(A0)
		clr.b   $0025(A0)
		rts
loc_D4BE:
		addq.b  #$01, D0
		bne.s   loc_D4C8
		addq.b  #$02, $0025(A0)
		rts
loc_D4C8:
		rts
;=============================================================================== 
; Sub Routine AnimateSprite
; [ End ]		         
;===============================================================================   

; ===========================================================================
; Bizarrely, Sonic 1 used a table instead of a direct reference to the
; foreground camera's X position
; dword_D4CA:
BldSpr_ScrPos:	dc.l	0			; NULL
		dc.l	Camera_X_pos_copy	; COPY of camera X position
		dc.l	Camera_BG_X_pos		; BG1 camera X position
		dc.l	Camera_BG3_X_pos	; BG3 camera X position

; ---------------------------------------------------------------------------
; Subroutine to convert mappings (etc) to proper Megadrive sprites
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_D4DA:
BuildSprites:
		tst.w	(Two_player_mode).w
		bne.w	Build_Sprites_2p

		lea	(Sprite_Table).w,a2
		moveq	#0,d5
		moveq	#0,d4
		tst.b	(Level_started_flag).w
		beq.s	loc_D4F4
		bsr.w	BuildRings

loc_D4F4:
		lea	(Sprite_Table_Input).w,a4
		moveq	#7,d7	; 8 priority levels
; loc_D4FA:
BuildSprites_LevelLoop:
		tst.w	(a4)	; does this level have any objects?
		beq.w	BuildSprites_NextLevel	; if not, check the next one
		moveq	#2,d6	; set next object to check for
; loc_D502:
BuildSprites_ObjLoop:
		movea.w	(a4,d6.w),a0	; a0=object

		; These are sanity checks, to detect invalid objects which should not
		; have been queued for display. S3K gets rids of them completely,
		; since they should not be needed and they just slow this code down.
		; After this build and until REV01, it appears that these checks were
		; used for debugging, as they deliberately crash the console if they
		; detect an invalid object, likely done to detect an issue that plagued
		; Sonic 1 where objects would display before initalizing (and even then
		; they STILL didn't fully fix the issue).
		tst.b	(a0)		; is this object slot occupied?
		beq.w	BranchTo_BuildSprites_NextObj	; if not, branch
		tst.l	4(a0)		; does this object have any mappings?
		beq.w	BranchTo_BuildSprites_NextObj	; if not, branch

		andi.b	#$7F,1(a0)	; clear on-screen flag
		move.b	1(a0),d0
		move.b	d0,d4
		btst	#6,d0		; is the multi-draw flag set?
		bne.w	BuildSprites_MultiDraw	; if yes, branch
		andi.w	#$C,d0		; is it to be positioned by the screen coordinates?
		beq.s	BuildSprites_ScreenSpaceObj	; if yes, branch
		movea.l	BldSpr_ScrPos(pc,d0.w),a1
		moveq	#0,d0
		move.b	$19(a0),d0
		move.w	8(a0),d3
		sub.w	(a1),d3
		move.w	d3,d1
		add.w	d0,d1		; is the object right edge to the left of the screen?
		bmi.w	BuildSprites_NextObj	; if yes, branch
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#320,d1		; is the object left edge to the right of the screen?
		bge.w	BuildSprites_NextObj	; if yes, branch
		addi.w	#128,d3
		btst	#4,d4		; is the accurate Y check flag set?
		beq.s	BuildSprites_ApproxYCheck	; if not, branch
		moveq	#0,d0
		move.b	$16(a0),d0
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		move.w	d2,d1
		add.w	d0,d1		; is the object above the screen?
		bmi.s	BuildSprites_NextObj	; if yes, branch
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#224,d1		; is the object below the screen?
		bge.s	BuildSprites_NextObj	; if yes, branch
		addi.w	#128,d2
		bra.s	BuildSprites_DrawSprite
; ===========================================================================
; loc_D580:
BuildSprites_ScreenSpaceObj:
		move.w	$A(a0),d2
		move.w	8(a0),d3
		bra.s	BuildSprites_DrawSprite
; ===========================================================================
; loc_D58A:
BuildSprites_ApproxYCheck:
		move.w	$C(a0),d2
		sub.w	4(a1),d2
		addi.w	#128,d2
		cmpi.w	#-32+128,d2
		bcs.s	BuildSprites_NextObj
		cmpi.w	#32+128+224,d2
		bcc.s	BuildSprites_NextObj
; loc_D5A2:
BuildSprites_DrawSprite:
		movea.l	4(a0),a1
		moveq	#0,d1
		btst	#5,d4		; is the static mappings flag set?
		bne.s	loc_D5BE	; if yes, branch
		move.b	$1A(a0),d1
		add.w	d1,d1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_D5C2

loc_D5BE:
		bsr.w	DrawSprite

loc_D5C2:
		ori.b	#$80,1(a0)	; set on-screen flag
; loc_D5C8:
BuildSprites_NextObj:
		addq.w	#2,d6		; load next object
		subq.w	#2,(a4)		; decrement object count
		bne.w	BuildSprites_ObjLoop	; if there are any objects left, branch
; loc_D5D0:
BuildSprites_NextLevel:
		lea	$80(a4),a4	; load next priority level
		dbf	d7,BuildSprites_LevelLoop	; loop
		move.b	d5,(Sprite_count).w
		; Terminate the sprite list.
		; If the sprite list is full, then set the link field of the last
		; entry to 0. Otherwise, push the next sprite offscreen and set its
		; link field to 0. You might be thinking why this doesn't just do the
		; first one no matter what. Well, think about what if the sprite list
		; was empty: then it would access data before the start of the list.
		cmpi.b	#80,d5	; was the sprite limit reached?
		beq.s	loc_D5EA	; if yes, branch
		move.l	#0,(a2)	; set link field to 0
		rts

loc_D5EA:
		move.b	#0,-5(a2)
		rts
; ===========================================================================
; loc_D5F2:
BranchTo_BuildSprites_NextObj:
		; Later builds and REV00 added a line here that would make the game
		; read at address $00000001, crashing it; read above for more info.
		bra.s	BuildSprites_NextObj
; ===========================================================================
; loc_D5F4:
BuildSprites_MultiDraw:
		move.l	a4,-(sp)
		lea	(Camera_X_pos).w,a4
		movea.w	2(a0),a3
		movea.l	4(a0),a5
		moveq	#0,d0

		; check if object is within X bounds
		move.b	$E(a0),d0	; load pixel width
		move.w	8(a0),d3
		sub.w	(a4),d3
		move.w	d3,d1
		add.w	d0,d1
		bmi.w	BuildSprites_MultiDraw_NextObj
		move.w	d3,d1
		sub.w	d0,d1
		cmpi.w	#320,d1
		bge.w	BuildSprites_MultiDraw_NextObj
		addi.w	#128,d3

		; check if object is within Y bounds
		btst	#4,d4
		beq.s	loc_D652
		moveq	#0,d0
		move.b	$14(a0),d0	; load pixel height
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		move.w	d2,d1
		add.w	d0,d1
		bmi.w	BuildSprites_MultiDraw_NextObj
		move.w	d2,d1
		sub.w	d0,d1
		cmpi.w	#224,d1
		bge.s	BuildSprites_MultiDraw_NextObj
		addi.w	#128,d2
		bra.s	loc_D66A

loc_D652:
		move.w	$C(a0),d2
		sub.w	4(a4),d2
		addi.w	#128,d2
		cmpi.w	#-32+128,d2
		bcs.s	BuildSprites_MultiDraw_NextObj
		cmpi.w	#32+128+224,d2
		bcc.s	BuildSprites_MultiDraw_NextObj

loc_D66A:
		moveq	#0,d1
		move.b	$B(a0),d1	; get current frame
		beq.s	loc_D684
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_D684
		bsr.w	ChkDrawSprite	; draw the sprite

loc_D684:
		ori.b	#$80,1(a0)	; set on-screen flag
		lea	$10(a0),a6
		moveq	#0,d0
		move.b	$F(a0),d0	; get child sprite count
		subq.w	#1,d0
		bcs.s	BuildSprites_MultiDraw_NextObj	; if there are 0, go to next object

loc_D698:
		swap	d0
		move.w	(a6)+,d3	; get X pos
		sub.w	(a4),d3
		addi.w	#128,d3
		move.w	(a6)+,d2	; get Y pos
		sub.w	4(a4),d2
		addi.w	#128,d2
		addq.w	#1,a6
		moveq	#0,d1
		move.b	(a6)+,d1	; get mapping frame
		add.w	d1,d1
		movea.l	a5,a1
		adda.w	(a1,d1.w),a1
		move.w	(a1)+,d1
		subq.w	#1,d1
		bmi.s	loc_D6C4
		bsr.w	ChkDrawSprite

loc_D6C4:
		swap	d0
		dbf	d0,loc_D698	; repeat for number of child sprites
; loc_D6CA:
BuildSprites_MultiDraw_NextObj:
		movea.l	(sp)+,a4
		bra.w	BuildSprites_NextObj
; End of function BuildSprites


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Fun fact: due to the RAM being differently arranged in this prototype,
; Ashura can only be 'activated' underwater in HPZ by placing waterfalls
; sub_D6D0:
ChkDrawSprite:
		cmpi.b	#80,d5		; has the sprite limit been reached?
		bcs.s	DrawSprite_Loop	; if not, branch
		rts
; End of function ChkDrawSprite


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_D6D8:
DrawSprite:
		movea.w	2(a0),a3
		cmpi.b	#80,d5
		bcc.s	return_D718
		btst	#0,d4
		bne.s	DrawSprite_FlipX
		btst	#1,d4
		bne.w	loc_D77A
; loc_D6F0:
DrawSprite_Loop:
		move.b	(a1)+,d0
		ext.w	d0
		add.w	d2,d0
		move.w	d0,(a2)+	; set Y pos
		move.b	(a1)+,(a2)+	; set sprite size
		addq.b	#1,d5
		move.b	d5,(a2)+	; set link field
		move.w	(a1)+,d0
		add.w	a3,d0
		move.w	d0,(a2)+	; set art tile and flags
		addq.w	#2,a1		; reserve this part of the mappings for two-player
		move.w	(a1)+,d0
		add.w	d3,d0
		andi.w	#$1FF,d0
		bne.s	loc_D712
		addq.w	#1,d0		; avoid activating sprite masking

loc_D712:
		move.w	d0,(a2)+
		dbf	d1,DrawSprite_Loop

return_D718:
		rts
; ===========================================================================
; loc_D71A:
DrawSprite_FlipX:
		btst	#1,d4
		bne.w	loc_D7C2

loc_D722:
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  D4, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$0800, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		neg.w   D0
		move.b  loc_D75A(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_D752
		addq.w  #$01, D0
loc_D752:
		move.w  D0, (A2)+
		dbf    D1, loc_D722
		rts
loc_D75A:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
loc_D76A:		
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
loc_D77A:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  loc_D76A(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0		
		move.w  D0, (A2)+
		move.b  (A1)+, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1000, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_D7AA
		addq.w  #$01, D0
loc_D7AA:
		move.w  D0, (A2)+  
		dbf    D1, loc_D77A				    
		rts 
loc_D7B2:		
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
loc_D7C2:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  loc_D7B2(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  D4, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1800, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		neg.w   D0
		move.b  loc_D804(PC, D4), D4
		sub.w   D4, D0    
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_D7FC
		addq.w  #$01, D0
loc_D7FC:
		move.w  D0, (A2)+
		dbf    D1, loc_D7C2
		rts
loc_D804:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
;=============================================================================== 
; Sub Routine Build_Sprites_2p
; [ Begin ]		         
;===============================================================================  
BldSpr_ScrPos_2p: ; loc_D814:		
		dc.l    $00000000, Camera_X_pos, Camera_BG_X_pos, Camera_BG3_X_pos
Build_Sprites_2p: ; loc_D824:
		tst.w   (Hint_flag).w
		bne.s   Build_Sprites_2p        ; loc_D824
		lea     (Sprite_Table).w, A2
		moveq   #$02, D5
		moveq   #$00, D4
		move.l  #$01D80F01, (A2)+
		move.l  #$00000001, (A2)+
		move.l  #$01D80F02, (A2)+
		move.l  #$00000000, (A2)+
		tst.b   (Level_started_flag).w
		beq.s   loc_D854
		bsr.w     loc_E098
loc_D854:
		lea     (Sprite_Table_Input).w, A4
		moveq   #$07, D7
loc_D85A:		
		move.w  (A4), D0
		beq.w    loc_D932
		move.w  D0, -(A7)
		moveq   #$02, D6
loc_D864:		
		move.w  $00(A4, D6), A0
		tst.b   (A0)
		beq.w    loc_D928
		andi.b  #$7F, $0001(A0)
		move.b  $0001(A0), D0
		move.b  D0, D4
		btst    #$06, D0
		bne.w    loc_DA6C
		andi.w  #$000C, D0
		beq.s   loc_D8D8
		move.l  BldSpr_ScrPos_2p(PC, D0), A1  ; loc_D814
		moveq   #$00, D0
		move.b  $0019(A0), D0
		move.w  $0008(A0), D3
		sub.w   (A1), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi.w    loc_D928
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.s   loc_D928
		addi.w  #$0080, D3
		btst    #$04, D4  
		beq.s   loc_D8E6
		moveq   #$00, D0
		move.b  $0016(A0), D0
		move.w  $000C(A0), D2
		sub.w   $0004(A1), D2
		move.w  D2, D1
		add.w   D0, D1
		bmi.s   loc_D928
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.s   loc_D928
		addi.w  #$0100, D2
		bra.s   loc_D902
loc_D8D8:		
		move.w  $000A(A0), D2
		move.w  $0008(A0), D3
		addi.w  #$0080, D2
		bra.s   loc_D902
loc_D8E6:		
		move.w  $000C(A0), D2
		sub.w   $0004(A1), D2
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   loc_D928
		cmpi.w  #$0180, D2
		bcc.s   loc_D928
		addi.w  #$0080, D2
loc_D902:
		move.l  $0004(A0), A1
		moveq   #$00, D1
		btst    #$05, D4
		bne.s   loc_D91E
		move.b  $001A(A0), D1
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #1, D1
		bmi.s   loc_D922
loc_D91E:
		bsr.w     loc_DC70
loc_D922:
		ori.b   #$80, $0001(A0)
loc_D928:		
		addq.w  #$02, D6
		subq.w  #$02, (A7)
		bne.w    loc_D864
		addq.w  #$02, A7
loc_D932:		
		lea     $0080(A4), A4
		dbf    D7, loc_D85A
		move.b  D5, (Sprite_count).w
		cmpi.b  #$50, D5
		bcc.s   loc_D94C
		move.l  #$00000000, (A2)
		bra.s   loc_D964
loc_D94C:
		move.b  #$00, -5(A2)
		bra.s   loc_D964
loc_D954:
		dc.b    $00, $00, $00, $00, $FF, $FF, $EE, $20, $FF, $FF, $EE, $28, $FF, $FF, $EE, $38		           
loc_D964:
		lea     (Sprite_Table_2).w, A2
		moveq   #$00, D5
		moveq   #$00, D4
		tst.b   (Level_started_flag).w
		beq.s   loc_D976
		bsr.w     loc_E0AE
loc_D976:
		lea     (Sprite_Table_Input).w, A4
		moveq   #$07, D7
loc_D97C:		
		tst.w   (A4)
		beq.w    loc_DA4A
		moveq   #$02, D6
loc_D984:		
		move.w  $00(A4, D6), A0
		tst.b   (A0)
		beq.w    loc_DA42
		move.b  $0001(A0), D0
		move.b  D0, D4
		btst    #$06, D0
		bne.w    loc_DB4E
		andi.w  #$000C, D0
		beq.s   loc_D9F2
		move.l  loc_D954(PC, D0), A1
		moveq   #$00, D0
		move.b  $0019(A0), D0
		move.w  $0008(A0), D3
		sub.w   (A1), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi.w    loc_DA42
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.s   loc_DA42
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   loc_DA00
		moveq   #$00, D0
		move.b  $0016(A0), D0
		move.w  $000C(A0), D2
		sub.w   $0004(A1), D2
		move.w  D2, D1 
		add.w   D0, D1
		bmi.s   loc_DA42
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.s   loc_DA42
		addi.w  #$01E0, D2
		bra.s   loc_DA1C
loc_D9F2:
		move.w  $000A(A0), D2
		move.w  $0008(A0), D3
		addi.w  #$0160, D2
		bra.s   loc_DA1C
loc_DA00:
		move.w  $000C(A0), D2
		sub.w   $0004(A1), D2
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   loc_DA42
		cmpi.w  #$0180, D2
		bcc.s   loc_DA42
		addi.w  #$0160, D2
loc_DA1C:
		move.l  $0004(A0), A1
		moveq   #$00, D1
		btst    #$05, D4
		bne.s   loc_DA38
		move.b  $001A(A0), D1
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   loc_DA3C
loc_DA38:
		bsr.w     loc_DC70
loc_DA3C:
		ori.b   #$80, $0001(A0)
loc_DA42:		
		addq.w  #$02, D6
		subq.w  #$02, (A4)
		bne.w    loc_D984
loc_DA4A:		
		lea     $0080(A4), A4
		dbf    D7, loc_D97C		 
		move.b  D5, (Sprite_count).w
		cmpi.b  #$50, D5
		beq.s   loc_DA64
		move.l  #$00000000, (A2)
		rts
loc_DA64:
		move.b  #$00, -5(A2)
		rts
loc_DA6C:
		move.l  A4, -(A7)
		lea     (Camera_X_pos).w, A4
		move.w  $0002(A0), A3
		move.l  $0004(A0), A5
		moveq   #$00, D0
		move.b  $000E(A0), D0
		move.w  $0008(A0), D3
		sub.w   (A4), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi.w    loc_DB48
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.w    loc_DB48
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   loc_DACC
		moveq   #$00, D0
		move.b  $0014(A0), D0
		move.w  $000C(A0), D2
		sub.w   $0004(A4), D2
		move.w  D2, D1
		add.w   D0, D1
		bmi.w    loc_DB48
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.w    loc_DB48
		addi.w  #$0100, D2
		bra.s   loc_DAE8
loc_DACC:
		move.w  $000C(A0), D2
		sub.w   $0004(A4), D2
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   loc_DB48
		cmpi.w  #$0180, D2
		bcc.s   loc_DB48
		addi.w  #$0080, D2
loc_DAE8:		
		moveq   #$00, D1
		move.b  $000B(A0), D1
		beq.s   loc_DB02
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   loc_DB02
		bsr.w     loc_DC68
loc_DB02:
		ori.b   #$80, $0001(A0)
		lea     $0010(A0), A6
		moveq   #$00, D0
		move.b  $000F(A0), D0
		subq.w  #$01, D0
		bcs.s   loc_DB48
loc_DB16:		
		swap  D0
		move.w  (A6)+, D3
		sub.w   (A4), D3
		addi.w  #$0080, D3
		move.w  (A6)+, D2
		sub.w   $0004(A4), D2
		addi.w  #$0100, D2
		addq.w  #$01, A6
		moveq   #$00, D1
		move.b  (A6)+, D1
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   loc_DB42
		bsr.w     loc_DC68
loc_DB42:
		swap  D0
		dbf    D0, loc_DB16
loc_DB48:
		move.l  (A7)+, A4
loc_DB4A:		
		bra.w     loc_D928		     
loc_DB4E:
		move.l  A4, -(A7)
		lea     (Camera_X_pos_P2).w, A4
		move.w  $0002(A0), A3
		move.l  $0004(A0), A5
		moveq   #$00, D0
		move.b  $000E(A0), D0
		move.w  $0008(A0), D3
		sub.w   (A4), D3
		move.w  D3, D1
		add.w   D0, D1
		bmi.w    loc_DC2A
		move.w  D3, D1
		sub.w   D0, D1
		cmpi.w  #$0140, D1
		bge.w    loc_DC2A
		addi.w  #$0080, D3
		btst    #$04, D4
		beq.s   loc_DBAE
		moveq   #$00, D0
		move.b  $0014(A0), D0
		move.w  $000C(A0), D2
		sub.w   $0004(A4), D2
		move.w  D2, D1
		add.w   D0, D1
		bmi.w    loc_DC2A
		move.w  D2, D1
		sub.w   D0, D1
		cmpi.w  #$00E0, D1
		bge.w    loc_DC2A
		addi.w  #$01E0, D2
		bra.s   loc_DBCA
loc_DBAE:		
		move.w  $000C(A0), D2
		sub.w   $0004(A4), D2
		addi.w  #$0080, D2
		cmpi.w  #$0060, D2
		bcs.s   loc_DC2A
		cmpi.w  #$0180, D2
		bcc.s   loc_DC2A
		addi.w  #$0160, D2
loc_DBCA:
		moveq   #$00, D1
		move.b  $000B(A0), D1
		beq.s   loc_DBE4
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #1, D1
		bmi.s   loc_DBE4
		bsr.w     loc_DC68
loc_DBE4: 
		ori.b   #$80, $0001(A0)
		lea     $0010(A0), A6
		moveq   #$00, D0
		move.b  $000F(A0), D0
		subq.w  #$01, D0
		bcs.s   loc_DC2A
loc_DBF8:		
		swap  D0
		move.w  (A6)+, D3
		sub.w   (A4), D3
		addi.w  #$0080, D3
		move.w  (A6)+, D2
		sub.w   $0004(A4), D2
		addi.w  #$01E0, D2
		addq.w  #$01, A6
		moveq   #$00, D1
		move.b  (A6)+, D1
		add.w   D1, D1
		move.l  A5, A1
		adda.w  $00(A1, D1), A1
		move.w  (A1)+, D1
		subq.w  #$01, D1
		bmi.s   loc_DC24
		bsr.w     loc_DC68
loc_DC24:
		swap  D0
		dbf    D0, loc_DBF8    
loc_DC2A:
		move.l  (A7)+, A4
		bra.w     loc_DA42
;=============================================================================== 
; Sub Routine Build_Sprites_2p
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ Begin ]		               2P Mode Objects Attributes #1
;===============================================================================        
; ModifySpriteAttr_2P:          
Adjust2PArtPointer: ; loc_DC30: 
		tst.w   (Two_player_mode).w
		beq.s   loc_DC4A
		move.w  $0002(A0), D0
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		andi.w  #$F800, $0002(A0)
		add.w   D0, $0002(A0)
loc_DC4A:
		rts  
;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ End ]				 2P Mode Objects Attributes #1
;===============================================================================		 

;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ Begin ]		               2P Mode Objects Attributes #2
;===============================================================================		  
; ModifyA1SpriteAttr_2P:
Adjust2PArtPointer2: ; loc_DC4C: 
		tst.w   (Two_player_mode).w
		beq.s   ModifySpriteAttr_Not2pmode ; loc_DC66
		move.w  $0002(A1), D0
		andi.w  #$07FF, D0
		lsr.w   #$01, D0
		andi.w  #$F800, $0002(A1)
		add.w   D0, $0002(A1)
ModifySpriteAttr_Not2pmode ; loc_DC66:
		rts 
;=============================================================================== 
; Sub Routine Adjust2PArtPointer         
; [ End ]		               2P Mode Objects Attributes #2
;===============================================================================
						  
loc_DC68:
		cmpi.b  #$50, D5
		bcs.s   loc_DC88
		rts
loc_DC70:
		move.w  $0002(A0), A3
		cmpi.b  #$50, D5
		bcc.s   loc_DCB4
		btst    #$00, D4
		bne.s   loc_DCC6
		btst    #$01, D4
		bne.w    loc_DD28
loc_DC88:		
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4    
		move.b  loc_DCB6(PC, D4), (A2)+             
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_DCAE
		addq.w  #$01, D0
loc_DCAE:
		move.w  D0, (A2)+
		dbf    D1, loc_DC88
loc_DCB4:		
		rts		
loc_DCB6:               
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D
loc_DCC6:
		btst    #$01, D4
		bne.w    loc_DD84
loc_DCCE:		
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  loc_DCB6(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$0800, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		neg.w   D0
		move.b  loc_DD08(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_DD00
		addq.w  #1, D0
loc_DD00:
		move.w  D0, (A2)+
		dbf    D1, loc_DCCE
		rts      
loc_DD08:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20  
loc_DD18: 
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
loc_DD28:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  loc_DD18(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  loc_DD64(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1000, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_DD5C
		addq.w  #$01, D0   
loc_DD5C:
		move.w  D0, (A2)+
		dbf    D1, loc_DD28
		rts           
loc_DD64:
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D 
loc_DD74:  
		dc.b    $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20, $08, $10, $18, $20
loc_DD84:
		move.b  (A1)+, D0
		move.b  (A1), D4
		ext.w   D0
		neg.w   D0
		move.b  loc_DD74(PC, D4), D4
		sub.w   D4, D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  loc_DD64(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   A3, D0
		eori.w  #$1800, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		neg.w   D0
		move.b  loc_DDC8(PC, D4), D4
		sub.w   D4, D0
		add.w   D3, D0
		andi.w  #$01FF, D0
		bne.s   loc_DDC0
		addq.w  #$01, D0
loc_DDC0:
		move.w  D0, (A2)+
		dbf    D1, loc_DD84
		rts               
loc_DDC8:
		dc.b    $08, $08, $08, $08, $10, $10, $10, $10, $18, $18, $18, $18, $20, $20, $20, $20
loc_DDD8:
		move.w  $0008(A0), D0
		sub.w   (Camera_X_pos).w, D0
		bmi.s   loc_DDFC
		cmpi.w  #$0140, D0
		bge.s   loc_DDFC
		move.w  $000C(A0), D1
		sub.w   (Camera_Y_pos).w, D1
		bmi.s   loc_DDFC
		cmpi.w  #$00E0, D1
		bge.s   loc_DDFC
		moveq   #$00, D0
		rts
loc_DDFC:
		moveq   #$01, D0
		rts   
;loc_DE00:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  $0008(A0), D0
		sub.w   (Camera_X_pos).w, D0
		add.w   D1, D0
		bmi.s   loc_DE30
		add.w   D1, D1
		sub.w   D1, D0
		cmpi.w  #$0140, D0
		bge.s   loc_DE30
		move.w  $000C(A0), D1
		sub.w   (Camera_Y_pos).w, D1
		bmi.s   loc_DE30
		cmpi.w  #$00E0, D1
		bge.s   loc_DE30
		moveq   #$00, D0
		rts
loc_DE30:
		moveq   #$01, D0
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Pseudo-object that manages where rings are placed onscreen
; as you move through the level, and otherwise updates them.
; ---------------------------------------------------------------------------

; sub_DE34: Load_Ring_Pos:
RingsManager:
		moveq	#0,d0
		move.b	(Rings_manager_routine).w,d0
		move.w	RingsManager_States(pc,d0.w),d0
		jmp	RingsManager_States(pc,d0.w)
; ===========================================================================
; off_DE42:
RingsManager_States:	offsetTable
		offsetTableEntry.w RingsManager_Init
		offsetTableEntry.w RingsManager_Main
; ===========================================================================
; loc_DE46:
RingsManager_Init:
		addq.b	#2,(Rings_manager_routine).w
		bsr.w	loc_E140	; perform initial setup
		lea	(Ring_Positions).w,a1
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4		; no negative values allowed
		bra.s	+

-		lea	6(a1),a1	; load next ring
+
		cmp.w	2(a1),d4	; is the X pos of the ring < camera X pos?
		bhi.s	-		; if it is, check next ring
		move.w	a1,(Ring_start_addr).w	; set start addresses
		move.w	a1,(Ring_start_addr_P2).w
		addi.w	#320+16,d4	; advance by a screen (and a bit more)
		bra.s	+
		
-		lea	6(a1),a1	; load next ring
+
		cmp.w	2(a1),d4	; is the X pos of the ring < camera X + 336?
		bhi.s	-		; if it is, check next ring
		move.w	a1,(Ring_end_addr).w	; set end addresses
		move.w	a1,(Ring_end_addr_P2).w
		move.b	#1,(Level_started_flag).w
		rts
; ===========================================================================
; loc_DE90:
RingsManager_Main:
		lea	(Ring_consumption_table).w,a2
		move.w	(a2)+,d1
		subq.w	#1,d1	; are any rings currently being consumed?
		bcs.s	++	; if not, branch
	
-		move.w	(a2)+,d0	; is there a ring in this slot?
		beq.s	-		; if not, branch
		move.w	d0,a1		; load ring address
		subq.b	#1,(a1)		; decrement timer
		bne.s	+		; if it's not 0 yet, branch
		move.b	#6,(a1)		; reset timer
		addq.b	#1,1(a1)	; increment frame
		cmpi.b	#8,1(a1)	; is it destruction time yet?
		bne.s	+		; if not, branch
		move.w	#-1,(a1)	; destroy ring
		move.w	#0,-2(a2)	; clear ring entry
		subq.w	#1,(Ring_consumption_table).w	; subtract count
+		dbf	d1,-		; repeat for ALL rings in the table
+
		; update ring start and end addresses
		move.w	(Ring_start_addr).w,a1
		move.w	(Camera_X_pos).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a1),a1
+
		cmp.w	2(a1),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a1
+
		cmp.w	-4(a1),d4
		bls.s	-
		move.w	a1,(Ring_start_addr).w	; update start address
		move.w	(Ring_end_addr).w,a2
		addi.w	#320+16,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a2),a2
+
		cmp.w	2(a2),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a2
+
		cmp.w	-4(a2),d4
		bls.s	-
		move.w	a2,(Ring_end_addr).w	; update end address
		tst.w	(Two_player_mode).w	; are we in 2P mode?
		bne.s	+			; if we are, update P2 addresses
		move.w	a1,(Ring_start_addr_P2).w	; otherwise, copy over 1P addresses
		move.w	a2,(Ring_end_addr_P2).w
		rts
; ---------------------------------------------------------------------------
+
		; update ring start and end addresses for P2
		move.w	(Ring_start_addr_P2).w,a1
		move.w	(Camera_X_pos_P2).w,d4
		subq.w	#8,d4
		bhi.s	+
		moveq	#1,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a1),a1
+
		cmp.w	2(a1),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w  #6,a1
+
		cmp.w	-4(a1),d4
		bls.s	-
		move.w	a1,(Ring_start_addr_P2).w	; update start address
		move.w	(Ring_end_addr_P2).w,a2
		addi.w	#320+16,d4
		bra.s	+
; ---------------------------------------------------------------------------
-		lea	6(a2),a2
+
		cmp.w	2(a2),d4
		bhi.s	-
		bra.s	+
; ---------------------------------------------------------------------------
-		subq.w	#6,a2
+
		cmp.w	-4(a2),d4
		bls.s	-
		move.w	a2,(Ring_end_addr_P2).w		; update end address
		rts
; End of function RingsManager

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to handle ring collision
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_DF6C:
TouchRings:
		move.w  (Ring_start_addr).w, A1
		move.w  (Ring_end_addr).w, A2
		cmpa.w  #$B000, A0
		beq.s   loc_DF82
		move.w  (Ring_start_addr_P2).w, A1
		move.w  (Ring_end_addr_P2).w, A2
loc_DF82:
		cmpa.l  A1, A2
		beq.w    loc_E01A
		cmpi.w  #$005A, $0030(A0)
		bcc.w    loc_E01A
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		subi.w  #$0008, D2
		moveq   #$00, D5
		move.b  $0016(A0), D5
		subq.b  #$03, D5
		sub.w   D5, D3
		cmpi.b  #$39, $001A(A0)
		bne.s   loc_DFB6
		addi.w  #$000C, D3
		moveq   #$0A, D5
loc_DFB6:
		move.w  #$0006, D1
		move.w  #$000C, D6
		move.w  #$0010, D4
		add.w   D5, D5
loc_DFC4:		
		tst.w   (A1)
		bne.w    loc_E010
		move.w  $0002(A1), D0
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   loc_DFDC
		add.w   D6, D0
		bcs.s   loc_DFE2
		bra.w     loc_E010
loc_DFDC:
		cmp.w   D4, D0
		bhi.w    loc_E010
loc_DFE2:		
		move.w  $0004(A1), D0
		sub.w   D1, D0
		sub.w   D3, D0
		bcc.s   loc_DFF4
		add.w   D6, D0
		bcs.s   loc_DFFA
		bra.w     loc_E010
loc_DFF4:
		cmp.w   D5, D0
		bhi.w    loc_E010
loc_DFFA:
		move.w  #$0604, (A1)
		bsr.w     CollectRing
		lea     (Ring_consumption_table+2).w, A3
loc_E006:
		tst.w   (A3)+
		bne.s   loc_E006
		move.w  A1, -(A3)
		addq.w  #$01, (Ring_consumption_table).w
loc_E010:
		lea     $0006(A1), A1
		cmpa.l  A1, A2
		bne.w    loc_DFC4
loc_E01A:
		rts				  

; ---------------------------------------------------------------------------
; Subroutine to draw on-screen rings
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_E01C:
BuildRings:
		move.w	(Ring_start_addr).w,a0
		move.w	(Ring_end_addr).w,a4
		cmpa.l	a0,a4	; are there any rings on-screen?
		bne.s	+	; if yes, branch
		rts
+
		lea	(Camera_X_pos).w,a3

loc_E02E:		
		tst.w   (A0)
		bmi.w    loc_E08C
		move.w  $0002(A0), D3
		sub.w   (A3), D3
		addi.w  #$0080, D3
		move.w  $0004(A0), D2
		sub.w   $0004(A3), D2
		addi.w  #$0008, D2
		bmi.s   loc_E08C
		cmpi.w  #$00F0, D2
		bge.s   loc_E08C
		addi.w  #$0078, D2
		lea     (MapUnc_Rings).l, A1
		moveq   #$00, D1
		move.b  $0001(A0), D1
		bne.s   loc_E068
		move.b  (Rings_anim_frame).w, D1
loc_E068:
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		move.w  (A1)+, D0
		addi.w  #$26BC, D0
		move.w  D0, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		add.w   D3, D0
		move.w  D0, (A2)+
loc_E08C:
		lea     $0006(A0), A0
		cmpa.l  A0, A4
		bne.w    loc_E02E  
		rts
loc_E098:
		lea     (Camera_X_pos).w, A3
		move.w  #$0078, D6
		move.w  (Ring_start_addr).w, A0
		move.w  (Ring_end_addr).w, A4
		cmpa.l  A0, A4
		bne.s   loc_E0C4
		rts
loc_E0AE:
		lea     (Camera_X_pos_P2).w, A3
		move.w  #$0158, D6
		move.w  (Ring_start_addr_P2).w, A0
		move.w  (Ring_end_addr_P2).w, A4
		cmpa.l  A0, A4		
		bne.s   loc_E0C4
		rts
loc_E0C4:
		tst.w   (A0)
		bmi.w    loc_E124
		move.w  $0002(A0), D3
		sub.w   (A3), D3
		addi.w  #$0080, D3
		move.w  $0004(A0), D2
		sub.w   $0004(A3), D2
		addi.w  #$0088, D2
		bmi.s   loc_E124
		cmpi.w  #$0170, D2
		bge.s   loc_E124
		add.w   D6, D2
		lea     (MapUnc_Rings).l, A1
		moveq   #$00, D1
		move.b  $0001(A0), D1
		bne.s   loc_E0FC
		move.b  (Rings_anim_frame).w, D1
loc_E0FC:
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.b  (A1)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, (A2)+
		move.b  (A1)+, D4
		move.b  loc_E130(PC, D4), (A2)+
		addq.b  #$01, D5
		move.b  D5, (A2)+
		addq.w  #$02, A1
		move.w  (A1)+, D0
		addi.w  #$235E, D0
		move.w  D0, (A2)+
		move.w  (A1)+, D0
		add.w   D3, D0
		move.w  D0, (A2)+
loc_E124:		
		lea     $0006(A0), A0
		cmpa.l  A0, A4
		bne.w    loc_E0C4
		rts     
loc_E130:
		dc.b    $00, $00, $01, $01, $04, $04, $05, $05, $08, $08, $09, $09, $0C, $0C, $0D, $0D  
loc_E140: ; Load Rings routine
		clearRAM Ring_Positions,Ring_Positions_End
		lea     (Ring_consumption_table).w, A1
		; Coding error, that '-$40' shouldn't be there: only half of 'Ring_consumption_table' is cleared.
		move.w	#bytesToLcnt(Ring_consumption_table_End-Ring_consumption_table-$40),d1
loc_E158:
		move.l  D0, (A1)+
		dbf    D1, loc_E158
		moveq   #$00, D5
		moveq   #$00, D0
		move.w  (Current_ZoneAndAct).w, D0
		ror.b   #$01, D0
		lsr.w   #$06, D0
		lea     (Rings_Layout).l, A1      ; loc_48000
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		lea     (Ring_Positions+6).w, A2
loc_E17C:		
		move.w  (A1)+, D2
		bmi.s   loc_E1C4
		move.w  (A1)+, D3
		bmi.s   loc_E1A4
		move.w  D3, D0
		rol.w   #$04, D0
		andi.w  #$0007, D0
		andi.w  #$0FFF, D3
loc_E190:		
		move.w  #$0000, (A2)+
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addi.w  #$0018, D2
		addq.w  #$01, D5
		dbf    D0, loc_E190
		bra.s   loc_E17C
loc_E1A4:
		move.w  D3, D0
		rol.w   #$04, D0
		andi.w  #$0007, D0
		andi.w  #$0FFF, D3
loc_E1B0:		
		move.w  #$0000, (A2)+
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addi.w  #$0018, D3
		addq.w  #$01, D5
		dbf    D0, loc_E1B0
		bra.s   loc_E17C
loc_E1C4:
		move.w  D5, (Perfect_rings_left).w
		moveq   #-1, D0
		move.l  D0, (A2)+
		lea     (Ring_Positions+2).w, A1
		move.w  #$00FE, D3
loc_E1D4:
		move.w  D3, D4
		lea     $0006(A1), A2
		move.w  (A1), D0
loc_E1DC:
		tst.w   (A2)
		beq.s   loc_E1EE
		cmp.w   (A2), D0
		bls.s   loc_E1EE
		move.l  (A1), D1
		move.l  (A2), D0
		move.l  D0, (A1)
		move.l  D1, (A2)
		swap  D0
loc_E1EE:
		lea     $0006(A2), A2
		dbf    D4, loc_E1DC
		lea     $0006(A1), A1
		dbf    D3, loc_E1D4
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
; Custom mappings format, in which the 'sprite pieces per frame' value
; is hardcoded to 1 (likely to save on CPU). Compare to Obj25_MapUnc_B036.

; This was customised even further in Sonic 3 & Knuckles, which lacks
; any offset table (with each sprite assumed to be 8 bytes), as well
; as sign-extended Y-pos and sprite size values
; off_E200:
MapUnc_Rings:	offsetTable
		offsetTableEntry.w loc_E210
		offsetTableEntry.w loc_E218
		offsetTableEntry.w loc_E220
		offsetTableEntry.w loc_E228
		offsetTableEntry.w loc_E230
		offsetTableEntry.w loc_E238
		offsetTableEntry.w loc_E240
		offsetTableEntry.w loc_E248

loc_E210:
		dc.l    $F8050000, $0000FFF8
loc_E218:
		dc.l    $F8050004, $0002FFF8
loc_E220:
		dc.l    $F8010008, $0004FFFC
loc_E228:
		dc.l    $F8050804, $0802FFF8
loc_E230:
		dc.l    $F805000A, $0005FFF8
loc_E238:
		dc.l    $F805180A, $1805FFF8
loc_E240:
		dc.l    $F805080A, $0805FFF8
loc_E248: 
		dc.l    $F805100A, $1005FFF8


; ===========================================================================
; ---------------------------------------------------------------------------
; Objects Manager
; Subroutine that keeps track of any objects that need to remember
; their state, such as monitors or enemies.
;
; input variables:
;  -none-
;
; writes:
;  d0, d1
;  d2 = respawn index of object to load
;  d6 = camera position
;
;  a0 = address in object placement list
;  a2 = respawn table
; ---------------------------------------------------------------------------
; sub_E250: Load_Object_Pos:
ObjectsManager:
		moveq	#0,d0
		move.b	(Obj_placement_routine).w,d0
		move.w	ObjectsManager_States(pc,d0.w),d0
		jmp	ObjectsManager_States(pc,d0.w)
; ===========================================================================
; off_E25E: Load_Object_Pos_Index:
ObjectsManager_States:	offsetTable
		offsetTableEntry.w ObjectsManager_Init
		offsetTableEntry.w Load_Object_Pos_Sub_02
		offsetTableEntry.w Load_Object_Pos_Sub_03
; ===========================================================================
; loc_E264: Load_Object_Pos_Sub_01:
ObjectsManager_Init:
		addq.b	#2,(Obj_placement_routine).w
		move.w	(Current_ZoneAndAct).w,d0
		ror.b	#1,d0
		lsr.w	#6,d0
		lea	(Objects_Layout).l,a0
		move.l	a0,a1
		adda.w	(a0,d0.w),a0
		; Initialize each object load address with the first object in the layout
		move.l	a0,(Obj_load_addr_right).w
		move.l	a0,(Obj_load_addr_left).w
		move.l	a0,(Obj_load_addr_right_P2).w
		move.l	a0,(Obj_load_addr_left_P2).w
		lea	(Object_Respawn_Table).w,a2
		move.w	#$0101,(a2)+	; the first two bytes are not used as respawn values
		; Instead, they are used to keep track of the current respawn indexes

		; This clears longwords, but the loop counter is measured in words!
		; This causes $17C bytes to be cleared instead of $BE.
		move.w	#bytesToWcnt(Obj_respawn_data_End-Obj_respawn_data),d0 ; set loop counter

-		clr.l	(a2)+
		dbf	d0,-

		lea	(Object_Respawn_Table).w,a2
		moveq	#0,d2
		move.w	(Camera_X_pos).w,d6
		subi.w	#$80,d6
		bcc.s	+
		moveq	#0,d6
+
		andi.w  #$FF80, D6
		move.l  (Obj_load_addr_right).w, A0

loc_E2B8:
		cmp.w   (A0), D6
		bls.s   loc_E2CA
		tst.b   $0004(A0)
		bpl.s   loc_E2C6
		move.b  (A2), D2
		addq.b  #$01, (A2)
loc_E2C6:
		addq.w  #$06, A0
		bra.s   loc_E2B8
loc_E2CA:
		move.l  A0, (Obj_load_addr_right).w   
		move.l  A0, (Obj_load_addr_right_P2).w
		move.l  (Obj_load_addr_left).w, A0
		subi.w  #$0080, D6
		bcs.s   loc_E2EE
loc_E2DC:
		cmp.w   (A0), D6
		bls.s   loc_E2EE
		tst.b   $0004(A0)
		bpl.s   loc_E2EA
		addq.b  #$01, $0001(A2)
loc_E2EA:
		addq.w  #$06, A0
		bra.s   loc_E2DC
loc_E2EE:
		move.l  A0, (Obj_load_addr_left).w
		move.l  A0, (Obj_load_addr_left_P2).w
		move.w  #$FFFF, (Camera_X_pos_last).w
		move.w  #$FFFF, (Camera_X_pos_last_P2).w
		tst.w   (Two_player_mode).w
		beq.s   Load_Object_Pos_Sub_02  ; loc_E310
		addq.b  #$02, (Obj_placement_routine).w
		bra.w     loc_E3DC
Load_Object_Pos_Sub_02: ;loc_E310:
		move.w  (Camera_X_pos).w, D1
		subi.w  #$0080, D1
		andi.w  #$FF80, D1
		move.w  D1, (Camera_X_pos_coarse).w
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D2
		move.w  (Camera_X_pos).w, D6
		andi.w  #$FF80, D6
		cmp.w   (Camera_X_pos_last).w, D6
		beq.w    loc_E3DA
		bge.s   loc_E396
		move.w  D6, (Camera_X_pos_last).w
		move.l  (Obj_load_addr_left).w, A0
		subi.w  #$0080, D6
		bcs.s   loc_E372
loc_E346:
		cmp.w   -6(A0), D6
		bge.s   loc_E372
		subq.w  #$06, A0
		tst.b   $0004(A0)
		bpl.s   loc_E35C
		subq.b  #$01, $0001(A2)
		move.b  $0001(A2), D2
loc_E35C:
		bsr.w     loc_E6C2
		bne.s   loc_E366
		subq.w  #$06, A0
		bra.s   loc_E346
loc_E366:
		tst.b   $0004(A0)
		bpl.s   loc_E370
		addq.b  #$01, $0001(A2)
loc_E370:
		addq.w  #$06, A0
loc_E372:		
		move.l  A0, (Obj_load_addr_left).w
		move.l  (Obj_load_addr_right).w, A0
		addi.w  #$0300, D6 
loc_E37E:
		cmp.w   -6(A0), D6
		bgt.s   loc_E390
		tst.b   -2(A0)
		bpl.s   loc_E38C
		subq.b  #$01, (A2)
loc_E38C:
		subq.w  #$06, A0
		bra.s   loc_E37E
loc_E390:
		move.l  A0, (Obj_load_addr_right).w
		rts
loc_E396:
		move.w  D6, (Camera_X_pos_last).w
		move.l  (Obj_load_addr_right).w, A0
		addi.w  #$0280, D6
loc_E3A2:
		cmp.w   (A0), D6
		bls.s   loc_E3B6
		tst.b   $0004(A0)
		bpl.s   loc_E3B0
		move.b  (A2), D2
		addq.b  #$01, (A2)
loc_E3B0:
		bsr.w     loc_E6C2
		beq.s   loc_E3A2
loc_E3B6:
		move.l  A0, (Obj_load_addr_right).w
		move.l  (Obj_load_addr_left).w, A0
		subi.w  #$0300, D6
		bcs.s   loc_E3D6
loc_E3C4:
		cmp.w   (A0), D6
		bls.s   loc_E3D6
		tst.b   $0004(A0)
		bpl.s   loc_E3D2
		addq.b  #$01, $0001(A2)
loc_E3D2:
		addq.w  #$06, A0
		bra.s   loc_E3C4
loc_E3D6:
		move.l  A0, (Obj_load_addr_left).w
loc_E3DA:
		rts
loc_E3DC:
		moveq   #-1, D0
		move.l  D0, (Object_manager_2P_RAM).w
		move.l  D0, (Object_manager_2P_RAM+4).w
		move.l  D0, (Object_manager_2P_RAM+8).w
		move.l  D0, (Object_manager_2P_RAM+$C).w
		move.w  #$0000, (Camera_X_pos_last).w
		move.w  #$0000, (Camera_X_pos_last_P2).w
		lea     (Object_Respawn_Table).w, A2
		move.w  (A2), (Obj_respawn_index_P2).w
		moveq   #$00, D2
		lea     (Object_Respawn_Table).w, A5
		lea     (Obj_load_addr_right).w, A4
		lea     (Player_1_loaded_object_blocks).w, A1
		lea     (Player_2_loaded_object_blocks).w, A6
		moveq   #-2, D6
		bsr.w     loc_E570
		lea     (Player_1_loaded_object_blocks).w, A1
		moveq   #-1, D6
		bsr.w     loc_E570
		lea     (Player_1_loaded_object_blocks).w, A1
		moveq   #$00, D6
		bsr.w     loc_E570
		lea     (Obj_respawn_index_P2).w, A5
		lea     (Obj_load_addr_right_P2).w, A4
		lea     (Player_2_loaded_object_blocks).w, A1
		lea     (Player_1_loaded_object_blocks).w, A6
		moveq   #-2, D6
		bsr.w     loc_E570
		lea     (Player_2_loaded_object_blocks).w, A1
		moveq   #-1, D6
		bsr.w     loc_E570
		lea     (Player_2_loaded_object_blocks).w, A1
		moveq   #$00, D6
		bsr.w     loc_E570
Load_Object_Pos_Sub_03: ; loc_E458:
		move.w  (Camera_X_pos).w, D1
		andi.w  #$FF00, D1
		move.w  D1, (Camera_X_pos_coarse).w
		move.w  (Camera_X_pos_P2).w, D1
		andi.w  #$FF00, D1
		move.w  D1, (Camera_X_pos_coarse_P2).w
		move.b  (Camera_X_pos).w, D6
		andi.w  #$00FF, D6
		move.w  (Camera_X_pos_last).w, D0
		cmp.w   (Camera_X_pos_last).w, D6
		beq.s   loc_E498
		move.w  D6, (Camera_X_pos_last).w
		lea     (Object_Respawn_Table).w, A5
		lea     (Obj_load_addr_right).w, A4
		lea     (Player_1_loaded_object_blocks).w, A1
		lea     (Player_2_loaded_object_blocks).w, A6
		bsr.s   loc_E4C2
loc_E498:
		move.b  (Camera_X_pos_P2).w, D6
		andi.w  #$00FF, D6
		move.w  (Camera_X_pos_last_P2).w, D0
		cmp.w   (Camera_X_pos_last_P2).w, D6
		beq.s   loc_E4C0
		move.w  D6, (Camera_X_pos_last_P2).w
		lea     (Obj_respawn_index_P2).w, A5
		lea     (Obj_load_addr_right_P2).w, A4
		lea     (Player_2_loaded_object_blocks).w, A1
		lea     (Player_1_loaded_object_blocks).w, A6
		bsr.s   loc_E4C2
loc_E4C0:
		rts
loc_E4C2:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D2
		cmp.w   D0, D6
		beq.w    loc_E3DA
		bge.w    loc_E570
		move.b  $0002(A1), D2
		move.b  $0001(A1), $0002(A1)
		move.b  (A1), $0001(A1)
		move.b  D6, (A1)
		cmp.b   (A6), D2
		beq.s   loc_E4F8
		cmp.b   $0001(A6), D2
		beq.s   loc_E4F8
		cmp.b   $0002(A6), D2
		beq.s   loc_E4F8
		bsr.w     loc_E652
		bra.s   loc_E4FC
loc_E4F8:		
		bsr.w     loc_E616
loc_E4FC:
		bsr.w     loc_E5F2 
		bne.s   loc_E520
		move.l  $0004(A4), A0
loc_E506:
		cmp.b   -6(A0), D6
		bne.s   loc_E51A
		tst.b   -2(A0)
		bpl.s   loc_E516
		subq.b  #$01, $0001(A5)
loc_E516:
		subq.w  #$06, A0
		bra.s   loc_E506
loc_E51A:
		move.l  A0, $0004(A4)
		bra.s   loc_E556
loc_E520:
		move.l  $0004(A4), A0
		move.b  D6, (A1)
loc_E526:
		cmp.b   -6(A0), D6
		bne.s   loc_E552
		subq.w  #$06, A0
		tst.b   $0004(A0)
		bpl.s   loc_E53C
		subq.b  #$01, $0001(A5)
		move.b  $0001(A5), D2
loc_E53C:
		bsr.w     loc_E712
		bne.s   loc_E546
		subq.w  #$06, A0
		bra.s   loc_E526
loc_E546:
		tst.b   $0004(A0)
		bpl.s   loc_E550
		addq.b  #$01, $0001(A5)
loc_E550:
		addq.w  #$06, A0
loc_E552:
		move.l  A0, $0004(A4)
loc_E556:
		move.l  (A4), A0
		addq.w  #$03, D6
loc_E55A:
		cmp.b   -6(A0), D6
		bne.s   loc_E56C
		tst.b   -2(A0)
		bpl.s   loc_E568
		subq.b  #$01, (A5)
loc_E568:
		subq.w  #$06, A0
		bra.s   loc_E55A
loc_E56C:
		move.l  A0, (A4)
		rts              
loc_E570:
		addq.w  #$02, D6
		move.b  (A1), D2
		move.b  $0001(A1), (A1)
		move.b  $0002(A1), $0001(A1)
		move.b  D6, $0002(A1)
		cmp.b   (A6), D2
		beq.s   loc_E598
		cmp.b   $0001(A6), D2
		beq.s   loc_E598
		cmp.b   $0002(A6), D2
		beq.s   loc_E598
		bsr.w     loc_E652
		bra.s   loc_E59C
loc_E598:
		bsr.w     loc_E616
loc_E59C:
		bsr.w     loc_E5F2
		bne.s   loc_E5B8
		move.l  (A4), A0
loc_E5A4:
		cmp.b   (A0), D6
		bne.s   loc_E5B4
		tst.b   $0004(A0)
		bpl.s   loc_E5B0
		addq.b  #$01, (A5)
loc_E5B0:
		addq.w  #$06, A0
		bra.s   loc_E5A4
loc_E5B4:
		move.l  A0, (A4)
		bra.s   loc_E5D2
loc_E5B8:
		move.l  (A4), A0
		move.b  D6, (A1)
loc_E5BC:
		cmp.b   (A0), D6
		bne.s   loc_E5D0
		tst.b   $0004(A0)
		bpl.s   loc_E5CA
		move.b  (A5), D2
		addq.b  #$01, (A5)
loc_E5CA:
		bsr.w     loc_E712
		beq.s   loc_E5BC
loc_E5D0:
		move.l  A0, (A4)    
loc_E5D2:
		move.l  $0004(A4), A0
		subq.w  #$03, D6
		bcs.s   loc_E5EC
loc_E5DA:
		cmp.b   (A0), D6
		bne.s   loc_E5EC
		tst.b   $0004(A0)
		bpl.s   loc_E5E8
		addq.b  #$01, $0001(A5)
loc_E5E8:
		addq.w  #$06, A0
		bra.s   loc_E5DA
loc_E5EC:
		move.l  A0, $0004(A4)   
		rts  
loc_E5F2:
		move.l  A1, -(A7)
		lea     (Object_RAM_block_indices).w, A1
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		cmp.b   (A1)+, D6
		beq.s   loc_E612
		moveq   #$01, D0
loc_E612:
		move.l  (A7)+, A1
		rts
loc_E616:		
		lea     (Object_RAM_block_indices).w, A1
		lea     ($FFFFBE00).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E
		lea     ($FFFFC100).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E
		lea     ($FFFFC400).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E
		lea     ($FFFFC700).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E
		lea     ($FFFFCA00).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E
		lea     ($FFFFCD00).w, A3
		tst.b   (A1)+
		bmi.s   loc_E64E		 
		nop
		nop
loc_E64E:
		subq.w  #$01, A1
		rts    
loc_E652:
		lea     (Object_RAM_block_indices).w, A1
		lea     ($FFFFBE00).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		lea     ($FFFFC100).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		lea     ($FFFFC400).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		lea     ($FFFFC700).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		lea     ($FFFFCA00).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		lea     ($FFFFCD00).w, A3
		cmp.b   (A1)+, D2
		beq.s   loc_E68A
		nop
		nop
loc_E68A:
		move.b  #$FF, -(A1)
		movem.l A1/A3, -(A7)
		moveq   #$00, D1
		moveq   #$0B, D2
loc_E696:
		tst.b   (A3)
		beq.s   loc_E6B2
		move.l  A3, A1
		moveq   #$00, D0
		move.b  $0023(A1), D0
		beq.s   loc_E6AA
		bclr    #$07, $02(A2, D0)
loc_E6AA:
		moveq   #$0F, D0
loc_E6AC:
		move.l  D1, (A1)+
		dbf    D0, loc_E6AC
loc_E6B2:    
		lea     $0040(A3), A3
		dbf    D2, loc_E696 
		moveq   #$00, D2
		movem.l (A7)+, A1/A3
		rts       
loc_E6C2:
		tst.b   $0004(A0)
		bpl.s   loc_E6D6
		bset    #$07, $02(A2, D2)
		beq.s   loc_E6D6
		addq.w  #$06, A0
		moveq   #$00, D0
		rts
loc_E6D6:
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_E710
		move.w  (A0)+, $0008(A1)
		move.w  (A0)+, D0
		move.w  D0, D1
		andi.w  #$0FFF, D0
		move.w  D0, $000C(A1)
		rol.w   #$02, D1
		andi.b  #$03, D1
		move.b  D1, $0001(A1)
		move.b  D1, $0022(A1)
		move.b  (A0)+, D0
		bpl.s   loc_E706
		andi.b  #$7F, D0
		move.b  D2, $0023(A1)
loc_E706:
		_move.b  D0, 0(A1)
		move.b  (A0)+, $0028(A1)
		moveq   #$00, D0
loc_E710:
		rts    
loc_E712:
		tst.b   $0004(A0)
		bpl.s   loc_E726
		bset    #$07, $02(A2, D2)
		beq.s   loc_E726
		addq.w  #$06, A0
		moveq   #$00, D0
		rts
loc_E726:
		btst    #$05, $0002(A0)
		beq.s   loc_E736
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_E770
		bra.s   loc_E73C
loc_E736:
		bsr.w     loc_E7A4
		bne.s   loc_E770
loc_E73C:
		move.w  (A0)+, $0008(A1) 
		move.w  (A0)+, D0
		move.w  D0, D1
		andi.w  #$0FFF, D0
		move.w  D0, $000C(A1)
		rol.w   #$02, D1
		andi.b  #$03, D1
		move.b  D1, $0001(A1)
		move.b  D1, $0022(A1)
		move.b  (A0)+, D0
		bpl.s   loc_E766
		andi.b  #$7F, D0
		move.b  D2, $0023(A1)
loc_E766:
		_move.b  D0, 0(A1)
		move.b  (A0)+, $0028(A1)
		moveq   #$00, D0
loc_E770:
		rts
;========================= Load Object List - [ End ] =========================   
               
;=============================================================================== 
; Sub Routine SingleObjLoad
; [ Begin ]		         
;===============================================================================		
SingleObjLoad: ; loc_E772:		
		lea     ($FFFFB800).w, A1
		move.w  #$005F, D0
loc_E77A:
		tst.b   (A1)
		beq.s   loc_E786
		lea     $0040(A1), A1
		dbf    D0, loc_E77A
loc_E786:
		rts     
;=============================================================================== 
; Sub Routine SingleObjLoad
; [ End ]		         
;===============================================================================		  
								            
;=============================================================================== 
; Sub Routine SingleObjLoad2
; [ Begin ]		         
;===============================================================================		 
SingleObjLoad2: ;loc_E788:
		move.l  A0, A1
		move.w  #$D000, D0
		sub.w   A0, D0
		lsr.w   #$06, D0
		subq.w  #$01, D0
		bcs.s   loc_E7A2
loc_E796:
		tst.b   (A1)
		beq.s   loc_E7A2
		lea     $0040(A1), A1
		dbf    D0, loc_E796
loc_E7A2:
		rts   
;=============================================================================== 
; Sub Routine SingleObjLoad2
; [ End ]		         
;===============================================================================    
             
loc_E7A4: ; Load Object List Subroutine - Start 
		move.l  A3, A1
		move.w  #$000B, D0
loc_E7AA: 
		tst.b   (A1)
		beq.s   loc_E7B6
		lea     $0040(A1), A1
		dbf    D0, loc_E7AA
loc_E7B6:
		rts ; Load Object List Subroutine - End 
		
;=============================================================================== 
; Object 0x41 - Springs 
; [ Begin ]
;===============================================================================		     
Obj_0x41_Springs: ; loc_E7B8:     
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_E7E8(PC, D0), D1
		jsr     loc_E7E8(PC, D1)
		tst.w   (Two_player_mode).w
		beq.s   loc_E7D0
		bra.w     DisplaySprite           ; loc_D3C2
loc_E7D0:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_E7E8:
		dc.w    loc_E7F4-loc_E7E8
		dc.w    loc_E8CC-loc_E7E8
		dc.w    loc_E9BE-loc_E7E8
		dc.w    loc_EBD0-loc_E7E8
		dc.w    loc_ECBC-loc_E7E8
		dc.w    loc_EDF2-loc_E7E8
loc_E7F4:
		addq.b  #$02, $0024(A0)
		move.l  #Spring_Mappings, $0004(A0) ; loc_EF70
		move.w  #$045C, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$000E, D0
		move.w  loc_E82A(PC, D0), D0
		jmp     loc_E82A(PC, D0)
loc_E82A:
		dc.w    loc_E8A0-loc_E82A
		dc.w    loc_E834-loc_E82A
		dc.w    loc_E854-loc_E82A
		dc.w    loc_E868-loc_E82A
		dc.w    loc_E882-loc_E82A		    
loc_E834:
		move.b  #$04, $0024(A0)
		move.b  #$02, $001C(A0)
		move.b  #$03, $001A(A0)
		move.w  #$0470, $0002(A0)
		move.b  #$08, $0019(A0)
		bra.s   loc_E8A0
loc_E854:		
		move.b  #$06, $0024(A0)
		move.b  #$06, $001A(A0)
		bset    #$01, $0022(A0)
		bra.s   loc_E8A0
loc_E868:		
		move.b  #$08, $0024(A0)
		move.b  #$04, $001C(A0)
		move.b  #$07, $001A(A0)
		move.w  #$043C, $0002(A0)		  
		bra.s   loc_E8A0
loc_E882:		
		move.b  #$0A, $0024(A0)
		move.b  #$04, $001C(A0)
		move.b  #$0A, $001A(A0)
		move.w  #$043C, $0002(A0)
		bset    #$01, $0022(A0)
loc_E8A0:
		move.b  $0028(A0), D0
		andi.w  #$0002, D0
		move.w  loc_E8C8(PC, D0), $0030(A0)
		btst    #$01, D0
		beq.s   loc_E8C2
		bset    #$05, $0002(A0)
		move.l  #loc_EF86, $0004(A0)
loc_E8C2:
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		rts
loc_E8C8:
		dc.w    $F000, $F600		   
loc_E8CC:
		move.w  #$001B, D1
		move.w  #$0008, D2
		move.w  #$0010, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_F510
		btst    #$03, $0022(A0)
		beq.s   loc_E8F4
		bsr.s   loc_E918
loc_E8F4:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_F510
		btst    #$04, $0022(A0)
		beq.s   loc_E90C
		bsr.s   loc_E918
loc_E90C:
		lea     (loc_EF36).l, A1
		bra.w     AnimateSprite           ; loc_D412
		rts
loc_E918:
		move.w  #$0100, $001C(A0)
		addq.w  #$08,  $000C(A1)
		move.w  $0030(A0), $0012(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		bpl.s   loc_E94C
		move.w  #$0000, $0010(A1)
loc_E94C:
		btst    #$00, D0
		beq.s   loc_E98C
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$00, $002C(A1)
		move.b  #$04, $002D(A1)
		btst    #$01, D0
		bne.s   loc_E97C
		move.b  #$01, $002C(A1)
loc_E97C:
		btst    #$00, $0022(A1)
		beq.s   loc_E98C
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_E98C:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_E9A2
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_E9A2:
		cmpi.b  #$08, D0
		bne.s   loc_E9B4
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_E9B4:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6    
loc_E9BE:
		move.w  #$0013, D1
		move.w  #$000E, D2
		move.w  #$000F, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_F510
		btst    #$05, $0022(A0)
		beq.s   loc_E9FE
		move.b  $0022(A0), D1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcs.s   loc_E9F6
		eori.b  #$01, D1
loc_E9F6:
		andi.b  #$01, D1
		bne.s   loc_E9FE
		bsr.s   loc_EA3E
loc_E9FE:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_F510
		btst    #$06, $0022(A0)
		beq.s   loc_EA2E
		move.b  $0022(A0), D1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcs.s   loc_EA26
		eori.b  #$01, D1
loc_EA26:
		andi.b  #$01, D1
		bne.s   loc_EA2E
		bsr.s   loc_EA3E
loc_EA2E:
		bsr.w     loc_EB16
		lea     (loc_EF36).l, A1
		bra.w     AnimateSprite           ; loc_D412
		rts
loc_EA3E:
		move.w  #$0300, $001C(A0)
		move.w  $0030(A0), $0010(A1)
		addq.w  #$08,  $0008(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_EA6C
		bclr    #$00, $0022(A1)
		subi.w  #$0010, $0008(A1)
		neg.w   $0010(A1)
loc_EA6C:
		move.w  #$000F, $002E(A1)
		move.w  $0010(A1), $0014(A1)
		btst    #$02, $0022(A1)
		bne.s   loc_EA86
		move.b  #$00, $001C(A1)
loc_EA86:
		move.b  $0028(A0), D0
		bpl.s   loc_EA92
		move.w  #$0000, $0012(A1)
loc_EA92:
		btst    #$00, D0
		beq.s   loc_EAD2
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0
		bne.s   loc_EAC2
		move.b  #$03, $002C(A1)
loc_EAC2:
		btst    #$00, $0022(A1)
		beq.s   loc_EAD2
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_EAD2:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_EAE8
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_EAE8:
		cmpi.b  #$08, D0
		bne.s   loc_EAFA
		move.b  #$0E, $003E(A1)   
		move.b  #$0F, $003F(A1)
loc_EAFA:
		bclr    #$05, $0022(A0)
		bclr    #$06, $0022(A0)
		bclr    #$05, $0022(A1)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6  
loc_EB16:
		cmpi.b  #$03, $001C(A0)
		beq.w    loc_EBCE
		move.w  $0008(A0), D0
		move.w  D0, D1
		addi.w  #$0028, D1
		btst    #$00, $0022(A0)
		beq.s   loc_EB38
		move.w  D0, D1
		subi.w  #$0028, D0
loc_EB38:
		move.w  $000C(A0), D2
		move.w  D2, D3
		subi.w  #$0018, D2
		addi.w  #$0018, D3
		lea     ($FFFFB000).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_EB8C
		move.w  $0014(A1), D4
		btst    #$00, $0022(A0)
		beq.s   loc_EB60
		neg.w   D4
loc_EB60:
		tst.w   D4
		bmi.s   loc_EB8C
		move.w  $0008(A1), D4
		cmp.w   D0, D4
		bcs.w    loc_EB8C
		cmp.w   D1, D4
		bcc.w    loc_EB8C
		move.w  $000C(A1), D4
		cmp.w   D2, D4
		bcs.w    loc_EB8C
		cmp.w   D3, D4
		bcc.w    loc_EB8C
		move.w  D0, -(A7)
		bsr.w     loc_EA3E
		move.w  (A7)+, D0
loc_EB8C:
		lea     ($FFFFB040).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_EBCE
		move.w  $0014(A1), D4
		btst    #$00, $0022(A0)
		beq.s   loc_EBA6
		neg.w   D4
loc_EBA6:
		tst.w   D4
		bmi.s   loc_EBCE
		move.w  $0008(A1), D4
		cmp.w   D0, D4
		bcs.w    loc_EBCE
		cmp.w   D1, D4
		bcc.w    loc_EBCE
		move.w  $000C(A1), D4
		cmp.w   D2, D4
		bcs.w    loc_EBCE
		cmp.w   D3, D4
		bcc.w    loc_EBCE
		bsr.w     loc_EA3E
loc_EBCE:
		rts    
loc_EBD0:
		move.w  #$001B, D1
		move.w  #$0008, D2
		move.w  #$0010, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_F510
		cmpi.w  #$FFFE, D4
		bne.s   loc_EBF6
		bsr.s   loc_EC18
loc_EBF6:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_F510
		cmpi.w  #$FFFE, D4
		bne.s   loc_EC0C
		bsr.s   loc_EC18
loc_EC0C:
		lea     (loc_EF36).l, A1
		bra.w     AnimateSprite           ; loc_D412
		rts
loc_EC18:
		move.w  #$0100, $001C(A0)
		subq.w  #$08, $000C(A1)
		move.w  $0030(A0), $0012(A1)
		neg.w   $0012(A1)
		move.b  $0028(A0), D0
		bpl.s   loc_EC38
		move.w  #$0000, $0010(A1)
loc_EC38:
		btst    #$00, D0
		beq.s   loc_EC78
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$00, $002C(A1)
		move.b  #$04, $002D(A1)
		btst    #$01, D0
		bne.s   loc_EC68
		move.b  #$01, $002C(A1)
loc_EC68:
		btst    #$00, $0022(A1)
		beq.s   loc_EC78
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_EC78:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_EC8E
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_EC8E:
		cmpi.b  #$08, D0
		bne.s   loc_ECA0
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_ECA0:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6   
loc_ECBC:
		move.w  #$001B, D1
		move.w  #$0010, D2
		move.w  $0008(A0), D4
		lea     loc_EEFE(PC), A2
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_F562
		btst    #$03, $0022(A0)
		beq.s   loc_ECE4
		bsr.s   loc_ED08
loc_ECE4:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_F562
		btst    #$04, $0022(A0)
		beq.s   loc_ECFC
		bsr.s   loc_ED08
loc_ECFC:
		lea     (loc_EF36).l, A1
		bra.w     AnimateSprite           ; loc_D412
		rts
loc_ED08:
		btst    #$00, $0022(A0)
		bne.s   loc_ED1E		   
		move.w  $0008(A0), D0
		subq.w  #$04, D0
		cmp.w   $0008(A1), D0
		bcs.s   loc_ED2C
		rts
loc_ED1E:
		move.w  $0008(A0), D0
		addq.w  #$04, D0
		cmp.w   $0008(A1), D0
		bcc.s   loc_ED2C
		rts
loc_ED2C:
		move.w  #$0500, $001C(A0)
		move.w  $0030(A0), $0012(A1)
		move.w  $0030(A0), $0010(A1)
		addq.w  #$06, $000C(A1)
		addq.w  #$06, $0008(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_ED64
		bclr    #$00, $0022(A1)
		subi.w  #$000C, $0008(A1)
		neg.w   $0010(A1)
loc_ED64:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		btst    #$00, D0
		beq.s   loc_EDC0
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0
		bne.s   loc_EDB0
		move.b  #$03, $002C(A1)
loc_EDB0:
		btst    #$00, $0022(A1)
		beq.s   loc_EDC0
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_EDC0:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_EDD6
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_EDD6:
		cmpi.b  #$08, D0
		bne.s   loc_EDE8
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_EDE8:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6     
loc_EDF2:
		move.w  #$001B, D1
		move.w  #$0010, D2
		move.w  $0008(A0), D4
		lea     loc_EF1A(PC), A2
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_F562
		cmpi.w  #$FFFE, D4
		bne.s   loc_EE18
		bsr.s   loc_EE3A
loc_EE18:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_F562
		cmpi.w  #$FFFE, D4
		bne.s   loc_EE2E
		bsr.s   loc_EE3A
loc_EE2E:
		lea     (loc_EF36).l, A1
		bra.w     AnimateSprite           ; loc_D412
		rts
loc_EE3A:
		move.w  #$0500, $001C(A0)
		move.w  $0030(A0), $0012(A1)
		neg.w   $0012(A1)
		move.w  $0030(A0), $0010(A1)
		subq.w  #$06, $000C(A1)
		addq.w  #$06, $0008(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_EE76
		bclr    #$00, $0022(A1)
		subi.w  #$000C, $0008(A1)
		neg.w   $0010(A1)
loc_EE76:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		btst    #$00, D0
		beq.s   loc_EECC
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0 
		bne.s   loc_EEBC
		move.b  #$03, $002C(A1)
loc_EEBC:
		btst    #$00, $0022(A1)
		beq.s   loc_EECC
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_EECC:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_EEE2
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_EEE2:
		cmpi.b  #$08, D0
		bne.s   loc_EEF4
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_EEF4:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6 
loc_EEFE:   
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $0E, $0C, $0A, $08
		dc.b    $06, $04, $02, $00, $FE, $FC, $FC, $FC, $FC, $FC, $FC, $FC
loc_EF1A:		
		dc.b    $F4, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F2, $F4, $F6, $F8
		dc.b    $FA, $FC, $FE, $00, $02, $04, $04, $04, $04, $04, $04, $04
loc_EF36:
		dc.b    $00, $0C, $00, $0F, $00, $1B, $00, $1E, $00, $2A, $00, $2D, $0F, $00, $FF, $00
		dc.b    $01, $00, $00, $02, $02, $02, $02, $02, $02, $FD, $00, $0F, $03, $FF, $00, $04
		dc.b    $03, $03, $05, $05, $05, $05, $05, $05, $FD, $02, $0F, $07, $FF, $00, $08, $07
		dc.b    $07, $09, $09, $09, $09, $09, $09, $FD, $04, $00
Spring_Mappings:
loc_EF70:
		dc.w    loc_EF9C-loc_EF70
		dc.w    loc_EFAE-loc_EF70
		dc.w    loc_EFB8-loc_EF70
		dc.w    loc_EFCA-loc_EF70
		dc.w    loc_EFDC-loc_EF70
		dc.w    loc_EFE6-loc_EF70
		dc.w    loc_EFF8-loc_EF70
		dc.w    loc_F00A-loc_EF70
		dc.w    loc_F02C-loc_EF70
		dc.w    loc_F046-loc_EF70
		dc.w    loc_F068-loc_EF70
loc_EF86:
		dc.w    loc_EF9C-loc_EF86
		dc.w    loc_EFAE-loc_EF86
		dc.w    loc_EFB8-loc_EF86
		dc.w    loc_EFCA-loc_EF86
		dc.w    loc_EFDC-loc_EF86
		dc.w    loc_EFE6-loc_EF86
		dc.w    loc_EFF8-loc_EF86
		dc.w    loc_F08A-loc_EF86
		dc.w    loc_F0AC-loc_EF86
		dc.w    loc_F0C6-loc_EF86
		dc.w    loc_F0E8-loc_EF86		 
loc_EF9C:
		dc.w    $0002
		dc.l    $F00D0000, $0000FFF0, $00050008, $0004FFF8
loc_EFAE:
		dc.w    $0001
		dc.l    $F80D0000, $0000FFF0
loc_EFB8:
		dc.w    $0002
		dc.l    $E00D0000, $0000FFF0, $F007000C, $0006FFF8
loc_EFCA:
		dc.w    $0002
		dc.l    $F0030000, $00000000, $F8010004, $0002FFF8
loc_EFDC:
		dc.w    $0001
		dc.l    $F0030000, $0000FFF8
loc_EFE6:
		dc.w    $0002
		dc.l    $F0030000, $00000010, $F8090006, $0003FFF8
loc_EFF8:
		dc.w    $0002
		dc.l    $000D1000, $1000FFF0, $F0051008, $1004FFF8
loc_F00A:
		dc.w    $0004
		dc.l    $F00D0000, $0000FFF0, $00050008, $00040000
		dc.l    $FB05000C, $0006FFF6, $0005201C, $200EFFF0
loc_F02C:
		dc.w    $0003
		dc.l    $F60D0000, $0000FFEA, $06050008, $0004FFFA
		dc.l    $0005201C, $200EFFF0
loc_F046:
		dc.w    $0004
		dc.l    $E60D0000, $0000FFFB, $F6050008, $0004000B
		dc.l    $F30B0010, $0008FFF6, $0005201C, $200EFFF0
loc_F068:
		dc.w    $0004
		dc.l    $000D1000, $1000FFF0, $F0051008, $10040000
		dc.l    $F505100C, $1006FFF6, $F005301C, $300EFFF0  
loc_F08A:
		dc.w    $0004
		dc.l    $F00D0000, $0000FFF0, $00050008, $00040000
		dc.l    $FB05000C, $0006FFF6, $0005001C, $000EFFF0
loc_F0AC:
		dc.w    $0003
		dc.l    $F60D0000, $0000FFEA, $06050008, $0004FFFA
		dc.l    $0005001C, $000EFFF0
loc_F0C6:
		dc.w    $0004
		dc.l    $E60D0000, $0000FFFB, $F6050008, $0004000B
		dc.l    $F30B0010, $0008FFF6, $0005001C, $000EFFF0
loc_F0E8:
		dc.w    $0004
		dc.l    $000D1000, $1000FFF0, $F0051008, $10040000
		dc.l    $F505100C, $1006FFF6, $F005101C, $100EFFF0   
;=============================================================================== 
; Object 0x41 - Springs 
; [ End ]
;===============================================================================   
		nop		             ; Filler  
;=============================================================================== 
; Object 0x44
; [ Begin ]
;===============================================================================		  
Obj_0x44: ; loc_F10C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_F11A(PC, D0), D1
		jmp     loc_F11A(PC, D1)
loc_F11A:
		dc.w    loc_F120-loc_F11A
		dc.w    loc_F15C-loc_F11A
		dc.w    loc_F170-loc_F11A
loc_F120:
		addq.b  #$02, $0024(A0)
		move.l  #loc_F188, $0004(A0)
		move.w  #$434C, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$08, $0019(A0)
		move.b  #$06, $0018(A0)
		move.b  $0028(A0), $001A(A0)
		bclr    #$04, $001A(A0)
		beq.s   loc_F15C
		addq.b  #$02, $0024(A0)
		bra.s   loc_F170
loc_F15C:
		move.w  #$0013, D1
		move.w  #$0028, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     SolidObject             ; loc_F4A0
loc_F170:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_F188:
		dc.w    loc_F18E-loc_F188
		dc.w    loc_F1B0-loc_F188
		dc.w    loc_F1D2-loc_F188
loc_F18E:
		dc.w    $0004
		dc.l    $E0050004, $0002FFF8, $F0050008, $0004FFF8
		dc.l    $00050008, $0004FFF8, $10050008, $0004FFF8
loc_F1B0:
		dc.w    $0004
		dc.l    $E0050008, $0004FFF8, $F0050008, $0004FFF8
		dc.l    $00050008, $0004FFF8, $10050008, $0004FFF8
loc_F1D2:
		dc.w    $0004
		dc.l    $E0050000, $0000FFF8, $F0050000, $0000FFF8
		dc.l    $00050000, $0000FFF8, $10050000, $0000FFF8            
;=============================================================================== 
; Object 0x44
; [ End ]
;===============================================================================		  
		
;=============================================================================== 
; Object 0x0D - End Panel 
; [ Begin ]
;===============================================================================		     
Obj_0x0D_End_Panel: ; loc_F1F4:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_F224(PC, D0), D1
		jsr     loc_F224(PC, D1)
		lea     (loc_F3E4).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_F224:
		dc.w    End_Panel_Sub_01-loc_F224 ; loc_F22E
		dc.w    End_Panel_Sub_02-loc_F224 ; loc_F256
		dc.w    End_Panel_Sub_03-loc_F224 ; loc_F280
		dc.w    End_Panel_Sub_04-loc_F224 ; loc_F31C
		dc.w    End_Panel_Sub_05-loc_F224 ; loc_F3E2
End_Panel_Sub_01: ; loc_F22E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj0D_MapUnc_F40E, $0004(A0) ; loc_F40E
		move.w  #$0434, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$18, $0019(A0)
		move.b  #$04, $0018(A0)
End_Panel_Sub_02: ; loc_F256:
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		bcs.s   loc_F27E
		cmpi.w  #$0020, D0
		bcc.s   loc_F27E
		move.w  #$00CF, D0
		jsr     (PlayMusic).l            ; loc_14C0
		clr.b   (Update_HUD_timer).w
		move.w  (Camera_Max_X_pos).w, (Camera_Min_X_pos).w
		addq.b  #$02, $0024(A0)
loc_F27E:
		rts
End_Panel_Sub_03: ; loc_F280:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_F29C
		move.w  #$003C, $0030(A0)
		addq.b  #$01, $001C(A0)
		cmpi.b  #$03, $001C(A0)
		bne.s   loc_F29C
		addq.b  #$02, $0024(A0)
loc_F29C:
		subq.w  #$01, $0032(A0)
		bpl.s   loc_F30A
		move.w  #$000B, $0032(A0)
		moveq   #$00, D0
		move.b  $0034(A0), D0
		addq.b  #$02, $0034(A0)
		andi.b  #$0E, $0034(A0)
		lea     loc_F30C(PC, D0), A2
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_F30A
		_move.b  #$25, 0(A1)
		move.b  #$06, $0024(A1)
		move.b  (A2)+, D0
		ext.w   D0
		add.w   $0008(A0), D0
		move.w  D0, $0008(A1)
		move.b  (A2)+, D0
		ext.w   D0
		add.w   $000C(A0), D0
		move.w  D0, $000C(A1)
		move.l  #Obj25_MapUnc_B036, $0004(A1) ; loc_B036
		move.w  #$27B2, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$04, $0001(A1)
		move.b  #$02, $0018(A1)
		move.b  #$08, $0019(A1)
loc_F30A:
		rts
loc_F30C: 
		dc.b    $E8, $F0, $08, $08, $F0, $00, $18, $F8, $00, $F8, $10, $00, $E8, $08, $18, $10
End_Panel_Sub_04: ; loc_F31C:
		tst.w   (Debug_placement_mode).w  
		bne.w    loc_F3B6
		btst    #$01, ($FFFFB022).w
		bne.s   loc_F338
		move.b  #$01, (Control_Locked).w
		move.w  #$0800, (Ctrl_1_Logical).w
loc_F338:
		tst.b   ($FFFFB000).w
		beq.s   loc_F34E
		move.w  ($FFFFB008).w, D0
		move.w  (Camera_Max_X_pos).w, D1
		addi.w  #$0128, D1
		cmp.w   D1, D0
		bcs.s   loc_F3B6
loc_F34E:
		addq.b  #$02, $0024(A0)
loc_F352:		
		tst.b   ($FFFFB5C0).w
		bne.s   loc_F3B6
		move.w  (Camera_Max_X_pos).w, (Camera_Min_X_pos).w
		clr.b   (Invincibility).w
		clr.b   (Update_HUD_timer).w
		move.b  #$3A, ($FFFFB5C0).w
		moveq   #$26, D0
		jsr     (LoadPLC2).l		; loc_176E
		move.b  #$01, (Update_Bonus_score).w
		moveq   #$00, D0
		move.b  (Timer_minute).w, D0
		mulu.w  #$003C, D0
		moveq   #$00, D1
		move.b  (Timer_second).w, D1
		add.w   D1, D0
		divu.w  #$000F, D0
		moveq   #$14, D1
		cmp.w   D1, D0
		bcs.s   loc_F398
		move.w  D1, D0
loc_F398:
		add.w   D0, D0
		move.w  loc_F3B8(PC, D0), (Bonus_Countdown_1).w
		move.w  (Ring_count).w, D0
		mulu.w  #$000A, D0
		move.w  D0, (Bonus_Countdown_2).w
		move.w  #MusID_ActClear, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_F3B6:
		rts
loc_F3B8:
		dc.w    $1388, $1388, $03E8, $01F4, $0190, $0190, $012C, $012C
		dc.w    $00C8, $00C8, $00C8, $00C8, $0064, $0064, $0064, $0064
		dc.w    $0032, $0032, $0032, $0032, $0000
End_Panel_Sub_05: ; loc_F3E2:
		rts
loc_F3E4:
		dc.w    loc_F3EC-loc_F3E4
		dc.w    loc_F3EF-loc_F3E4
		dc.w    loc_F3FD-loc_F3E4
		dc.w    loc_F40B-loc_F3E4
loc_F3EC:
		dc.b    $0F, $02, $FF
loc_F3EF:
		dc.b    $01, $02, $03, $04, $05, $01, $03, $04, $05, $00, $03, $04, $05, $FF
loc_F3FD:
		dc.b    $01, $02, $03, $04, $05, $01, $03, $04, $05, $00, $03, $04, $05, $FF
loc_F40B:
		dc.b    $0F, $00, $FF
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0D_MapUnc_F40E:	BINCLUDE	"mappings/sprite/obj0D.bin"
; ===========================================================================
		nop
; ===========================================================================
;=============================================================================== 
; Sub Routine SolidObject
; [ Begin ]		         
;===============================================================================		
SolidObject: ; loc_F4A0:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F4BE
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		tst.b   $0001(A1)
		bpl.w    loc_F4F8
		addq.b  #$01, D6
loc_F4BE:
		btst    D6, $0022(A0)
		beq.w    loc_F752
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_F4E2
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F4E2
		cmp.w   D2, D0
		bcs.s   loc_F4F0
loc_F4E2:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_F4F0:
		move.w  D4, D2
		bsr.w     loc_F8E4
		moveq   #$00, D4
loc_F4F8:		
		rts		
loc_F4FA:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F510
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F510:    
		btst    D6, $0022(A0)
		beq.w    loc_F75A
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_F534
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F534
		cmp.w   D2, D0		
		bcs.s   loc_F542
loc_F534:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0) 
		moveq   #$00, D4
		rts
loc_F542:
		move.w  D4, D2
		bsr.w     loc_F8E4
		moveq   #$00, D4
		rts
loc_F54C:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F562
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F562:
		btst    D6, $0022(A0)
		beq.w    loc_F698
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_F586
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F586
		cmp.w   D2, D0
		bcs.s   loc_F594
loc_F586:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_F594:
		move.w  D4, D2
		bsr.w     loc_F91E
		moveq   #$00, D4
		rts

loc_F59E:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F5B4
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F5B4:
		btst    D6, $0022(A0)
		beq.w    loc_F6F2
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_F5D8
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F5D8
		cmp.w   D2, D0
		bcs.s   loc_F5E6
loc_F5D8:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_F5E6:
		move.w  D4, D2
		bsr.w     loc_F960
		moveq   #$00, D4
		rts     
loc_F5F0:		 
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F606
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F606:
		btst    D6, $0022(A0)
		beq.w    loc_F656
		btst    #$01, $0022(A1)
		bne.s   loc_F628
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F628
		add.w   D1, D1
		cmp.w   D1, D0
		bcs.s   loc_F636
loc_F628:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_F636:
		move.w  $000C(A0), D0
		sub.w   D2, D0
		add.w   D3, D0
		moveq   #$00, D1
		move.b  $0016(A1), D1
		sub.w   D1, D0
		move.w  D0, $000C(A1)
		sub.w   $0008(A0), D4
		sub.w   D4, $0008(A1)
		moveq   #$00, D4
		rts
loc_F656:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_F82A
		move.w  D1, D4
		add.w   D4, D4
		cmp.w   D4, D0
		bhi.w    loc_F82A
		move.w  $000C(A0), D5
		add.w   D3, D5
		move.b  $0016(A1), D3
		ext.w   D3
		add.w   D3, D2
		move.w  $000C(A1), D3
		sub.w   D5, D3
		addq.w  #$04, D3
		add.w   D2, D3
		bmi.w    loc_F82A
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc.w    loc_F82A
		bra.w     loc_F794		
loc_F698:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_F82A
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi.w    loc_F82A
		move.w  D0, D5
		btst    #$00, $0001(A0)
		beq.s   loc_F6BE
		not.w   D5
		add.w   D3, D5
loc_F6BE:
		lsr.w   #$01, D5
		move.b  $00(A2, D5), D3
		sub.b   (A2), D3
		ext.w   D3
		move.w  $000C(A0), D5
		sub.w   D3, D5
		move.b  $0016(A1), D3
		ext.w   D3
		add.w   D3, D2
		move.w  $000C(A1), D3
		sub.w   D5, D3
		addq.w  #$04, D3
		add.w   D2, D3
		bmi.w    loc_F82A
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc.w    loc_F82A
		bra.w     loc_F794   
loc_F6F2:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_F82A
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi.w    loc_F82A
		move.w  D0, D5
		btst    #$00, $0001(A0)
		beq.s   loc_F718
		not.w  D5
		add.w   D3, D5
loc_F718:
		andi.w  #$FFFE, D5
		move.b  $00(A2, D5), D3
		move.b  $01(A2, D5), D2
		ext.w   D2
		ext.w   D3
		move.w  $000C(A0), D5
		sub.w   D3, D5
		move.w  $000C(A1), D3
		sub.w   D5, D3
		move.b  $0016(A1), D5
		ext.w   D5
		add.w   D5, D3
		addq.w  #$04, D3
		bmi.w    loc_F82A
		add.w   D5, D2
		move.w  D2, D4
		add.w   D5, D4
		cmp.w   D4, D3
		bcc.w    loc_F82A
		bra.w     loc_F794		
loc_F752:
		tst.b   $0001(A0)
		bpl.w    loc_F82A
loc_F75A:		
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_F82A
		move.w  D1, D3
		add.w   D3, D3
		cmp.w   D3, D0
		bhi.w    loc_F82A
		move.b  $0016(A1), D3
		ext.w   D3
		add.w   D3, D2
		move.w  $000C(A1), D3
		sub.w   $000C(A0), D3
		addq.w  #$04, D3
		add.w   D2, D3
		bmi.w    loc_F82A
		move.w  D2, D4
		add.w   D4, D4
		cmp.w   D4, D3
		bcc.w    loc_F82A
loc_F794:		
		tst.b   $002A(A1)
		bmi.w    loc_F82A
		cmpi.b  #$06, $0024(A1)
		bcc.w    loc_F848
		tst.w   (Debug_placement_mode).w
		bne.w    loc_F848
		move.w  D0, D5
		cmp.w   D0, D1
		bcc.s   loc_F7BC
		add.w   D1, D1
		sub.w   D1, D0
		move.w  D0, D5
		neg.w   D5
loc_F7BC:
		move.w  D3, D1
		cmp.w   D3, D2
		bcc.s   loc_F7CA
		subq.w  #$04, D3
		sub.w   D4, D3
		move.w  D3, D1
		neg.w   D1
loc_F7CA:
		cmp.w   D1, D5
		bhi.w    loc_F84C
loc_F7D0:
		cmpi.w  #$0004, D1
		bls.s   loc_F81C
		tst.w   D0
		beq.s   loc_F7F6
		bmi.s   loc_F7E4
		tst.w   $0010(A1)
		bmi.s   loc_F7F6
		bra.s   loc_F7EA
loc_F7E4:
		tst.w   $0010(A1)
		bpl.s   loc_F7F6
loc_F7EA:
		move.w  #$0000, $0014(A1)
		move.w  #$0000, $0010(A1)
loc_F7F6:
		sub.w   D0, $0008(A1)
		btst    #$01, $0022(A1)
		bne.s   loc_F81C
		move.l  D6, D4
		addq.b  #$02, D4
		bset    D4, $0022(A0)
		bset    #$05, $0022(A1)
		move.w  D6, D4
		addi.b  #$0D, D4
		bset    D4, D6
		moveq   #$01, D4
		rts
loc_F81C:
		bsr.s   loc_F83A
		move.w  D6, D4
		addi.b  #$0D, D4
		bset    D4, D6
		moveq   #$01, D4
		rts
loc_F82A:
		move.l  D6, D4
		addq.b  #$02, D4
		btst    D4, $0022(A0)
		beq.s   loc_F848
		move.w  #$0001, $001C(A1)
loc_F83A:
		move.l  D6, D4
		addq.b  #$02, D4
		bclr    D4, $0022(A0)
		bclr    #$05, $0022(A1)
loc_F848:
		moveq   #$00, D4
		rts   
loc_F84C:
		tst.w   D3
		bmi.s   loc_F858
		cmpi.w  #$0010, D3
		bcs.s   loc_F8A8
		bra.s   loc_F82A
loc_F858:
		tst.w   $0012(A1)
		beq.s   loc_F87A
		bpl.s   loc_F86E
		tst.w   D3
		bpl.s   loc_F86E
		sub.w   D3, $000C(A1)
		move.w  #$0000, $0012(A1)
loc_F86E:
		move.w  D6, D4
		addi.b  #$0F, D4
		bset    D4, D6
		moveq   #-2, D4
		rts
loc_F87A:
		btst    #$01, $0022(A1)
		bne.s   loc_F86E
		move.w  D0, D4
		bpl.s   loc_F888
		neg.w   D4
loc_F888:
		cmpi.w  #$0010, D4
		bcs.w    loc_F7D0
		move.l  A0, -(A7)
		move.l  A1, A0
		jsr     KillSonic               ; loc_21422
		move.l  (A7)+, A0
		move.w  D6, D4
		addi.b  #$0F, D4
		bset    D4, D6
		moveq   #-2, D4
		rts
loc_F8A8:
		subq.w  #$04, D3
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  D1, D2
		add.w   D2, D2
		add.w   $0008(A1), D1
		sub.w   $0008(A0), D1
		bmi.s   loc_F8E0
		cmp.w   D2, D1
		bcc.s   loc_F8E0
		tst.w   $0012(A1)
		bmi.s   loc_F8E0
		sub.w   D3, $000C(A1)
		subq.w  #$01, $000C(A1)
		bsr.w     loc_FAF2
		move.w  D6, D4
		addi.b  #$11, D4
		bset    D4, D6
		moveq   #-1, D4
		rts
loc_F8E0:
		moveq   #$00, D4
		rts
loc_F8E4:
		move.w  $000C(A0), D0
		sub.w   D3, D0
		bra.s   loc_F8F4
		move.w  $000C(A0), D0
		subi.w  #$0009, D0
loc_F8F4:
		tst.b   $002A(A1)
		bmi.s   loc_F91C
		cmpi.b  #$06, $0024(A1)
		bcc.s   loc_F91C
		tst.w   (Debug_placement_mode).w
		bne.s   loc_F91C
		moveq   #$00, D1
		move.b  $0016(A1), D1
		sub.w   D1, D0
		move.w  D0, $000C(A1)
		sub.w   $0008(A0), D2
		sub.w   D2, $0008(A1)
loc_F91C:
		rts		
loc_F91E:
		btst    #$03, $0022(A1)
		beq.s   loc_F95E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		lsr.w   #$01, D0
		btst    #$00, $0001(A0)
		beq.s   loc_F93E
		not.w  d0
		add.w   D1, D0
loc_F93E:
		move.b  $00(A2, D0), D1
		ext.w   D1
		move.w  $000C(A0), D0
		sub.w   D1, D0
		moveq   #$00, D1
		move.b  $0016(A1), D1
		sub.w   D1, D0
		move.w  D0, $000C(A1)
		sub.w   $0008(A0), D2
		sub.w   D2, $0008(A1)
loc_F95E:
		rts
loc_F960:

		btst    #$03, $0022(A1)
		beq.s   loc_F95E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		btst    #$00, $0001(A0)
		beq.s   loc_F97E
		not.w  D0
		add.w   D1, D0
loc_F97E:
		andi.w  #$FFFE, D0
		bra.s   loc_F93E
; loc_F984:
PlatformObject:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F99A
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F99A:
		btst    D6, $0022(A0)
		beq.w    loc_FA98
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_F9BE
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_F9BE
		cmp.w   D2, D0
		bcs.s   loc_F9CC
loc_F9BE:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_F9CC:
		move.w  D4, D2
		bsr.w     loc_F8E4
		moveq   #$00, D4
		rts
loc_F9D6:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_F9EC
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_F9EC:		
		btst    D6, $0022(A0)
		beq.w    loc_FB60
		move.w  D1, D2
		add.w   D2, D2  
		btst    #$01, $0022(A1)
		bne.s   loc_FA10
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_FA10
		cmp.w   D2, D0
		bcs.s   loc_FA1E
loc_FA10:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_FA1E:
		move.w  D4, D2
		bsr.w     loc_F91E
		moveq   #$00, D4
		rts

loc_FA28:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.s   loc_FA3E
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_FA3E:
		btst    D6, $0022(A0)
		beq.w    loc_FB98
		move.w  D1, D2
		add.w   D2, D2
		btst    #$01, $0022(A1)
		bne.s   loc_FA62
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_FA62
		cmp.w   D2, D0
		bcs.s   loc_FA70
loc_FA62:
		bclr    #$03, $0022(A1)
		bclr    D6, $0022(A0)
		moveq   #$00, D4
		rts
loc_FA70:
		move.w  D4, D2
		bsr.w     loc_F8E4
		moveq   #$00, D4
		rts        
loc_FA7A:
		tst.w   $0012(A1)
		bmi.w    loc_FB5E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_FB5E
		cmp.w   D2, D0
		bcc.w    loc_FB5E
		bra.s   loc_FAB6
loc_FA98:		
		tst.w   $0012(A1)
		bmi.w    loc_FB5E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_FB5E
		add.w   D1, D1
		cmp.w   D1, D0
		bcc.w    loc_FB5E
loc_FAB6:
		move.w  $000C(A0), D0
		sub.w   D3, D0
loc_FABC:
		move.w  $000C(A1), D2
		move.b  $0016(A1), D1
		ext.w   D1
		add.w   D2, D1
		addq.w  #$04, D1
		sub.w   D1, D0
		bhi.w    loc_FB5E
		cmpi.w  #$FFF0, D0
		bcs.w    loc_FB5E
		tst.b   $002A(A1)
		bmi.w    loc_FB5E
		cmpi.b  #$06, $0024(A1)
		bcc.w    loc_FB5E
		add.w   D0, D2
		addq.w  #$03, D2
		move.w  D2, $000C(A1)
loc_FAF2:		
		btst    #$03, $0022(A1)
		beq.s   loc_FB0E
		moveq   #$00, D0
		move.b  $003D(A1), D0
		lsl.w   #$06, D0
		addi.l  #$FFFFB000, D0
		move.l  D0, A3
		bclr    D6, $0022(A3)
loc_FB0E:
		move.w  A0, D0
		subi.w  #$B000, D0
		lsr.w   #$06, D0
		andi.w  #$007F, D0
		move.b  D0, $003D(A1)
		move.b  #$00, $0026(A1)
		move.w  #$0000, $0012(A1)
		move.w  $0010(A1), $0014(A1)
		btst    #$01, $0022(A1)
		beq.s   loc_FB54
		move.l  A0, -(A7)
		move.l  A1, A0
		move.w  A0, D1
		subi.w  #$B000, D1
		bne.s   loc_FB4C
		jsr     Sonic_ResetOnFloor      ; loc_1090C
		bra.s   loc_FB52
loc_FB4C:
		jsr     Tails_ResetTailsOnFloor ; loc_11A66 
loc_FB52:
		move.l  (A7)+, A0
loc_FB54:
		bset    #$03, $0022(A1)
		bset    D6, $0022(A0)
loc_FB5E:
		rts		      
loc_FB60:
		tst.w   $0012(A1)
		bmi.w    loc_FB5E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_FB5E
		add.w   D1, D1
		cmp.w   D1, D0
		bcc.s   loc_FB5E
		btst    #$00, $0001(A0)
		beq.s   loc_FB86
		not.w   D0
		add.w   D1, D0
loc_FB86:
		lsr.w   #$01, D0
		move.b  $00(A2, D0), D3
		ext.w   D3
		move.w  $000C(A0), D0
		sub.w   D3, D0
		bra.w     loc_FABC
loc_FB98:		
		tst.w   $0012(A1)
		bmi.w    loc_FB5E
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.w    loc_FB5E
		add.w   D1, D1
		cmp.w   D1, D0
		bcc.w    loc_FB5E
		move.w  $000C(A0), D0
		sub.w   D3, D0
		bra.w     loc_FABC
loc_FBC0:		
		move.w  D1, D2
		add.w   D2, D2
		lea     ($FFFFB000).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_FBE0
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D1, D0
		bmi.s   loc_FBE0
		cmp.w   D2, D0
		bcs.s   loc_FBF2
loc_FBE0:
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A0)
		bclr    #$03, $0022(A0)
loc_FBF2:
		rts		
loc_FBF4:
		lea     ($FFFFB000).w, A1
		btst    #$03, $0022(A0)
		beq.s   loc_FC1C
		jsr     ChkFloorEdge2         ; (loc_13846)
		tst.w   D1
		beq.s   loc_FC0C
		bpl.s   loc_FC1C
loc_FC0C:
		lea     ($FFFFB000).w, A1
		bclr    #$03, $0022(A1)
		bclr    #$03, $0022(A0)
loc_FC1C:
		lea     ($FFFFB040).w, A1
		btst    #$04, $0022(A0)
		beq.s   loc_FC44
		jsr     ChkFloorEdge2         ; (loc_13846)
		tst.w   D1
		beq.s   loc_FC34
		bpl.s   loc_FC44
loc_FC34:
		lea     ($FFFFB040).w, A1
		bclr    #$03, $0022(A1)
		bclr    #$04, $0022(A0)
loc_FC44:
		moveq   #$00, D4
		rts

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 01 - Sonic
; ---------------------------------------------------------------------------            
; Sprite_FC48: Obj_0x01_Sonic:
Obj01:
		tst.w	(Debug_placement_mode).w; is Debug Mode being used?
		beq.s	Obj01_Normal		; if not, branch
		jmp	(DebugMode).l
; ---------------------------------------------------------------------------
; loc_FC54: Sonic_Normal:
Obj01_Normal:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj01_Index(pc,d0.w),d1
		jmp	Obj01_Index(pc,d1)
; ===========================================================================
; loc_FC62: Sonic_Index:
Obj01_Index:	offsetTable
		offsetTableEntry.w Obj01_Init
		offsetTableEntry.w Obj01_Control
		offsetTableEntry.w Obj01_Hurt
		offsetTableEntry.w Obj01_Dead
		offsetTableEntry.w Obj01_Gone
; ===========================================================================
; loc_FC6C: Sonic_Main:
Obj01_Init:
		addq.b	#2,$24(a0)	; => Obj01_Control
		move.b	#$13,$16(a0)	; this sets Sonic's collision height (2*pixels)
		move.b	#9,$17(a0)
		move.l	#MapUnc_Sonic,4(a0)
		move.w	#$780,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)
		move.w	#$600,(Sonic_top_speed).w	; set Sonic's top speed
		move.w	#$C,(Sonic_acceleration).w	; set Sonic's acceleration
		move.w	#$80,(Sonic_deceleration).w	; set Sonic's deceleration
		move.b	#$C,$3E(a0)
		move.b	#$D,$3F(a0)
		move.b	#0,$2C(a0)
		move.b	#4,$2D(a0)
		move.w	#0,(Sonic_Pos_Record_Index).w
		move.w	#$3F,d2

loc_FCD4:
		bsr.w	Sonic_RecordPos
		move.w	#0,(a1,d0.w)
		dbf	d2,loc_FCD4

; ---------------------------------------------------------------------------
; Normal state for Sonic
; ---------------------------------------------------------------------------
; loc_FCE2: Sonic_Control:
Obj01_Control:
		tst.w	(Debug_mode_flag).w		; is Debug Mode enabled?
		beq.s	loc_FCFC			; if not, branch
		btst	#4,(Ctrl_1_Press).w		; is button B pressed?
		beq.s	loc_FCFC			; if not, branch
		move.w	#1,(Debug_placement_mode).w	; change Sonic into a ring/item
		clr.b	(Control_Locked).w		; unlock control
		rts
; -----------------------------------------------------------------------

loc_FCFC:
		tst.b	(Control_Locked).w	; are controls locked?
		bne.s	loc_FD08		; if yes, branch
		move.w	(Ctrl_1).w,(Ctrl_1_Logical).w	; copy new held buttons to enable joypad control

loc_FD08:
		btst	#0,$2A(a0)		; is Sonic interacting with another object that holds him in place or controls his movement somehow?
		bne.s	Obj01_ControlsLock	; if yes, branch
		moveq	#0,d0
		move.b	$22(a0),d0
		andi.w	#6,d0
		move.w	Obj01_Modes(pc,d0.w),d1
		jsr	Obj01_Modes(pc,d1)	; run Sonic's movement code
; loc_FD22: Sonic_ControlsLock:
Obj01_ControlsLock:
		bsr.s	Sonic_Display
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Water
		move.b	(Primary_Angle).w,$36(a0)
		move.b	(Secondary_Angle).w,$37(a0)
		tst.b	(WindTunnel_flag).w
		beq.s	loc_FD4A
		tst.b	$1C(a0)
		bne.s	loc_FD4A
		move.b	$1D(a0),$1C(a0)

loc_FD4A:
		bsr.w	Sonic_Animate
		tst.b	$2A(a0)
		bmi.s	loc_FD5A
		jsr	(TouchResponse).l

loc_FD5A:
		bra.w	LoadSonicDynPLC
; ===========================================================================
; loc_FD5E:
Obj01_Modes:	offsetTable
		offsetTableEntry.w Obj01_MdNormal	; 0 - not airborne or rolling
		offsetTableEntry.w Obj01_MdAir		; 2 - airborne
		offsetTableEntry.w Obj01_MdRoll		; 4 - rolling
		offsetTableEntry.w Obj01_MdJump		; 6 - jumping
; ===========================================================================
; byte_FD66:
Sonic_MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ, so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
    zoneTableEnd
	even

; ===========================================================================

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FD76:
Sonic_Display:
		move.w	$30(a0),d0
		beq.s	Obj01_Display
		subq.w	#1,$30(a0)
		lsr.w	#3,d0
		bcc.s	Obj01_ChkInvin
; loc_FD84:
Obj01_Display:
		jsr	(DisplaySprite).l
; loc_FD8A:
Obj01_ChkInvin:	; Checks if Sonic has run out of invincibility frames
		tst.b	(Invincibility).w
		beq.s	Obj01_ChkShoes
		tst.w	$32(a0)
		beq.s	Obj01_ChkShoes
		subq.w	#1,$32(a0)
		bne.s	Obj01_ChkShoes
		tst.b	(Current_Boss_ID).w
		bne.s	Obj01_RmvInvin
		cmpi.w	#$C,(Current_Air).w
		bcs.s	Obj01_RmvInvin
		moveq	#0,d0
		move.b	(Current_Zone).w,d0
		lea	Sonic_MusicList(pc),a1
		move.b	(a1,d0.w),d0
		jsr	(PlayMusic).l
; loc_FDBE:
Obj01_RmvInvin:
		move.b	#0,(Invincibility).w
; loc_FDC4:
Obj01_ChkShoes:	; Checks if Sonic should still have the speed shoes
		tst.b	(Speed_shoes).w
		beq.s	Obj01_ExitChk
		tst.w	$34(a0)
		beq.s	Obj01_ExitChk
		subq.w	#1,$34(a0)
		bne.s	Obj01_ExitChk
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		move.b	#0,(Speed_shoes).w
		move.w	#$FC,d0		; restore music tempo
		jmp	(PlayMusic).l
; return_FDF8:
Obj01_ExitChk:
		rts
; End of subroutine Sonic_Display
		  
; ---------------------------------------------------------------------------
; Subroutine to record Sonic's previous positions for invincibility stars
; and input/status flags for Tails' AI to follow
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FDFA: CopySonicMovesForTails:
Sonic_RecordPos:
		move.w	(Sonic_Pos_Record_Index).w,d0
		lea	(Sonic_Pos_Record_Buf).w,a1
		lea	(a1,d0.w),a1
		move.w	8(a0),(a1)+
		move.w	$C(a0),(a1)+
		addq.b	#4,(Sonic_Pos_Record_Index+1).w
		lea	(Sonic_Stat_Record_Buf).w,a1
		move.w	(Ctrl_1).w,(a1,d0.w)
		rts
; End of function Sonic_RecordPos

; ---------------------------------------------------------------------------
; Seemingly an earlier subroutine to copy Sonic's status flags for Tails' AI,
; also presnet in the Nick Arcade prototype
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FE1E: Unused_RecordPos:
		move.w	(unk_EEE0).w,d0
		subq.b	#4,d0
		lea	(unk_E600).w,a1
		lea	(a1,d0.w),a2
		move.w	8(a0),d1
		swap	d1
		move.w	$C(a0),d1
		cmp.l	(a2),d1
		beq.s	return_FE4C
		addq.b	#4,d0
		lea	(a1,d0.w),a2
		move.w	8(a0),(a2)+
		move.w	$C(a0),(a2)
		addq.b	#4,(unk_EEE0+1).w

return_FE4C:
		rts
; End of function Unused_RecordPos

; ---------------------------------------------------------------------------
; Subroutine for Sonic when he's underwater
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FE4E:
Sonic_Water:
		tst.b	(Water_flag).w		; is this a water level?
		bne.s	Obj01_InWater		; if not, branch

return_FE54:
		rts
; ---------------------------------------------------------------------------
; loc_FE56: Sonic_InLevelWithWater:
Obj01_InWater:
		move.w	(Water_Level_1).w,d0
		cmp.w	$C(a0),d0		; is Sonic underwater?
		bge.s	Obj01_OutWater		; if not, branch

		bset	#6,$22(a0)		; set underwater flag
		bne.s	return_FE54		; if already underwater, branch

		bsr.w	ResumeMusic
		move.b	#$A,($FFFFB340).w	; load Obj0A (Sonic's breathing bubbles) at $FFFFB340
		move.b	#$81,($FFFFB368).w
		move.w	#$300,(Sonic_top_speed).w
		move.w	#6,(Sonic_acceleration).w
		move.w	#$40,(Sonic_deceleration).w
		asr.w	$10(a0)
		asr.w	$12(a0)			; memory operands can only be shifted one bit at a time
		asr.w	$12(a0)
		beq.s	return_FE54
		move.b	#8,($FFFFB300).w	; load Obj08 (splash animation) at $FFFFB300
		move.w	#$AA,d0			; splash sound
		jmp	(PlaySound).l
; ---------------------------------------------------------------------------
; loc_FEA8: Sonic_NotInWater:
Obj01_OutWater:
		bclr	#6,$22(a0)	; clear underwater flag
		beq.s	return_FE54	; if already cleared, branch
		bsr.w	ResumeMusic
		move.w	#$600,(Sonic_top_speed).w
		move.w	#$C,(Sonic_acceleration).w
		move.w	#$80,(Sonic_deceleration).w
		asl.w	$12(a0)
		beq.w	return_FE54
		move.b	#8,($FFFFB300).w	; load Obj08 (splash animation) at $FFFFB300
		cmpi.w	#$F000,$12(a0)
		bgt.s	loc_FEE2
		move.w	#$F000,$12(a0)		; limit upwards y-velocity when exiting out of water

loc_FEE2:
		move.w	#$AA,d0			; splash sound
		jmp	(PlaySound).l
; End of subroutine Sonic_Water

; ===========================================================================
; ---------------------------------------------------------------------------
; Start of subroutine Obj01_MdNormal
; Called if Sonic is neither airborne nor rolling this frame
; ---------------------------------------------------------------------------
; loc_FEEC: Sonic_MdNormal:
Obj01_MdNormal:
		bsr.w	Sonic_CheckSpindash
		bsr.w	Sonic_Jump
		bsr.w	Sonic_SlopeResist
		bsr.w	Sonic_Move
		bsr.w	Sonic_Roll
		bsr.w	Sonic_LevelBound
		jsr	(SpeedToPos).l
		bsr.w	AnglePos
		bsr.w	Sonic_SlopeRepel
		rts
; End of subroutine Obj01_MdNormal

; ===========================================================================
; Start of subroutine Obj01_MdAir
; Called if Sonic is airborne, but not in a ball (thus, probably not jumping)
; loc_FF14: Sonic_MdJump
Obj01_MdAir:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBound
		jsr	(ObjectFall).l
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_FF34	; if not, branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)

loc_FF34:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_DoLevelCollision
		rts
; End of subroutine Obj01_MdAir

; ===========================================================================
; Start of subroutine Obj01_MdRoll
; Called if Sonic is in a ball, but not airborne (thus, probably rolling)
; loc_FF3E: Sonic_MdRoll:
Obj01_MdRoll:
		bsr.w	Sonic_Jump
		bsr.w	Sonic_RollRepel
		bsr.w	Sonic_RollSpeed
		bsr.w	Sonic_LevelBound
		jsr	(SpeedToPos).l
		bsr.w	AnglePos
		bsr.w	Sonic_SlopeRepel
		rts
; End of subroutine Obj01_MdRoll

; ===========================================================================
; Start of subroutine Obj01_MdJump (an Obj01_MdAir clone)
; Called if Sonic is in a ball and airborne (he could be jumping but not necessarily)
; loc_FF5E: Sonic_MdJump2:
Obj01_MdJump:
		bsr.w	Sonic_JumpHeight
		bsr.w	Sonic_ChgJumpDir
		bsr.w	Sonic_LevelBound
		jsr	(ObjectFall).l
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_FF7E	; if not, branch
		subi.w	#$28,$12(a0)	; reduce gravity by $28 ($38-$28=$10)

loc_FF7E:
		bsr.w	Sonic_JumpAngle
		bsr.w	Sonic_DoLevelCollision
		rts
; End of subroutine Obj01_MdJump

; ---------------------------------------------------------------------------
; Subroutine to make Sonic walk/run
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_FF88:
Sonic_Move:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		move.w	(Sonic_deceleration).w,d4

		tst.b	(Sliding_flag).w		; is Sonic sliding?
		bne.w	Obj01_Traction			; if yes, branch
		tst.w	$2E(a0)				; is Sonic's controls locked?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes, branch
		btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
		beq.s	Obj01_NotLeft			; if not, branch
		bsr.w	Sonic_MoveLeft
; loc_FFB0:
Obj01_NotLeft:
		btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
		beq.s	Obj01_NotRight		; if not, branch
		bsr.w	Sonic_MoveRight
; loc_FFBC:
Obj01_NotRight:
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0				; is Sonic on a slope?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes, branch
		tst.w	$14(a0)				; is Sonic moving?
		bne.w	Obj01_UpdateSpeedOnGround	; if yes, branch
		bclr	#5,$22(a0)
		move.b	#5,$1C(a0)	; use "standing" animation
		; check how close/far Sonic is from the edge
		btst	#3,$22(a0)	; is Sonic on the edge?
		beq.s	Sonic_Balance	; if yes, branch
		moveq	#0,d0
		move.b	$3D(a0),d0
		lsl.w	#6,d0
		lea	($FFFFB000).w,a1
		lea	(a1,d0.w),a1
		tst.b	$22(a1)
		bmi.s	Sonic_LookUp
		moveq	#0,d1
		move.b	$19(a1),d1
		move.w	d1,d2
		add.w	d2,d2
		subq.w	#4,d2
		add.w	8(a0),d1
		sub.w	8(a1),d1
		cmpi.w	#4,d1
		blt.s	Sonic_BalanceOnObjLeft
		cmp.w	d2,d1
		bge.s	Sonic_BalanceOnObjRight
		bra.s	Sonic_LookUp
; ===========================================================================
; loc_1001E:
Sonic_Balance:
		jsr	(ChkFloorEdge).l
		cmpi.w	#$C,d1
		blt.s	Sonic_LookUp
		cmpi.b	#3,$36(a0)
		bne.s	loc_1003A
; loc_10032:
Sonic_BalanceOnObjRight:
		bclr	#0,$22(a0)
		bra.s	loc_10048

loc_1003A:
		cmpi.b	#3,$37(a0)
		bne.s	Sonic_LookUp
; loc_10042:
Sonic_BalanceOnObjLeft:		
		bset	#0,$22(a0)

loc_10048:		
		move.b	#6,$1C(a0)
		bra.s	Obj01_UpdateSpeedOnGround
; ===========================================================================
; loc_10050:
Sonic_LookUp:
		btst	#0,(Ctrl_1_Held_Logical).w	; is up being pressed?
		beq.s	Sonic_Duck		; if not, branch
		move.b	#7,$1C(a0)		; use "looking up" animation
		bra.s	Obj01_UpdateSpeedOnGround
; ===========================================================================
; loc_10060:
Sonic_Duck:
		btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
		beq.s	Obj01_UpdateSpeedOnGround	; if not, branch
		move.b	#8,$1C(a0)		; use "ducking" animation
; ===========================================================================
; ---------------------------------------------------------------------------
; updates Sonic's speed on the ground
; ---------------------------------------------------------------------------
; sub_1006E:
Obj01_UpdateSpeedOnGround:
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$C,d0
		bne.s	Obj01_Traction
		move.w	$14(a0),d0
		beq.s	Obj01_Traction
		bmi.s	Obj01_SettleLeft

; slow down when facing right and not pressing a direction
; Obj01_SettleRight:
		sub.w	d5,d0
		bcc.s	loc_10088
		move.w	#0,d0

loc_10088:
		move.w	d0,$14(a0)
		bra.s	Obj01_Traction
; ---------------------------------------------------------------------------
; slow down when facing left and not pressing a direction
; loc_1008E:
Obj01_SettleLeft:
		add.w	d5,d0
		bcc.s	loc_10096
		move.w	#0,d0

loc_10096:
		move.w	d0,$14(a0)

; increase or decrease speed on the ground
; loc_1009A:
Obj01_Traction:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d1
		asr.l	#8,d1
		move.w	d1,$10(a0)
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)

; stops Sonic from running through walls that meet the ground
; loc_100B8:
Obj01_CheckWallsOnGround:
		move.b	$26(a0),d0
		addi.b	#$40,d0
		bmi.s	loc_10128
		move.b	#$40,d1		; rotate 90 degress clockwise
		tst.w	$14(a0)		; is Sonic moving?
		beq.s	loc_10128	; if not, branch
		bmi.s	loc_100D0	; if negative, branch
		neg.w	d1		; rotate COUNTER-clockwise

loc_100D0:
		move.b	$26(a0),d0
		add.b	d1,d0
		move.w	d0,-(sp)
		bsr.w	Sonic_WalkSpeed
		move.w	(sp)+,d0
		tst.w	d1
		bpl.s	loc_10128
		asl.w	#8,d1
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	loc_10124
		cmpi.b	#$40,d0
		beq.s	loc_10112
		cmpi.b	#$80,d0
		beq.s	loc_1010C
		add.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_1010C:
		sub.w	d1,$12(a0)
		rts
; ---------------------------------------------------------------------------

loc_10112:
		sub.w	d1,$10(a0)
		bset	#5,$22(a0)
		move.w	#0,$14(a0)
		rts
; ---------------------------------------------------------------------------

loc_10124:
		add.w	d1,$12(a0)
; ---------------------------------------------------------------------------

loc_10128:
		rts
; End of subroutine Sonic_Move    


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1012A:
Sonic_MoveLeft:
		move.w	$14(a0),d0
		beq.s	loc_10132	; is Sonic starting to move to the right?
		bpl.s	Sonic_TurnLeft	; if not, branch

loc_10132:
		bset	#0,$22(a0)
		bne.s	loc_10146
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)	; force walking animation to restart if it's already in-progress

loc_10146:
		sub.w	d5,d0		; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0		; compare new speed with top speed
		bgt.s	loc_10158	; if new speed is less than the maximum, branch
		add.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d1,d0		; compare speed with top speed
		ble.s	loc_10158	; if speed was already greater than the maximum, branch
		move.w	d1,d0		; limit speed on ground going left

loc_10158:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use walking animation
		rts
; ---------------------------------------------------------------------------
; loc_10164:
Sonic_TurnLeft:
		sub.w	d4,d0
		bcc.s	loc_1016C
		move.w	#-$80,d0

loc_1016C:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_1019A
		cmpi.w	#$400,d0             
		blt.s	return_1019A
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bclr	#0,$22(a0)
		move.w	#$A4,d0
		jsr	(PlaySound).l

return_1019A:
		rts
; End of subroutine Sonic_MoveLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1019C:
Sonic_MoveRight:
		move.w	$14(a0),d0
		bmi.s	Sonic_TurnRight	; if Sonic is already moving to the left, branch
		bclr	#0,$22(a0)
		beq.s	loc_101B6
		bclr	#5,$22(a0)
		move.b	#1,$1D(a0)	; force walking animation to restart if it's already in-progress

loc_101B6:
		add.w	d5,d0		; add acceleration to the right
		cmp.w	d6,d0		; compare new speed with top speed
		blt.s	loc_101C4	; if new speed is less than the maximum, branch
		sub.w	d5,d0		; remove this frame's acceleration change
		cmp.w	d6,d0		; compare speed with top speed
		bge.s	loc_101C4	; if speed was already greater than the maximum, branch
		move.w	d6,d0		; limit speed on ground going right

loc_101C4:
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)	; use walking animation
		rts
; ---------------------------------------------------------------------------
; loc_101D0:
Sonic_TurnRight:
		add.w	d4,d0
		bcc.s	loc_101D8
		move.w	#$80,d0

loc_101D8:
		move.w	d0,$14(a0)
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		bne.s	return_10206
		cmpi.w	#-$400,d0
		bgt.s	return_10206
		move.b	#$D,$1C(a0)	; use "stopping" animation
		bset	#0,$22(a0)
		move.w	#$A4,d0
		jsr	(PlaySound).l

return_10206:
		rts
; End of subroutine Sonic_MoveRight

; ---------------------------------------------------------------------------
; Subroutine to change Sonic's speed as he rolls
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10208:
Sonic_RollSpeed:
		move.w	(Sonic_top_speed).w,d6
		asl.w	#1,d6
		move.w	(Sonic_acceleration).w,d5
		asr.w	#1,d5	; natural roll deceleration = 1/2 normal acceleration
		; These two lines are unchanged from Sonic 1, the final would replace
		; them with "move.w #$20,d4", which made Sonic decelerate much faster
		; underwater, but they forgot to apply the change to Tails
		move.w	(Sonic_deceleration).w,d4
		asr.w	#2,d4
		tst.b	(Sliding_flag).w
		bne.w	Sonic_SetRollSpeeds
		tst.w	$2E(a0)
		bne.s	Sonic_ApplyRollSpeed
		btst	#2,(Ctrl_1_Held_Logical).w	; is left being pressed?
		beq.s	loc_10234		; if not, branch
		bsr.w	Sonic_RollLeft

loc_10234:
		btst	#3,(Ctrl_1_Held_Logical).w	; is right being pressed?
		beq.s	Sonic_ApplyRollSpeed	; if not, branch
		bsr.w	Sonic_RollRight
; loc_10240:
Sonic_ApplyRollSpeed:
		move.w	$14(a0),d0
		beq.s	Sonic_CheckRollStop
		bmi.s	Sonic_ApplyRollSpeedLeft

; Sonic_ApplyRollSpeedRight:
		sub.w	d5,d0
		bcc.s	loc_10250
		move.w	#0,d0

loc_10250:
		move.w	d0,$14(a0)
		bra.s	Sonic_CheckRollStop
; ---------------------------------------------------------------------------
; loc_10256:
Sonic_ApplyRollSpeedLeft:
		add.w	d5,d0
		bcc.s	loc_1025E
		move.w	#0,d0

loc_1025E:
		move.w	d0,$14(a0)
; loc_10262:
Sonic_CheckRollStop:
		tst.w	$14(a0)
		bne.s	Sonic_SetRollSpeeds
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#5,$1C(a0)
		subq.w	#5,$C(a0)
; ---------------------------------------------------------------------------
; loc_10284:
Sonic_SetRollSpeeds:
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	$14(a0),d0
		asr.l	#8,d0
		move.w	d0,$12(a0)	; set y velocity based on $14 and angle
		muls.w	$14(a0),d1
		asr.l	#8,d1
		cmpi.w	#$1000,d1
		ble.s	loc_102A8
		move.w	#$1000,d1	; limit Sonic's speed rolling right

loc_102A8:
		cmpi.w	#-$1000,d1
		bge.s	loc_102B2
		move.w	#-$1000,d1	; limit Sonic's speed rolling left

loc_102B2:
		move.w	d1,$10(a0)	; set x velocity based on $14 and angle
		bra.w	Obj01_CheckWallsOnGround
; End of function Sonic_RollSpeed


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_102BA:
Sonic_RollLeft:
		move.w	$14(a0),d0
		beq.s	+
		bpl.s	Sonic_BrakeRollingRight
+
		bset	#0,$22(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		rts
; ---------------------------------------------------------------------------
; loc_102D0:
Sonic_BrakeRollingRight:
		sub.w	d4,d0		; reduce rightward rolling speed
		bcc.s	loc_102D8
		move.w	#$FF80,d0

loc_102D8:
		move.w	d0,$14(a0)
		rts
; End of function Sonic_RollLeft


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_102DE:
Sonic_RollRight:
		move.w	$14(a0),d0
		bmi.s	Sonic_BrakeRollingLeft
		bclr	#0,$22(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		rts
; ---------------------------------------------------------------------------
; loc_102F2:
Sonic_BrakeRollingLeft:
		add.w	d4,d0		; reduce leftward rolling speed
		bcc.s	+
		move.w	#$80,d0
+
		move.w	d0,$14(a0)
		rts
; End of subroutine Sonic_RollRight

; ---------------------------------------------------------------------------
; Subroutine for moving Sonic left or right when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10300:
Sonic_ChgJumpDir:
		move.w	(Sonic_top_speed).w,d6
		move.w	(Sonic_acceleration).w,d5
		asl.w	#1,d5
		btst	#4,$22(a0)		; did Sonic jump from rolling?
		bne.s	Obj01_Jump_ResetScr	; if yes, branch to skip midair control
		move.w	$10(a0),d0
		btst	#2,(Ctrl_1_Held_Logical).w
		beq.s	+	; if not holding left, branch

		bset	#0,$22(a0)
		sub.w	d5,d0	; add acceleration to the left
		move.w	d6,d1
		neg.w	d1
		cmp.w	d1,d0	; compare new speed with top speed
		bgt.s	+	; if new speed is less than the maximum, branch
		move.w	d1,d0	; limit speed in air going left, even if Sonic was already going faster (speed limit/cap)
+
		btst	#3,(Ctrl_1_Held_Logical).w
		beq.s	+	; if not holding right, branch

		bclr	#0,$22(a0)
		add.w	d5,d0	; accelerate right in the air
		cmp.w	d6,d0	; compare new speed to top speed
		blt.s	+	; if new speed is less than maximum, branch
		move.w	d6,d0	; limit speed in air going right, even if Sonic was already going faster (speed limit/cap)
; Obj01_JumpMove:
+		move.w	d0,$10(a0)

; loc_1034A: Obj01_ResetScr2:
Obj01_Jump_ResetScr:
		cmpi.w	#$60,(Camera_Y_pos_bias).w	; is screen in its default position?
		beq.s	Sonic_JumpPeakDecelerate	; if yes, branch
		bcc.s	+			; depending on the sign of the difference,
		addq.w	#4,(Camera_Y_pos_bias).w	; either add 2
+		subq.w  #2,(Camera_Y_pos_bias).w	; or subtract 2

; loc_1035C:
Sonic_JumpPeakDecelerate:
		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
		bcs.s	return_1038A	; if yes, branch
		move.w	$10(a0),d0
		move.w	d0,d1
		asr.w	#5,d1		; d1 = x_velocity / 32
		beq.s	return_1038A	; return of d1 is 0
		bmi.s	Sonic_JumpPeakDecelerateLeft	; branch if moving left

; Sonic_JumpPeakDecelerateRight:
		sub.w	d1,d0	; reduce x velocity by d1
		bcc.s	+
		move.w	#0,d0
+
		move.w	d0,$10(a0)
		rts
;-------------------------------------------------------------
; loc_1037E:
Sonic_JumpPeakDecelerateLeft:
		sub.w	d1,d0	; reduce x velocity by d1
		bcs.s	+
		move.w	#0,d0
+
		move.w  d0,$10(a0)

return_1038A:
		rts
; End of subroutine Sonic_ChgJumpDir

; ---------------------------------------------------------------------------
; Subroutine to prevent Sonic from leaving the boundaries of a level
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1038C: Sonic_LevelBoundaries:
Sonic_LevelBound:
		move.l	8(a0),d1
		move.w	$10(a0),d0
		ext.l	d0
		asl.l	#8,d0
		add.l	d0,d1
		swap	d1
		move.w	(Camera_Min_X_pos).w,d0
		addi.w	#$10,d0
		cmp.w	d1,d0		; has Sonic touched the left boundary?
		bhi.s	Sonic_Boundary_Sides	; if yes, branch
		move.w	(Camera_Max_X_pos).w,d0
		addi.w	#320-24,d0	; screen width - Sonic's width_pixels
		tst.b	(Current_Boss_ID).w
		bne.s	loc_103BA
		addi.w	#$40,d0

loc_103BA:
		cmp.w	d1,d0		; has Sonic touched the right boundary?
		bls.s	Sonic_Boundary_Sides	; if yes, branch
; loc_103BE:
Sonic_Boundary_CheckBottom:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		blt.s	Sonic_Boundary_Bottom
		rts
; ===========================================================================
; loc_103CE:
Sonic_Boundary_Bottom:
		bra.w	JmpTo_KillSonic
; ---------------------------------------------------------------------------
; Leftover from Sonic 1, which would transport the player to SBZ3/LZ4 upon
; reaching a certain position; its ID is different, for whatever reason
		cmpi.w	#death_egg_zone_act_2,(Current_ZoneAndAct).w	; is it DEZ2?
		bne.w	JmpTo_KillSonic			; if not, branch
		cmpi.w	#$2000,($FFFFB008).w		; is Sonic beyond x position $2000?
		bcs.w	JmpTo_KillSonic			; if not, branch
		clr.b	(Last_star_pole_hit).w
		move.w	#1,(Level_Inactive_flag).w
		move.w	#labyrinth_zone_act_4,(Current_ZoneAndAct).w	; restart in OWZ4
		rts
; ===========================================================================
; loc_103F8:
Sonic_Boundary_Sides:
		move.w	d0,8(a0)
		move.w	#0,$A(a0)
		move.w	#0,$10(a0)
		move.w	#0,$14(a0)
		bra.s	Sonic_Boundary_CheckBottom
; End of function Sonic_LevelBound

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to start rolling when he's moving
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10410:
Sonic_Roll:
		tst.b	(Sliding_flag).w
		bne.s	Obj01_NoRoll
		move.w	$14(a0),d0
		bpl.s	loc_1041E
		neg.w	d0

loc_1041E:
		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
		bcs.s	Obj01_NoRoll	; if not, branch
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$C,d0		; is left/right being pressed?
		bne.s	Obj01_NoRoll	; if yes, branch
		btst	#1,(Ctrl_1_Held_Logical).w	; is down being pressed?
		bne.s	Obj01_ChkRoll	; if yes, branch
; return_10436: Sonic_NoRoll:
Obj01_NoRoll:
		rts
; ---------------------------------------------------------------------------
; loc_10438:
Obj01_ChkRoll:
		btst	#2,$22(a0)
		beq.s	Obj01_DoRoll
		rts
; ---------------------------------------------------------------------------
; loc_10442: Sonic_DoRoll:
Obj01_DoRoll:
		bset	#2,$22(a0)
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)	; use "rolling" animation
		addq.w	#5,$C(a0)
		move.w	#$BE,d0
		jsr	(PlaySound).l	; play rolling sound
		tst.w	$14(a0)
		bne.s	return_10474
		move.w	#$200,$14(a0)

return_10474:
		rts
; End of function Sonic_Roll

; ---------------------------------------------------------------------------
; Subroutine allowing Sonic to jump
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10476:
Sonic_Jump:
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0		; is A, B or C pressed?
		beq.w	return_1051A	; if not, branch
		moveq	#0,d0
		move.b	$26(a0),d0
		addi.b	#$80,d0
		bsr.w	loc_136F2
		cmpi.w	#6,d1		; does Sonic have enough room to jump?
		blt.w	return_1051A	; if not, branch
		move.w	#$680,d2
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	+		; if not, branch
		move.w	#$380,d2	; reduce jump speed
+
		moveq	#0,d0
		move.b	$26(a0),d0
		subi.b	#$40,d0
		jsr	(CalcSine).l
		muls.w	d2,d1
		asr.l	#8,d1
		add.w	d1,$10(a0)	; make Sonic jump (in X... this adds nothing on level ground)
		muls.w	d2,d0
		asr.l	#8,d0
		add.w	d0,$12(a0)	; make Sonic jump (in Y)
		bset	#1,$22(a0)
		bclr	#5,$22(a0)
		addq.l	#4,sp
		move.b	#1,$3C(a0)
		clr.b	$38(a0)
		move.w	#$A0,d0
		jsr	(PlaySound).l	; play jumping sound
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		btst	#2,$22(a0)
		bne.s	Sonic_RollJump
		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)	; use "jumping" animation
		bset	#2,$22(a0)
		addq.w	#5,$C(a0)

return_1051A:
		rts
; ---------------------------------------------------------------------------
; loc_1051C:
Sonic_RollJump:
		bset	#4,$22(a0)	; set the rolling+jumping flag
		rts
; End of function Sonic_Jump

; ---------------------------------------------------------------------------
; Subroutine letting Sonic control the height of the jump
; when the jump button is released
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10524:
Sonic_JumpHeight:
		tst.b	$3C(A0)		; is Sonic jumping?
		beq.s	Sonic_UpVelCap	; if not, branch

		move.w	#-$400,d1
		btst	#6,$22(a0)	; is Sonic underwater?
		beq.s	loc_1053A	; if not, branch
		move.w	#-$200,d1

loc_1053A:
		cmp.w	$12(a0),d1	; is Sonic going up faster than d1?
		ble.s	return_1054E	; if not, branch
		move.b	(Ctrl_1_Held_Logical).w,d0
		andi.b	#$70,d0		; is A/B/C pressed?
		bne.s	return_1054E	; if yes, branch
		move.w	d1,$12(a0)	; immediately reduce Sonic's upward speed to d1

return_1054E:
		rts  
; ---------------------------------------------------------------------------
; loc_10550:
Sonic_UpVelCap:
		cmpi.w	#-$FC0,$12(a0)	; is Sonic moving up really fast?
		bge.s	return_1055E	; if not, branch
		move.w	#-$FC0,$12(a0)	; cap upward speed

return_1055E:
		rts
; End of subroutine Sonic_JumpHeight
		  
; ---------------------------------------------------------------------------
; Subroutine to check for starting to charge a spindash
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10560: Sonic_Spindash:
Sonic_CheckSpindash:
		tst.b	$39(a0)
		bne.s	Sonic_UpdateSpindash
		cmpi.b	#8,$1C(a0)
		bne.s	return_10592
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0
		beq.w	return_10592
		move.b	#9,$1C(a0)
		move.w	#$BE,d0
		jsr	(PlaySound).l
		addq.l	#4,sp
		move.b	#1,$39(a0)

return_10592:
		rts
; ===========================================================================
; loc_10594:
Sonic_UpdateSpindash:
		move.b	(Ctrl_1_Held_Logical).w,d0
		btst	#1,d0
		bne.s	Sonic_ChargingSpindash

		move.b	#$E,$16(a0)
		move.b	#7,$17(a0)
		move.b	#2,$1C(a0)
		addq.w	#5,$C(a0)
		move.b	#0,$39(a0)
		move.w	#$2000,(Horiz_scroll_delay_val).w
		move.w	#$800,$14(a0)
		btst	#0,$22(a0)
		beq.s	loc_105D2
		neg.w	$14(a0)

loc_105D2:
		bset	#2,$22(a0)
		rts
; ===========================================================================
; loc_105DA:
Sonic_ChargingSpindash:
		move.b	(Ctrl_1_Press_Logical).w,d0
		andi.b	#$70,d0
		beq.w	loc_105E8
		nop

loc_105E8:
		addq.l  #4,sp
		rts
; End of function Sonic_CheckSpindash

; ---------------------------------------------------------------------------
; Subroutine to slow Sonic walking up a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_105EC:
Sonic_SlopeResist:
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	return_10620
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$20,d0
		asr.l	#8,d0
		tst.w	$14(a0)
		beq.s	return_10620
		bmi.s	loc_1061C
		tst.w	d0
		beq.s	return_1061A
		add.w	d0,$14(a0)

return_1061A:
		rts
; ---------------------------------------------------------------------------

loc_1061C:
		add.w	d0,$14(a0)

return_10620:
		rts
; End of subroutine Sonic_SlopeResist

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope while he's rolling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10622:
Sonic_RollRepel:
		move.b	$26(a0),d0
		addi.b	#$60,d0
		cmpi.b	#$C0,d0
		bcc.s	return_1065C
		move.b	$26(a0),d0
		jsr	(CalcSine).l
		muls.w	#$50,d0
		asr.l	#8,d0
		tst.w	$14(a0)
		bmi.s	loc_10652
		tst.w	d0
		bpl.s	loc_1064C
		asr.l	#2,d0

loc_1064C:
		add.w	d0,$14(a0)
		rts
; ===========================================================================

loc_10652:
		tst.w	d0
		bmi.s	loc_10658
		asr.l	#2,d0

loc_10658:
		add.w	d0,$14(a0)

return_1065C:
		rts
; End of function Sonic_RollRepel

; ---------------------------------------------------------------------------
; Subroutine to push Sonic down a slope
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1065E:
Sonic_SlopeRepel:
		nop
		tst.b	$38(a0)
		bne.s	return_10698
		tst.w	$2E(a0)
		bne.s	loc_1069A
		move.b	$26(a0),d0
		addi.b	#$20,d0
		andi.b	#$C0,d0
		beq.s	return_10698
		move.w	$14(a0),d0
		bpl.s	+
		neg.w	d0
+
		cmpi.w	#$280,d0
		bcc.s	return_10698
		clr.w	$14(a0)
		bset	#1,$22(a0)
		move.w	#$1E,$2E(a0)

return_10698:
		rts
; ===========================================================================

loc_1069A:
		subq.w	#1,$2E(a0)
		rts
; End of function Sonic_SlopeRepel

; ---------------------------------------------------------------------------
; Subroutine to return Sonic's angle to 0 as he jumps
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_106A0:
Sonic_JumpAngle:
		move.b	$26(a0),d0	; get Sonic's angle
		beq.s	Sonic_JumpFlip	; if already 0, branch
		bpl.s	loc_106B0	; if higher than 0, branch

		addq.b	#2,d0		; increase angle
		bcc.s	BranchTo_Sonic_JumpAngleSet
		moveq	#0,d0
; loc_106AE:
BranchTo_Sonic_JumpAngleSet:
		bra.s	Sonic_JumpAngleSet
; ===========================================================================

loc_106B0:
		subq.b	#2,d0		; decrease angle
		bcc.s	Sonic_JumpAngleSet
		moveq	#0,d0
; loc_106B6:
Sonic_JumpAngleSet:
		move.b	d0,$26(a0)
; End of function Sonic_JumpAngle
	; continue straight to Sonic_JumpFlip

; ---------------------------------------------------------------------------
; Updates Sonic's secondary angle if he's tumbling
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_106BA:
Sonic_JumpFlip:
		move.b	$27(a0),d0
		beq.s	return_106FE
		tst.w	$14(a0)
		bmi.s	Sonic_JumpLeftFlip
; loc_106C6:
Sonic_JumpRightFlip:
		move.b	$2D(a0),d1
		add.b	d1,d0
		bcc.s	BranchTo_Sonic_JumpFlipSet
		subq.b	#1,$2C(a0)
		bcc.s	BranchTo_Sonic_JumpFlipSet
		move.b	#0,$2C(a0)
		moveq	#0,d0
; loc_106DC:
BranchTo_Sonic_JumpFlipSet:
		bra.s   Sonic_JumpFlipSet
; ===========================================================================
; loc_106DE:
Sonic_JumpLeftFlip:
		tst.b	$29(a0)
		bne.s	Sonic_JumpRightFlip
		move.b	$2D(a0),d1
		sub.b	d1,d0
		bcc.s	Sonic_JumpFlipSet
		subq.b	#1,$2C(a0)
		bcc.s	Sonic_JumpFlipSet
		move.b	#0,$2C(a0)
		moveq	#0,d0
; loc_106FA:
Sonic_JumpFlipSet:
		move.b	d0,$27(a0)

return_106FE:		
		rts
; End of function Sonic_JumpAngle

; ---------------------------------------------------------------------------
; Subroutine for Sonic to interact with the floor and walls when he's in the air
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10700: Sonic_Floor:
Sonic_DoLevelCollision:
		move.l	#Primary_Collision,(Collision_addr).w
		cmpi.b	#$C,$3E(a0)
		beq.s	loc_10718
		move.l	#Secondary_Collision,(Collision_addr).w

loc_10718:
		move.b	$3F(a0),d5
		move.w	$10(a0),d1
		move.w	$12(a0),d2
		jsr	(CalcAngle).l
		move.b	d0,$2B(a0)
		subi.b	#$20,d0
		andi.b	#$C0,d0
		cmpi.b	#$40,d0
		beq.w	Sonic_HitLeftWall
		cmpi.b	#$80,d0
		beq.w	Sonic_HitCeilingAndWalls
		cmpi.b	#$C0,d0
		beq.w	loc_108AA
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	loc_10760
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_10760:
		bsr.w	loc_1397A
		tst.w	d1
		bpl.s	loc_10772
		add.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_10772:
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	return_107EA
		move.b	$12(a0),d2
		addq.b	#8,d2
		neg.b	d2
		cmp.b	d2,d1
		bge.s	loc_1078A
		cmp.b	d2,d0
		blt.s	return_107EA

loc_1078A:
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	#0,$1C(a0)
		move.b	d3,d0
		addi.b	#$20,d0
		andi.b	#$40,d0
		bne.s	loc_107C8
		move.b	d3,d0
		addi.b	#$10,d0
		andi.b	#$20,d0
		beq.s	loc_107BA
		asr.w	$12(a0)
		bra.s	loc_107DC
; ===========================================================================

loc_107BA:
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)
		rts
; ===========================================================================

loc_107C8:
		move.w	#0,$10(a0)	; stop Sonic since he hit a wall
		cmpi.w	#$FC0,$12(a0)
		ble.s	loc_107DC
		move.w	#$FC0,$12(a0)

loc_107DC:
		move.w	$12(a0),$14(a0)
		tst.b	d3
		bpl.s	return_107EA
		neg.w	$14(a0)

return_107EA:
		rts
; ===========================================================================
; loc_107EC:
Sonic_HitLeftWall:
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	Sonic_HitCeiling
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)
		move.w	$12(a0),$14(a0)
		rts
; ===========================================================================
; loc_10806:
Sonic_HitCeiling:
		bsr.w	Sonic_DontRunOnWalls
		tst.w	d1
		bpl.s	Sonic_HitFloor
		sub.w	d1,$C(a0)
		tst.w	$12(a0)
		bpl.s	return_1081E
		move.w	#0,$12(a0)

return_1081E:
		rts
; ===========================================================================
; loc_10820:
Sonic_HitFloor:
		tst.w	$12(a0)
		bmi.s	return_1084C
		bsr.w	loc_13736
		tst.w	d1
		bpl.s	return_1084C
		add.w	d1,$C(a0)
		move.b	d3,$26(a0)
		bsr.w	Sonic_ResetOnFloor
		move.b	#0,$1C(a0)
		move.w	#0,$12(a0)
		move.w	$10(a0),$14(a0)

return_1084C:
		rts
; ===========================================================================
; loc_1084E:
Sonic_HitCeilingAndWalls:
		bsr.w	Sonic_HitWall
		tst.w	d1
		bpl.s	loc_10860
		sub.w	d1,8(a0)
		move.w	#0,$10(a0)

loc_10860:
		bsr.w     loc_1397A
		tst.w   D1
		bpl.s   loc_10872
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_10872:
		bsr.w     Sonic_DontRunOnWalls    ; loc_139CC
		tst.w   D1
		bpl.s   loc_108A8
		sub.w   D1, $000C(A0)
		move.b  D3, D0
		addi.b  #$20, D0
		andi.b  #$40, D0
		bne.s   loc_10892
		move.w  #$0000, $0012(A0)
		rts
loc_10892:
		move.b  D3, $0026(A0)
		bsr.w     Sonic_ResetOnFloor      ; loc_1090C
		move.w  $0012(A0), $0014(A0)
		tst.b   D3
		bpl.s   loc_108A8
		neg.w   $0014(A0)
loc_108A8:
		rts
loc_108AA:
		bsr.w     loc_1397A
		tst.w   D1
		bpl.s   loc_108C4
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
		move.w  $0012(A0), $0014(A0)
		rts
loc_108C4:
		bsr.w     Sonic_DontRunOnWalls    ; loc_139CC
		tst.w   D1
		bpl.s   loc_108DE
		sub.w   D1, $000C(A0)
		tst.w   $0012(A0)
		bpl.s   loc_108DC
		move.w  #$0000, $0012(A0)
loc_108DC:
		rts
loc_108DE:
		tst.w   $0012(A0)
		bmi.s   loc_1090A
		bsr.w     loc_13736
		tst.w   D1
		bpl.s   loc_1090A
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		bsr.w     Sonic_ResetOnFloor      ; loc_1090C
		move.b  #$00, $001C(A0)
		move.w  #$0000, $0012(A0)
		move.w  $0010(A0), $0014(A0)
loc_1090A:
		rts
; End of function Sonic_DoLevelCollision

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to reset Sonic's mode when he lands on the floor
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_1090C:
Sonic_ResetOnFloor:
		btst	#4,$22(a0)
		beq.s	loc_1091A
		nop
		nop
		nop

loc_1091A:
		bclr	#5,$22(a0)
		bclr	#1,$22(a0)
		bclr	#4,$22(a0)
		btst	#2,$22(a0)
		beq.s	loc_10950
		bclr	#2,$22(a0)
		move.b	#$13,$16(a0)
		move.b	#9,$17(a0)
		move.b	#0,$1C(a0)
		subq.w	#5,$C(a0)

loc_10950:
		move.b	#0,$3C(a0)
		move.w	#0,(Chain_Bonus_counter).w
		move.b	#0,$27(a0)
		move.b	#0,$29(a0)
		rts
; End of function Sonic_ResetOnFloor

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he gets hurt
; ---------------------------------------------------------------------------
; loc_1096A: Sonic_Hurt:
Obj01_Hurt:
		tst.b	$25(a0)
		bmi.w	Sonic_HurtInstantRecover
		jsr	(SpeedToPos).l
		addi.w	#$30,$12(a0)
		btst	#6,$22(a0)
		beq.s	loc_1098C
		subi.w	#$20,$12(a0)

loc_1098C:		    
		bsr.w	Sonic_HurtStop
		bsr.w	Sonic_LevelBound
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l
; ===========================================================================
; loc_109A6:
Sonic_HurtStop:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$E0,d0
		cmp.w	$C(a0),d0
		bcs.w	JmpTo_KillSonic
		bsr.w	Sonic_DoLevelCollision
		btst	#1,$22(a0)
		bne.s	+	; rts
		moveq	#0,d0
		move.w	d0,$12(a0)
		move.w	d0,$10(a0)
		move.w	d0,$14(a0)
		move.b	#0,$1C(a0)
		subq.b	#2,$24(a0)
		move.w	#$78,$30(a0)
+
		rts
; End of function Obj01_Hurt

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to make Sonic recover control after getting hit but before landing
; ---------------------------------------------------------------------------
; loc_109E2:
Sonic_HurtInstantRecover:
		subq.b	#2,$24(a0)
		move.b	#0,$25(a0)
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l
; End of function Sonic_HurtInstantRecover

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he dies
; ---------------------------------------------------------------------------
; loc_109FE: Sonic_Death:
Obj01_Dead:
		bsr.w	CheckGameOver
		jsr	(ObjectFall).l
		bsr.w	Sonic_RecordPos
		bsr.w	Sonic_Animate
		bsr.w	LoadSonicDynPLC
		jmp	(DisplaySprite).l

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10A1A: Sonic_GameOver:
CheckGameOver:
		move.w	(Camera_Max_Y_pos_now).w,d0
		addi.w	#$100,d0
		cmp.w	$C(a0),d0
		bcc.w	return_10A9C
		move.w	#-$38,$12(a0)
		addq.b	#2,$24(a0)
		clr.b	(Update_HUD_timer).w
		addq.b	#1,(Update_HUD_lives).w
		subq.b	#1,(Life_count).w
		bne.s	Obj01_ResetLevel
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w		 
		move.b	#1,($FFFFB0DA).w
		clr.b	(Time_Over_flag).w
; loc_10A5E:
Obj01_Finished:
		move.w	#MusID_GameOver,d0
		jsr	(PlayMusic).l
		moveq	#3,d0
		jmp	(LoadPLC).l
; End of function CheckGameOver

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when the level is restarted
; ---------------------------------------------------------------------------
; loc_10A70:
Obj01_ResetLevel:
		move.w	#$3C,$3A(a0)
		tst.b	(Time_Over_flag).w
		beq.s	return_10A9C
		move.w	#0,$3A(a0)
		move.b	#$39,($FFFFB080).w
		move.b	#$39,($FFFFB0C0).w
		move.b	#2,($FFFFB09A).w
		move.b	#3,($FFFFB0DA).w
		bra.s	Obj01_Finished

return_10A9C:
		rts
; End of function Obj01_ResetLevel

; ===========================================================================
; ---------------------------------------------------------------------------
; Sonic when he's offscreen and waiting for the level to restart
; ---------------------------------------------------------------------------
; loc_10A9E: Sonic_ResetLevel:
Obj01_Gone:
		tst.w	$3A(a0)
		beq.s	+
		subq.w	#1,$3A(a0)
		bne.s	+
		move.w	#1,(Level_Inactive_flag).w
+
		rts
; End of function Obj01_Gone

;=============================================================================== 
; Sub Routine Sonic_Animate
; [ Begin ]		         
;===============================================================================		  
Sonic_Animate: ; loc_10AB2:
		lea     (Sonic_AnimateData).l, A1 ; loc_10CB4
		moveq   #$00, D0
		move.b  $001C(A0), D0
		cmp.b   $001D(A0), D0
		beq.s   loc_10ADA
		move.b  D0, $001D(A0)
		move.b  #$00, $001B(A0)
		move.b  #$00, $001E(A0)
		bclr    #$05, $0022(A0)
loc_10ADA:
		add.w   D0, D0
		adda.w  $00(A1, D0), A1
		move.b  (A1), D0
		bmi.s   loc_10B4A
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		subq.b  #$01, $001E(A0) 
		bpl.s   loc_10B18
		move.b  D0, $001E(A0)             
loc_10B00:		
		moveq   #$00, D1
		move.b  $001B(A0), D1
		move.b  $01(A1, D1), D0
		cmpi.b  #$F0, D0
		bcc.s   loc_10B1A
loc_10B10:		
		move.b  D0, $001A(A0)
		addq.b  #$01, $001B(A0)
loc_10B18:		
		rts
loc_10B1A:
		addq.b  #$01, D0
		bne.s   loc_10B2A
		move.b  #$00, $001B(A0)
		move.b  $0001(A1), D0
		bra.s   loc_10B10
loc_10B2A:
		addq.b  #$01, D0
		bne.s   loc_10B3E
		move.b  $02(A1, D1), D0
		sub.b   D0, $001B(A0)
		sub.b   D0, D1
		move.b  $01(A1, D1), D0
		bra.s   loc_10B10
loc_10B3E:
		addq.b  #$01, D0
		bne.s   loc_10B48
		move.b  $02(A1, D1), $001C(A0)
loc_10B48: 
		rts            
loc_10B4A: 
		subq.b  #$01, $001E(A0)
		bpl.s   loc_10B18
		addq.b  #$01, D0
		bne.w     loc_10C3E
		moveq   #$00, D0
		move.b  $0027(A0), D0
		bne.w     loc_10BD8
		moveq   #$00, D1
		move.b  $0026(A0), D0
		move.b  $0022(A0), D2
		andi.b  #$01, D2
		bne.s   loc_10B72
		not.b  d0
loc_10B72:
		addi.b  #$10, D0
		bpl.s   loc_10B7A
		moveq   #$03, D1
loc_10B7A:
		andi.b  #$FC, $0001(A0)
		eor.b   D1, D2
		or.b    D2, $0001(A0)
		btst    #$05, $0022(A0)
		bne.w    loc_10C82
		lsr.b   #$04, D0
		andi.b  #$06, D0
		move.w  $0014(A0), D2
		bpl.s   loc_10B9E
		neg.w   D2
loc_10B9E:
		lea     (Sonic_Animate_Run).l, A1 ; loc_10D00
		cmpi.w  #$0600, D2
		bcc.s   loc_10BB0
		lea     (Sonic_Animate_Walk).l, A1 ; loc_10CF2
loc_10BB0:
		move.b  D0, D1
		lsr.b   #$01, D1
		add.b   D1, D0
		add.b   D0, D0
		add.b   D0, D0
		move.b  D0, D3
		neg.w   D2
		addi.w  #$0800, D2
		bpl.s   loc_10BC6
		moveq   #$00, D2
loc_10BC6:
		lsr.w   #$08, D2
		lsr.w   #$01, D2
		move.b  D2, $001E(A0)
		bsr.w     loc_10B00
		add.b   D3, $001A(A0)
		rts    
loc_10BD8:
		move.b  $0027(A0), D0
		moveq   #$00, D1
		move.b  $0022(A0), D2
		andi.b  #$01, D2
		bne.s   loc_10C06
		andi.b  #$FC, $0001(A0)
		addi.b  #$0B, D0
		divu.w  #$0016, D0
		addi.b  #$9B, D0
		move.b  D0, $001A(A0)
		move.b  #$00, $001E(A0)
		rts
loc_10C06:
		andi.b  #$FC, $0001(A0)
		tst.b   $0029(A0)
		beq.s   loc_10C1E
		ori.b   #$01, $0001(A0)
		addi.b  #$0B, D0
		bra.s   loc_10C2A
loc_10C1E:
		ori.b   #$03, $0001(A0)
		neg.b   D0
		addi.b  #$8F, D0
loc_10C2A:
		divu.w  #$0016, D0
		addi.b  #$9B, D0
		move.b  D0, $001A(A0)
		move.b  #$00, $001E(A0)
		rts 
loc_10C3E:
		addq.b  #$01, D0
		bne.s   loc_10C82
		move.w  $0014(A0), D2
		bpl.s   loc_10C4A
		neg.w   D2
loc_10C4A:
		lea     (Sonic_Animate_Roll2).l, A1 ; loc_10D18
		cmpi.w  #$0600, D2
		bcc.s   loc_10C5C
		lea     (Sonic_Animate_Roll).l, A1 ; loc_10D0E
loc_10C5C:
		neg.w   D2
		addi.w  #$0400, D2
		bpl.s   loc_10C66
		moveq   #$00, D2
loc_10C66:
		lsr.w   #$08, D2
		move.b  D2, $001E(A0)
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		bra.w     loc_10B00
loc_10C82:		
		move.w  $0014(A0), D2
		bmi.s   loc_10C8A
		neg.w   D2
loc_10C8A:
		addi.w  #$0800, D2
		bpl.s   loc_10C92
		moveq   #$00, D2
loc_10C92:
		lsr.w   #$06, D2
		move.b  D2, $001E(A0)
		lea     (Sonic_Animate_Push).l, A1 ; loc_10D22
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		bra.w     loc_10B00				 
Sonic_AnimateData: ; loc_10CB4:
		dc.w    Sonic_Animate_Walk-Sonic_AnimateData        ; loc_10CF2
		dc.w    Sonic_Animate_Run-Sonic_AnimateData         ; loc_10D00
		dc.w    Sonic_Animate_Roll-Sonic_AnimateData        ; loc_10D0E
		dc.w    Sonic_Animate_Roll2-Sonic_AnimateData       ; loc_10D18 
		dc.w    Sonic_Animate_Push-Sonic_AnimateData        ; loc_10D22
		dc.w    Sonic_Animate_Wait-Sonic_AnimateData        ; loc_10D30
		dc.w    Sonic_Animate_Balance-Sonic_AnimateData     ; loc_10D59
		dc.w    Sonic_Animate_LookUp-Sonic_AnimateData      ; loc_10D5D
		dc.w    Sonic_Animate_Duck-Sonic_AnimateData        ; loc_10D62
		dc.w    Sonic_Animate_Spindash-Sonic_AnimateData    ; loc_10D67
		dc.w    Sonic_Animate_WallRecoil1-Sonic_AnimateData ; loc_10D74
		dc.w    Sonic_Animate_WallRecoil2-Sonic_AnimateData ; loc_10D77
		dc.w    Sonic_Animate_0x0C-Sonic_AnimateData        ; loc_10D7D
		dc.w    Sonic_Animate_Stop-Sonic_AnimateData        ; loc_10D81
		dc.w    Sonic_Animate_Float1-Sonic_AnimateData      ; loc_10D8C
		dc.w    Sonic_Animate_Float2-Sonic_AnimateData      ; loc_10D90
		dc.w    Sonic_Animate_0x10-Sonic_AnimateData        ; loc_10D97
		dc.w    Sonic_Animate_S1LzHang-Sonic_AnimateData    ; loc_10D9B
		dc.w    Sonic_Animate_Unused_0x12-Sonic_AnimateData ; loc_10D9F
		dc.w    Sonic_Animate_Unused_0x13-Sonic_AnimateData ; loc_10DA5
		dc.w    Sonic_Animate_Unused_0x14-Sonic_AnimateData ; loc_10DAA
		dc.w    Sonic_Animate_Bubble-Sonic_AnimateData      ; loc_10DAD
		dc.w    Sonic_Animate_Death1-Sonic_AnimateData      ; loc_10DB4
		dc.w    Sonic_Animate_Drown-Sonic_AnimateData       ; loc_10DB7
		dc.w    Sonic_Animate_Death2-Sonic_AnimateData      ; loc_10DBA
		dc.w    Sonic_Animate_Unused_0x19-Sonic_AnimateData ; loc_10DBD
		dc.w    Sonic_Animate_Hurt-Sonic_AnimateData        ; loc_10DC6
		dc.w    Sonic_Animate_S1LzSlide-Sonic_AnimateData   ; loc_10DC9
		dc.w    Sonic_Animate_0x1C-Sonic_AnimateData        ; loc_10DCD
		dc.w    Sonic_Animate_Float3-Sonic_AnimateData      ; loc_10DD1
		dc.w    Sonic_Animate_0x1E-Sonic_AnimateData        ; loc_10DD8
Sonic_Animate_Walk: ; loc_10CF2:
		dc.b    $FF, $10, $11, $12, $13, $14, $15, $16, $17, $0C, $0D, $0E, $0F, $FF
Sonic_Animate_Run: ; loc_10D00:
		dc.b    $FF, $3C, $3D, $3E, $3F, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
Sonic_Animate_Roll: ; loc_10D0E:
		dc.b    $FE, $6C, $70, $6D, $70, $6E, $70, $6F, $70, $FF
Sonic_Animate_Roll2: ; loc_10D18:
		dc.b    $FE, $6C, $70, $6D, $70, $6E, $70, $6F, $70, $FF
Sonic_Animate_Push: ; loc_10D22:
		dc.b    $FD, $77, $78, $79, $7A, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
Sonic_Animate_Wait: ; loc_10D30:		
		dc.b    $07, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02
		dc.b    $03, $03, $03, $04, $04, $05, $05, $FE, $04
Sonic_Animate_Balance: ; loc_10D59:		 
		dc.b    $07, $89, $8A, $FF
Sonic_Animate_LookUp: ; loc_10D5D:		
		dc.b    $05, $06, $07, $FE, $01
Sonic_Animate_Duck: ; loc_10D62:		  
		dc.b    $05, $7F, $80, $FE, $01
Sonic_Animate_Spindash: ; loc_10D67:		
		dc.b    $00, $71, $72, $71, $73, $71, $74, $71, $75, $71, $76, $71, $FF 
Sonic_Animate_WallRecoil1: ; loc_10D74:		
		dc.b    $3F, $82, $FF
Sonic_Animate_WallRecoil2: ; loc_10D77:
		dc.b    $07, $08, $08, $09, $FD, $05
Sonic_Animate_0x0C: ; loc_10D7D:		
		dc.b    $07, $09, $FD, $05
Sonic_Animate_Stop: ; loc_10D81:		 
		dc.b    $03, $81, $82, $83, $84, $85, $86, $87, $88, $FE, $02
Sonic_Animate_Float1: ; loc_10D8C:		 
		dc.b    $07, $94, $96, $FF
Sonic_Animate_Float2: ; loc_10D90:		
		dc.b    $07, $91, $92, $93, $94, $95, $FF
Sonic_Animate_0x10: ; loc_10D97:		
		dc.b    $2F, $7E, $FD, $00
Sonic_Animate_S1LzHang: ; loc_10D9B:		
		dc.b    $05, $8F, $90, $FF
Sonic_Animate_Unused_0x12: ; loc_10D9F:		
		dc.b    $0F, $43, $43, $43, $FE, $01
Sonic_Animate_Unused_0x13: ; loc_10DA5:		
		dc.b    $0F, $43, $44, $FE, $01
Sonic_Animate_Unused_0x14: ; loc_10DAA:		
		dc.b    $3F, $49, $FF
Sonic_Animate_Bubble: ; loc_10DAD:		 
		dc.b    $0B, $97, $97, $12, $13, $FD, $00
Sonic_Animate_Death1: ; loc_10DB4:		 
		dc.b    $20, $9A, $FF
Sonic_Animate_Drown: ; loc_10DB7:		
		dc.b    $20, $99, $FF
Sonic_Animate_Death2: ; loc_10DBA:		 
		dc.b    $20, $98, $FF
Sonic_Animate_Unused_0x19: ; loc_10DBD: 
		dc.b    $03, $4E, $4F, $50, $51, $52, $00, $FE, $01
Sonic_Animate_Hurt: ; loc_10DC6:		
		dc.b    $40, $8D, $FF
Sonic_Animate_S1LzSlide: ; loc_10DC9:		  
		dc.b    $09, $8D, $8E, $FF
Sonic_Animate_0x1C: ; loc_10DCD:		
		dc.b    $77, $00, $FD, $00
Sonic_Animate_Float3: ; loc_10DD1:		
		dc.b    $03, $91, $92, $93, $94, $95, $FF
Sonic_Animate_0x1E: ; loc_10DD8:		
		dc.b    $03, $3C, $FD, $00
;=============================================================================== 
; Sub Routine Sonic_Animate
; [ End ]		         
;===============================================================================
		   
; ---------------------------------------------------------------------------
; Sonic pattern loading subroutine
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_10DDC: Load_Sonic_Dynamic_PLC:
LoadSonicDynPLC:
		moveq	#0,d0
		move.b	$1A(a0),d0
		cmp.b	(Sonic_LastLoadedDPLC).w,d0
		beq.s	return_10E2E
		move.b	d0,(Sonic_LastLoadedDPLC).w
		lea	(MapRUnc_Sonic).l,a2
		add.w	d0,d0
		adda.w	(a2,d0.w),a2
		move.w	(a2)+,d5
		subq.w	#1,d5
		bmi.s	return_10E2E
		move.w	#$F000,d4
; loc_10E02:
SPLC_ReadEntry:
		moveq	#0,d1
		move.w	(a2)+,d1
		move.w	d1,d3
		lsr.w	#8,d3
		andi.w	#$F0,d3
		addi.w	#$10,d3
		andi.w	#$FFF,d1
		lsl.l	#5,d1
		addi.l	#ArtUnc_Sonic,d1
		move.w	d4,d2
		add.w	d3,d4
		add.w	d3,d4
		jsr	(QueueDMATransfer).l
		dbf	d5,SPLC_ReadEntry

return_10E2E:
		rts
; End of function LoadSonicDynPLC

; ===========================================================================
; loc_10E30:
JmpTo_KillSonic:	; JmpTo
		jmp	(KillSonic).l

		align 4

;=============================================================================== 
; Object 0x02 - Tails
; [ Begin ]
;===============================================================================  
Obj_0x02_Tails: ; loc_10E38:		 
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  Tails_Index(PC, D0), D1      ; loc_10E46
		jmp     Tails_Index(PC, D1)          ; loc_10E46
Tails_Index: ; loc_10E46:
		dc.w    Tails_Main-Tails_Index       ; loc_10E50
		dc.w    Tails_Control-Tails_Index    ; loc_10EB4
		dc.w    Tails_Hurt-Tails_Index       ; loc_11AC4
		dc.w    Tails_Death-Tails_Index      ; loc_11B32
		dc.w    Tails_ResetLevel-Tails_Index ; loc_11B8E
Tails_Main: ; loc_10E50:
		addq.b  #$02, $0024(A0)
		move.b  #$0F, $0016(A0)
		move.b  #$09, $0017(A0)
		move.l  #Tails_Mappings, $0004(A0) ; loc_6FB3C
		move.w  #$07A0, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$02, $0018(A0)
		move.b  #$18, $0019(A0)
		move.b  #$84, $0001(A0)
		move.w  #$0600, (Sonic_top_speed).w
		move.w  #$000C, (Sonic_acceleration).w
		move.w  #$0080, (Sonic_deceleration).w
		move.b  #$0C, $003E(A0)
		move.b  #$0D, $003F(A0)
		move.b  #$00, $002C(A0)
		move.b  #$04, $002D(A0)
		move.b  #$05, ($FFFFB1C0).w
Tails_Control: ; loc_10EB4:
		bsr.w     Tails_Control2          ; loc_10F96
		btst    #$00, $002A(A0)
		bne.s   Tails_ControlsLock      ; loc_10ED2
		moveq   #$00, D0
		move.b  $0022(A0), D0
		andi.w  #$0006, D0
		move.w  Tails_Modes(PC, D0), D1 ; loc_10EFA
		jsr     Tails_Modes(PC, D1)     ; loc_10EFA
Tails_ControlsLock: ; loc_10ED2:
		bsr.s   Tails_Display           ; loc_10F12
		bsr.w     Tails_RecordMoves       ; loc_11056
		move.b  (Primary_Angle).w, $0036(A0)
		move.b  (Secondary_Angle).w, $0037(A0)
		bsr.w     Tails_Animate           ; loc_11BA2
		tst.b   $002A(A0)
		bmi.s   loc_10EF4
		jsr     TouchResponse           ; loc_21160
loc_10EF4:
		bsr.w     Load_Tails_Dynamic_PLC  ; loc_11F42
		rts
Tails_Modes: ; loc_10EFA:
		dc.w    Tails_MdNormal-Tails_Modes  ; loc_11070
		dc.w    Tails_MdJump-Tails_Modes    ; loc_11098
		dc.w    Tails_MdRoll-Tails_Modes    ; loc_110C2
		dc.w    Tails_MdJump2-Tails_Modes   ; loc_110E2
; byte_10F02:
Tails_MusicList:	zoneOrderedTable 1,1
	zoneTableEntry.b	MusID_GHZ	; GHZ
	zoneTableEntry.b	MusID_GHZ	; OWZ
	zoneTableEntry.b	MusID_MTZ	; WZ
	zoneTableEntry.b	MusID_SSZ	; SSZ
	zoneTableEntry.b	MusID_MTZ	; MTZ
	zoneTableEntry.b	MusID_MTZ	; MTZ2
	zoneTableEntry.b	MusID_BOZ	; BLZ
	zoneTableEntry.b	MusID_HTZ	; HTZ
	zoneTableEntry.b	MusID_HPZ	; HPZ
	zoneTableEntry.b	MusID_RWZ	; RWZ
	zoneTableEntry.b	MusID_OOZ	; OOZ
	zoneTableEntry.b	MusID_DHZ	; DHZ
	zoneTableEntry.b	MusID_CNZ	; CNZ
	zoneTableEntry.b	MusID_CPZ	; CPZ
	zoneTableEntry.b	MusID_CPZ	; GCZ
	zoneTableEntry.b	MusID_NGHZ	; NGHZ
	; no *proper* entry for DEZ, so it instead uses the alignment to play sound $08
	;zoneTableEntry.b	MusID_DEZ	; DEZ
    zoneTableEnd
	even


;=============================================================================== 
; Sub Routine Tails_Display
; [ Begin ]		         
;===============================================================================				  
Tails_Display: ; loc_10F12:
		move.w  $0030(A0), D0
		beq.s   loc_10F20
		subq.w  #$01, $0030(A0)
		lsr.w   #$03, D0
		bcc.s   loc_10F26
loc_10F20:
		jsr     DisplaySprite           ; loc_D3C2
loc_10F26:
		tst.b   (Invincibility).w
		beq.s   loc_10F60
		tst.w   $0032(A0)
		beq.s   loc_10F60
		subq.w  #$01, $0032(A0)
		bne.s   loc_10F60
		tst.b   (Current_Boss_ID).w
		bne.s   loc_10F5A
		cmpi.w  #$000C, (Current_Air).w
		bcs.s   loc_10F5A
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		lea     Tails_MusicList(PC), A1  ; loc_10F02
		move.b  $00(A1, D0), D0
		jsr     (PlayMusic).l            ; loc_14C0
loc_10F5A:
		move.b  #$00, (Invincibility).w
loc_10F60:
		tst.b   (Speed_shoes).w
		beq.s   loc_10F94
		tst.w   $0034(A0)
		beq.s   loc_10F94
		subq.w  #$01, $0034(A0)
		bne.s   loc_10F94
		move.w  #$0600, (Sonic_top_speed).w
		move.w  #$000C, (Sonic_acceleration).w
		move.w  #$0080, (Sonic_deceleration).w
		move.b  #$00, (Speed_shoes).w
		move.w  #$00FC, D0
		jmp     (PlayMusic).l            ; loc_14C0
loc_10F94:
		rts  
;=============================================================================== 
; Sub Routine Tails_Display
; [ End ]		         
;===============================================================================   

;=============================================================================== 
; Sub Routine Tails_Control2
; [ Begin ]		         
;===============================================================================     
Tails_Control2: ; loc_10F96:
		move.b  (Ctrl_2_Held).w, D0
		andi.b  #$7F, D0
		beq.s   Tails_ControlNoKeysPressed    ; loc_10FAE
		move.w  #$0000, (unk_F700).w
		move.w  #$012C, (Tails_control_counter).w
		rts
Tails_ControlNoKeysPressed: ; loc_10FAE:
		tst.w   (Tails_control_counter).w
		beq.s   Tails_DoControl        ; loc_10FBA
		subq.w  #$01, (Tails_control_counter).w
		rts
Tails_DoControl: ; loc_10FBA:
		move.w  (Tails_CPU_routine).w, D0
		move.w  Tails_ControlIndex(PC, D0), D0 ; loc_10FC6
		jmp     Tails_ControlIndex(PC, D0)     ; loc_10FC6
Tails_ControlIndex: ; loc_10FC6:
		dc.w    Tails_Control_00-Tails_ControlIndex  ; loc_10FCE
		dc.w    Tails_Control_01-Tails_ControlIndex  ; loc_10FD6
		dc.w    Tails_Control_02-Tails_ControlIndex  ; loc_10FEA
		dc.w    Tails_ControlCopySonicMoves-Tails_ControlIndex ; loc_11024
Tails_Control_00: ; loc_10FCE:
		move.w  #$0006, (Tails_CPU_routine).w
		rts
Tails_Control_01: ; loc_10FD6:
		move.w  #$0006, (Tails_CPU_routine).w
		rts
		move.w  #$0040, (unk_F706).w
		move.w  #$0004, (Tails_CPU_routine).w
Tails_Control_02: ; loc_10FEA:
		move.w  #$0006, (Tails_CPU_routine).w
		rts
		move.w  (unk_F706).w, D1
		subq.w  #$01, D1
		cmpi.w  #$0010, D1
		bne.s   loc_11004
		move.w  #$0006, (Tails_CPU_routine).w
loc_11004:
		move.w  D1, (unk_F706).w
		lea     (unk_E600).w, A1
		lsl.b   #$02, D1
		addq.b  #$04, D1
		move.w  (unk_EEE0).w, D0
		sub.b   D1, D0
		move.w  $00(A1, D0), $0008(A0)
		move.w  $02(A1, D0), $000C(A0)
		rts
Tails_ControlCopySonicMoves: ; loc_11024:
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		bpl.s   loc_11030
		neg.w   D0
loc_11030:
		cmpi.w  #$00C0, D0
		bcs.s   loc_11038
		nop
loc_11038:
		lea     (Sonic_Pos_Record_Buf).w, A1
		move.w  #$0010, D1
		lsl.b   #$02, D1
		addq.b  #$04, D1
		move.w  (Sonic_Pos_Record_Index).w, D0
		sub.b   D1, D0
		lea     (Sonic_Stat_Record_Buf).w, A1
		move.w  $00(A1, D0), (Ctrl_2).w
		rts
		
;=============================================================================== 
; Sub Routine Tails_RecordMoves
; [ Begin ]		         
;===============================================================================    
Tails_RecordMoves: ; loc_11056:
		move.w  (Tails_Pos_Record_Index).w, D0
		lea     (Tails_Pos_Record_Buf).w, A1
		lea     $00(A1, D0), A1
		move.w  $0008(A0), (A1)+
		move.w  $000C(A0), (A1)+
		addq.b  #$04, (Tails_Pos_Record_Index+1).w
		rts
;=============================================================================== 
; Sub Routine Tails_RecordMoves
; [ End ]		         
;===============================================================================   
               
Tails_MdNormal: ; loc_11070:
		bsr.w     Tails_Spindash          ; loc_116D2
		bsr.w     Tails_Jump              ; loc_115E8
		bsr.w     Tails_SlopeResist       ; loc_1175E
		bsr.w     Tails_Move              ; loc_1110C
		bsr.w     Tails_Roll              ; loc_11582
		bsr.w     Tails_LevelBoundaries   ; loc_114FE
		jsr     SpeedToPos              ; loc_D27A
		bsr.w     AnglePos          ; loc_12D28
		bsr.w     Tails_SlopeRepel        ; loc_117D0
		rts
Tails_MdJump: ; loc_11098:
		bsr.w     Tails_JumpHeight        ; loc_11696
		bsr.w     Tails_ChgJumpDir        ; loc_11484
		bsr.w     Tails_LevelBoundaries   ; loc_114FE
		jsr     ObjectFall              ; loc_D24E
		btst    #$06, $0022(A0)
		beq.s   loc_110B8
		subi.w  #$0028, $0012(A0)
loc_110B8:
		bsr.w     Tails_JumpAngle         ; loc_11812
		bsr.w     Tails_Floor             ; loc_11872
		rts
Tails_MdRoll: ; loc_110C2:
		bsr.w     Tails_Jump              ; loc_115E8
		bsr.w     Tails_RollRepel         ; loc_11794
		bsr.w     Tails_RollSpeed         ; loc_1138C
		bsr.w     Tails_LevelBoundaries   ; loc_114FE
		jsr     SpeedToPos              ; loc_D27A
		bsr.w     AnglePos          ; loc_12D28
		bsr.w     Tails_SlopeRepel        ; loc_117D0
		rts
Tails_MdJump2: ; loc_110E2:
		bsr.w     Tails_JumpHeight        ; loc_11696
		bsr.w     Tails_ChgJumpDir        ; loc_11484
		bsr.w     Tails_LevelBoundaries   ; loc_114FE
		jsr     ObjectFall              ; loc_D24E
		btst    #$06, $0022(A0)
		beq.s   loc_11102
		subi.w  #$0028, $0012(A0)
loc_11102:
		bsr.w     Tails_JumpAngle         ; loc_11812
		bsr.w     Tails_Floor             ; loc_11872
		rts
		
;=============================================================================== 
; Sub Routine Tails_Move
; [ Begin ]		         
;===============================================================================		  
Tails_Move: ; loc_1110C:
		move.w  (Sonic_top_speed).w, D6
		move.w  (Sonic_acceleration).w, D5
		move.w  (Sonic_deceleration).w, D4
		tst.b   (Sliding_flag).w
		bne.w    loc_1121E
		tst.w   $002E(A0)
		bne.w    loc_111F2
		btst    #$02, (Ctrl_2_Held).w
		beq.s   loc_11134
		bsr.w     Tails_MoveLeft          ; loc_112AE
loc_11134:
		btst    #$03, (Ctrl_2_Held).w
		beq.s   loc_11140
		bsr.w     Tails_MoveRight         ; loc_11320
loc_11140:
		move.b  $0026(A0), D0
		addi.b  #$20, D0
		andi.b  #$C0, D0
		bne.w    loc_111F2
		tst.w   $0014(A0)
		bne.w    loc_111F2
		bclr    #$05, $0022(A0)
		move.b  #$05, $001C(A0)
		btst    #$03, $0022(A0)
		beq.s   Tails_Balance           ; loc_111A2
		moveq   #$00, D0
		move.b  $003D(A0), D0
		lsl.w   #$06, D0
		lea     ($FFFFB000).w, A1
		lea     $00(A1, D0), A1
		tst.b   $0022(A1)
		bmi.s   Tails_LookUp            ; loc_111D4
		moveq   #$00, D1
		move.b  $0019(A1), D1
		move.w  D1, D2
		add.w   D2, D2
		subq.w  #$04, D2
		add.w   $0008(A0), D1
		sub.w   $0008(A1), D1
		cmpi.w  #$0004, D1
		blt.s   loc_111C6
		cmp.w   D2, D1
		bge.s   loc_111B6
		bra.s   Tails_LookUp            ; loc_111D4 
;=============================================================================== 
Tails_Balance: ; loc_111A2:
		jsr     ObjHitFloor             ; loc_13898
		cmpi.w  #$000C, D1
		blt.s   Tails_LookUp            ; loc_111D4
		cmpi.b  #$03, $0036(A0)
		bne.s   loc_111BE
loc_111B6:
		bclr    #$00, $0022(A0)
		bra.s   loc_111CC
loc_111BE:
		cmpi.b  #$03, $0037(A0)
		bne.s   Tails_LookUp            ; loc_111D4
loc_111C6:
		bset    #$00, $0022(A0)
loc_111CC:
		move.b  #$06, $001C(A0)
		bra.s   loc_111F2
;===============================================================================               
Tails_LookUp: ; loc_111D4:
		btst    #$00, (Ctrl_2_Held).w
		beq.s   loc_111E4
		move.b  #$07, $001C(A0)
		bra.s   loc_111F2
loc_111E4:
		btst    #$01, (Ctrl_2_Held).w
		beq.s   loc_111F2
		move.b  #$08, $001C(A0)
loc_111F2:
		move.b  (Ctrl_2_Held).w, D0
		andi.b  #$0C, D0
		bne.s   loc_1121E
		move.w  $0014(A0), D0
		beq.s   loc_1121E
		bmi.s   loc_11212
		sub.w   D5, D0
		bcc.s   loc_1120C
		move.w  #$0000, D0
loc_1120C:
		move.w  D0, $0014(A0)
		bra.s   loc_1121E
loc_11212:
		add.w   D5, D0
		bcc.s   loc_1121A
		move.w  #$0000, D0
loc_1121A:
		move.w  D0, $0014(A0)
loc_1121E:
		move.b  $0026(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  $0014(A0), D1
		asr.l   #$08, D1
		move.w  D1, $0010(A0)
		muls.w  $0014(A0), D0
		asr.l   #$08, D0
		move.w  D0, $0012(A0)
loc_1123C:		
		move.b  $0026(A0), D0
		addi.b  #$40, D0
		bmi.s   loc_112AC
		move.b  #$40, D1
		tst.w   $0014(A0)
		beq.s   loc_112AC
		bmi.s   loc_11254
		neg.w   D1
loc_11254:
		move.b  $0026(A0), D0
		add.b   D1, D0
		move.w  D0, -(A7)
		bsr.w     Sonic_WalkSpeed         ; loc_1366C
		move.w  (A7)+, D0
		tst.w   D1
		bpl.s   loc_112AC
		asl.w   #$08, D1
		addi.b  #$20, D0
		andi.b  #$C0, D0
		beq.s   loc_112A8
		cmpi.b  #$40, D0
		beq.s   loc_11296
		cmpi.b  #$80, D0
		beq.s   loc_11290
		add.w   D1, $0010(A0)
		bset    #$05, $0022(A0)
		move.w  #$0000, $0014(A0)
		rts
loc_11290:
		sub.w   D1, $0012(A0)
		rts
loc_11296:
		sub.w   D1, $0010(A0)
		bset    #$05, $0022(A0)
		move.w  #$0000, $0014(A0)
		rts
loc_112A8:
		add.w   D1, $0012(A0)
loc_112AC:
		rts
;=============================================================================== 
; Sub Routine Tails_Move
; [ End ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine Tails_MoveLeft
; [ Begin ]		         
;===============================================================================		   
Tails_MoveLeft: ; loc_112AE:
		move.w  $0014(A0), D0
		beq.s   loc_112B6
		bpl.s   loc_112E8
loc_112B6:
		bset    #$00, $0022(A0)
		bne.s   loc_112CA
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
loc_112CA:
		sub.w   D5, D0
		move.w  D6, D1
		neg.w   D1
		cmp.w   D1, D0
		bgt.s   loc_112DC
		add.w   D5, D0
		cmp.w   D1, D0
		ble.s   loc_112DC
		move.w  D1, D0
loc_112DC:
		move.w  D0, $0014(A0)
		move.b  #$00, $001C(A0)
		rts
loc_112E8:
		sub.w   D4, D0
		bcc.s   loc_112F0
		move.w  #$FF80, D0
loc_112F0:
		move.w  D0, $0014(A0)
		move.b  $0026(A0), D0
		addi.b  #$20, D0
		andi.b  #$C0, D0
		bne.s   loc_1131E
		cmpi.w  #$0400, D0
		blt.s   loc_1131E
		move.b  #$0D, $001C(A0)
		bclr    #$00, $0022(A0)
		move.w  #$00A4, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1131E:
		rts
;=============================================================================== 
; Sub Routine Tails_MoveLeft
; [ End ]		         
;===============================================================================   
              
;=============================================================================== 
; Sub Routine Tails_MoveRight
; [ Begin ]		         
;===============================================================================		 
Tails_MoveRight: ; loc_11320:
		move.w  $0014(A0), D0
		bmi.s   loc_11354
		bclr    #$00, $0022(A0)
		beq.s   loc_1133A
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
loc_1133A:
		add.w   D5, D0
		cmp.w   D6, D0
		blt.s   loc_11348
		sub.w   D5, D0
		cmp.w   D6, D0
		bge.s   loc_11348
		move.w  D6, D0
loc_11348:
		move.w  D0, $0014(A0)
		move.b  #$00, $001C(A0)
		rts
loc_11354:
		add.w   D4, D0
		bcc.s   loc_1135C
		move.w  #$0080, D0
loc_1135C:
		move.w  D0, $0014(A0)
		move.b  $0026(A0), D0
		addi.b  #$20, D0
		andi.b  #$C0, D0
		bne.s   loc_1138A
		cmpi.w  #$FC00, D0
		bgt.s   loc_1138A
		move.b  #$0D, $001C(A0)
		bset    #$00, $0022(A0)
		move.w  #$00A4, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1138A:
		rts
;=============================================================================== 
; Sub Routine Tails_MoveRight
; [ End ]		         
;===============================================================================  
		 
;=============================================================================== 
; Sub Routine Tails_RollSpeed
; [ Begin ]		         
;===============================================================================		 
Tails_RollSpeed: ; loc_1138C:
		move.w  (Sonic_top_speed).w, D6
		asl.w   #$01, D6
		move.w  (Sonic_acceleration).w, D5
		asr.w   #$01, D5
		move.w  (Sonic_deceleration).w, D4
		asr.w   #$02, D4
		tst.b   (Sliding_flag).w
		bne.w    loc_11408
		tst.w   $002E(A0)
		bne.s   loc_113C4
		btst    #$02, (Ctrl_2_Held).w
		beq.s   loc_113B8
		bsr.w     Tails_RollLeft          ; loc_1143E
loc_113B8:
		btst    #$03, (Ctrl_2_Held).w
		beq.s   loc_113C4
		bsr.w     Tails_RollRight         ; loc_11462
loc_113C4:
		move.w  $0014(A0), D0
		beq.s   loc_113E6
		bmi.s   loc_113DA
		sub.w   D5, D0
		bcc.s   loc_113D4
		move.w  #$0000, D0
loc_113D4:
		move.w  D0, $0014(A0)
		bra.s   loc_113E6
loc_113DA:
		add.w   D5, D0
		bcc.s   loc_113E2
		move.w  #$0000, D0
loc_113E2:
		move.w  D0, $0014(A0)
loc_113E6:
		tst.w   $0014(A0)
		bne.s   loc_11408
		bclr    #$02, $0022(A0)
		move.b  #$0F, $0016(A0)
		move.b  #$09, $0017(A0)
		move.b  #$05, $001C(A0)
		subq.w  #$05, $000C(A0)
loc_11408:
		move.b  $0026(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  $0014(A0), D0
		asr.l   #$08, D0
		move.w  D0, $0012(A0)
		muls.w  $0014(A0), D1
		asr.l   #$08, D1
		cmpi.w  #$1000, D1
		ble.s   loc_1142C
		move.w  #$1000, D1
loc_1142C:
		cmpi.w  #$F000, D1
		bge.s   loc_11436
		move.w  #$F000, D1
loc_11436:
		move.w  D1, $0010(A0)
		bra.w     loc_1123C
;=============================================================================== 
; Sub Routine Tails_RollSpeed
; [ End ]		         
;===============================================================================
  
;=============================================================================== 
; Sub Routine Tails_RollLeft
; [ Begin ]		         
;===============================================================================		   
Tails_RollLeft: ; loc_1143E:
		move.w  $0014(A0), D0
		beq.s   loc_11446
		bpl.s   loc_11454
loc_11446:
		bset    #$00, $0022(A0)
		move.b  #$02, $001C(A0)
		rts
loc_11454:
		sub.w   D4, D0
		bcc.s   loc_1145C
		move.w  #$FF80, D0
loc_1145C:
		move.w  D0, $0014(A0)
		rts
;=============================================================================== 
; Sub Routine Tails_RollLeft
; [ End ]		         
;===============================================================================
   
;=============================================================================== 
; Sub Routine Tails_RollRight
; [ Begin ]		         
;===============================================================================		   
Tails_RollRight: ; loc_11462:
		move.w  $0014(A0), D0
		bmi.s   loc_11476
		bclr    #$00, $0022(A0)
		move.b  #$02, $001C(A0)
		rts
loc_11476:
		add.w   D4, D0
		bcc.s   loc_1147E
		move.w  #$0080, D0
loc_1147E:
		move.w  D0, $0014(A0)
		rts
;=============================================================================== 
; Sub Routine Tails_RollRight
; [ End ]		         
;===============================================================================  
		  
;=============================================================================== 
; Sub Routine Tails_ChgJumpDir
; [ Begin ]		         
;===============================================================================		  
Tails_ChgJumpDir: ; loc_11484:
		move.w  (Sonic_top_speed).w, D6
		move.w  (Sonic_acceleration).w, D5
		asl.w   #$01, D5
		btst    #$04, $0022(A0)
		bne.s   loc_114CE
		move.w  $0010(A0), D0
		btst    #$02, (Ctrl_2_Held).w
		beq.s   loc_114B4
		bset    #$00, $0022(A0)
		sub.w   D5, D0
		move.w  D6, D1
		neg.w   D1
		cmp.w   D1, D0
		bgt.s   loc_114B4
		move.w  D1, D0
loc_114B4:
		btst    #$03, (Ctrl_2_Held).w
		beq.s   loc_114CA
		bclr    #$00, $0022(A0)
		add.w   D5, D0
		cmp.w   D6, D0
		blt.s   loc_114CA
		move.w  D6, D0
loc_114CA:
		move.w  D0, $0010(A0)
loc_114CE:
		cmpi.w  #$FC00, $0012(A0)
		bcs.s   loc_114FC
		move.w  $0010(A0), D0
		move.w  D0, D1
		asr.w   #$05, D1
		beq.s   loc_114FC
		bmi.s   loc_114F0
		sub.w   D1, D0
		bcc.s   loc_114EA
		move.w  #$0000, D0
loc_114EA:
		move.w  D0, $0010(A0)
		rts
loc_114F0:
		sub.w   D1, D0
		bcs.s   loc_114F8
		move.w  #$0000, D0
loc_114F8:
		move.w  D0, $0010(A0)
loc_114FC:
		rts 
;=============================================================================== 
; Sub Routine Tails_ChgJumpDir
; [ End ]		         
;===============================================================================
		    
;=============================================================================== 
; Sub Routine Tails_LevelBoundaries
; [ Begin ]		         
;=============================================================================== 
Tails_LevelBoundaries: ; loc_114FE:
		move.l  $0008(A0), D1
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D1
		swap  D1
		move.w  (Camera_Min_X_pos).w, D0
		addi.w  #$0010, D0
		cmp.w   D1, D0
		bhi.s   loc_1156A
		move.w  (Camera_Max_X_pos).w, D0
		addi.w  #$0128, D0
		tst.b   (Current_Boss_ID).w
		bne.s   loc_1152C
		addi.w  #$0040, D0
loc_1152C:
		cmp.w   D1, D0
		bls.s   loc_1156A
loc_11530:		
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		blt.s   loc_11540
		rts
loc_11540:
		bra.w     KillTails               ; loc_12074
		cmpi.w  #scrap_brain_zone_act_2, (Current_ZoneAndAct).w
		bne.w    KillTails               ; loc_12074
		cmpi.w  #$2000, $0008(A0)
		bcs.w    KillTails               ; loc_12074
		clr.b   (Last_star_pole_hit).w
		move.w  #$0001, (Level_Inactive_flag).w
		move.w  #labyrinth_zone_act_4, (Current_ZoneAndAct).w
		rts
loc_1156A:
		move.w  D0, $0008(A0)
		move.w  #$0000, $000A(A0)
		move.w  #$0000, $0010(A0)
		move.w  #$0000, $0014(A0)
		bra.s   loc_11530
;=============================================================================== 
; Sub Routine Tails_LevelBoundaries
; [ End ]		         
;===============================================================================  
               
;=============================================================================== 
; Sub Routine Tails_Roll
; [ Begin ]		         
;===============================================================================		   
Tails_Roll: ; loc_11582:
		tst.b   (Sliding_flag).w
		bne.s   loc_115A8
		move.w  $0014(A0), D0
		bpl.s   loc_11590
		neg.w   D0
loc_11590:
		cmpi.w  #$0080, D0
		bcs.s   loc_115A8
		move.b  (Ctrl_2_Held).w, D0
		andi.b  #$0C, D0
		bne.s   loc_115A8
		btst    #$01, (Ctrl_2_Held).w
		bne.s   loc_115AA
loc_115A8:
		rts
loc_115AA:
		btst    #$02, $0022(A0)
		beq.s   loc_115B4
		rts
loc_115B4:
		bset    #$02, $0022(A0)
		move.b  #$0E, $0016(A0)
		move.b  #$07, $0017(A0)
		move.b  #$02, $001C(A0)
		addq.w  #$05, $000C(A0)
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
		tst.w   $0014(A0)
		bne.s   loc_115E6
		move.w  #$0200, $0014(A0)
loc_115E6:
		rts
;=============================================================================== 
; Sub Routine Tails_Roll
; [ End ]		         
;=============================================================================== 
		 
;=============================================================================== 
; Sub Routine Tails_Jump
; [ Begin ]		         
;===============================================================================		  
Tails_Jump: ; loc_115E8:
		move.b  (Ctrl_2_Press).w, D0
		andi.b  #$70, D0
		beq.w    loc_1168C
		moveq   #$00, D0
		move.b  $0026(A0), D0
		addi.b  #$80, D0
		bsr.w     loc_136F2
		cmpi.w  #$0006, D1
		blt.w    loc_1168C
		move.w  #$0680, D2
		btst    #$06, $0022(A0)
		beq.s   loc_1161A
		move.w  #$0380, D2
loc_1161A:
		moveq   #$00, D0
		move.b  $0026(A0), D0
		subi.b  #$40, D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  D2, D1
		asr.l   #$08, D1
		add.w   D1, $0010(A0)
		muls.w  D2, D0
		asr.l   #$08, D0
		add.w   D0, $0012(A0)
		bset    #$01, $0022(A0)
		bclr    #$05, $0022(A0)
		addq.l  #$04, A7
		move.b  #$01, $003C(A0)
		clr.b   $0038(A0)
		move.w  #$00A0, D0
		jsr     (PlaySound).l             ; loc_14C6
		move.b  #$0F, $0016(A0)
		move.b  #$09, $0017(A0)
		btst    #$02, $0022(A0)
		bne.s   loc_1168E
		move.b  #$0E, $0016(A0)
		move.b  #$07, $0017(A0)
		move.b  #$02, $001C(A0)
		bset    #$02, $0022(A0)
		addq.w  #$05, $000C(A0)
loc_1168C:
		rts
loc_1168E:
		bset    #$04, $0022(A0)
		rts
;=============================================================================== 
; Sub Routine Tails_Jump
; [ End ]		         
;===============================================================================     
              
;=============================================================================== 
; Sub Routine Tails_JumpHeight
; [ Begin ]		         
;===============================================================================		   
Tails_JumpHeight: ; loc_11696:
		tst.b   $003C(A0)
		beq.s   loc_116C2
		move.w  #$FC00, D1
		btst    #$06, $0022(A0)
		beq.s   loc_116AC
		move.w  #$FE00, D1
loc_116AC:
		cmp.w   $0012(A0), D1
		ble.s   loc_116C0
		move.b  (Ctrl_2_Held).w, D0
		andi.b  #$70, D0
		bne.s   loc_116C0
		move.w  D1, $0012(A0)
loc_116C0:
		rts
loc_116C2:
		cmpi.w  #$F040, $0012(A0)
		bge.s   loc_116D0
		move.w  #$F040, $0012(A0)
loc_116D0:
		rts
;=============================================================================== 
; Sub Routine Tails_JumpHeight
; [ End ]		         
;=============================================================================== 
		 
;=============================================================================== 
; Sub Routine Tails_Spindash
; [ Begin ]		         
;===============================================================================		  
Tails_Spindash: ; loc_116D2:
		tst.b   $0039(A0)
		bne.s   loc_11706
		cmpi.b  #$08, $001C(A0)
		bne.s   loc_11704
		move.b  (Ctrl_2_Press).w, D0
		andi.b  #$70, D0
		beq.w    loc_11704
		move.b  #$09, $001C(A0)
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.l  #$04, A7
		move.b  #$01, $0039(A0)
loc_11704:
		rts
loc_11706:
		move.b  (Ctrl_2_Held).w, D0
		btst    #$01, D0
		bne.s   loc_1174C
		move.b  #$0E, $0016(A0)
		move.b  #$07, $0017(A0)
		move.b  #$02, $001C(A0)
		addq.w  #$05, $000C(A0)
		move.b  #$00, $0039(A0)
		move.w  #$2000, (Horiz_scroll_delay_val_P2).w
		move.w  #$0800, $0014(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_11744
		neg.w   $0014(A0)
loc_11744:
		bset    #$02, $0022(A0)
		rts
loc_1174C:
		move.b  (Ctrl_2_Press).w, D0
		andi.b  #$70, D0
		beq.w    loc_1175A
		nop
loc_1175A:
		addq.l  #$04, A7
		rts   
;=============================================================================== 
; Sub Routine Tails_Spindash
; [ End ]		         
;===============================================================================   
 
;=============================================================================== 
; Sub Routine Tails_SlopeResist
; [ Begin ]		         
;===============================================================================		   
Tails_SlopeResist: ; loc_1175E:
		move.b  $0026(A0), D0
		addi.b  #$60, D0
		cmpi.b  #$C0, D0
		bcc.s   loc_11792
		move.b  $0026(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  #$0020, D0
		asr.l   #$08, D0
		tst.w   $0014(A0)
		beq.s   loc_11792
		bmi.s   loc_1178E
		tst.w   D0
		beq.s   loc_1178C
		add.w   D0, $0014(A0)
loc_1178C:
		rts
loc_1178E:
		add.w   D0, $0014(A0)
loc_11792:
		rts
;=============================================================================== 
; Sub Routine Tails_SlopeResist
; [ End ]		         
;===============================================================================     
             
;=============================================================================== 
; Sub Routine Tails_RollRepel
; [ Begin ]		         
;===============================================================================		   
Tails_RollRepel: ; loc_11794:
		move.b  $0026(A0), D0
		addi.b  #$60, D0
		cmpi.b  #$C0, D0
		bcc.s   loc_117CE
		move.b  $0026(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  #$0050, D0
		asr.l   #$08, D0
		tst.w   $0014(A0)
		bmi.s   loc_117C4
		tst.w   D0
		bpl.s   loc_117BE
		asr.l   #$02, D0
loc_117BE:
		add.w   D0, $0014(A0)
		rts
loc_117C4:
		tst.w   D0
		bmi.s   loc_117CA
		asr.l   #$02, D0
loc_117CA:
		add.w   D0, $0014(A0)
loc_117CE:
		rts
;=============================================================================== 
; Sub Routine Tails_RollRepel
; [ End ]		         
;===============================================================================   
		
;=============================================================================== 
; Sub Routine Tails_SlopeRepel
; [ Begin ]		         
;===============================================================================		  
Tails_SlopeRepel: ; loc_117D0:
		nop
		tst.b   $0038(A0)
		bne.s   loc_1180A
		tst.w   $002E(A0)
		bne.s   loc_1180C
		move.b  $0026(A0), D0
		addi.b  #$20, D0
		andi.b  #$C0, D0
		beq.s   loc_1180A
		move.w  $0014(A0), D0
		bpl.s   loc_117F4
		neg.w   D0
loc_117F4:
		cmpi.w  #$0280, D0
		bcc.s   loc_1180A
		clr.w   $0014(A0)
		bset    #$01, $0022(A0)
		move.w  #$001E, $002E(A0)
loc_1180A:
		rts
loc_1180C:
		subq.w  #$01, $002E(A0)
		rts
;=============================================================================== 
; Sub Routine Tails_SlopeRepel
; [ End ]		         
;===============================================================================  
		 
;=============================================================================== 
; Sub Routine Tails_JumpAngle
; [ Begin ]		         
;===============================================================================		  
Tails_JumpAngle: ; loc_11812:
		move.b  $0026(A0), D0
		beq.s   loc_1182C
		bpl.s   loc_11822
		addq.b  #$02, D0
		bcc.s   loc_11820
		moveq   #$00, D0
loc_11820:
		bra.s   loc_11828
loc_11822:
		subq.b  #$02, D0
		bcc.s   loc_11828
		moveq   #$00, D0
loc_11828:
		move.b  D0, $0026(A0)
loc_1182C:
		move.b  $0027(A0), D0
		beq.s   loc_11870
		tst.w   $0014(A0)
		bmi.s   loc_11850
loc_11838:		
		move.b  $002D(A0), D1
		add.b   D1, D0
		bcc.s   loc_1184E
		subq.b  #$01, $002C(A0)
		bcc.s   loc_1184E
		move.b  #$00, $002C(A0)
		moveq   #$00, D0
loc_1184E:
		bra.s   loc_1186C
loc_11850:
		tst.b   $0029(A0)
		bne.s   loc_11838
		move.b  $002D(A0), D1
		sub.b   D1, D0
		bcc.s   loc_1186C
		subq.b  #$01, $002C(A0)
		bcc.s   loc_1186C
		move.b  #$00, $002C(A0)
		moveq   #$00, D0
loc_1186C:
		move.b  D0, $0027(A0)
loc_11870:
		rts
;=============================================================================== 
; Sub Routine Tails_JumpAngle
; [ End ]		         
;===============================================================================     
             
;=============================================================================== 
; Sub Routine Tails_Floor
; [ Begin ]		         
;===============================================================================		   
Tails_Floor: ; loc_11872:
		move.b  $003F(A0), D5
		move.w  $0010(A0), D1
		move.w  $0012(A0), D2
		jsr    ( CalcAngle).l              ; loc_34A2
		move.b  D0, $002B(A0)
		subi.b  #$20, D0
		andi.b  #$C0, D0
		cmpi.b  #$40, D0
		beq.w    loc_11946
		cmpi.b  #$80, D0
		beq.w    loc_119A8
		cmpi.b  #$C0, D0
		beq.w    loc_11A04
		bsr.w     Sonic_HitWall           ; loc_13AFC
		tst.w   D1
		bpl.s   loc_118BA
		sub.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_118BA:
		bsr.w     loc_1397A
		tst.w   D1
		bpl.s   loc_118CC
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_118CC:
		bsr.w     loc_13736
		tst.w   D1
		bpl.s   loc_11944
		move.b  $0012(A0), D2
		addq.b  #$08,  D2
		neg.b   D2
		cmp.b   D2, D1
		bge.s   loc_118E4
		cmp.b   D2, D0
		blt.s   loc_11944
loc_118E4:
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		bsr.w     Tails_ResetTailsOnFloor ; loc_11A66
		move.b  #$00, $001C(A0)
		move.b  D3, D0
		addi.b  #$20, D0
		andi.b  #$40, D0
		bne.s   loc_11922
		move.b  D3, D0
		addi.b  #$10, D0
		andi.b  #$20, D0
		beq.s   loc_11914
		asr.w   $0012(A0)
		bra.s   loc_11936
loc_11914:
		move.w  #$0000, $0012(A0)
		move.w  $0010(A0), $0014(A0)
		rts
loc_11922:
		move.w  #$0000, $0010(A0)
		cmpi.w  #$0FC0, $0012(A0)
		ble.s   loc_11936
		move.w  #$0FC0, $0012(A0)
loc_11936:
		move.w  $0012(A0), $0014(A0)
		tst.b   D3
		bpl.s   loc_11944
		neg.w   $0014(A0)
loc_11944:
		rts
loc_11946:
		bsr.w     Sonic_HitWall           ; loc_13AFC
		tst.w   D1
		bpl.s   loc_11960
		sub.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
		move.w  $0012(A0), $0014(A0)
		rts
loc_11960:
		bsr.w     Sonic_DontRunOnWalls    ; loc_139CC
		tst.w   D1
		bpl.s   loc_1197A
		sub.w   D1, $000C(A0)
		tst.w   $0012(A0)
		bpl.s   loc_11978
		move.w  #$0000, $0012(A0)
loc_11978:
		rts
loc_1197A:
		tst.w   $0012(A0)
		bmi.s   loc_119A6
		bsr.w     loc_13736
		tst.w   D1
		bpl.s   loc_119A6
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		bsr.w     Tails_ResetTailsOnFloor ; loc_11A66
		move.b  #$00, $001C(A0)
		move.w  #$0000, $0012(A0)
		move.w  $0010(A0), $0014(A0)
loc_119A6:
		rts
loc_119A8:
		bsr.w     Sonic_HitWall           ; loc_13AFC
		tst.w   D1
		bpl.s   loc_119BA
		sub.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_119BA:
		bsr.w     loc_1397A
		tst.w   D1
		bpl.s   loc_119CC
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
loc_119CC:
		bsr.w     Sonic_DontRunOnWalls    ; loc_139CC
		tst.w   D1
		bpl.s   loc_11A02
		sub.w   D1, $000C(A0)
		move.b  D3, D0
		addi.b  #$20, D0
		andi.b  #$40, D0
		bne.s   loc_119EC
		move.w  #$0000, $0012(A0)
		rts
loc_119EC:
		move.b  D3, $0026(A0)
		bsr.w     Tails_ResetTailsOnFloor ; loc_11A66
		move.w  $0012(A0), $0014(A0)
		tst.b   D3
		bpl.s   loc_11A02
		neg.w   $0014(A0)
loc_11A02:
		rts
loc_11A04:
		bsr.w     loc_1397A
		tst.w   D1
		bpl.s   loc_11A1E
		add.w   D1, $0008(A0)
		move.w  #$0000, $0010(A0)
		move.w  $0012(A0), $0014(A0)
		rts
loc_11A1E:
		bsr.w     Sonic_DontRunOnWalls    ; loc_139CC
		tst.w   D1
		bpl.s   loc_11A38
		sub.w   D1, $000C(A0)
		tst.w   $0012(A0)
		bpl.s   loc_11A36
		move.w  #$0000, $0012(A0)
loc_11A36:
		rts
loc_11A38:
		tst.w   $0012(A0)
		bmi.s   loc_11A64
		bsr.w     loc_13736
		tst.w   D1
		bpl.s   loc_11A64
		add.w   D1, $000C(A0)
		move.b  D3, $0026(A0)
		bsr.w     Tails_ResetTailsOnFloor ; loc_11A66
		move.b  #$00, $001C(A0)
		move.w  #$0000, $0012(A0)
		move.w  $0010(A0), $0014(A0)
loc_11A64:
		rts  
;=============================================================================== 
; Sub Routine Tails_Floor
; [ End ]		         
;===============================================================================		  
		      
;=============================================================================== 
; Object 0x02 - Tails
; [ End ]
;=============================================================================== 

;=============================================================================== 
; Sub Routine Tails_ResetTailsOnFloor
; [ Begin ]		         
;===============================================================================               
Tails_ResetTailsOnFloor: ; loc_11A66:
		btst    #$04, $0022(A0)
		beq.s   loc_11A74
		nop
		nop
		nop
loc_11A74:
		bclr    #$05, $0022(A0)
		bclr    #$01, $0022(A0)
		bclr    #$04, $0022(A0)
		btst    #$02, $0022(A0)
		beq.s   loc_11AAA
		bclr    #$02, $0022(A0)
		move.b  #$0F, $0016(A0)
		move.b  #$09, $0017(A0)
		move.b  #$00, $001C(A0)
		subq.w  #$01, $000C(A0)
loc_11AAA:
		move.b  #$00, $003C(A0)
		move.w  #$0000, (Chain_Bonus_counter).w
		move.b  #$00, $0027(A0)
		move.b  #$00, $0029(A0)
		rts  
;=============================================================================== 
; Sub Routine Tails_ResetTailsOnFloor
; [ End ]		         
;=============================================================================== 
               
Tails_Hurt: ; loc_11AC4:
		jsr     SpeedToPos              ; loc_D27A
		addi.w  #$0030, $0012(A0)
		btst    #$06, $0022(A0)
		beq.s   loc_11ADE
		subi.w  #$0020, $0012(A0)
loc_11ADE:
		bsr.w     Tails_HurtStop          ; loc_11AF4
		bsr.w     Tails_LevelBoundaries   ; loc_114FE
		bsr.w     Tails_Animate           ; loc_11BA2
		bsr.w     Load_Tails_Dynamic_PLC  ; loc_11F42
		jmp     DisplaySprite           ; loc_D3C2
		
;=============================================================================== 
; Sub Routine Tails_HurtStop
; [ Begin ]		         
;===============================================================================		 
Tails_HurtStop: ; loc_11AF4:
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.w    KillTails               ; loc_12074
		bsr.w     Tails_Floor             ; loc_11872
		btst    #$01, $0022(A0)
		bne.s   loc_11B30
		moveq   #$00, D0
		move.w  D0, $0012(A0)
		move.w  D0, $0010(A0)
		move.w  D0, $0014(A0)
		move.b  #$00, $001C(A0)
		move.b  #$02, $0024(A0)
		move.w  #$0078, $0030(A0)
loc_11B30:
		rts
;=============================================================================== 
; Sub Routine Tails_HurtStop
; [ End ]		         
;===============================================================================		  
		
Tails_Death: ; loc_11B32:
		bsr.w     Tails_GameOver          ; loc_11B4A
		jsr     ObjectFall              ; loc_D24E
		bsr.w     Tails_Animate           ; loc_11BA2
		bsr.w     Load_Tails_Dynamic_PLC  ; loc_11F42
		jmp     DisplaySprite           ; loc_D3C2
		
;=============================================================================== 
; Sub Routine Tails_GameOver
; [ Begin ]		         
;===============================================================================		 
Tails_GameOver: ; loc_11B4A:
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$0100, D0
		cmp.w   $000C(A0), D0
		bcc.w    loc_11B8C
		move.w  ($FFFFB008).w, D0
		subi.w  #$0040, D0
		move.w  D0, $0008(A0)
		move.w  ($FFFFB00C).w, D0
		subi.w  #$0080, D0
		move.w  D0, $000C(A0)
		move.b  #$02, $0024(A0)
		andi.w  #$7FFF, $0002(A0)
		move.b  #$0C, $003E(A0)
		move.b  #$0D, $003F(A0)
		nop
loc_11B8C:
		rts
;=============================================================================== 
; Sub Routine Tails_GameOver
; [ End ]		         
;===============================================================================
		 
Tails_ResetLevel: ; loc_11B8E:
		tst.w   $003A(A0)
		beq.s   loc_11BA0
		subq.w  #$01, $003A(A0)
		bne.s   loc_11BA0
		move.w  #$0001, (Level_Inactive_flag).w
loc_11BA0:
		rts
		
;=============================================================================== 
; Sub Routine Tails_Animate
; [ Begin ]		         
;===============================================================================    
Tails_Animate: ; loc_11BA2: ; Tails Subroutine  
		lea     (Tails_AnimateData).l, A1 ; loc_11DF4
Tails_Animate2: ; loc_11BA8:		
		moveq   #$00, D0
		move.b  $001C(A0), D0
		cmp.b   $001D(A0), D0
		beq.s   loc_11BCA
		move.b  D0, $001D(A0)
		move.b  #$00, $001B(A0)
		move.b  #$00, $001E(A0)
		bclr    #$05, $0022(A0)
loc_11BCA:
		add.w   D0, D0
		adda.w  $00(A1, D0), A1
		move.b  (A1), D0
		bmi.s   loc_11C3A
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		subq.b  #$01, $001E(A0)
		bpl.s   loc_11C08
		move.b  D0, $001E(A0)
loc_11BF0:		
		moveq   #$00, D1
		move.b  $001B(A0), D1
		move.b  $01(A1, D1), D0
		cmpi.b  #$F0, D0		  
		bcc.s   loc_11C0A
loc_11C00:		
		move.b  D0, $001A(A0)
		addq.b  #$01, $001B(A0)
loc_11C08:
		rts
loc_11C0A:
		addq.b  #$01, D0
		bne.s   loc_11C1A
		move.b  #$00, $001B(A0)
		move.b  $0001(A1), D0
		bra.s   loc_11C00
loc_11C1A:
		addq.b  #$01, D0
		bne.s   loc_11C2E
		move.b  $02(A1, D1), D0
		sub.b   D0, $001B(A0)
		sub.b   D0, D1
		move.b  $01(A1, D1), D0
		bra.s   loc_11C00
loc_11C2E:
		addq.b  #$01, D0
		bne.s   loc_11C38
		move.b  $02(A1, D1), $001C(A0)
loc_11C38:
		rts
loc_11C3A:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_11C08
		addq.b  #$01, D0
		bne.w    loc_11D26
		moveq   #$00, D0
		move.b  $0027(A0), D0
		bne.w    loc_11CC0
		moveq   #$00, D1
		move.b  $0026(A0), D0
		move.b  $0022(A0), D2
		andi.b  #$01, D2
		bne.s   loc_11C62
		not.b  d0
loc_11C62:
		addi.b  #$10, D0
		bpl.s   loc_11C6A
		moveq   #$03, D1
loc_11C6A:
		andi.b  #$FC, $0001(A0)
		eor.b   D1, D2
		or.b    D2, $0001(A0)
		lsr.b   #$04, D0
		andi.b  #$06, D0
		move.w  $0014(A0), D2
		bpl.s   loc_11C84
		neg.w   D2
loc_11C84:
		move.b  D0, D3
		add.b   D3, D3
		add.b   D3, D3
		lea     (Tails_Animate_Walk).l, A1 ; loc_11E32
		cmpi.w  #$0600, D2
		bcs.s   loc_11CA6
		lea     (Tails_Animate_Run).l, A1 ; loc_11E3C
		move.b  D0, D1
		lsr.b   #$01, D1
		add.b   D1, D0
		add.b   D0, D0
		move.b  D0, D3
loc_11CA6:
		neg.w   D2
		addi.w  #$0800, D2
		bpl.s   loc_11CB0
		moveq   #$00, D2
loc_11CB0:
		lsr.w   #$08, D2
		move.b  D2, $001E(A0)
		bsr.w     loc_11BF0
		add.b   D3, $001A(A0)
		rts
loc_11CC0:
		move.b  $0027(A0), D0
		moveq   #$00, D1
		move.b  $0022(A0), D2
		andi.b  #$01, D2
		bne.s   loc_11CEE
		andi.b  #$FC, $0001(A0)
		addi.b  #$0B, D0
		divu.w  #$0016, D0
		addi.b  #$75, D0
		move.b  D0, $001A(A0)
		move.b  #$00, $001E(A0)
		rts
loc_11CEE:
		andi.b  #$FC, $0001(A0)
		tst.b   $0029(A0)
		beq.s   loc_11D06
		ori.b   #$01, $0001(A0)
		addi.b  #$0B, D0
		bra.s   loc_11D12
loc_11D06:
		ori.b   #$03, $0001(A0)
		neg.b   D0
		addi.b  #$8F, D0
loc_11D12:
		divu.w  #$0016, D0
		addi.b  #$75, D0
		move.b  D0, $001A(A0)
		move.b  #$00, $001E(A0)
		rts
loc_11D26:
		addq.b  #$01, D0
		bne.s   loc_11D6A
		move.w  $0014(A0), D2
		bpl.s   loc_11D32
		neg.w   D2
loc_11D32:
		lea     (Tails_Animate_Roll2).l, A1 ; loc_11E4B
		cmpi.w  #$0600, D2
		bcc.s   loc_11D44
		lea     (Tails_Animate_Roll).l, A1 ; loc_11E46
loc_11D44:
		neg.w   D2
		addi.w  #$0400, D2
		bpl.s   loc_11D4E
		moveq   #$00, D2
loc_11D4E:
		lsr.w   #$08, D2
		move.b  D2, $001E(A0)
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		bra.w     loc_11BF0
loc_11D6A:
		addq.b  #$01, D0
		bne.s   loc_11DA0
		move.w  $0014(A0), D2
		bmi.s   loc_11D76
		neg.w   D2
loc_11D76:
		addi.w  #$0800, D2
		bpl.s   loc_11D7E
		moveq   #$00, D2
loc_11D7E:
		lsr.w   #$06, D2
		move.b  D2, $001E(A0)
		lea     (Tails_Animate_Push_NoArt).l, A1 ; loc_11E50
		move.b  $0022(A0), D1
		andi.b  #$01, D1
		andi.b  #$FC, $0001(A0)
		or.b    D1, $0001(A0)
		bra.w     loc_11BF0
loc_11DA0:
		move.w  ($FFFFB050).w, D1
		move.w  ($FFFFB052).w, D2
		jsr    ( CalcAngle).l              ; loc_34A2
		moveq   #$00, D1
		move.b  $0022(A0), D2
		andi.b  #$01, D2
		bne.s   loc_11DBE
		not.b  d0
		bra.s   loc_11DC2
loc_11DBE:
		addi.b  #$80, D0
loc_11DC2:
		addi.b  #$10, D0
		bpl.s   loc_11DCA
		moveq   #$03, D1
loc_11DCA:
		andi.b  #$FC, $0001(A0)
		eor.b   D1, D2
		or.b    D2, $0001(A0)
		lsr.b   #$03, D0
		andi.b  #$0C, D0
		move.b  D0, D3
		lea     (loc_12054).l, A1
		move.b  #$03, $001E(A0)
		bsr.w     loc_11BF0
		add.b   D3, $001A(A0)
		rts 
Tails_AnimateData: ; loc_11DF4: ; Tails Data               
		dc.w    Tails_Animate_Walk-Tails_AnimateData           ; loc_11E32
		dc.w    Tails_Animate_Run-Tails_AnimateData            ; loc_11E3C
		dc.w    Tails_Animate_Roll-Tails_AnimateData           ; loc_11E46
		dc.w    Tails_Animate_Roll2-Tails_AnimateData          ; loc_11E4B
		dc.w    Tails_Animate_Push_NoArt-Tails_AnimateData     ; loc_11E50
		dc.w    Tails_Animate_Wait-Tails_AnimateData           ; loc_11E58
		dc.w    Tails_Animate_Balance_NoArt-Tails_AnimateData  ; loc_11E96
		dc.w    Tails_Animate_LookUp-Tails_AnimateData         ; loc_11EA0
		dc.w    Tails_Animate_Duck-Tails_AnimateData           ; loc_11EA3
		dc.w    Tails_Animate_Spindash-Tails_AnimateData       ; loc_11EA6
		dc.w    Tails_Animate_0x0A-Tails_AnimateData           ; loc_11EAB
		dc.w    Tails_Animate_0x0B-Tails_AnimateData           ; loc_11EAE
		dc.w    Tails_Animate_0x0C-Tails_AnimateData           ; loc_11EB4
		dc.w    Tails_Animate_Stop-Tails_AnimateData           ; loc_11EB8
		dc.w    Tails_Animate_Fly-Tails_AnimateData            ; loc_11EBC
		dc.w    Tails_Animate_0x0F-Tails_AnimateData           ; loc_11EC0
		dc.w    Tails_Animate_Jump-Tails_AnimateData           ; loc_11EC7
		dc.w    Tails_Animate_0x11-Tails_AnimateData           ; loc_11ED6
		dc.w    Tails_Animate_0x12-Tails_AnimateData           ; loc_11EDA
		dc.w    Tails_Animate_0x13-Tails_AnimateData           ; loc_11EE0
		dc.w    Tails_Animate_0x14-Tails_AnimateData           ; loc_11EE5
		dc.w    Tails_Animate_0x15-Tails_AnimateData           ; loc_11EE8
		dc.w    Tails_Animate_Death1-Tails_AnimateData         ; loc_11EEF
		dc.w    Tails_Animate_Unused_Drown-Tails_AnimateData   ; loc_11EF2
		dc.w    Tails_Animate_Death2-Tails_AnimateData         ; loc_11EF5
		dc.w    Tails_Animate_0x19-Tails_AnimateData           ; loc_11EF8
		dc.w    Tails_Animate_0x1A-Tails_AnimateData           ; loc_11EFB
		dc.w    Tails_Animate_0x1B-Tails_AnimateData           ; loc_11EFE
		dc.w    Tails_Animate_0x1C-Tails_AnimateData           ; loc_11F02
		dc.w    Tails_Animate_0x1D-Tails_AnimateData           ; loc_11F06
		dc.w    Tails_Animate_0x1E-Tails_AnimateData           ; loc_11F10
Tails_Animate_Walk: ; loc_11E32:
		dc.b    $FF, $10, $11, $12, $13, $14, $15, $0E, $0F, $FF  
Tails_Animate_Run: ; loc_11E3C:
		dc.b    $FF, $2E, $2F, $30, $31, $FF, $FF, $FF, $FF, $FF
Tails_Animate_Roll: ; loc_11E46:
		dc.b    $01, $48, $47, $46, $FF
Tails_Animate_Roll2: ; loc_11E4B:
		dc.b    $01, $48, $47, $46, $FF
Tails_Animate_Push_NoArt: ; loc_11E50:
		dc.b    $FD, $09, $0A, $0B, $0C, $0D, $0E, $FF
Tails_Animate_Wait: ; loc_11E58:
		dc.b    $07, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $03, $02, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $03, $02, $01, $01, $01, $01, $01, $01, $01, $01, $01
		dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $06, $07, $08, $07, $08, $07, $08, $07, $08, $07, $08, $06, $FE, $1C  
Tails_Animate_Balance_NoArt: ; loc_11E96:
		dc.b    $1F, $01, $02, $03, $04, $05, $06, $07, $08, $FF
Tails_Animate_LookUp: ; loc_11EA0:
		dc.b    $3F, $04, $FF
Tails_Animate_Duck: ; loc_11EA3:
		dc.b    $3F, $5B, $FF
Tails_Animate_Spindash: ; loc_11EA6:
		dc.b    $00, $60, $61, $62, $FF
Tails_Animate_0x0A: ; loc_11EAB:
		dc.b    $3F, $82, $FF
Tails_Animate_0x0B: ; loc_11EAE:
		dc.b    $07, $08, $08, $09, $FD, $05
Tails_Animate_0x0C: ; loc_11EB4:
		dc.b    $07, $09, $FD, $05
Tails_Animate_Stop: ; loc_11EB8:
		dc.b    $07, $01, $02, $FF
Tails_Animate_Fly: ; loc_11EBC:
		dc.b    $07, $5E, $5F, $FF
Tails_Animate_0x0F: ; loc_11EC0:
		dc.b    $07, $01, $02, $03, $04, $05, $FF
Tails_Animate_Jump: ; loc_11EC7:
		dc.b    $03, $59, $5A, $59, $5A, $59, $5A, $59, $5A, $59, $5A, $59, $5A, $FD, $00
Tails_Animate_0x11: ; loc_11ED6:
		dc.b    $04, $01, $02, $FF
Tails_Animate_0x12: ; loc_11EDA:
		dc.b    $0F, $01, $02, $03, $FE, $01
Tails_Animate_0x13: ; loc_11EE0:
		dc.b    $0F, $01, $02, $FE, $01
Tails_Animate_0x14: ; loc_11EE5:
		dc.b    $3F, $01, $FF
Tails_Animate_0x15: ; loc_11EE8:
		dc.b    $0B, $01, $02, $03, $04, $FD, $00
Tails_Animate_Death1: ; loc_11EEF:
		dc.b    $20, $5D, $FF
Tails_Animate_Unused_Drown: ; loc_11EF2:
		dc.b    $2F, $5D, $FF
Tails_Animate_Death2: ; loc_11EF5:
		dc.b    $03, $5D, $FF
Tails_Animate_0x19: ; loc_11EF8:
		dc.b    $03, $5D, $FF
Tails_Animate_0x1A: ; loc_11EFB:
		dc.b    $03, $5C, $FF
Tails_Animate_0x1B: ; loc_11EFE:
		dc.b    $07, $01, $01, $FF
Tails_Animate_0x1C: ; loc_11F02:
		dc.b    $77, $00, $FD, $00
Tails_Animate_0x1D: ; loc_11F06:
		dc.b    $03, $01, $02, $03, $04, $05, $06, $07, $08, $FF
Tails_Animate_0x1E: ; loc_11F10:
		dc.b    $03, $01, $02, $03, $04, $05, $06, $07, $08, $FF
;=============================================================================== 
; Sub Routine Tails_Animate
; [ End ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine Load_Tails_Tail_Dynamic_PLC
; [ Begin ]		         
;===============================================================================    
Load_Tails_Tail_Dynamic_PLC: ; loc_11F1A:  ; Tails "Tail" subroutine
		moveq   #$00, D0
		move.b  $001A(A0), D0
		cmp.b   (TailsTails_LastLoadedDPLC).w, D0
		beq.s   loc_11F94
		move.b  D0, (TailsTails_LastLoadedDPLC).w
		lea     (Tails_Dyn_Script).l, A2  ; loc_7056E
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D5
		subq.w  #$01, D5
		bmi.s   loc_11F94
		move.w  #$F600, D4
		bra.s   loc_11F68  
;=============================================================================== 
; Sub Routine Load_Tails_Tail_Dynamic_PLC
; [ End ]		         
;===============================================================================   
              
;=============================================================================== 
; Sub Routine Load_Tails_Dynamic_PLC
; [ Begin ]		         
;===============================================================================						
Load_Tails_Dynamic_PLC: ; loc_11F42:
		moveq   #$00, D0
		move.b  $001A(A0), D0
		cmp.b   (Tails_LastLoadedDPLC).w, D0
		beq.s   loc_11F94
		move.b  D0, (Tails_LastLoadedDPLC).w
		lea     (Tails_Dyn_Script).l, A2 ; loc_7056E
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D5
		subq.w  #$01, D5
		bmi.s   loc_11F94
		move.w  #$F400, D4
loc_11F68:		
		moveq   #$00, D1
		move.w  (A2)+, D1
		move.w  D1, D3
		lsr.w   #$08, D3
		andi.w  #$00F0, D3
		addi.w  #$0010, D3
		andi.w  #$0FFF, D1
		lsl.l   #$05, D1
		addi.l  #Tails_Sprites, D1      ; loc_6254C
		move.w  D4, D2
		add.w   D3, D4
		add.w   D3, D4
		jsr     (QueueDMATransfer).l           ; loc_156C
		dbf    D5, loc_11F68
loc_11F94:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 05 - Tails' tails
; ---------------------------------------------------------------------------
; loc_11F96: Obj_0x05_Tails_Tail:
Obj05:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj05_Index(pc,d0.w),d1
		jmp	Obj05_Index(pc,d1.w)
; ===========================================================================
; loc_11FA4:
Obj05_Index:	offsetTable
		offsetTableEntry.w Obj05_Init
		offsetTableEntry.w Obj05_Main
; ===========================================================================
; loc_11FA8:
Obj05_Init:
		addq.b	#2,$24(a0)
		move.l	#Tails_Mappings,4(a0)
		move.w	#$7B0,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#2,$18(a0)
		move.b	#$18,$19(a0)
		move.b	#4,1(a0)
; loc_11FD0:
Obj05_Main:
		move.b	($FFFFB066).w,$26(a0)
		move.b	($FFFFB062).w,$22(a0)
		move.w	($FFFFB048).w,8(a0)
		move.w	($FFFFB04C).w,$C(a0)
		moveq	#0,d0
		move.b	($FFFFB05C).w,d0
		cmp.b	$30(a0),d0
		beq.s	loc_11FFE
		move.b	d0,$30(a0)
		move.b	Obj05AniSelection(pc,d0.w),$1C(a0)

loc_11FFE:
		lea	(Obj05AniData).l,a1
		bsr.w	Tails_Animate2
		bsr.w	Load_Tails_Tail_Dynamic_PLC
		jsr	(DisplaySprite).l
		rts
; ===========================================================================
; Animation master script table for the Tails, chooses which tails animation
; to run depending on Tails' current animation (sounds confusing, right?).
; byte_12014:
Obj05AniSelection:
		dc.b	0,0
		dc.b	3,3
		dc.b	0
		dc.b	1
		dc.b	0
		dc.b	2
		dc.b	1
		dc.b	7
		dc.b	0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0,0
		dc.b	0,0,0,0,0,0
		even
; ---------------------------------------------------------------------------
; Animation script - Tails' tails
; ---------------------------------------------------------------------------
; off_12032:
Obj05AniData:	dc.w	loc_12042-Obj05AniData
		dc.w	loc_12045-Obj05AniData
		dc.w	loc_1204C-Obj05AniData
		dc.w	loc_12054-Obj05AniData
		dc.w	loc_1205A-Obj05AniData
		dc.w	loc_12060-Obj05AniData
		dc.w	loc_12066-Obj05AniData
		dc.w	loc_1206C-Obj05AniData
loc_12042:	dc.b	$20,  0,$FF
loc_12045:	dc.b	  7,  9, $A, $B, $C, $D, $FF
loc_1204C:	dc.b	  3,  9, $A, $B, $C, $D, $FD,  1
loc_12054:	dc.b	$FC, $49, $4A, $4B, $4C, $FF
loc_1205A:	dc.b      3, $4D, $4E, $4F, $50, $FF
loc_12060:	dc.b      3, $51, $52, $53, $54, $FF
loc_12066:	dc.b      3, $55, $56, $57, $58, $FF
loc_1206C: 	dc.b      2, $81, $82, $83, $84, $FF
;=============================================================================== 
; Object 0x05 - Tails "Tail"
; [ End ]
;===============================================================================		    
		nop		             ; Filler 
KillTails: ; loc_12074:
		jmp     KillSonic               ; loc_21422
		dc.w    $0000		   ; Filler  
;=============================================================================== 
; Object 0x0A - 
; [ Begin ]
;===============================================================================				    
Obj_0x0A_Bubbles_And_Numbers: ; loc_1207C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1208A(PC, D0), D1
		jmp     loc_1208A(PC, D1)
loc_1208A:
		dc.w    loc_1209C-loc_1208A
		dc.w    loc_120F8-loc_1208A
		dc.w    loc_12104-loc_1208A
		dc.w    loc_1216E-loc_1208A
		dc.w    J_DeleteObject_01-loc_1208A ; loc_12182-...
		dc.w    loc_1230C-loc_1208A
		dc.w    loc_12188-loc_1208A
		dc.w    loc_1216E-loc_1208A
		dc.w    J_DeleteObject_01-loc_1208A ; loc_12182-...
loc_1209C:
		addq.b  #$02, $0024(A0)
		move.l  #Obj_0x0A_Bubbles_Mappings, $0004(A0) ; loc_14374
		move.w  #$8500, $0002(A0)
		move.b  #$84, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  $0028(A0), D0
		bpl.s   loc_120E4
		addq.b  #$08, $0024(A0)
		move.l  #Obj_0x0A_Numbers_Mappings, $0004(A0) ; loc_125C2
		move.w  #$0440, $0002(A0)
		andi.w  #$007F, D0
		move.b  D0, $0033(A0)
		bra.w     loc_1230C
loc_120E4:
		move.b  D0, $001C(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.w  $0008(A0), $0030(A0)
		move.w  #$FF78, $0012(A0)
loc_120F8:
		lea     (loc_12530).l, A1
		jsr     AnimateSprite           ; (loc_D412)
loc_12104:
		move.w  (Water_Level_1).w, D0
		cmp.w   $000C(A0), D0
		bcs.s   loc_1212A
		move.b  #$06, $0024(A0)
		addq.b  #$07, $001C(A0)
		cmpi.b  #$0D, $001C(A0)
		beq.s   loc_1216E
		bcs.s   loc_1216E
		move.b  #$0D, $001C(A0)
		bra.s   loc_1216E
loc_1212A:
		tst.b   (WindTunnel_flag).w
		beq.s   loc_12134
		addq.w  #$04, $0030(A0)
loc_12134:
		move.b  $0026(A0), D0
		addq.b  #$01, $0026(A0)
		andi.w  #$007F, D0
		lea     (loc_1220C).l, A1
		move.b  $00(A1, D0), D0
		ext.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		bsr.s   loc_121C0
		jsr     SpeedToPos              ; (loc_D27A)
		tst.b   $0001(A0)
		bpl.s   J_DeleteObject_00       ; loc_12168
		jmp     DisplaySprite           ; (loc_D3C2) 
J_DeleteObject_00: ; loc_12168:
		jmp     DeleteObject            ; (loc_D3B4)    
loc_1216E:
		bsr.s   loc_121C0
		lea     (loc_12530).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_01: ; loc_12182:
		jmp     DeleteObject            ; (loc_D3B4)
loc_12188:
		cmpi.w  #$000C, (Current_Air).w
		bhi.s   J_DeleteObject_02       ; loc_121BA
		subq.w  #$01, $0038(A0)
		bne.s   loc_121A2
		move.b  #$0E, $0024(A0)
		addq.b  #$07, $001C(A0)
		bra.s   loc_1216E
loc_121A2:
		lea     (loc_12530).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		tst.b   $0001(A0)
		bpl.s   J_DeleteObject_02       ; loc_121BA
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_02: ; loc_121BA:
		jmp     DeleteObject            ; (loc_D3B4)
loc_121C0:
		tst.w   $0038(A0)
		beq.s   loc_1220A
		subq.w  #$01, $0038(A0)
		bne.s   loc_1220A
		cmpi.b  #$07, $001C(A0)
		bcc.s   loc_1220A
		move.w  #$000F, $0038(A0)
		clr.w   $0012(A0)
		move.b  #$80, $0001(A0)
		move.w  $0008(A0), D0
		sub.w   (Camera_X_pos).w, D0
		addi.w  #$0080, D0
		move.w  D0, $0008(A0)
		move.w  $000C(A0), D0
		sub.w   (Camera_Y_pos).w, D0
		addi.w  #$0080, D0
		move.w  D0, $000A(A0)
		move.b  #$0C, $0024(A0)
loc_1220A:
		rts

loc_1220C:
		dc.b    $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02
		dc.b    $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
		dc.b    $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $02
		dc.b    $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
		dc.b    $00, $FF, $FF, $FF, $FF, $FF, $FE, $FE, $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FD
		dc.b    $FD, $FD, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
		dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FD
		dc.b    $FD, $FD, $FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE, $FE, $FF, $FF, $FF, $FF, $FF
		dc.b    $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02
		dc.b    $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
		dc.b    $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $02
		dc.b    $02, $02, $02, $02, $02, $02, $01, $01, $01, $01, $01, $00, $00, $00, $00, $00
		dc.b    $00, $FF, $FF, $FF, $FF, $FF, $FE, $FE, $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FD
		dc.b    $FD, $FD, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC
		dc.b    $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FC, $FD
		dc.b    $FD, $FD, $FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE, $FE, $FF, $FF, $FF, $FF, $FF
loc_1230C:
		tst.w   $002C(A0)
		bne.w    loc_123F6
		cmpi.b  #$06, ($FFFFB024).w
		bcc.w    loc_124FC
		btst    #$06, ($FFFFB022).w
		beq.w    loc_124FC
		subq.w  #$01, $0038(A0)
		bpl.w    loc_1241C
		move.w  #$003B, $0038(A0)
		move.w  #$0001, $0036(A0)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$0001, D0
		move.b  D0, $0034(A0)
		move.w  (Current_Air).w, D0
		cmpi.w  #$0019, D0
		beq.s   loc_12386
		cmpi.w  #$0014, D0
		beq.s   loc_12386
		cmpi.w  #$000F, D0
		beq.s   loc_12386
		cmpi.w  #$000C, D0
		bhi.s   loc_12390
		bne.s   loc_12372
		move.w  #MusID_LevelSel, D0
		jsr     (PlayMusic).l            ; loc_14C0
loc_12372:
		subq.b  #$01, $0032(A0)
		bpl.s   loc_12390
		move.b  $0033(A0), $0032(A0)
		bset    #$07, $0036(A0)
		bra.s   loc_12390
loc_12386:
		move.w  #$00C2, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_12390:
		subq.w  #$01, (Current_Air).w
		bcc.w    loc_1241A
		bsr.w     ResumeMusic             ; loc_124FE
		move.b  #$81, ($FFFFB02A).w
		move.w  #$00B2, D0
		jsr     (PlaySound).l             ; loc_14C6
		move.b  #$0A, $0034(A0)
		move.w  #$0001, $0036(A0)
		move.w  #$0078, $002C(A0)
		move.l  A0, -(A7)
		lea     ($FFFFB000).w, A0
		bsr.w     Sonic_ResetOnFloor      ; loc_1090C
		move.b  #$17, $001C(A0)
		bset    #$01, $0022(A0)
		bset    #$07, $0002(A0)
		move.w  #$0000, $0012(A0)
		move.w  #$0000, $0010(A0)
		move.w  #$0000, $0014(A0)
		move.b  #$01, (Deform_lock).w
		move.l  (A7)+, A0
		rts
loc_123F6:
		subq.w  #$01, $002C(A0)
		bne.s   loc_12404
		move.b  #$06, ($FFFFB024).w
		rts
loc_12404:
		move.l  A0, -(A7)
		lea     ($FFFFB000).w, A0
		jsr     SpeedToPos              ; (loc_D27A)
		addi.w  #$0010, $0012(A0)
		move.l  (A7)+, A0
		bra.s   loc_1241C
loc_1241A:
		bra.s   loc_1242C
loc_1241C:
		tst.w   $0036(A0)
		beq.w    loc_124FC
		subq.w  #$01, $003A(A0)
		bpl.w    loc_124FC
loc_1242C:
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$000F, D0
		move.w  D0, $003A(A0)
		jsr     SingleObjLoad        ; (loc_E772)
		bne.w    loc_124FC
		_move.b  #$0A, 0(A1)
		move.w  ($FFFFB008).w, $0008(A1)
		moveq   #$06, D0
		btst    #$00, ($FFFFB022).w
		beq.s   loc_12462
		neg.w   D0
		move.b  #$40, $0026(A1)
loc_12462:
		add.w   D0, $0008(A1)
		move.w  ($FFFFB00C).w, $000C(A1)
		move.b  #$06, $0028(A1)
		tst.w   $002C(A0)
		beq.w    loc_124AE
		andi.w  #$0007, $003A(A0)
		addi.w  #$0000, $003A(A0)
		move.w  ($FFFFB00C).w, D0
		subi.w  #$000C, D0
		move.w  D0, $000C(A1)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		move.b  D0, $0026(A1)
		move.w  (Timer_frames).w, D0
		andi.b  #$03, D0
		bne.s   loc_124F2
		move.b  #$0E, $0028(A1)
		bra.s   loc_124F2
loc_124AE:
		btst    #$07, $0036(A0)
		beq.s   loc_124F2
		move.w  (Current_Air).w, D2
		lsr.w   #$01, D2
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$0003, D0
		bne.s   loc_124DA
		bset    #$06, $0036(A0)
		bne.s   loc_124F2
		move.b  D2, $0028(A1)
		move.w  #$001C, $0038(A1)
loc_124DA:
		tst.b   $0034(A0)
		bne.s   loc_124F2
		bset    #$06, $0036(A0)
		bne.s   loc_124F2
		move.b  D2, $0028(A1)
		move.w  #$001C, $0038(A1)
loc_124F2:
		subq.b  #$01, $0034(A0)
		bpl.s   loc_124FC
		clr.w   $0036(A0)
loc_124FC:
		rts               
ResumeMusic: ; loc_124FE:
		cmpi.w  #$000C, (Current_Air).w
		bhi.s   loc_12524
		move.w  #S1MusID_LZ, D0
		tst.b   (Invincibility).w
		beq.s   loc_12514
		move.w  #S1MusID_Invinc, D0
loc_12514:
		tst.b   (Current_Boss_ID).w
		beq.s   loc_1251E
		move.w  #S1MusID_Boss, D0
loc_1251E:
		jsr     (PlayMusic).l            ; loc_14C0
loc_12524:
		move.w  #$001E, (Current_Air).w
		clr.b   ($FFFFB372).w
		rts            
loc_12530:
		dc.w    loc_1254E-loc_12530
		dc.w    loc_12557-loc_12530
		dc.w    loc_12560-loc_12530
		dc.w    loc_12569-loc_12530
		dc.w    loc_12572-loc_12530
		dc.w    loc_1257B-loc_12530
		dc.w    loc_12584-loc_12530
		dc.w    loc_12589-loc_12530
		dc.w    loc_12591-loc_12530
		dc.w    loc_12599-loc_12530
		dc.w    loc_125A1-loc_12530
		dc.w    loc_125A9-loc_12530
		dc.w    loc_125B1-loc_12530
		dc.w    loc_125B9-loc_12530
		dc.w    loc_125BB-loc_12530
loc_1254E:
		dc.b    $05, $00, $01, $02, $03, $04, $09, $0D, $FC
loc_12557:
		dc.b    $05, $00, $01, $02, $03, $04, $0C, $12, $FC
loc_12560:
		dc.b    $05, $00, $01, $02, $03, $04, $0C, $11, $FC
loc_12569:
		dc.b    $05, $00, $01, $02, $03, $04, $0B, $10, $FC
loc_12572:
		dc.b    $05, $00, $01, $02, $03, $04, $09, $0F, $FC
loc_1257B:
		dc.b    $05, $00, $01, $02, $03, $04, $0A, $0E, $FC
loc_12584:
		dc.b    $0E, $00, $01, $02, $FC
loc_12589:
		dc.b    $07, $16, $0D, $16, $0D, $16, $0D, $FC
loc_12591:
		dc.b    $07, $16, $12, $16, $12, $16, $12, $FC
loc_12599:
		dc.b    $07, $16, $11, $16, $11, $16, $11, $FC
loc_125A1:
		dc.b    $07, $16, $10, $16, $10, $16, $10, $FC
loc_125A9:
		dc.b    $07, $16, $0F, $16, $0F, $16, $0F, $FC
loc_125B1:
		dc.b    $07, $16, $0E, $16, $0E, $16, $0E, $FC
loc_125B9:
		dc.b    $0E, $FC
loc_125BB:
		dc.b    $0E, $01, $02, $03, $04, $FC, $00 
Obj_0x0A_Numbers_Mappings: ; loc_125C2:
		dc.w    loc_125C4-Obj_0x0A_Numbers_Mappings
loc_125C4:
		dc.w    $0001
		dc.l    $E80E0000, $0000FFF2		
;=============================================================================== 
; Object 0x0A - 
; [ End ]
;=============================================================================== 
;=============================================================================== 
; Object 0x38 - 
; [ Begin ]
;===============================================================================  
Obj_0x38_Shield: ; loc_125CE:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_125DC(PC, D0), D1
		jmp     loc_125DC(PC, D1)
loc_125DC:		 
		dc.w    loc_125E0-loc_125DC
		dc.w    loc_12616-loc_125DC
loc_125E0:
		addq.b  #$02, $0024(A0)
		move.l  #loc_12BB0, $0004(A0)
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$18, $0019(A0)
		move.w  #$04BE, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		btst    #$07, ($FFFFB002).w
		beq.s   loc_12616
		bset    #$07, $0002(A0)
loc_12616:
		tst.b   (Invincibility).w
		bne.s   loc_12646
		tst.b   (Shield).w
		beq.s   J_DeleteObject_03       ; loc_12648
		move.w  ($FFFFB008).w, $0008(A0)
		move.w  ($FFFFB00C).w, $000C(A0)
		move.b  ($FFFFB022).w, $0022(A0)
		lea     (loc_12BA2).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		jmp     DisplaySprite           ; (loc_D3C2)
loc_12646:
		rts    
J_DeleteObject_03: ; loc_12648:
		jmp     DeleteObject            ; (loc_D3B4)
;=============================================================================== 
; Object 0x38 - 
; [ End ]
;===============================================================================  
;=============================================================================== 
; Object 0x35 - 
; [ Begin ]
;===============================================================================		   
Obj_0x35_Invincibility: ; loc_1264E:
		moveq   #$00, D0
		move.b  $000A(A0), D0
		move.w  loc_1265C(PC, D0), D1
		jmp     loc_1265C(PC, D1)
loc_1265C:
		dc.w    loc_12660-loc_1265C
		dc.w    loc_1268E-loc_1265C
loc_12660:
		addq.b  #$02, $000A(A0)
		move.l  #loc_12C88, $0004(A0)
		move.w  #$04DE, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		bset    #$06, $0001(A0)
		move.b  #$10, $000E(A0)
		move.b  #$08, $000F(A0)
loc_1268E:
		tst.b   (Invincibility).w
		beq.w    DeleteObject            ; loc_D3B4
		lea     ($FFFFB000).w, A1
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		move.b  $0022(A1), D6
		lea     (loc_127B0).l, A2
		move.b  $0026(A1), D1
		btst    #$01, D6
		beq.s   loc_126C0
		move.b  $002B(A1), D1
		moveq   #$00, D6
loc_126C0:
		andi.b  #$01, D6
		beq.s   loc_126C8
		neg.w   D1
loc_126C8:
		addi.b  #$10, D1
		lsr.b   #$03, D1
		andi.w  #$001C, D1
		lea     $00(A2, D1), A2
		subq.w  #$08, D1
		andi.w  #$0010, D1
		bne.s   loc_126E2
		eori.b  #$01, D6
loc_126E2:
		move.b  (Timer_frames+1).w, D0
		andi.b  #$01, D0
		lea     (loc_127D0).l, A3
		beq.s   loc_126FA
		lea     (loc_12938).l, A3
		addq.w  #$02, A2
loc_126FA:
		move.w  $0008(A1), D4
		move.b  (A2)+, D1
		ext.w   D1
		andi.b  #$01, D6
		beq.s   loc_1270A
		neg.w   D1
loc_1270A:
		add.w   D1, D4
		move.w  $000C(A1), D5
		move.b  (A2)+, D1
		ext.w   D1
		add.w   D1, D5
		moveq   #$00, D0
		move.b  $001A(A0), D0
		addq.b  #$06, D0
		cmpi.b  #$78, D0
		bcs.s   loc_12726
		moveq   #$00, D0
loc_12726:
		move.b  D0, $001A(A0)
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		lea     $00(A3, D0), A3
		lea     $0010(A0), A2
		moveq   #$00, D0
		moveq   #$05, D1
loc_1273C:		
		move.b  (A3)+, D0
		move.b  (A3)+, D2
		ext.w   D2
		andi.b  #$01, D6
		beq.s   loc_1274A
		neg.w   D2
loc_1274A:
		add.w   D4, D2
		move.b  (A3)+, D3
		ext.w   D3
		add.w   D5, D3
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addq.w  #$01, A2
		move.b  D0, (A2)+
		dbf    D1, loc_1273C
		move.w  $0008(A1), D4
		move.w  $000C(A1), D5
		moveq   #$00, D0
		move.b  $0004(A0), D0
		addq.b  #$06, D0
		cmpi.b  #$A2, D0
		bcs.s   loc_12776
		moveq   #$00, D0
loc_12776:
		move.b  D0, $0004(A0)
		lea     (loc_12AA0).l, A3
		lea     $00(A3, D0), A3
		moveq   #$01, D1
loc_12786:		
		move.b  (A3)+, D0
		move.b  (A3)+, D2
		ext.w   D2
		andi.b  #$01, D6
		beq.s   loc_12794
		neg.w   D2
loc_12794:
		add.w   D4, D2
		move.b  (A3)+, D3
		ext.w   D3
		add.w   D5, D3
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		addq.w  #$01, A2
		move.b  D0, (A2)+
		dbf    D1, loc_12786
		move.w  #$0080, D0
		bra.w     DisplaySprite_Param     ; loc_D3FE  
loc_127B0:
		dc.w    $0000, $0000, $00F8, $00F0, $04F0, $04E0, $00F8, $00F0
		dc.w    $0000, $0000, $0008, $0010, $0410, $0420, $0008, $0010  
loc_127D0:
		dc.b    $02, $F8, $F9, $05, $E5, $F9, $04, $E6, $08, $02, $E8, $FD, $00, $00, $00, $00
		dc.b    $00, $00, $03, $F7, $F9, $02, $F8, $07, $06, $E4, $F9, $05, $E5, $08, $03, $E7
		dc.b    $FD, $00, $00, $00, $04, $F6, $F9, $03, $F7, $07, $05, $E3, $FA, $06, $E4, $09
		dc.b    $04, $E6, $FC, $00, $00, $00, $05, $F5, $F9, $04, $F6, $08, $04, $E2, $FB, $05
		dc.b    $E3, $09, $05, $E5, $FC, $00, $00, $00, $06, $F4, $F9, $05, $F5, $08, $02, $F8
		dc.b    $FD, $03, $E1, $FC, $04, $E2, $0A, $06, $E4, $FB, $05, $F3, $FA, $06, $F4, $09
		dc.b    $03, $F7, $FD, $02, $E0, $FD, $03, $E1, $0A, $05, $E3, $FB, $04, $F2, $FB, $05
		dc.b    $F3, $09, $04, $F6, $FC, $01, $DF, $00, $02, $E0, $0B, $04, $E2, $FA, $03, $F1
		dc.b    $FC, $04, $F2, $0A, $05, $F5, $FC, $02, $F8, $02, $01, $DF, $0B, $03, $E1, $FA
		dc.b    $02, $F0, $FD, $03, $F1, $0A, $06, $F4, $FB, $03, $F7, $02, $02, $E0, $FA, $00
		dc.b    $00, $00, $01, $EF, $00, $02, $F0, $0B, $05, $F3, $FB, $04, $F6, $03, $01, $DF
		dc.b    $FA, $00, $00, $00, $01, $EE, $00, $01, $EF, $0B, $04, $F2, $FA, $05, $F5, $03
		dc.b    $02, $F8, $0E, $00, $00, $00, $01, $ED, $01, $01, $EE, $0C, $03, $F1, $FA, $06
		dc.b    $F4, $03, $03, $F7, $0E, $00, $00, $00, $01, $ED, $03, $01, $ED, $0D, $02, $F0
		dc.b    $FA, $05, $F3, $02, $04, $F6, $0D, $00, $00, $00, $01, $EC, $05, $01, $EC, $0D
		dc.b    $01, $EF, $FA, $04, $F2, $02, $05, $F5, $0D, $02, $F8, $F5, $01, $EB, $07, $01
		dc.b    $EB, $0D, $01, $EE, $F9, $03, $F1, $02, $06, $F4, $0C, $03, $F7, $F5, $01, $EA
		dc.b    $08, $01, $EA, $0D, $01, $ED, $F8, $02, $F0, $01, $05, $F3, $0C, $04, $F6, $F5
		dc.b    $01, $E9, $09, $01, $E9, $0D, $01, $EC, $F8, $01, $EF, $01, $04, $F2, $0B, $05
		dc.b    $F5, $F5, $01, $EB, $F7, $01, $EE, $00, $03, $F1, $0A, $05, $F4, $F6, $02, $E8
		dc.b    $F9, $00, $00, $00, $01, $EA, $F7, $01, $ED, $00, $02, $F0, $0A, $04, $F3, $F6
		dc.b    $03, $E7, $F9, $02, $E8, $07, $01, $E9, $F6, $01, $EC, $00, $01, $EF, $09, $03
		dc.b    $F2, $F6, $04, $E6, $F9, $03, $E7, $07    
loc_12938:
		dc.b    $01, $E6, $00, $01, $E7, $0B, $04, $EA, $FA, $05, $ED, $03, $02, $F0, $0E, $00
		dc.b    $00, $00, $01, $E5, $01, $01, $E6, $0C, $03, $E9, $FA, $06, $EC, $03, $03, $F1
		dc.b    $0E, $00, $00, $00, $01, $E5, $03, $01, $E5, $03, $02, $E8, $FA, $05, $EB, $02
		dc.b    $04, $EE, $0D, $00, $00, $00, $01, $E4, $05, $01, $E4, $0D, $01, $E7, $FA, $04
		dc.b    $EA, $02, $05, $ED, $0D, $02, $F0, $F5, $01, $E3, $07, $01, $E3, $0D, $01, $E6
		dc.b    $F9, $03, $E9, $02, $06, $EC, $0C, $03, $EF, $F5, $01, $E2, $08, $01, $E2, $0D
		dc.b    $01, $E5, $F8, $02, $E8, $01, $05, $EB, $0C, $04, $EE, $F5, $01, $E1, $09, $01
		dc.b    $E1, $0D, $01, $E4, $F8, $01, $E7, $01, $04, $EA, $0B, $05, $ED, $F5, $01, $E3
		dc.b    $F7, $01, $E6, $00, $03, $E9, $0A, $05, $EC, $F6, $02, $E8, $02, $00, $00, $00
		dc.b    $01, $E2, $F7, $01, $E5, $00, $02, $E8, $0A, $04, $EB, $F6, $03, $E7, $02, $02
		dc.b    $E8, $0E, $01, $E1, $F6, $01, $E4, $00, $01, $E7, $09, $03, $EA, $F6, $04, $E6
		dc.b    $03, $03, $E7, $0E, $02, $F0, $F9, $05, $E5, $03, $04, $E6, $0D, $02, $E8, $F5
		dc.b    $00, $00, $00, $00, $00, $00, $03, $EF, $F9, $02, $F0, $07, $06, $E4, $03, $05
		dc.b    $E5, $0D, $03, $E7, $F5, $00, $00, $00, $04, $EE, $F9, $03, $EF, $07, $05, $E3
		dc.b    $02, $06, $E4, $0C, $04, $E6, $F5, $00, $00, $00, $05, $ED, $F9, $04, $EE, $08
		dc.b    $04, $E2, $02, $05, $E3, $0C, $05, $E5, $F5, $00, $00, $00, $06, $EC, $F9, $05
		dc.b    $ED, $08, $02, $F0, $FD, $03, $E1, $02, $04, $E2, $0B, $06, $E4, $F6, $05, $EB
		dc.b    $FA, $06, $EC, $09, $03, $EF, $FD, $02, $E0, $01, $03, $E1, $0A, $05, $E3, $F6
		dc.b    $04, $EA, $FB, $05, $EB, $09, $04, $EE, $FD, $01, $DF, $01, $02, $E0, $0A, $04
		dc.b    $E2, $F6, $03, $E9, $FC, $04, $EA, $0A, $05, $ED, $FC, $02, $F0, $02, $01, $DF
		dc.b    $09, $03, $E1, $F7, $02, $E8, $FD, $03, $E9, $0A, $06, $EC, $FB, $03, $EF, $02
		dc.b    $02, $E0, $F7, $00, $00, $00, $01, $E7, $00, $02, $E8, $0B, $05, $EB, $FB, $04
		dc.b    $EE, $03, $01, $DF, $F8, $00, $00, $00      
loc_12AA0:
		dc.b    $04, $08, $09, $04, $FC, $01, $05, $08, $09, $05, $FC, $01, $06, $08, $09, $06
		dc.b    $FC, $01, $07, $08, $09, $07, $FC, $01, $08, $08, $09, $08, $FC, $01, $07, $08
		dc.b    $09, $07, $FC, $01, $06, $08, $09, $06, $FC, $01, $05, $08, $09, $05, $FC, $01
		dc.b    $04, $08, $09, $04, $FC, $01, $04, $F9, $F7, $04, $0B, $FC, $05, $F9, $F7, $05
		dc.b    $0B, $FC, $06, $F9, $F7, $06, $0B, $FC, $07, $F9, $F7, $07, $0B, $FC, $08, $F9
		dc.b    $F7, $08, $0B, $FC, $07, $F9, $F7, $07, $0B, $FC, $06, $F9, $F7, $06, $0B, $FC
		dc.b    $05, $F9, $F7, $05, $0B, $FC, $04, $F9, $F7, $04, $0B, $FC, $04, $03, $F1, $04
		dc.b    $F4, $09, $05, $03, $F1, $05, $F4, $09, $06, $03, $F1, $06, $F4, $09, $07, $03
		dc.b    $F1, $07, $F4, $09, $08, $03, $F1, $08, $F4, $09, $07, $03, $F1, $07, $F4, $09
		dc.b    $06, $03, $F1, $06, $F4, $09, $05, $03, $F1, $05, $F4, $09, $04, $03, $F1, $04
		dc.b    $F4, $09						         
;=============================================================================== 
; Object 0x35 - 
; [ End ]
;===============================================================================       

;=============================================================================== 
; Object 0x08 - 
; [ Begin ]
;===============================================================================       
Obj_0x08_Water_Splash: ; loc_12B42:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_12B50(PC, D0), D1
		jmp     loc_12B50(PC, D1)
loc_12B50:
		dc.w    loc_12B56-loc_12B50
		dc.w    loc_12B84-loc_12B50
		dc.w    J_DeleteObject_04-loc_12B50 ; loc_12B9C-...
loc_12B56:
		addq.b  #$02, $0024(A0)
		move.l  #Obj_0x08_Mappings, $0004(A0) ; loc_12CF4
		ori.b   #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$10, $0019(A0)
		move.w  #$449C, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.w  ($FFFFB008).w, $0008(A0)
loc_12B84:
		move.w  (Water_Level_1).w, $000C(A0)
		lea     (loc_12CEC).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_04: ; loc_12B9C:
		jmp     DeleteObject            ; (loc_D3B4)
loc_12BA2:
		dc.w    loc_12BA4-loc_12BA2
loc_12BA4:
		dc.b    $00, $05, $00, $05, $01, $05, $02, $05, $03, $05, $04, $FF
loc_12BB0:
		dc.w    loc_12BBC-loc_12BB0
		dc.w    loc_12BDE-loc_12BB0
		dc.w    loc_12C00-loc_12BB0
		dc.w    loc_12C22-loc_12BB0
		dc.w    loc_12C44-loc_12BB0
		dc.w    loc_12C66-loc_12BB0
loc_12BBC:
		dc.w    $0004
		dc.l    $F0050000, $0000FFF0, $F0050800, $08000000
		dc.l    $00051000, $1000FFF0, $00051800, $18000000
loc_12BDE:
		dc.w    $0004
		dc.l    $F0050004, $0002FFF0, $F0050804, $08020000
		dc.l    $00051004, $1002FFF0, $00051804, $18020000
loc_12C00:
		dc.w    $0004
		dc.l    $F0050008, $0004FFF0, $F0050808, $08040000
		dc.l    $00051008, $1004FFF0, $00051808, $18040000
loc_12C22:
		dc.w    $0004
		dc.l    $F005000C, $0006FFF0, $F005080C, $08060000
		dc.l    $0005100C, $1006FFF0, $0005180C, $18060000
loc_12C44:
		dc.w    $0004
		dc.l    $F0050010, $0008FFF0, $F0050810, $08080000
		dc.l    $00051010, $1008FFF0, $00051810, $18080000
loc_12C66:
		dc.w    $0004
		dc.l    $E00B0014, $000AFFE8, $E00B0814, $080A0000
		dc.l    $000B1014, $100AFFE8, $000B1814, $180A0000
loc_12C88:
		dc.w    loc_12C9A-loc_12C88
		dc.w    loc_12C9C-loc_12C88
		dc.w    loc_12CA6-loc_12C88
		dc.w    loc_12CB0-loc_12C88
		dc.w    loc_12CBA-loc_12C88
		dc.w    loc_12CC4-loc_12C88
		dc.w    loc_12CCE-loc_12C88
		dc.w    loc_12CD8-loc_12C88
		dc.w    loc_12CE2-loc_12C88
loc_12C9A:
		dc.w    $0000
loc_12C9C:
		dc.w    $0001
		dc.l    $F8010000, $0000FFFC
loc_12CA6:
		dc.w    $0001
		dc.l    $F8010002, $0001FFFC
loc_12CB0:
		dc.w    $0001
		dc.l    $F8010004, $0002FFFC
loc_12CBA:
		dc.w    $0001
		dc.l    $F8010006, $0003FFFC
loc_12CC4:
		dc.w    $0001
		dc.l    $F8010008, $0004FFFC
loc_12CCE:
		dc.w    $0001
		dc.l    $F805000A, $0005FFF8
loc_12CD8:
		dc.w    $0001
		dc.l    $F805000E, $0007FFF8
loc_12CE2:
		dc.w    $0001
		dc.l    $F00F0012, $0009FFF0
loc_12CEC:		
		dc.w    loc_12CEE-loc_12CEC
loc_12CEE:
		dc.b    $04, $00, $01, $02, $FC, $00  
Obj_0x08_Mappings:		 
loc_12CF4:
		dc.w    loc_12CFA-loc_12CF4
		dc.w    loc_12D0C-loc_12CF4
		dc.w    loc_12D1E-loc_12CF4
loc_12CFA:
		dc.w    $0002
		dc.l    $F204006D, $0036FFF8, $FA0C006F, $0037FFF0
loc_12D0C:
		dc.w    $0002
		dc.l    $E2000073, $0039FFF8, $EA0E0074, $003AFFF0
loc_12D1E:
		dc.w    $0001
		dc.l    $E20F0080, $0040FFF0
;=============================================================================== 
; Object 0x08 - 
; [ End ]
;===============================================================================

;=============================================================================== 
; Sub Routine AnglePos
; [ Begin ]		         
;===============================================================================        
; loc_12D28: Sonic_AnglePos:
AnglePos:
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A0)
		beq.s   loc_12D40
		move.l  #Secondary_Collision, (Collision_addr).w
loc_12D40:
		move.b  $003E(A0), D5
		btst    #$03, $0022(A0)
		beq.s   loc_12D58
		moveq   #$00, D0
		move.b  D0, (Primary_Angle).w
		move.b  D0, (Secondary_Angle).w
		rts
loc_12D58:
		moveq   #$03, D0
		move.b  D0, (Primary_Angle).w
		move.b  D0, (Secondary_Angle).w
		move.b  $0026(A0), D0
		addi.b  #$20, D0
		bpl.s   loc_12D7A
		move.b  $0026(A0), D0
		bpl.s   loc_12D74
		subq.b  #$01, D0
loc_12D74:
		addi.b  #$20, D0
		bra.s   loc_12D86
loc_12D7A:
		move.b  $0026(A0), D0
		bpl.s   loc_12D82
		addq.b  #$01, D0
loc_12D82:
		addi.b  #$1F, D0
loc_12D86:
		andi.b  #$C0, D0
		cmpi.b  #$40, D0
		beq.w    Sonic_WalkVertL         ; loc_12FDC
		cmpi.b  #$80, D0
		beq.w    Sonic_WalkCeiling       ; loc_12F2E
		cmpi.b  #$C0, D0
		beq.w    Sonic_WalkVertR         ; loc_12E86
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0017(A0), D0
		ext.w   D0
		neg.w   D0
		add.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  (A7)+, D0
		bsr.w     Sonic_Angle             ; loc_12E4A
		tst.w   D1
		beq.s   loc_12E10
		bpl.s   loc_12E12
		cmpi.w  #$FFF2, D1
		blt.s   loc_12E10
		add.w   D1, $000C(A0)
loc_12E10:
		rts
loc_12E12:
		move.b  $0010(A0), D0
		bpl.s   loc_12E1A
		neg.b   D0
loc_12E1A:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   loc_12E26
		move.b  #$0E, D0
loc_12E26:
		cmp.b   D0, D1
		bgt.s   loc_12E30
loc_12E2A:
		add.w   D1, $000C(A0)
		rts
loc_12E30:
		tst.b   $0038(A0)
		bne.s   loc_12E2A 
		bset    #$01, $0022(A0)
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
		rts
		
;=============================================================================== 
; Sub Routine Sonic_Angle
; [ Begin ]		         
;===============================================================================		   
Sonic_Angle: ; loc_12E4A:
		move.b  (Secondary_Angle).w, D2
		cmp.w   D0, D1
		ble.s   loc_12E58
		move.b  (Primary_Angle).w, D2
		move.w  D0, D1
loc_12E58:
		btst    #$00, D2
		bne.s   loc_12E74
		move.b  D2, D0
		sub.b   $0026(A0), D0
		bpl.s   loc_12E68
		neg.b   D0
loc_12E68:
		cmpi.b  #$20, D0
		bcc.s   loc_12E74
		move.b  D2, $0026(A0)
		rts
loc_12E74:
		move.b  $0026(A0), D2
		addi.b  #$20, D2
		andi.b  #$C0, D2
		move.b  D2, $0026(A0)
		rts    
;===============================================================================		
Sonic_WalkVertR: ; loc_12E86:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		neg.w   D0
		add.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindWall		; loc_1349E
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindWall		; loc_1349E
		move.w  (A7)+, D0
		bsr.w     Sonic_Angle             ; loc_12E4A		
		tst.w   D1
		beq.s   loc_12EF4
		bpl.s   loc_12EF6
		cmpi.w  #$FFF2, D1
		blt.s   loc_12EF4		 
		add.w   D1, $0008(A0)
loc_12EF4:
		rts
loc_12EF6:
		move.b  $0012(A0), D0
		bpl.s   loc_12EFE
		neg.b   D0  
loc_12EFE:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   loc_12F0A
		move.b  #$0E, D0
loc_12F0A:		
		cmp.b   D0, D1
		bgt.s   loc_12F14
loc_12F0E:
		add.w   D1, $0008(A0)
		rts
loc_12F14:
		tst.b   $0038(A0)
		bne.s   loc_12F0E
		bset    #$01, $0022(A0)
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
		rts
;===============================================================================		
Sonic_WalkCeiling: ; loc_12F2E:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  (A7)+, D0
		bsr.w     Sonic_Angle             ; loc_12E4A
		tst.w   D1
		beq.s   loc_12FA2
		bpl.s   loc_12FA4
		cmpi.w  #$FFF2, D1
		blt.s   loc_12FA2
		sub.w   D1, $000C(A0)
loc_12FA2:
		rts
loc_12FA4:
		move.b  $0010(A0), D0
		bpl.s   loc_12FAC
		neg.b   D0
loc_12FAC:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   loc_12FB8
		move.b  #$0E, D0
loc_12FB8:
		cmp.b   D0, D1
		bgt.s   loc_12FC2
loc_12FBC:
		sub.w   D1, $000C(A0)
		rts
loc_12FC2:
		tst.b   $0038(A0)
		bne.s   loc_12FBC   
		bset    #$01, $0022(A0)
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
		rts
;===============================================================================		
Sonic_WalkVertL: ; loc_12FDC:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr.w     FindWall		; loc_1349E
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr.w     FindWall		; loc_1349E
		move.w  (A7)+, D0
		bsr.w     Sonic_Angle             ; loc_12E4A
		tst.w   D1
		beq.s   loc_13050
		bpl.s   loc_13052
		cmpi.w  #$FFF2, D1
		blt.s   loc_13050
		sub.w   D1, $0008(A0)
loc_13050:
		rts
loc_13052:
		move.b  $0012(A0), D0
		bpl.s   loc_1305A
		neg.b   D0
loc_1305A:
		addq.b  #$04, D0
		cmpi.b  #$0E, D0
		bcs.s   loc_13066
		move.b  #$0E, D0
loc_13066:		
		cmp.b   D0, D1
		bgt.s   loc_13070
loc_1306A:
		sub.w   D1, $0008(A0)
		
		rts
loc_13070:
		tst.b   $0038(A0)
		bne.s   loc_1306A
		bset    #$01, $0022(A0)  
		bclr    #$05, $0022(A0)
		move.b  #$01, $001D(A0)
		rts
		
;=============================================================================== 
; Sub Routine Floor_ChkTile
; [ Begin ]		         
;===============================================================================		  
Floor_ChkTile: ; loc_1308A:
		move.w  D2, D0
		add.w   D0, D0
		andi.w  #$0F00, D0
		move.w  D3, D1
		lsr.w   #$03, D1
		move.w  D1, D4
		lsr.w   #$04, D1
		andi.w  #$007F, D1
		add.w   D1, D0
		moveq   #-1, D1
		clr.w   D1
		lea     (Level_Layout).w, A1
		move.b  $00(A1, D0), D1
		add.w   D1, D1
		move.w  loc_130C4(PC, D1), D1
		move.w  D2, D0
		andi.w  #$0070, D0
		add.w   D0, D1
		andi.w  #$000E, D4
		add.w   D4, D1
		move.l  D1, A1
		rts
loc_130C4:
		dc.w    $0000, $0080, $0100, $0180, $0200, $0280, $0300, $0380
		dc.w    $0400, $0480, $0500, $0580, $0600, $0680, $0700, $0780
		dc.w    $0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
		dc.w    $0C00, $0C80, $0D00, $0D80, $0E00, $0E80, $0F00, $0F80
		dc.w    $1000, $1080, $1100, $1180, $1200, $1280, $1300, $1380
		dc.w    $1400, $1480, $1500, $1580, $1600, $1680, $1700, $1780
		dc.w    $1800, $1880, $1900, $1980, $1A00, $1A80, $1B00, $1B80
		dc.w    $1C00, $1C80, $1D00, $1D80, $1E00, $1E80, $1F00, $1F80
		dc.w    $2000, $2080, $2100, $2180, $2200, $2280, $2300, $2380
		dc.w    $2400, $2480, $2500, $2580, $2600, $2680, $2700, $2780
		dc.w    $2800, $2880, $2900, $2980, $2A00, $2A80, $2B00, $2B80
		dc.w    $2C00, $2C80, $2D00, $2D80, $2E00, $2E80, $2F00, $2F80
		dc.w    $3000, $3080, $3100, $3180, $3200, $3280, $3300, $3380
		dc.w    $3400, $3480, $3500, $3580, $3600, $3680, $3700, $3780
		dc.w    $3800, $3880, $3900, $3980, $3A00, $3A80, $3B00, $3B80
		dc.w    $3C00, $3C80, $3D00, $3D80, $3E00, $3E80, $3F00, $3F80
		dc.w    $4000, $4080, $4100, $4180, $4200, $4280, $4300, $4380
		dc.w    $4400, $4480, $4500, $4580, $4600, $4680, $4700, $4780
		dc.w    $4800, $4880, $4900, $4980, $4A00, $4A80, $4B00, $4B80
		dc.w    $4C00, $4C80, $4D00, $4D80, $4E00, $4E80, $4F00, $4F80
		dc.w    $5000, $5080, $5100, $5180, $5200, $5280, $5300, $5380
		dc.w    $5400, $5480, $5500, $5580, $5600, $5680, $5700, $5780
		dc.w    $5800, $5880, $5900, $5980, $5A00, $5A80, $5B00, $5B80
		dc.w    $5C00, $5C80, $5D00, $5D80, $5E00, $5E80, $5F00, $5F80
		dc.w    $6000, $6080, $6100, $6180, $6200, $6280, $6300, $6380
		dc.w    $6400, $6480, $6500, $6580, $6600, $6680, $6700, $6780
		dc.w    $6800, $6880, $6900, $6980, $6A00, $6A80, $6B00, $6B80
		dc.w    $6C00, $6C80, $6D00, $6D80, $6E00, $6E80, $6F00, $6F80
		dc.w    $7000, $7080, $7100, $7180, $7200, $7280, $7300, $7380
		dc.w    $7400, $7480, $7500, $7580, $7600, $7680, $7700, $7780
		dc.w    $7800, $7880, $7900, $7980, $7A00, $7A80, $7B00, $7B80
		dc.w    $7C00, $7C80, $7D00, $7D80, $7E00, $7E80, $7F00, $7F80
		
;=============================================================================== 
; Sub Routine FindFloor
; [ Begin ]		         
;===============================================================================		  
FindFloor: ; loc_132C4:		
		bsr.w     Floor_ChkTile           ; loc_1308A
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   loc_132D6
		btst    D5, D4
		bne.s   loc_132E4
loc_132D6:
		add.w   A3, D2
		bsr.w     FindFloor2              ; loc_1336A
		sub.w   A3, D2
		addi.w  #$0010, D1
		rts
loc_132E4:
		move.l  (Collision_addr).w, A2
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   loc_132D6
		lea     (AngleMap).l, A2          ; loc_2D1EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   loc_13308
		not.w   D1
		neg.b   (A4)
loc_13308:
		btst    #$0B, D4
		beq.s   loc_13318
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)		
loc_13318:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1).l, A2  ; loc_2D2EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   loc_13334
		neg.w   D0
loc_13334:
		tst.w   D0
		beq.s   loc_132D6
		bmi.s   loc_13350
		cmpi.b  #$10, D0
		beq.s   loc_1335C
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
loc_13350:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl.w    loc_132D6
loc_1335C:		
		sub.w   A3, D2
		bsr.w     FindFloor2              ; loc_1336A
		add.w   A3, D2
		subi.w  #$0010, D1
		rts
;=============================================================================== 
; Sub Routine FindFloor
; [ End ]		         
;=============================================================================== 

;=============================================================================== 
; Sub Routine FindFloor2
; [ Begin ]		         
;===============================================================================		 
FindFloor2: ; loc_1336A:
		bsr.w     Floor_ChkTile           ; loc_1308A
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   loc_1337C
		btst    D5, D4
		bne.s   loc_1338A
loc_1337C:
		move.w  #$000F, D1
		move.w  D2, D0
		andi.w  #$000F, D0
		sub.w   D0, D1
		rts
loc_1338A:
		move.l  (Collision_addr).w, A2
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   loc_1337C
		lea     (AngleMap).l, A2          ; loc_2D1EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   loc_133AE
		not.w   D1
		neg.b   (A4)
loc_133AE:
		btst    #$0B, D4
		beq.s   loc_133BE
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
loc_133BE:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1).l, A2  ; loc_2D2EA
		move.b  $00(A2, D1), D0		  
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   loc_133DA
		neg.w   D0		 
loc_133DA:
		tst.w   D0
		beq.s   loc_1337C 
		bmi.s   loc_133F0
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
loc_133F0:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl.w    loc_1337C
		not.w  d1
		rts
loc_13400:
		bsr.w     Floor_ChkTile           ; loc_1308A
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   loc_13412
		btst    D5, D4
		bne.s   loc_13418
loc_13412:
		move.w  #$0010, D1
		rts
loc_13418:
		move.l  (Collision_addr).w, A2
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   loc_13412
		lea     (AngleMap).l, A2          ; loc_2D1EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D3, D1
		btst    #$0A, D4
		beq.s   loc_1343C
		not.w   D1
		neg.b   (A4)
loc_1343C:
		btst    #$0B, D4
		beq.s   loc_1344C
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
loc_1344C:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_1).l, A2  ; loc_2D2EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0B, D4
		beq.s   loc_13468
		neg.w   D0
loc_13468:
		tst.w   D0
		beq.s   loc_13412
		bmi.s   loc_13484
		cmpi.b  #$10, D0
		beq.s   loc_13490
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
loc_13484:
		move.w  D2, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl.w    loc_13412
loc_13490:
		sub.w   A3, D2
		bsr.w     FindFloor2              ; loc_1336A
		add.w   A3, D2
		subi.w  #$0010, D1
		rts
;=============================================================================== 
; Sub Routine FindFloor2
; [ End ]		         
;===============================================================================		 
            
;=============================================================================== 
; Sub Routine FindWall
; [ Begin ]		         
;===============================================================================		  
FindWall: ; loc_1349E:
		bsr.w     Floor_ChkTile           ; loc_1308A
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   loc_134B0
		btst    D5, D4
		bne.s   loc_134BE
loc_134B0:
		add.w   A3, D3
		bsr.w     FindWall2               ; loc_13544
		sub.w   A3, D3
		addi.w  #$0010, D1
		rts
loc_134BE:
		move.l  (Collision_addr).w, A2
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   loc_134B0
		lea     (AngleMap).l, A2          ; loc_2D1EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D2, D1
		btst    #$0B, D4
		beq.s   loc_134EA
		not.w   D1
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
loc_134EA:
		btst    #$0A, D4
		beq.s   loc_134F2
		neg.b   (A4)
loc_134F2:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_2).l, A2  ; loc_2E2EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0A, D4
		beq.s   loc_1350E
		neg.w   D0
loc_1350E:
		tst.w   D0
		beq.s   loc_134B0
		bmi.s   loc_1352A
		cmpi.b  #$10, D0
		beq.s   loc_13536
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
loc_1352A:
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl.w    loc_134B0
loc_13536:
		sub.w   A3, D3
		bsr.w     FindWall2               ; loc_13544
		add.w   A3, D3
		subi.w  #$0010, D1
		rts
;=============================================================================== 
; Sub Routine FindWall
; [ End ]		         
;===============================================================================    

;=============================================================================== 
; Sub Routine FindWall2
; [ Begin ]		         
;===============================================================================		 
FindWall2: ; loc_13544:
		bsr.w     Floor_ChkTile           ; loc_1308A
		move.w  (A1), D0
		move.w  D0, D4
		andi.w  #$03FF, D0
		beq.s   loc_13556
		btst    D5, D4
		bne.s   loc_13564
loc_13556:
		move.w  #$000F, D1
		move.w  D3, D0
		andi.w  #$000F, D0
		sub.w   D0, D1
		rts
loc_13564:
		move.l  (Collision_addr).w, A2
		add.w   D0, D0
		move.w  $00(A2, D0), D0
		beq.s   loc_13556
		lea     (AngleMap).l, A2          ; loc_2D1EA
		move.b  $00(A2, D0), (A4)
		lsl.w   #$04, D0
		move.w  D2, D1
		btst    #$0B, D4
		beq.s   loc_13590
		not.w   D1
		addi.b  #$40, (A4)
		neg.b   (A4)
		subi.b  #$40, (A4)
loc_13590:
		btst    #$0A, D4
		beq.s   loc_13598
		neg.b   (A4)
loc_13598:
		andi.w  #$000F, D1
		add.w   D0, D1
		lea     (Colision_Array_2).l, A2  ; loc_2E2EA
		move.b  $00(A2, D1), D0
		ext.w   D0
		eor.w   D6, D4
		btst    #$0A, D4
		beq.s   loc_135B4
		neg.w   D0
loc_135B4:		
		tst.w   D0
		beq.s   loc_13556
		bmi.s   loc_135CA
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		move.w  #$000F, D1
		sub.w   D0, D1
		rts
loc_135CA:
		move.w  D3, D1
		andi.w  #$000F, D1
		add.w   D1, D0
		bpl.w    loc_13556
		not.w  d1
		rts
;=============================================================================== 
; Sub Routine FindWall2
; [ End ]		         
;===============================================================================  
		
loc_135DA:
		rts 
;===============================================================================		
; loc_135DC:
		lea     (Colision_Array_1).l, A1  ; loc_2D2EA
		lea     (Colision_Array_1).l, A2  ; loc_2D2EA
		move.w  #$00FF, D3
loc_135EC:		
		moveq   #$10, D5
		move.w  #$000F, D2
loc_135F2:		
		moveq   #$00, D4
		move.w  #$000F, D1
loc_135F8:		
		move.w  (A1)+, D0
		lsr.l   D5, D0
		addx.w  D4, D4
		dbf    D1, loc_135F8
		move.w  D4, (A2)+
		suba.w  #$0020, A1
		subq.w  #$01, D5
		dbf    D2, loc_135F2
		adda.w  #$0020, A1
		dbf    D3, loc_135EC
		lea     (Colision_Array_1).l, A1  ; loc_2D2EA
		lea     (Colision_Array_2).l, A2  ; loc_2E2EA
		bsr.s   loc_13630
		lea     (Colision_Array_1).l, A1  ; loc_2D2EA
		lea     (Colision_Array_1).l, A2  ; loc_2D2EA
loc_13630:				
		move.w  #$0FFF, D3
loc_13634:		
		moveq   #$00, D2
		move.w  #$000F, D1
		move.w  (A1)+, D0
		beq.s   loc_13662
		bmi.s   loc_1364C
loc_13640:		
		lsr.w   #$01, D0
		bcc.s   loc_13646
		addq.b  #$01, D2
loc_13646:
		dbf    D1, loc_13640
		bra.s   loc_13664
loc_1364C:
		cmpi.w  #$FFFF, D0
		beq.s   loc_1365E
loc_13652:		
		lsl.w   #$01, D0
		bcc.s   loc_13658
		subq.b  #$01, D2
loc_13658:
		dbf    D1, loc_13652
		bra.s   loc_13664
loc_1365E:
		move.w  #$0010, D0
loc_13662:
		move.w  D0, D2
loc_13664:
		move.b  D2, (A2)+
		dbf    D3, loc_13634
		rts
;=============================================================================== 
; Sub Routine Sonic_WalkSpeed
; [ Begin ]		         
;===============================================================================				  
Sonic_WalkSpeed: ; loc_1366C:
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A0)
		beq.s   loc_13684
		move.l  #Secondary_Collision, (Collision_addr).w
loc_13684:
		move.b  $003F(A0), D5
		move.l  $0008(A0), D3
		move.l  $000C(A0), D2
		move.w  $0010(A0), D1
		ext.l   D1
		asl.l   #$08, D1
		add.l   D1, D3
		move.w  $0012(A0), D1
		ext.l   D1
		asl.l   #$08, D1
		add.l   D1, D2
		swap  D2
		swap  D3
		move.b  D0, (Primary_Angle).w
		move.b  D0, (Secondary_Angle).w
		move.b  D0, D1
		addi.b  #$20, D0
		bpl.s   loc_136C4
		move.b  D1, D0
		bpl.s   loc_136BE
		subq.b  #$01, D0
loc_136BE:
		addi.b  #$20, D0
		bra.s   loc_136CE
loc_136C4:
		move.b  D1, D0
		bpl.s   loc_136CA
		addq.b  #$01, D0
loc_136CA:
		addi.b  #$1F, D0
loc_136CE:
		andi.b  #$C0, D0
		beq.w    loc_137CE
		cmpi.b  #$80, D0
		beq.w    loc_13A3C
		andi.b  #$38, D1
		bne.s   loc_136E6
		addq.w  #$08, D2
loc_136E6:
		cmpi.b  #$40, D0
		beq.w    loc_13B04
		bra.w     loc_13982		    
loc_136F2:
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A0)
		beq.s   loc_1370A
		move.l  #Secondary_Collision, (Collision_addr).w
loc_1370A:
		move.b  $003F(A0), D5
		move.b  D0, (Primary_Angle).w
		move.b  D0, (Secondary_Angle).w
		addi.b  #$20, D0
		andi.b  #$C0, D0
		cmpi.b  #$40, D0
		beq.w    loc_13A94
		cmpi.b  #$80, D0
		beq.w    Sonic_DontRunOnWalls    ; loc_139CC
		cmpi.b  #$C0, D0
		beq.w    loc_1391A
loc_13736:		
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A0)
		beq.s   loc_1374E
		move.l  #Secondary_Collision, (Collision_addr).w
loc_1374E:
		move.b  $003E(A0), D5
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  (A7)+, D0
		move.b  #$00, D2
loc_137AE:		
		move.b  (Secondary_Angle).w, D3
		cmp.w   D0, D1
		ble.s   loc_137BC
		move.b  (Primary_Angle).w, D3
		exg.l   D0, D1
loc_137BC:
		btst    #$00, D3
		beq.s   loc_137C4
		move.b  D2, D3
loc_137C4:
		rts
; loc_137C6:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3		
loc_137CE:
		addi.w  #$000A, D2
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindFloor               ; loc_132C4
		move.b  #$00, D2
loc_137E6:		
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_137F2
		move.b  D2, D3
loc_137F2:
		rts   
		
;=============================================================================== 
; Sub Routine ChkFloorEdge
; [ Begin ]		         
;===============================================================================		               
; loc_137F4: Sonic_HitFloor:
ChkFloorEdge:
		move.w  $0008(A0), D3
		move.w  $000C(A0), D2
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A0)
		beq.s   loc_1381E
		move.l  #Secondary_Collision, (Collision_addr).w
loc_1381E:
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		move.b  $003E(A0), D5
		bsr.w     FindFloor               ; loc_132C4
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_13844
		move.b  #$00, D3
loc_13844:
		rts  
;=============================================================================== 
; Sub Routine ChkFloorEdge
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine ChkFloorEdge2
; [ Begin ]		         
;===============================================================================		 
; loc_13846: Sonic_HitFloor2:
ChkFloorEdge2:
		move.w  $0008(A1), D3
		move.w  $000C(A1), D2
		moveq   #$00, D0
		move.b  $0016(A1), D0
		ext.w   D0
		add.w   D0, D2
		move.l  #Primary_Collision, (Collision_addr).w
		cmpi.b  #$0C, $003E(A1)
		beq.s   loc_13870
		move.l  #Secondary_Collision, (Collision_addr).w
loc_13870:
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		move.b  $003E(A1), D5
		bsr.w     FindFloor               ; loc_132C4
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_13896
		move.b  #$00, D3
loc_13896:
		rts
;=============================================================================== 
; Sub Routine ChkFloorEdge2
; [ End ]		         
;===============================================================================   

;=============================================================================== 
; Sub Routine ObjHitFloor
; [ Begin ]		         
;===============================================================================		   
ObjHitFloor: ; loc_13898:
		move.w  $0008(A0), D3
ObjHitFloor2: ; loc_1389C:               
		move.w  $000C(A0), D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bsr.w     FindFloor               ; loc_132C4
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_138CC
		move.b  #$00, D3
loc_138CC:
		rts 
;=============================================================================== 
; Sub Routine ObjHitFloor
; [ End ]		         
;===============================================================================  
		 
loc_138CE:
		move.w  $0008(A1), D3
		move.w  $000C(A1), D2
		move.b  $0016(A1), D0
		ext.w   D0
		add.w   D0, D2
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bra.w     FindFloor               ; loc_132C4
loc_138F4:
		move.w  $0008(A0), D3
		move.w  $000C(A0), D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D2
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0C, D5
		bra.w     loc_13400
;===============================================================================		
loc_1391A:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindWall		; loc_1349E
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindWall		; loc_1349E
		move.w  (A7)+, D0
		move.b  #$C0, D2
		bra.w     loc_137AE 
;===============================================================================		               
loc_1397A:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3		
loc_13982:
		addi.w  #$000A, D3
		lea     (Primary_Angle).w, A4
		move.w  #$0010, A3
		move.w  #$0000, D6
		bsr.w     FindWall		; loc_1349E
		move.b  #$C0, D2
		bra.w     loc_137E6 
		  
;=============================================================================== 
; Sub Routine ObjHitWallRight
; [ Begin ]		         
;===============================================================================		  
ObjHitWallRight: ; loc_1399E:
		add.w   $0008(A0), D3
		move.w  $000C(A0), D2
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$0010, A3
		move.w  #$0000, D6
		moveq   #$0D, D5
		bsr.w     FindWall		; loc_1349E
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_139CA
		move.b  #$C0, D3
loc_139CA:
		rts
;=============================================================================== 
; Sub Routine ObjHitWallRight
; [ End ]		         
;===============================================================================		  
		
;=============================================================================== 
; Sub Routine Sonic_DontRunOnWalls
; [ Begin ]		         
;===============================================================================		  
Sonic_DontRunOnWalls: ; loc_139CC:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D3
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr.w     FindFloor               ; loc_132C4
		move.w  (A7)+, D0
		move.b  #$80, D2
		bra.w     loc_137AE
;=============================================================================== 
; Sub Routine Sonic_DontRunOnWalls
; [ End ]		         
;===============================================================================               
              
;loc_13A34:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
loc_13A3C:
		subi.w  #$000A, D2
		eori.w  #$000F, D2
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		bsr.w     FindFloor               ; loc_132C4
		move.b  #$80, D2
		bra.w     loc_137E6 
;===============================================================================		
; ObjHitCeiling ; loc_13A5C:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D2
		eori.w  #$000F, D2
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0800, D6
		moveq   #$0D, D5
		bsr.w     FindFloor               ; loc_132C4
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_13A92
		move.b  #$80, D3
loc_13A92:
		rts
;===============================================================================		
loc_13A94:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		sub.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr.w     FindWall		; loc_1349E
		move.w  D1, -(A7)
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		moveq   #$00, D0
		move.b  $0017(A0), D0
		ext.w   D0
		add.w   D0, D2
		move.b  $0016(A0), D0
		ext.w   D0
		sub.w   D0, D3
		eori.w  #$000F, D3
		lea     (Secondary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr.w     FindWall		; loc_1349E
		move.w  (A7)+, D0
		move.b  #$40, D2
		bra.w     loc_137AE   
		
;=============================================================================== 
; Sub Routine Sonic_HitWall
; [ Begin ]		         
;===============================================================================		   
Sonic_HitWall: ; loc_13AFC:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3		
loc_13B04:
		subi.w  #$000A, D3
		eori.w  #$000F, D3
		lea     (Primary_Angle).w, A4
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		bsr.w     FindWall		; loc_1349E
		move.b  #$40, D2
		bra.w     loc_137E6    
;===============================================================================				             
ObjHitWallLeft: ; loc_13B24:
		add.w   $0008(A0), D3
		move.w  $000C(A0), D2
		lea     (Primary_Angle).w, A4
		move.b  #$00, (A4)
		move.w  #$FFF0, A3
		move.w  #$0400, D6
		moveq   #$0D, D5
		bsr.w     FindWall		; loc_1349E
		move.b  (Primary_Angle).w, D3
		btst    #$00, D3
		beq.s   loc_13B50
		move.b  #$40, D3
loc_13B50:
		rts
		nop		             ; Filler
;=============================================================================== 
; Object 0x79 - Lamp Post
; [ Begin ]
;===============================================================================		      
Obj_0x79_Lamp_Post: ; loc_13B54:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_13B68(PC, D0), D1
		jsr     loc_13B68(PC, D1)
		jmp     MarkObjGone             ; (loc_D2A0)
loc_13B68:
		dc.w    loc_13B6E-loc_13B68
		dc.w    loc_13BD0-loc_13B68
		dc.w    loc_13C58-loc_13B68
loc_13B6E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj79_MapUnc_13D8E, $0004(A0) ; loc_13D8E
		move.w  #$047C, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$08, $0019(A0)
		move.b  #$05, $0018(A0)
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		bclr    #$07, $02(A2, D0)
		btst    #$00, $02(A2, D0)
		bne.s   loc_13BC2
		move.b  (Last_star_pole_hit).w, D1
		andi.b  #$7F, D1
		move.b  $0028(A0), D2
		andi.b  #$7F, D2
		cmp.b   D2, D1
		bcs.s   loc_13BD0
loc_13BC2:
		bset    #$00, $02(A2, D0)
		move.b  #$04, $0024(A0)
		rts
loc_13BD0:
		tst.w   (Debug_placement_mode).w
		bne.w    loc_13C56
		tst.b   ($FFFFB02A).w
		bmi.w    loc_13C56
		move.b  (Last_star_pole_hit).w, D1
		andi.b  #$7F, D1
		move.b  $0028(A0), D2
		andi.b  #$7F, D2
		cmp.b   D2, D1
		bcs.s   loc_13C0E
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		bset    #$00, $02(A2, D0)
		move.b  #$04, $0024(A0)
		bra.w     loc_13C56
loc_13C0E:
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		addi.w  #$0008, D0
		cmpi.w  #$0010, D0
		bcc.w    loc_13C56
		move.w  ($FFFFB00C).w, D0
		sub.w   $000C(A0), D0
		addi.w  #$0040, D0
		cmpi.w  #$0068, D0
		bcc.s   loc_13C56
		move.w  #$00A1, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, $0024(A0)
		bsr.w     Lamp_Post_Save_Info     ; loc_13C6A
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		bset    #$00, $02(A2, D0)
loc_13C56:
		rts
loc_13C58:
		move.b  (Vint_runcount+3).w, D0
		andi.b  #$02, D0
		lsr.b   #$01, D0
		addq.b  #$01, D0
		move.b  D0, $001A(A0)
		rts
Lamp_Post_Save_Info: ; loc_13C6A:
		move.b  $0028(A0), (Last_star_pole_hit).w
		move.b  (Last_star_pole_hit).w, (Saved_Last_star_pole_hit).w
		move.w  $0008(A0), (Saved_x_pos).w
		move.w  $000C(A0), (Saved_y_pos).w
		move.w  (Ring_count).w, (Saved_Ring_count).w
		move.b  (Extra_life_flags).w, (Saved_Extra_life_flags).w
		move.l  (Timer).w, (Saved_Timer).w
		move.b  (Dynamic_Resize_Routine).w, (Saved_Dynamic_Resize_Routine).w
		move.w  (Camera_Max_Y_pos_now).w, (Saved_Camera_Max_Y_pos).w
		move.w  (Camera_X_pos).w, (Saved_Camera_X_pos).w
		move.w  (Camera_Y_pos).w, (Saved_Camera_Y_pos).w
		move.w  (Camera_BG_X_pos).w, (Saved_Camera_BG_X_pos).w
		move.w  (Camera_BG_Y_pos).w, (Saved_Camera_BG_Y_pos).w
		move.w  (Camera_BG2_X_pos).w, (Saved_Camera_BG2_X_pos).w
		move.w  (Camera_BG2_Y_pos).w, (Saved_Camera_BG2_Y_pos).w
		move.w  (Camera_BG3_X_pos).w, (Saved_Camera_BG3_X_pos).w
		move.w  (Camera_BG3_Y_pos).w, (Saved_Camera_BG3_Y_pos).w
		move.w  (Water_Level_2).w, (Saved_Water_Level).w
		move.b  (Water_routine).w, (Saved_Water_routine).w
		move.b  (Water_fullscreen_flag).w, (Saved_Water_move).w
		rts
Lamp_Post_Load_Info: ; loc_13CE4:
		move.b  (Saved_Last_star_pole_hit).w, (Last_star_pole_hit).w
		move.w  (Saved_x_pos).w, ($FFFFB008).w
		move.w  (Saved_y_pos).w, ($FFFFB00C).w
		move.w  (Saved_Ring_count).w, (Ring_count).w
		move.b  (Saved_Extra_life_flags).w, (Extra_life_flags).w
		clr.w   (Ring_count).w
		clr.b   (Extra_life_flags).w
		move.l  (Saved_Timer).w, (Timer).w
		move.b  #$3B, (Timer_frame).w
		subq.b  #$01, (Timer_second).w
		move.b  (Saved_Dynamic_Resize_Routine).w, (Dynamic_Resize_Routine).w
		move.b  (Saved_Water_routine).w, (Water_routine).w
		move.w  (Saved_Camera_Max_Y_pos).w, (Camera_Max_Y_pos_now).w
		move.w  (Saved_Camera_Max_Y_pos).w, (Camera_Max_Y_pos).w
		move.w  (Saved_Camera_X_pos).w, (Camera_X_pos).w
		move.w  (Saved_Camera_Y_pos).w, (Camera_Y_pos).w
		move.w  (Saved_Camera_BG_X_pos).w, (Camera_BG_X_pos).w
		move.w  (Saved_Camera_BG_Y_pos).w, (Camera_BG_Y_pos).w
		move.w  (Saved_Camera_BG2_X_pos).w, (Camera_BG2_X_pos).w
		move.w  (Saved_Camera_BG2_Y_pos).w, (Camera_BG2_Y_pos).w
		move.w  (Saved_Camera_BG3_X_pos).w, (Camera_BG3_X_pos).w
		move.w  (Saved_Camera_BG3_Y_pos).w, (Camera_BG3_Y_pos).w
		tst.b   (Water_flag).w
		beq.s   loc_13D7A
		move.w  (Saved_Water_Level).w, (Water_Level_2).w
		move.b  (Saved_Water_routine).w, (Water_routine).w
		move.b  (Saved_Water_move).w, (Water_fullscreen_flag).w
loc_13D7A:
		tst.b   (Last_star_pole_hit).w
		bpl.s   loc_13D8C
		move.w  (Saved_x_pos).w, D0
		subi.w  #$00A0, D0
		move.w  D0, (Camera_Min_X_pos).w
loc_13D8C:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj79_MapUnc_13D8E:	BINCLUDE	"mappings/sprite/obj79.bin"
; ===========================================================================
		nop

;=============================================================================== 
; Object 0x7D - Hidden Bonus at end of levels - Sonic 1 Leftover
; [ Begin ]
;===============================================================================		    
Obj_0x7D_Hidden_Bonus: ; loc_13DFC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_13E0A(PC, D0), D1
		jmp     loc_13E0A(PC, D1)
loc_13E0A:
		dc.w    loc_13E0E-loc_13E0A
		dc.w    loc_13EB2-loc_13E0A
loc_13E0E:
		moveq   #$10, D2
		move.w  D2, D3
		add.w   D3, D3
		lea     ($FFFFB000).w, A1
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D2, D0
		cmp.w   D3, D0
		bcc.s   loc_13E90
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		add.w   D2, D1
		cmp.w   D3, D1
		bcc.s   loc_13E90
		tst.w   (Debug_placement_mode).w
		bne.s   loc_13E90
		tst.b   (Enter_SpecialStage_flag).w
		bne.s   loc_13E90
		addq.b  #$02, $0024(A0)
		move.l  #Hidden_Bonus_Mappings, $0004(A0) ; loc_13ED6
		move.w  #$84B6, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  #$00, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  $0028(A0), $001A(A0)
		move.w  #$0077, $0030(A0)
		move.w  #$00C9, D0
		jsr     (PlaySound).l             ; loc_14C6
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.w  loc_13EAA(PC, D0), D0
		jsr     AddPoints               ; (loc_22FD0)
loc_13E90:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   J_DeleteObject_05       ; loc_13EA4
		rts
J_DeleteObject_05: ; loc_13EA4:
		jmp     DeleteObject            ; (loc_D3B4)		
loc_13EAA:
		dc.w    $0000, $03E8, $0064, $0001  ; Bonus Points
loc_13EB2:
		subq.w  #$01, $0030(A0)
		bmi.s   J_DeleteObject_06       ; loc_13ED0
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   J_DeleteObject_06       ; loc_13ED0
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_06: ; loc_13ED0:
		jmp     DeleteObject            ; (loc_D3B4)
Hidden_Bonus_Mappings:		
loc_13ED6:
		dc.w    loc_13EDE-loc_13ED6
		dc.w    loc_13EE0-loc_13ED6
		dc.w    loc_13EEA-loc_13ED6
		dc.w    loc_13EF4-loc_13ED6
loc_13EDE:
		dc.w    $0000
loc_13EE0:
		dc.w    $0001
		dc.l    $F40E0000, $0000FFF0
loc_13EEA:
		dc.w    $0001
		dc.l    $F40E000C, $0006FFF0
loc_13EF4:
		dc.w    $0001
		dc.l    $F40E0018, $000CFFF0   
;=============================================================================== 
; Object 0x7D - Hidden Bonus at end of levels - Sonic 1 Leftover
; [ End ]
;===============================================================================      
		nop		             ; Filler  
;=============================================================================== 
; Object ??? - Unknow Object 0x013F00
; [ Begin ]
;===============================================================================		  
S1_Obj_0x47: ; Unknow_Obj_0x013F00: ; loc_13F00:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_13F0E(PC, D0), D1
		jmp     loc_13F0E(PC, D1)
loc_13F0E:
		dc.w    loc_13F12-loc_13F0E
		dc.w    loc_13F40-loc_13F0E
loc_13F12:
		addq.b  #$02, $0024(A0)
		move.l  #S1_Obj_0x47_Mappings, $0004(A0) ; loc_1401E
		move.w  #$0380, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  #$D7, $0020(A0)
loc_13F40:
		move.b  $0021(A0), D0
		beq.w    loc_14002
		lea     ($FFFFB000).w, A1
		bclr    #$00, $0021(A0)
		beq.s   loc_13F56
		bsr.s   loc_13F6C
loc_13F56:
		lea     ($FFFFB040).w, A1
		bclr    #$01, $0021(A0)
		beq.s   loc_13F64
		bsr.s   loc_13F6C
loc_13F64:
		clr.b   $0021(A0)
		bra.w     loc_14002
loc_13F6C:
		move.w  $0008(A0), D1
		move.w  $000C(A0), D2
		sub.w   $0008(A1), D1
		sub.w   $000C(A1), D2
		jsr    ( CalcAngle).l              ; loc_34A2
		jsr    ( CalcSine).l		; loc_320A
		muls.w  #$F900, D1
		asr.l   #$08, D1
		move.w  D1, $0010(A1)
		muls.w  #$F900, D0
		asr.l   #$08, D0
		move.w  D0, $0012(A1)
		bset    #$01, $0022(A1)
		bclr    #$04, $0022(A1)
		bclr    #$05, $0022(A1)
		clr.b   $003C(A1)
		move.b  #$01, $001C(A0)
		move.w  #$00B4, D0
		jsr     (PlaySound).l		; (loc_14C6)
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_13FDA
		cmpi.b  #$8A, $02(A2, D0)
		bcc.s   loc_14000
		addq.b  #$01, $02(A2, D0)
loc_13FDA:
		moveq   #$01, D0
		jsr     AddPoints               ; (loc_22FD0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_14000
		_move.b  #$29, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  #$04, $001A(A1)
loc_14000:
		rts
loc_14002:
		lea     (loc_14010).l, A1
		bsr.w     AnimateSprite           ; loc_D412
		bra.w     MarkObjGone             ; loc_D2A0              
loc_14010:
		dc.w    loc_14014-loc_14010
		dc.w    loc_14017-loc_14010
loc_14014:
		dc.b    $0F, $00, $FF
loc_14017:
		dc.b    $03, $01, $02, $01, $02, $FD, $00
S1_Obj_0x47_Mappings: ; Unknow_Obj_0x013F00_Mappings:   loc_1401E:
		dc.w    loc_14024-S1_Obj_0x47_Mappings
		dc.w    loc_14036-S1_Obj_0x47_Mappings
		dc.w    loc_14048-S1_Obj_0x47_Mappings
loc_14024:
		dc.w    $0002
		dc.l    $F0070000, $0000FFF0, $F0070800, $08000000
loc_14036:
		dc.w    $0002
		dc.l    $F4060008, $0004FFF4, $F4020808, $08040004
loc_14048:
		dc.w    $0002
		dc.l    $F007000E, $0007FFF0, $F007080E, $08070000				  
;=============================================================================== 
; Object ??? - Unknow Object 0x013F00
; [ Begin ]
;===============================================================================          
		nop		             ; Filler
;=============================================================================== 
; Object ??? - Unknow Object 0x01405C
; [ Begin ]
;===============================================================================		  
S1_Obj_0x64: ; Unknow_Obj_0x01405C: ; loc_1405C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1406A(PC, D0), D1
		jmp     loc_1406A(PC, D1)
loc_1406A:
		dc.w    loc_14076-loc_1406A
		dc.w    loc_140D8-loc_1406A
		dc.w    loc_140F2-loc_1406A
		dc.w    loc_141AC-loc_1406A
		dc.w    loc_141CA-loc_1406A
		dc.w    loc_141CE-loc_1406A
loc_14076:
		addq.b  #$02, $0024(A0)
		move.l  #Obj_0x0A_Bubbles_Mappings, $0004(A0) ; loc_14374
		move.w  #$8500, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$84, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  $0028(A0), D0
		bpl.s   loc_140BE
		addq.b  #$08, $0024(A0)
		andi.w  #$007F, D0
		move.b  D0, $0032(A0)
		move.b  D0, $0033(A0)
		move.b  #$06, $001C(A0)
		bra.w     loc_141CE
loc_140BE:
		move.b  D0, $001C(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  #$FF78, $0012(A0)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		move.b  D0, $0026(A0)
loc_140D8:
		lea     (loc_14348).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		cmpi.b  #$06, $001A(A0)
		bne.s   loc_140F2
		move.b  #$01, $002E(A0)
loc_140F2:
		move.w  (Water_Level_1).w, D0
		cmp.w   $000C(A0), D0
		bcs.s   loc_1410A
loc_140FC		
		move.b  #$06, $0024(A0)
		addq.b  #$03, $001C(A0)
		bra.w     loc_141AC
loc_1410A:
		move.b  $0026(A0), D0
		addq.b  #$01, $0026(A0)
		andi.w  #$007F, D0
		lea     (loc_1220C).l, A1
		move.b  $00(A1, D0), D0
		ext.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		tst.b   $002E(A0)
		beq.s   loc_14196
		bsr.w     loc_1430A
		beq.s   loc_14196
		bsr.w     ResumeMusic             ; loc_124FE
		move.w  #$00AD, D0
		jsr     (PlaySound).l		; (loc_14C6)
		lea     ($FFFFB000).w, A1
		clr.w   $0010(A1)
		clr.w   $0012(A1)
		clr.w   $0014(A1)
		move.b  #$15, $001C(A1)
		move.w  #$0023, $002E(A1)
		move.b  #$00, $003C(A1)
		bclr    #$05, $0022(A1)
		bclr    #$04, $0022(A1)
		btst    #$02, $0022(A1)
		beq.w    loc_140FC
		bclr    #$02, $0022(A1)
		move.b  #$13, $0016(A1)
		move.b  #$09, $0017(A1)
		subq.w  #$05, $000C(A1)
		bra.w     loc_140FC
loc_14196:
		bsr.w     SpeedToPos              ; loc_D27A
		tst.b   $0001(A0)
		bpl.s   J_DeleteObject_07       ; loc_141A6
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_07: ; loc_141A6:
		jmp     DeleteObject            ; (loc_D3B4)
loc_141AC:
		lea     (loc_14348).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		tst.b   $0001(A0)
		bpl.s   J_DeleteObject_08       ; loc_141C4
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_08: ; loc_141C4:
		jmp     DeleteObject            ; (loc_D3B4)
loc_141CA:
		bra.w     DeleteObject            ; loc_D3B4
loc_141CE:
		tst.w   $0036(A0)
		bne.s   loc_14230
		move.w  (Water_Level_1).w, D0
		cmp.w   $000C(A0), D0
		bcc.w    loc_142D6
		tst.b   $0001(A0)
		bpl.w    loc_142D6
		subq.w  #$01, $0038(A0)
		bpl.w    loc_142CA
		move.w  #$0001, $0036(A0)
loc_141F6:		
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		move.w  D0, D1
		andi.w  #$0007, D0
		cmpi.w  #$0006, D0
		bcc.s   loc_141F6
		move.b  D0, $0034(A0)
		andi.w  #$000C, D1
		lea     (loc_142F8).l, A1
		adda.w  D1, A1
		move.l  A1, $003C(A0)
		subq.b  #$01, $0032(A0)
		bpl.s   loc_1422E
		move.b  $0033(A0), $0032(A0)
		bset    #$07, $0036(A0)
loc_1422E:
		bra.s   loc_14238
loc_14230:
		subq.w  #$01, $0038(A0)
		bpl.w    loc_142CA
loc_14238:
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$001F, D0
		move.w  D0, $0038(A0)
		bsr.w     SingleObjLoad        ; loc_E772
		bne.s   loc_142AE
		move.w  $0008(A0), $0008(A1)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$000F, D0
		subq.w  #$08, D0
		add.w   D0, $0008(A1)
		move.w  $000C(A0), $000C(A1)
		moveq   #$00, D0
		move.b  $0034(A0), D0
		move.l  $003C(A0), A2
		move.b  $00(A2, D0), $0028(A1)
		btst    #$07, $0036(A0)
		beq.s   loc_142AE
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$0003, D0
		bne.s   loc_1429A
		bset    #$06, $0036(A0)
		bne.s   loc_142AE
		move.b  #$02, $0028(A1)
loc_1429A:
		tst.b   $0034(A0)
		bne.s   loc_142AE
		bset    #$06, $0036(A0)
		bne.s   loc_142AE
		move.b  #$02, $0028(A1)
loc_142AE:
		subq.b  #$01, $0034(A0)
		bpl.s   loc_142CA
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$007F, D0
		addi.w  #$0080, D0
		add.w   D0, $0038(A0)
		clr.w   $0036(A0)
loc_142CA:
		lea     (loc_14348).l, A1
		jsr     AnimateSprite           ; (loc_D412)
loc_142D6:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		move.w  (Water_Level_1).w, D0
		cmp.w   $000C(A0), D0
		bcs.w    DisplaySprite           ; loc_D3C2
		rts   
loc_142F8:
		dc.w    $0001, $0000, $0000, $0100, $0000, $0001, $0001, $0000
		dc.w    $0100              
loc_1430A:
		tst.b   ($FFFFB02A).w
		bmi.s   loc_14344
		lea     ($FFFFB000).w, A1
		move.w  $0008(A1), D0
		move.w  $0008(A0), D1
		subi.w  #$0010, D1
		cmp.w   D0, D1
		bcc.s   loc_14344
		addi.w  #$0020, D1
		cmp.w   D0, D1
		bcs.s   loc_14344
		move.w  $000C(A1), D0
		move.w  $000C(A0), D1
		cmp.w   D0, D1
		bcc.s   loc_14344
		addi.w  #$0010, D1
		cmp.w   D0, D1
		bcs.s   loc_14344
		moveq   #$01, D0
		rts
loc_14344:
		moveq   #$00, D0
		rts		
loc_14348:
		dc.w    loc_14356-loc_14348
		dc.w    loc_1435B-loc_14348
		dc.w    loc_14361-loc_14348
		dc.w    loc_14368-loc_14348
		dc.w    loc_14368-loc_14348
		dc.w    loc_1436A-loc_14348
		dc.w    loc_1436F-loc_14348
loc_14356:
		dc.b    $0E, $00, $01, $02, $FC
loc_1435B:
		dc.b    $0E, $01, $02, $03, $04, $FC
loc_14361:
		dc.b    $0E, $02, $03, $04, $05, $06, $FC
loc_14368:
		dc.b    $04, $FC
loc_1436A:
		dc.b    $04, $06, $07, $08, $FC
loc_1436F:
		dc.b    $0F, $13, $14, $15, $FF
Obj_0x0A_Bubbles_Mappings: ; loc_14374:
		dc.w    loc_143A2-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143AC-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143B6-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143C0-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143CA-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143D4-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143DE-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_143E8-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1440A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1442C-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14436-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14440-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1444A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14454-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1445E-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14468-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14472-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1447C-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14486-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_14490-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_1449A-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_144A4-Obj_0x0A_Bubbles_Mappings
		dc.w    loc_144AE-Obj_0x0A_Bubbles_Mappings
loc_143A2:
		dc.w    $0001
		dc.l    $FC000000, $0000FFFC
loc_143AC:
		dc.w    $0001
		dc.l    $FC000001, $0000FFFC
loc_143B6:
		dc.w    $0001
		dc.l    $FC000002, $0001FFFC
loc_143C0:
		dc.w    $0001
		dc.l    $F8050003, $0001FFF8
loc_143CA:
		dc.w    $0001
		dc.l    $F8050007, $0003FFF8
loc_143D4:
		dc.w    $0001
		dc.l    $F40A000B, $0005FFF4
loc_143DE:
		dc.w    $0001
		dc.l    $F00F0014, $000AFFF0
loc_143E8:
		dc.w    $0004
		dc.l    $F0050024, $0012FFF0, $F0050824, $08120000
		dc.l    $00051024, $1012FFF0, $00051824, $18120000
loc_1440A:
		dc.w    $0004
		dc.l    $F0050028, $0014FFF0, $F0050828, $08140000
		dc.l    $00051028, $1014FFF0, $00051828, $18140000
loc_1442C:
		dc.w    $0001
		dc.l    $F406002C, $0016FFF8
loc_14436:
		dc.w    $0001
		dc.l    $F4060032, $0019FFF8
loc_14440:
		dc.w    $0001
		dc.l    $F4060038, $001CFFF8
loc_1444A:
		dc.w    $0001
		dc.l    $F406003E, $001FFFF8
loc_14454:
		dc.w    $0001
		dc.l    $F4062044, $2022FFF8
loc_1445E:
		dc.w    $0001
		dc.l    $F406204A, $2025FFF8
loc_14468:
		dc.w    $0001
		dc.l    $F4062050, $2028FFF8
loc_14472:
		dc.w    $0001
		dc.l    $F4062056, $202BFFF8
loc_1447C:
		dc.w    $0001
		dc.l    $F406205C, $202EFFF8
loc_14486:
		dc.w    $0001
		dc.l    $F4062062, $2031FFF8
loc_14490:
		dc.w    $0001
		dc.l    $F8050068, $0034FFF8
loc_1449A:
		dc.w    $0001
		dc.l    $F805006C, $0036FFF8
loc_144A4:
		dc.w    $0001
		dc.l    $F8050070, $0038FFF8
loc_144AE:
		dc.w    $0000		
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 03 - Collision plane/layer switcher
; ---------------------------------------------------------------------------
; Sprite_144B0: Obj_0x03_Layer_Switch:
Obj03:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj03_Index(pc,d0.w),d1
		jsr	Obj03_Index(pc,d1.w)
		tst.w	(Debug_mode_flag).w
		beq.w	loc_D30C
		jmp	(MarkObjGone).l
; ===========================================================================
; off_144CC:
Obj03_Index:	offsetTable
		offsetTableEntry.w Obj03_Init
		offsetTableEntry.w Obj03_MainX
		offsetTableEntry.w Obj03_MainY
; ===========================================================================
; loc_144D2:
Obj03_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj03_MapUnc_147D0,4(a0)
		move.w	#$26BC,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#5,$18(a0)
		move.b	$28(a0),d0
		btst	#2,d0
		beq.s	Obj03_Init_CheckX

; Obj03_Init_CheckY:
		addq.b	#2,$24(a0)	; => Obj03_MainY
		andi.w	#7,d0
		move.b	d0,$1A(a0)
		andi.w	#3,d0
		add.w	d0,d0
		move.w	Obj03_Sizes(pc,d0.w),$32(a0)
		bra.w	Obj03_MainY
; ===========================================================================
; word_14520:
Obj03_Sizes:	dc.w	$20,$40,$80,$100
; ===========================================================================
; loc_14528:
Obj03_Init_CheckX:
		andi.w	#3,d0
		move.b	d0,$1A(a0)
		add.w	d0,d0
		move.w	Obj03_Sizes(pc,d0.w),$32(a0)

; loc_14538:
Obj03_MainX:
		tst.w	(Debug_placement_mode).w
		bne.w	return_1465A
		move.b	#0,$34(a0)
		move.w	$30(a0),d5
		move.w	8(a0),d0
		move.w	d0,d1
		subq.w	#8,d0
		addq.w	#8,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		move.w	$32(a0),d4
		sub.w	d4,d2
		add.w	d4,d3
		lea	(Obj03_Characters).l,a2
		moveq	#7,d6

loc_1456A:
		move.l	(a2)+,d4
		beq.w	loc_1464A
		move.l	d4,a1
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_1459A
		cmp.w	d1,d4
		bcc.w	loc_1459A
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_1459A
		cmp.w	d3,d4
		bcc.w	loc_1459A
		ori.w	#$8000,d5
		bra.w	loc_1464A
; ===========================================================================

loc_1459A:
		tst.w	d5
		bpl.w	loc_1464A
		swap	d0
		move.b	$28(a0),d0
		bpl.s	loc_145B2
		btst	#1,$22(a1)
		bne.w	loc_14644

loc_145B2:
		move.w	8(a1),d4
		cmp.w	8(a0),d4
		bcs.s	loc_145F6
		btst	#0,1(a0)
		bne.s	loc_145E2
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_145E2
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_145E2:
		bclr	#7,2(a1)
		btst	#5,d0
		beq.s	loc_1462E
		bset	#7,2(a1)
		bra.s	loc_1462E
; ===========================================================================

loc_145F6:
		btst	#0,1(a0)
		bne.s	loc_1461C
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_1461C
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_1461C:
		bclr	#7,2(a1)
		btst	#6,d0
		beq.s	loc_1462E
		bset	#7,2(a1)

loc_1462E:
		move.b	#1,$34(a0)
		tst.w	(Debug_mode_flag).w
		beq.s	loc_14644
		move.w	#$A1,d0
		jsr	(PlaySound).l

loc_14644:
		swap	d0
		andi.w	#$7FFF,d5

loc_1464A:
		add.l	d5,d5
		dbf	d6,loc_1456A
		swap	d5
		move.b	d5,$30(a0)
		bsr.w	loc_147A0

return_1465A:
		rts
; ===========================================================================
; loc_1465C:
Obj03_MainY:
		tst.w	(Debug_placement_mode).w
		bne.w	return_1477E
		move.b	#0,$34(a0)
		move.w	$30(a0),d5
		move.w	$08(a0),d0
		move.w	d0,d1
		move.w	$32(a0),d4
		sub.w	d4,d0
		add.w	d4,d1
		move.w	$C(a0),d2
		move.w	d2,d3
		subq.w	#8,d2
		addq.w	#8,d3
		lea	(Obj03_Characters).l,a2
		moveq	#7,d6

loc_1468E:
		move.l	(a2)+,d4
		beq.w	loc_1476E
		move.l	d4,a1
		move.w	8(a1),d4
		cmp.w	d0,d4
		bcs.w	loc_146BE
		cmp.w	d1,d4
		bcc.w	loc_146BE
		move.w	$C(a1),d4
		cmp.w	d2,d4
		bcs.w	loc_146BE
		cmp.w	d3,d4
		bcc.w	loc_146BE
		ori.w	#$8000,d5
		bra.w	loc_1476E
; ===========================================================================

loc_146BE:
		tst.w	d5
		bpl.w	loc_1476E
		swap	d0
		move.b	$28(a0),d0
		bpl.s	loc_146D6
		btst	#1,$22(a1)
		bne.w	loc_14768

loc_146D6:
		move.w	$C(a1),d4
		cmp.w	$C(a0),d4
		bcs.s	loc_1471A
		btst	#0,1(a0)
		bne.s	loc_14706
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#3,d0
		beq.s	loc_14706
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_14706:
		bclr	#7,2(a1)
		btst	#5,d0
		beq.s	loc_14752
		bset	#7,2(a1)
		bra.s	loc_14752
; ===========================================================================

loc_1471A:
		btst	#0,1(a0)
		bne.s	loc_14740
		move.b	#$C,$3E(a1)
		move.b	#$D,$3F(a1)
		btst	#4,d0
		beq.s	loc_14740
		move.b	#$E,$3E(a1)
		move.b	#$F,$3F(a1)

loc_14740:
		bclr	#7,2(a1)
		btst	#6,d0
		beq.s	loc_14752
		bset	#7,2(a1)

loc_14752:
		move.b	#1,$34(a0)
		tst.w	(Debug_mode_flag).w
		beq.s	loc_14768
		move.w	#$A1,d0
		jsr	(PlaySound).l

loc_14768:
		swap	d0
		andi.w	#$7FFF,d5

loc_1476E:
		add.l	d5,d5
		dbf	d6,loc_1468E
		swap	d5
		move.b	d5,$30(a0)
		bsr.w	loc_147A0

return_1477E:
		rts
; ===========================================================================
; dword_14780:
Obj03_Characters:
		; character 1, character 2
		dc.l	$FFFFB000,$FFFFB040
		dc.l	0,0
		dc.l	0,0
		dc.l	0,0
		even
; ===========================================================================

loc_147A0:
		tst.b	$34(a0)
		beq.s	return_147CE
		tst.w	($FFFFB002).w
		bpl.s	loc_147B4
		bset	#7,($FFFFB182).w
		bra.s	loc_147BA

loc_147B4:
		bclr	#7,($FFFFB182).w

loc_147BA:
		tst.w	($FFFFB042).w
		bpl.s	loc_147C8
		bset	#7,($FFFFB1C2).w
		bra.s	return_147CE

loc_147C8:
		bclr	#7,($FFFFB1C2).w

return_147CE:
		rts
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj03_MapUnc_147D0:	BINCLUDE	"mappings/sprite/obj03.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0B - Section of pipe that tips you off from CPZ
; ---------------------------------------------------------------------------
; Sprite_148AC: Obj_0x0B_Open_Close_Platform:
Obj0B:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj0B_Index(pc,d0.w),d1
		jmp	Obj0B_Index(pc,d1.w)
; ===========================================================================
; off_148BA:
Obj0B_Index:	offsetTable
		offsetTableEntry.w Obj0B_Init
		offsetTableEntry.w Obj0B_Main
		offsetTableEntry.w Obj0B_Turn
; ===========================================================================
; loc_148C0:
Obj0B_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj0B_MapUnc_14996,4(a0)
		move.w	#$E3B0,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		addq.w	#1,d0
		lsl.w	#4,d0
		move.b	d0,$36(a0)
; loc_14914:
Obj0B_Main:
		move.b	(Vint_runcount+3).w,d0
		add.b	$36(a0),d0
		bne.s	loc_1494C
		addq.b	#2,$24(a0)

; loc_14922:
Obj0B_Turn:
		subq.w	#1,$30(a0)
		bpl.s	loc_14940
		move.w	#$7F,$30(a0)
		tst.b	$1C(a0)
		beq.s	loc_1493A
		move.w	$32(a0),$30(a0)

loc_1493A:
		bchg	#0,$1C(a0)

loc_14940:
		lea	(Ani_obj0B).l,a1
		jsr	(AnimateSprite).l

loc_1494C:
		tst.b	$1A(a0)
		bne.s	loc_14966
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#$11,d3
		move.w	8(a0),d4
		bsr.w	PlatformObject
		bra.w	MarkObjGone
; ---------------------------------------------------------------------------

loc_14966:
		btst	#3,$22(a0)
		beq.s	loc_1497E
		lea	($FFFFB000).w,a1
		bclr	#3,$22(a1)
		bclr	#3,$22(a0)

loc_1497E:
		bra.w	MarkObjGone
; ===========================================================================
; animation script
; off_14982:
Ani_obj0B:	dc.w	byte_14986-Ani_obj0B
		dc.w	byte_1498E-Ani_obj0B
byte_14986:	dc.b	7,  0,  1,  2,  3,  4,  $FE,  1
byte_1498E:	dc.b    7,  4,  3,  2,  1,  0,  $FE,  1
		even
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj0B_MapUnc_14996:	BINCLUDE	"mappings/sprite/obj0B.bin"
; ===========================================================================
		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 0C - Small floating platform (used in CPZ in the Nick Arcade prototype)
; ---------------------------------------------------------------------------
; Sprite_149FC: Obj_0x0C:
Obj0C:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj0C_Index(pc,d0.w),d1
		jmp	Obj0C_Index(pc,d1.w)
; ===========================================================================
; off_14A0A:
Obj0C_Index:	offsetTable
		offsetTableEntry.w Obj0C_Init
		offsetTableEntry.w Obj0C_Main
; ===========================================================================
; loc_14A0E:
Obj0C_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj0C_MapUnc_14AE6,4(a0)
		move.w	#$E418,2(a0)
		bsr.w	Adjust2PArtPointer
		ori.b	#4,1(a0)
		move.b	#$10,$19(a0)
		move.b	#4,$18(a0)
		move.w	$C(a0),d0
		subi.w	#$10,d0
		move.w	d0,$3A(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F0,d0
		addi.w	#$10,d0
		move.w	d0,d1
		subq.w	#1,d0
		move.w	d0,$30(a0)
		move.w	d0,$32(a0)
		moveq	#0,d0
		move.b	$28(a0),d0
		andi.w	#$F,d0
		move.b	d0,$3E(a0)
		move.b	d0,$3F(a0)
; loc_14A6E:
Obj0C_Main:
		move.b	$3C(a0),d0
		beq.s	loc_14AAC
		cmpi.b	#$80,d0
		bne.s	loc_14ABC
		move.b	$3D(a0),d1
		bne.s	loc_14A8E
		subq.b	#1,$3E(a0)
		bpl.s	loc_14A8E
		move.b	$3F(a0),$3E(a0)
		bra.s	loc_14ABC
; ===========================================================================

loc_14A8E:
		addq.b	#1,$3D(a0)
		move.b	d1,d0
		bsr.w	JmpTo_CalcSine
		addi.w	#8,d0
		asr.w	#6,d0
		subi.w	#$10,d0
		add.w	$3A(a0),d0
		move.w	d0,$C(a0)
		bra.s	loc_14AD2
; ===========================================================================

loc_14AAC:
		move.w	(Vint_runcount+2).w,d1
		andi.w	#$3FF,d1
		bne.s	loc_14AC0
		move.b	#1,$3D(a0)

loc_14ABC:
		addq.b	#1,$3C(a0)


loc_14AC0:
		bsr.w	JmpTo_CalcSine
		addi.w	#8,d1
		asr.w	#4,d1
		add.w	$3A(a0),d1
		move.w	d1,$C(a0)

loc_14AD2:
		moveq	#0,d1
		move.b	$19(a0),d1
		moveq	#9,d3
		move.w	8(a0),d4
		bsr.w	PlatformObject
		bra.w	MarkObjGone
; ===========================================================================
; ---------------------------------------------------------------------------
; Unused sprite mappings
; ---------------------------------------------------------------------------
Obj0C_MapUnc_14AE6:	BINCLUDE	"mappings/sprite/obj0C.bin"

; ===========================================================================
		nop
; loc_14AF4:
JmpTo_CalcSine:
		jmp	(CalcSine).l

		align 4

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 12 - Emerald from Hidden Palace Zone
; ---------------------------------------------------------------------------
; Sprite_14AFC: Obj_0x12_Emerald:
Obj12:
		moveq	#0,d0
		move.b	$024(a0),d0
		move.w	Obj12_Index(pc,d0.w),d1
		jmp	Obj12_Index(pc,d1.w)
; ===========================================================================
; off_14B0A:
Obj12_Index:	offsetTable
		offsetTableEntry.w Obj12_Init
		offsetTableEntry.w Obj12_Main
; ===========================================================================
; loc_14B0E:
Obj12_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj12_MapUnc_14B62,4(a0)
		move.w	#$6392,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$20,$19(a0)
		move.b	#4,$18(a0)
; loc_14B36:
Obj12_Main:
		move.w	#$20,d1
		move.w	#$10,d2
		move.w	#$10,d3
		move.w	8(a0),d4
		bsr.w	SolidObject
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.w	DeleteObject
		bra.w	DisplaySprite
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj12_MapUnc_14B62:	BINCLUDE	"mappings/sprite/obj12.bin"
; ===========================================================================
		nop
;=============================================================================== 
; Object 0x13 - Hidden Palace - Waterfalls 
; [ Begin ]		         
;===============================================================================		  
Obj_0x13_Hpz_Waterfalls: ; loc_14B78:     
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_14B86(PC, D0), D1
		jmp     loc_14B86(PC, D1)
loc_14B86:
		dc.w    loc_14B8C-loc_14B86
		dc.w    loc_14C52-loc_14B86
		dc.w    loc_14CDC-loc_14B86
loc_14B8C:
		addq.b  #$02, $0024(A0)
		move.l  #Obj13_MapUnc_14CF4, $0004(A0) ; loc_14CF4
		move.w  #$E315, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  #$12, $001A(A0)
		bsr.s   loc_14BF4
		move.b  #$A0, $0016(A1)
		bset    #$04, $0001(A1)
		move.l  A1, $0038(A0)
		move.w  $000C(A0), $0034(A0)
		move.w  $000C(A0), $0036(A0)
		cmpi.b  #$10, $0028(A0)
		bcs.s   loc_14C38
		bsr.s   loc_14BF4
		move.l  A1, $003C(A0)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$0098, $000C(A1)
		bra.s   loc_14C38
loc_14BF4:
		jsr     SingleObjLoad2      ; loc_E788
		bne.s   loc_14C36
		_move.b  #$13, 0(A1)
		addq.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  #Obj13_MapUnc_14CF4, $0004(A1) ; loc_14CF4
		move.w  #$E315, $0002(A1)
		bsr.w     Adjust2PArtPointer2   ; loc_DC4C
		move.b  #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$01, $0018(A1)
loc_14C36:		
		rts
loc_14C38:
		moveq   #$00, D1
		move.b  $0028(A0), D1
		move.w  $0034(A0), D0
		subi.w  #$0078, D0
		lsl.w   #$04, D1
		add.w   D1, D0
		move.w  D0, $000C(A0)
		move.w  D0, $0034(A0)
loc_14C52:
		move.l  $0038(A0), A1
		move.b  #$12, $001A(A0)
		move.w  $0034(A0), D0 
		move.w  (Water_Level_1).w, D1
		cmp.w   D0, D1
		bcc.s   loc_14C6A
		move.w  D1, D0
loc_14C6A:
		move.w  D0, $000C(A0)
		sub.w   $0036(A0), D0
		addi.w  #$0080, D0
		bmi.s   loc_14CBC
		lsr.w   #$04, D0
		move.w  D0, D1
		cmpi.w  #$000F, D0
		bcs.s   loc_14C84
		moveq   #$0F, D0
loc_14C84:
		move.b  D0, $001A(A1)
		cmpi.b  #$10, $0028(A0)
		bcs.s   loc_14CA4
		move.l  $003C(A0), A1
		subi.w  #$000F, D1
		bcc.s   loc_14C9C
		moveq   #$00, D1
loc_14C9C:
		addi.w  #$0013, D1
		move.b  D1, $001A(A1) 
loc_14CA4:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
loc_14CBC:		
		moveq   #$13, D0
		move.b  D0, $001A(A0)
		move.b  D0, $001A(A1)
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		rts
loc_14CDC:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    DeleteObject            ; loc_D3B4
		bra.w     DisplaySprite           ; loc_D3C2
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj13_MapUnc_14CF4:	BINCLUDE	"mappings/sprite/obj13.bin"

; ===========================================================================
; ---------------------------------------------------------------------------
; Object 04 - Surface of the water - water surface
; ---------------------------------------------------------------------------
; Sprite_15090: Obj_0x04:
Obj04:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj04_Index(pc,d0.w),d1
		jmp	Obj04_Index(pc,d1.w)
; ===========================================================================
; off_1509E:
Obj04_Index:	offsetTable
		offsetTableEntry.w Obj04_Init
		offsetTableEntry.w Obj04_Action
		offsetTableEntry.w Obj04_Action2
; ===========================================================================
; loc_150A4:
Obj04_Init:
		addq.b	#2,$24(a0)	; => Obj04_Action
		move.l	#Obj04_MapUnc_151C2,4(a0)
		move.w	#$8400,2(a0)
		bsr.w	Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#$80,$19(a0)
		move.w	8(a0),$30(a0)
		cmpi.b	#neo_green_hill_zone,(Current_Zone).w
		bne.s	Obj04_Action
		addq.b	#2,$24(a0)	; => Obj04_Action2
		move.l	#Obj04_MapUnc_152B2,4(a0)
		bra.w	Obj04_Action2
; ===========================================================================
; loc_150E4:
Obj04_Action:
		move.w	(Water_Level_1).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	Obj04_Animate
		btst	#7,(Ctrl_1_Press).w	; is the Start button pressed?
		beq.s	Obj04_Display		; if not, branch
		addq.b	#3,$1A(a0)		; use different frames
		move.b	#1,$32(a0)		; stop animation
		bra.s	Obj04_Display
; ===========================================================================
; loc_15106:
Obj04_Animate:
		tst.w	(Game_paused).w		; if the game paused?
		bne.s	Obj04_Display		; if yes, branch
		move.b	#0,$32(a0)		; resume animation
		subq.b	#3,$1A(a0)		; use normal frames
; loc_15116:
Obj04_Display:
		lea	(Ani_obj04).l,a1
		moveq	#0,d1
		move.b	$1B(a0),d1
		move.b	(a1,d1.w),$1A(a0)
		addq.b	#1,$1B(a0)
		andi.b	#$3F,$1B(a0)
		bra.w	J_DisplaySprite_00
; ===========================================================================
; water sprite animation 'script' (custom format for this object)
; byte_15136:
Ani_obj04:	dc.b	0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1
		dc.b	1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2
		dc.b	2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1
		dc.b	1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0
		even
; ===========================================================================
; loc_15176:
Obj04_Action2:
		move.w	(Water_Level_1).w,d1
		move.w	d1,$C(a0)
		tst.b	$32(a0)
		bne.s	Obj04_Animate2
		btst	#7,(Ctrl_1_Press).w	; is the Start button pressed?
		beq.s	loc_151A8		; if not, branch
		addq.b	#2,$1A(a0)		; use different frames
		move.b	#1,$32(a0)		; stop animation
		bra.s	loc_151BE
; ===========================================================================
; loc_15198:
Obj04_Animate2:
		tst.w	(Game_paused).w		; is the game paused?
		bne.s	loc_151BE		; if yes, branch
		move.b	#0,$32(a0)		; resume animation
		subq.b	#2,$1A(a0)		; use normal frames

loc_151A8:
		subq.b	#1,$1E(a0)
		bpl.s	loc_151BE
		move.b	#5,$1E(a0)
		addq.b	#1,$1A(a0)
		andi.b	#1,$1A(a0)

loc_151BE:
		bra.w	J_DisplaySprite_00
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj04_MapUnc_151C2:	BINCLUDE	"mappings/sprite/obj04_a.bin"
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj04_MapUnc_152B2:	BINCLUDE	"mappings/sprite/obj04_b.bin"	; took me awhile to realize I accidentally BINCLUDE'd the above mappings twice, oops

;=============================================================================== 
; Object 0x49 - Green Hill - Waterfalls 
; [ Begin ]        
;===============================================================================  
Obj_0x49_Waterfall: ; loc_15352:		 
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_15360(PC, D0), D1
		jmp     loc_15360(PC, D1)
loc_15360:
		dc.w    loc_15364-loc_15360
		dc.w    loc_1539E-loc_15360
               
loc_15364:
		addq.b  #$02, $0024(A0)
		move.l  #Obj49_MapUnc_15404, $0004(A0) ; loc_15404
		move.w  #$23AE, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		move.b  #$04, $0001(A0)
		move.b  #$20, $0019(A0)
		move.w  $0008(A0), $0030(A0)
		move.b  #$00, $0018(A0)
		move.b  #$80, $0016(A0)
		bset    #$04, $0001(A0)
loc_1539E:
		tst.w   (Two_player_mode).w
		bne.s   loc_153B8
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_09       ; loc_15726
loc_153B8:
		move.w  $0008(A0), D1
		move.w  D1, D2
		subi.w  #$0040, D1
		addi.w  #$0040, D2
		move.b  $0028(A0), D3
		move.b  #$00, $001A(A0)
		move.w  ($FFFFB008).w, D0
		cmp.w   D1, D0
		bcs.s   loc_153EA
		cmp.w   D2, D0
		bcc.s   loc_153EA
		move.b  #$01, $001A(A0)
		add.b   D3, $001A(A0)
		bra.w     J_DisplaySprite_00      ; loc_15720
loc_153EA:
		move.w  ($FFFFB048).w, D0
		cmp.w   D1, D0
		bcs.s   loc_153FC
		cmp.w   D2, D0
		bcc.s   loc_153FC
		move.b  #$01, $001A(A0)
loc_153FC:
		add.b   D3, $001A(A0)
		bra.w     J_DisplaySprite_00      ; loc_15720
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj49_MapUnc_15404:	BINCLUDE	"mappings/sprite/obj49.bin"
;=============================================================================== 
; Object 0x49 - Green Hill - Waterfalls 
; [ End ]		         
;===============================================================================		

;=============================================================================== 
; Object 0x31 - Hill Top / Metropolis - Lava Attributes 
; [ Begin ]		         
;===============================================================================   
Obj_0x31_Lava_Attributes: ; loc_155A0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_155AE(PC, D0), D1
		jmp     loc_155AE(PC, D1)
loc_155AE:
		dc.w    loc_155B6-loc_155AE
		dc.w    loc_155EC-loc_155AE
loc_155B2: 
		dc.w    $9694, $9500
		
loc_155B6:
		addq.b  #$02, $0024(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.b  loc_155B2(PC, D0), $0020(A0)
		move.l  #Lava_Attributes_Mappings, $0004(A0) ; loc_15612
		move.w  #$8680, $0002(A0)
		move.b  #$84, $0001(A0)
		move.b  #$80, $0019(A0)
		move.b  #$04, $0018(A0)
		move.b  $0028(A0), $001A(A0)
loc_155EC:		
		tst.w   (Two_player_mode).w
		bne.s   loc_15606
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_09       ; loc_15726
loc_15606:
		tst.w   (Debug_placement_mode).w
		beq.s   loc_15610
		bsr.w     J_DisplaySprite_00      ; loc_15720
loc_15610:		
		rts
Lava_Attributes_Mappings:		
loc_15612:
		dc.w    loc_15618-loc_15612
		dc.w    loc_15618-loc_15612
		dc.w    loc_15618-loc_15612
loc_15618:
		dc.w    $0000
;=============================================================================== 
; Object 0x31 - Hill Top / Metropolis - Lava Attributes 
; [ End ]		         
;=============================================================================== 
;=============================================================================== 
; Object 0x74 - Hill Top / Metropolis / Dust Hill... - Invisible Block 
; [ Begin ]		         
;===============================================================================   
Obj_0x74_Invisible_Block: ; loc_1561A:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_15628(PC, D0), D1
		jmp     loc_15628(PC, D1)
loc_15628:
		dc.w    loc_1562C-loc_15628
		dc.w    loc_15668-loc_15628
loc_1562C:
		addq.b  #$02, $0024(A0)
		move.l  #Obj74_MapUnc_156B2, $0004(A0) ; loc_156B2
		move.w  #$8680, $0002(A0)
		bsr.w     Adjust2PArtPointer     ; loc_DC30
		ori.b   #$04, $0001(A0)
		move.b  $0028(A0), D0
		move.b  D0, D1
		andi.w  #$00F0, D0
		addi.w  #$0010, D0
		lsr.w   #$01, D0
		move.b  D0, $0019(A0)
		andi.w  #$000F, D1
		addq.w  #$01, D1
		lsl.w   #$03, D1
		move.b  D1, $0016(A0)
loc_15668:
		bsr.w     loc_DDD8
		bne.s   loc_1568A
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     loc_F4FA
loc_1568A:
		tst.w   (Two_player_mode).w
		bne.s   loc_156A4
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_09       ; loc_15726
loc_156A4:
		tst.w   (Debug_placement_mode).w
		beq.s   loc_156B0
		jmp     DisplaySprite           ; (loc_D3C2)
loc_156B0:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj74_MapUnc_156B2:	BINCLUDE	"mappings/sprite/obj74.bin"
; ===========================================================================
		nop

J_DisplaySprite_00: ; loc_15720:
		jmp     DisplaySprite           ; loc_D3C2
J_DeleteObject_09: ; loc_15726:
		jmp     DeleteObject            ; loc_D3B4
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 06 - Twisting spiral pathway in EHZ
; ---------------------------------------------------------------------------
; Sprite_1572C: Obj_0x06_Spiral_Attributes:
Obj06:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj06_Index(pc,d0.w),d1
		jsr	Obj06_Index(pc,d1.w)
		tst.w	(Two_player_mode).w
		beq.s	Obj06_ChkDel
		rts
; ---------------------------------------------------------------------------
; Deletes the object the instant it goes off screen in 1-player mode
; loc_15742:
Obj06_ChkDel:
		move.w	8(a0),d0
		andi.w	#$FF80,d0
		sub.w	(Camera_X_pos_coarse).w,d0
		cmpi.w	#$280,d0
		bhi.s	J_DeleteObject_0A
		rts
; ---------------------------------------------------------------------------
J_DeleteObject_0A:
		jmp	(DeleteObject).l
; ===========================================================================
; off_1575C:
Obj06_Index:	offsetTable
		offsetTableEntry.w Obj06_Init
		offsetTableEntry.w Obj06_Spiral
		offsetTableEntry.w Obj06_Cylinder
; ===========================================================================
; loc_15762:
Obj06_Init:
		addq.b	#2,$24(a0)
		move.b	#$D0,$19(a0)
		tst.b	$28(a0)
		bpl.s	Obj06_Spiral
		addq.b	#2,$24(a0)
		bra.w	Obj06_Cylinder
; ===========================================================================
; spiral pathway from EHZ
; loc_1577A:
Obj06_Spiral:
		lea	($FFFFB000).w,a1
		moveq	#3,d6
		bsr.s	+
		lea	($FFFFB040).w,a1
		addq.b	#1,d6
+
		btst	d6,$22(a0)
		bne.w	loc_15822
		btst	#1,$22(a1)
		bne.w	return_15820
		btst	#3,$22(a1)
		bne.s	loc_157E2
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_157BE
		cmpi.w	#-$C0,d0
		bgt.s	return_15820
		cmpi.w	#-$D0,d0
		blt.s	return_15820
		bra.s	loc_157CA
; ---------------------------------------------------------------------------

loc_157BE:
		cmpi.w	#$C0,d0
		blt.s	return_15820
		cmpi.w	#$D0,d0
		bgt.s	return_15820

loc_157CA:
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	return_15820
		bsr.w	loc_FAF2		; RideObject_SetRide - to document later
		rts
; ---------------------------------------------------------------------------

loc_157E2:
		move.w	8(a1),d0
		sub.w	8(a0),d0
		tst.w	$10(a1)
		bmi.s	loc_157FE
		cmpi.w	#-$B0,d0
		bgt.s	return_15820
		cmpi.w	#-$C0,d0
		blt.s	return_15820
		bra.s	loc_1580A
; ---------------------------------------------------------------------------

loc_157FE:
		cmpi.w	#$B0,d0
		blt.s	return_15820
		cmpi.w	#$C0,d0
		bgt.s	return_15820

loc_1580A:
		move.w	$C(a1),d1
		sub.w	$C(a0),d1
		subi.w	#$10,d1
		cmpi.w	#$30,d1
		bcc.s	return_15820
		bsr.w	loc_FAF2

return_15820:
		rts
; ---------------------------------------------------------------------------

loc_15822:
		move.w	$14(a1),d0
		bpl.s	+
		neg.w	d0
+
		cmpi.w	#$600,d0
		bcs.s	Obj06_Spiral_CharacterFallsOff
		btst	#1,$22(a1)
		bne.s	Obj06_Spiral_CharacterFallsOff
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$D0,d0
		bmi.s	Obj06_Spiral_CharacterFallsOff
		cmpi.w	#$1A0,d0
		bcs.s	Obj06_Spiral_MoveCharacter
; loc_1584C:
Obj06_Spiral_CharacterFallsOff:
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		rts
; ---------------------------------------------------------------------------
; loc_15864:
Obj06_Spiral_MoveCharacter:
		btst	#3,$22(a1)
		beq.s	return_15820
		move.b	Obj06_CosineTable(pc,d0.w),d1
		ext.w	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		lsr.w	#3,d0
		andi.w	#$3F,d0
		move.b	Obj06_FlipAngleTable(pc,d0.w),$27(a1)
		rts
; ===========================================================================
; Fun fact - Sega had a patent which included the original source code
; for these tables: https://patents.google.com/patent/US5411272
; byte_15896: sloopdirtbl:
Obj06_FlipAngleTable:
		dc.b	$00,$00
		dc.b	$01,$01,$16,$16,$16,$16,$2C,$2C
		dc.b	$2C,$2C,$42,$42,$42,$42,$58,$58
		dc.b	$58,$58,$6E,$6E,$6E,$6E,$84,$84
		dc.b	$84,$84,$9A,$9A,$9A,$9A,$B0,$B0
		dc.b	$B0,$B0,$C6,$C6,$C6,$C6,$DC,$DC
		dc.b	$DC,$DC,$F2,$F2,$F2,$F2,$01,$01
		dc.b	$00,$00
; byte_158CA:
; slooptbl:
Obj06_CosineTable:
		dc.b	 32, 32, 32, 32, 32, 32, 32, 32
		dc.b	 32, 32, 32, 32, 32, 32, 32, 32

		dc.b	 32, 32, 32, 32, 32, 32, 32, 32
		dc.b	 32, 32, 32, 32, 32, 32, 31, 31
		dc.b	 31, 31, 31, 31, 31, 31, 31, 31
		dc.b	 31, 31, 31, 31, 31, 30, 30, 30

		dc.b	 30, 30, 30, 30, 30, 30, 29, 29
		dc.b	 29, 29, 29, 28, 28, 28, 28, 27
		dc.b	 27, 27, 27, 26, 26, 26, 25, 25
		dc.b	 25, 24, 24, 24, 23, 23, 22, 22

		dc.b	 21, 21, 20, 20, 19, 18, 18, 17
		dc.b	 16, 16, 15, 14, 14, 13, 12, 12
		dc.b	 11, 10, 10,  9,  8,  8,  7,  6
		dc.b	  6,  5,  4,  4,  3,  2,  2,  1

		dc.b	  0, -1, -2, -2, -3, -4, -4, -5
		dc.b	 -6, -7, -7, -8, -9, -9,-10,-10
		dc.b	-11,-11,-12,-12,-13,-14,-14,-15
		dc.b	-15,-16,-16,-17,-17,-18,-18,-19

		dc.b	-19,-19,-20,-21,-21,-22,-22,-23
		dc.b	-23,-24,-24,-25,-25,-26,-26,-27
		dc.b	-27,-28,-28,-28,-29,-29,-30,-30
		dc.b	-30,-31,-31,-31,-32,-32,-32,-33

		dc.b	-33,-33,-33,-34,-34,-34,-35,-35
		dc.b	-35,-35,-35,-35,-35,-35,-36,-36
		dc.b	-36,-36,-36,-36,-36,-36,-36,-37
		dc.b	-37,-37,-37,-37,-37,-37,-37,-37

		dc.b	-37,-37,-37,-37,-37,-37,-37,-37
		dc.b	-37,-37,-37,-37,-37,-37,-37,-37
		dc.b	-37,-37,-37,-37,-36,-36,-36,-36
		dc.b	-36,-36,-36,-35,-35,-35,-35,-35

		dc.b	-35,-35,-35,-34,-34,-34,-33,-33
		dc.b	-33,-33,-32,-32,-32,-31,-31,-31
		dc.b	-30,-30,-30,-29,-29,-28,-28,-28
		dc.b	-27,-27,-26,-26,-25,-25,-24,-24

		dc.b	-23,-23,-22,-22,-21,-21,-20,-19
		dc.b	-19,-18,-18,-17,-16,-16,-15,-14
		dc.b	-14,-13,-12,-11,-11,-10, -9, -8
		dc.b	 -7, -7, -6, -5, -4, -3, -2, -1

		dc.b	  0,  1,  2,  3,  4,  5,  6,  7
		dc.b	  8,  8,  9, 10, 10, 11, 12, 13
		dc.b	 13, 14, 14, 15, 15, 16, 16, 17
		dc.b	 17, 18, 18, 19, 19, 20, 20, 21

		dc.b	 21, 22, 22, 23, 23, 24, 24, 24
		dc.b	 25, 25, 25, 25, 26, 26, 26, 26
		dc.b	 27, 27, 27, 27, 28, 28, 28, 28
		dc.b	 28, 28, 29, 29, 29, 29, 29, 29

		dc.b	 29, 30, 30, 30, 30, 30, 30, 30
		dc.b	 31, 31, 31, 31, 31, 31, 31, 31
		dc.b	 31, 31, 32, 32, 32, 32, 32, 32
		dc.b	 32, 32, 32, 32, 32, 32, 32, 32

		dc.b	 32, 32, 32, 32, 32, 32, 32, 32
		dc.b	 32, 32, 32, 32, 32, 32, 32, 32
		even
; ===========================================================================
; rotating meshed cage from MTZ
; loc_15A6A:
Obj06_Cylinder:
		lea	($FFFFB000).w,a1
		lea	(MTZCylinder_Angle_Sonic).w,a2
		moveq	#3,d6
		bsr.s	loc_15A80
		lea	($FFFFB040).w,a1
		lea	(MTZCylinder_Angle_Tails).w,a2
		addq.b	#1,d6

loc_15A80:
		btst	d6,$22(a0)
		bne.w	loc_15AEE
		move.w	8(a1),d0
		sub.w	8(a0),d0
		cmpi.w	#-$C0,d0
		blt.s	return_15AEC
		cmpi.w	#$C0,d0
		bge.s	return_15AEC
		move.w	$C(a0),d0
		addi.w	#$3C,d0
		move.w	$C(a1),d2
		move.b	$16(a1),d1
		ext.w	d1
		add.w	d2,d1
		addq.w	#4,d1
		sub.w	d1,d0
		bhi.s	return_15AEC
		cmpi.w	#-$10,d0
		bcs.s	return_15AEC
		cmpi.b	#6,$24(a1)
		bcc.s	return_15AEC
		add.w	d0,d2
		addq.w	#3,d2
		move.w	d2,$C(a1)
		move.b	#1,$29(a1)
		bsr.w	loc_FAF2
		move.w	#1,$1C(a1)
		move.b	#0,(a2)
		tst.w	$14(a1)
		bne.s	return_15AEC
		move.w	#1,$14(a1)

return_15AEC:
		rts
; ===========================================================================

loc_15AEE:
		btst	#1,$22(a1)
		bne.s	loc_15B28
		move.w	8(a1),d0
		sub.w	8(a0),d0
		addi.w	#$C0,d0
		bmi.s	loc_15B0A
		cmpi.w	#$180,d0
		bcs.s	loc_15B42

loc_15B0A:
		bclr	#3,$22(a1)
		bclr	d6,$22(a0)
		move.b	#0,$2C(a1)
		move.b	#4,$2D(a1)
		bset	#1,$22(a1)
		rts
; ---------------------------------------------------------------------------

loc_15B28:
		move.b	(a2),d0
		addi.b	#$20,d0
		cmpi.b	#$40,d0
		bcc.s	+
		asr.w	$12(a1)
		bra.s	loc_15B0A
; ---------------------------------------------------------------------------
+		move.w	#0,$12(a1)
		bra.s	loc_15B0A
; ===========================================================================

loc_15B42:
		btst	#3,$22(a1)
		beq.s	return_15AEC
		move.b	(a2),d0
		bsr.w	JmpTo2_CalcSine
		muls.w	#$2800,d1
		swap	d1
		move.w	$C(a0),d2
		add.w	d1,d2
		moveq	#0,d1
		move.b	$16(a1),d1
		subi.w	#$13,d1
		sub.w	d1,d2
		move.w	d2,$C(a1)
		move.b	(a2),d0
		move.b	d0,$27(a1)
		addq.b	#4,(a2)
		tst.w	$14(a1)
		bne.s	return_15B80
		move.w	#1,$14(a1)

return_15B80:
		rts
; ===========================================================================
		nop
; loc_15B84:
JmpTo2_CalcSine:
		jmp	(CalcSine).l

		align 4

;=============================================================================== 
; Object 0x14 - Hill Top See-saw badnick 
; [ Begin ]		         
;===============================================================================    
Obj_0x14_See_Saw: ; loc_15B8C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_15BA2(PC, D0), D1
		jsr     loc_15BA2(PC, D1)
		move.w  $0030(A0), D0
		bra.w     loc_16004
loc_15BA2:
		dc.w    loc_15BAE-loc_15BA2
		dc.w    loc_15C1C-loc_15BA2
		dc.w    loc_15CD8-loc_15BA2
		dc.w    loc_15D06-loc_15BA2
		dc.w    loc_15D60-loc_15BA2
		dc.w    loc_15DF8-loc_15BA2
loc_15BAE:
		addq.b  #$02, $0024(A0)
		move.l  #Obj14_MapUnc_15F54, $0004(A0)  ; loc_15F54
		move.w  #$03C6, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_00 ; loc_15FF8
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$30, $0019(A0)
		move.w  $0008(A0), $0030(A0)
		tst.b   $0028(A0)
		bne.s   loc_15C08
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_15C08
		_move.b  #$14, 0(A1)
		addq.b  #$06, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  $0022(A0), $0022(A1)
		move.l  A0, $003C(A1)
loc_15C08:
		btst    #$00, $0022(A0)
		beq.s   loc_15C16
		move.b  #$02, $001A(A0)
loc_15C16:
		move.b  $001A(A0), $003A(A0)
loc_15C1C:
		move.b  $003A(A0), D1
		btst    #$03, $0022(A0)
		beq.s   loc_15C76
		moveq   #$02, D1  
		lea     ($FFFFB000).w, A1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_15C3C
		neg.w   D0
		moveq   #$00, D1
loc_15C3C:
		cmpi.w  #$0008, D0
		bcc.s   loc_15C44
		moveq   #$01, D1
loc_15C44:
		btst    #$04, $0022(A0)
		beq.s   loc_15CAE
		moveq   #$02, D2
		lea     ($FFFFB040).w, A1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0 
		bcc.s   loc_15C60
		neg.w   D0
		moveq   #$00, D2
loc_15C60:
		cmpi.w  #$0008, D0
		bcc.s   loc_15C68
		moveq   #$01, D2
loc_15C68:
		add.w   D2, D1
		cmpi.w  #$0003, D1   
		bne.s   loc_15C72
		addq.w  #$01, D1
loc_15C72:
		lsr.w   #$01, D1
		bra.s   loc_15CAE
loc_15C76:		
		btst    #$04, $0022(A0)
		beq.s   loc_15C9C
		moveq   #$02, D1
		lea     ($FFFFB040).w, A1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_15C92
		neg.w   D0
		moveq   #$00, D1
loc_15C92:
		cmpi.w  #$0008, D0
		bcc.s   loc_15CAE
		moveq   #$01, D1
		bra.s   loc_15CAE
loc_15C9C:
		move.w  ($FFFFB012).w, D0
		move.w  ($FFFFB052).w, D2
		cmp.w   D0, D2
		blt.s   loc_15CAA
		move.w  D2, D0
loc_15CAA:
		move.w  D0, $0038(A0)
loc_15CAE:
		bsr.w     loc_15CDA
		lea     (loc_15EF2).l, A2
		btst    #$00, $001A(A0)
		beq.s   loc_15CC6
		lea     (loc_15F23).l, A2
loc_15CC6:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$08, D3
		move.w  (A7)+, D4
		bra.w     loc_F9D6
loc_15CD8:
		rts
loc_15CDA:
		move.b  $001A(A0), D0
		cmp.b   D1, D0
		beq.s   loc_15D04
		bcc.s   loc_15CE6
		addq.b  #$02, D0
loc_15CE6:
		subq.b  #$01, D0
		move.b  D0, $001A(A0)
		move.b  D1, $003A(A0)
		bclr    #$00, $0001(A0)
		btst    #$01, $001A(A0)
		beq.s   loc_15D04
		bset    #$00, $0001(A0)
loc_15D04:
		rts
loc_15D06:
		addq.b  #$02, $0024(A0)
		move.l  #See_Saw_Badnick_Mappings, $0004(A0) ; loc_15FE0
		move.w  #$03DE, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_00 ; loc_15FF8
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$8B, $0020(A0)
		move.b  #$0C, $0019(A0)
		move.w  $0008(A0), $0030(A0)
		addi.w  #$0028, $0008(A0)
		addi.w  #$0010, $000C(A0)
		move.w  $000C(A0), $0034(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_15D60
		subi.w  #$0050, $0008(A0)
		move.b  #$02, $003A(A0)
loc_15D60:
		bsr.w     loc_15ECA
		move.l  $003C(A0), A1
		moveq   #$00, D0
		move.b  $003A(A0), D0
		sub.b   $003A(A1), D0
		beq.s   loc_15DBA
		bcc.s   loc_15D78
		neg.b   D0
loc_15D78:
		move.w  #$F7E8, D1
		move.w  #$FEEC, D2
		cmpi.b  #$01, D0
		beq.s   loc_15D9E
		move.w  #$F510, D1
		move.w  #$FF34, D2
		cmpi.w  #$0A00, $0038(A1)
		blt.s   loc_15D9E
		move.w  #$F200, D1
		move.w  #$FF60, D2
loc_15D9E:
		move.w  D1, $0012(A0)
		move.w  D2, $0010(A0)
		move.w  $0008(A0), D0
		sub.w   $0030(A0), D0
		bcc.s   loc_15DB4
		neg.w   $0010(A0)
loc_15DB4:
		addq.b  #$02, $0024(A0)
		bra.s   loc_15DF8
loc_15DBA:
		lea     (loc_15EC0).l, A2
		moveq   #$00, D0
		move.b  $001A(A1), D0
		move.w  #$0028, D2
		move.w  $0008(A0), D1
		sub.w   $0030(A0), D1
		bcc.s   loc_15DD8
		neg.w   D2
		addq.w  #$02, D0
loc_15DD8:
		add.w   D0, D0
		move.w  $0034(A0), D1
		add.w   $00(A2, D0), D1
		move.w  D1, $000C(A0)
		add.w   $0030(A0), D2
		move.w  D2, $0008(A0)
		clr.w   $000E(A0)
		clr.w   $000A(A0)
		rts
loc_15DF8:
		bsr.w     loc_15ECA
		tst.w   $0012(A0)
		bpl.s   loc_15E1A
		bsr.w     J_ObjectFall_00         ; loc_15FFE
		move.w  $0034(A0), D0
		subi.w  #$002F, D0
		cmp.w   $000C(A0), D0
		bgt.s   loc_15E18
		bsr.w     J_ObjectFall_00         ; loc_15FFE
loc_15E18:
		rts
loc_15E1A:
		bsr.w     J_ObjectFall_00         ; loc_15FFE
		move.l  $003C(A0), A1
		lea     (loc_15EC0).l, A2
		moveq   #$00, D0
		move.b  $001A(A1), D0
		move.w  $0008(A0), D1
		sub.w   $0030(A0), D1
		bcc.s   loc_15E3A
		addq.w  #$02, D0
loc_15E3A:
		add.w   D0, D0
		move.w  $0034(A0), D1
		add.w   $00(A2, D0), D1
		cmp.w   $000C(A0), D1
		bgt.s   loc_15E8E
		move.l  $003C(A0), A1
		moveq   #$02, D1
		tst.w   $0010(A0)
		bmi.s   loc_15E58
		moveq   #$00, D1
loc_15E58:
		move.b  D1, $003A(A1)
		move.b  D1, $003A(A0)
		cmp.b   $001A(A1), D1
		beq.s   loc_15E82
		lea     ($FFFFB000).w, A2
		bclr    #$03, $0022(A1)
		beq.s   loc_15E74
		bsr.s   loc_15E90
loc_15E74:
		lea     ($FFFFB040).w, A2
		bclr    #$04, $0022(A1)
		beq.s   loc_15E82
		bsr.s   loc_15E90
loc_15E82:
		clr.w   $0010(A0)
		clr.w   $0012(A0)
		subq.b  #$02, $0024(A0)
loc_15E8E:		
		rts
loc_15E90:
		move.w  $0012(A0), $0012(A2)
		neg.w   $0012(A2)
		bset    #$01, $0022(A2)
		bclr    #$03, $0022(A2)
		clr.b   $003C(A2)
		move.b  #$10, $001C(A2)
		move.b  #$02, $0024(A2)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_15EC0:		
		dc.w    $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
loc_15ECA:
		move.b  (Timer_frames+1).w, D0
		andi.b  #$03, D0
		bne.s   loc_15EDA
		bchg    #5, $0002(A0)
loc_15EDA:
		andi.b  #$FE, $0001(A0)
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		bcs.s   loc_15EF0
		ori.b   #$01, $0001(A0)
loc_15EF0:
		rts		
loc_15EF2:		
		dc.b    $14, $14, $16, $18, $1A, $1C, $1A, $18, $16, $14, $13, $12, $11, $10, $0F, $0E
		dc.b    $0D, $0C, $0B, $0A, $09, $08, $07, $06, $05, $04, $03, $02, $01, $00, $FF, $FE
		dc.b    $FD, $FC, $FB, $FA, $F9, $F8, $F7, $F6, $F5, $F4, $F3, $F2, $F2, $F2, $F2, $F2
		dc.b    $F2
loc_15F23:
		dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $00
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj14_MapUnc_15F54:	BINCLUDE	"mappings/sprite/obj14_a.bin"

See_Saw_Badnick_Mappings:		               
loc_15FE0:
		dc.w    loc_15FE4-loc_15FE0
		dc.w    loc_15FEE-loc_15FE0
loc_15FE4:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_15FEE:
		dc.w    $0001
		dc.l    $F8052000, $2000FFF8  
;=============================================================================== 
; Object 0x14 - Hill Top See-saw badnick 
; [ End ]		         
;===============================================================================		   
J_Adjust2PArtPointer_00: ; loc_15FF8:
		jmp     Adjust2PArtPointer     ; loc_DC30  
J_ObjectFall_00: ; ; loc_15FFE:
		jmp     ObjectFall              ; loc_D24E   
loc_16004:
		jmp     loc_D2D8				        
 
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x16 - Hill Top Teleferics
; [ Begin ]		         
;===============================================================================		    
Obj_0x16_Teleferics: ; loc_1600C:   
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1601A(PC, D0), D1
		jmp     loc_1601A(PC, D1)
loc_1601A:
		dc.w    loc_1601E-loc_1601A
		dc.w    loc_16064-loc_1601A
loc_1601E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj16_MapUnc_1611E, $0004(A0)  ; loc_1611E
		move.w  #$43E6, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_01 ; loc_16210
		ori.b   #$04, $0001(A0)
		move.b  #$20, $0019(A0)
		move.b  #$00, $001A(A0)
		move.b  #$01, $0018(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0032(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsl.w   #$03, D0
		move.w  D0, $0034(A0)
loc_16064:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_16080
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  #$FFD8, D3
		move.w  (A7)+, D4
		bsr.w     PlatformObject
		bra.w     J_MarkObjGone_00        ; loc_1620A
loc_16080:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1608E(PC, D0), D1
		jmp     loc_1608E(PC, D1)
loc_1608E:
		dc.w    loc_16094-loc_1608E
		dc.w    loc_160BC-loc_1608E
		dc.w    loc_16102-loc_1608E
loc_16094:               
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_160BA
		addq.b  #$02, $0025(A0)
		move.w  #$0200, $0010(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_160B4
		neg.w   $0010(A0)
loc_160B4:
		move.w  #$0100, $0012(A0)
loc_160BA:
		rts
loc_160BC:
		bsr.w     J_SpeedToPos_00         ; loc_16216
		subq.w  #$01, $0034(A0)
		bne.s   loc_16100
		addq.b  #$02, $0025(A0)
		move.b  #$02, $001A(A0)
		move.w  #$0000, $0010(A0)
		move.w  #$0000, $0012(A0)
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_16100
		_move.b  #$1C, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  #$06, $0028(A1)
loc_16100:
		rts
loc_16102:
		bsr.w     J_SpeedToPos_00         ; loc_16216
		addi.w  #$0038, $0012(A0)
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.w    J_DeleteObject_0B       ; loc_16204
		rts   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj16_MapUnc_1611E:	BINCLUDE	"mappings/sprite/obj16.bin"
; ===========================================================================
		nop		             ;  Filler
J_DeleteObject_0B: ; loc_16204:
		jmp     DeleteObject            ; loc_D3B4
J_MarkObjGone_00: ; loc_1620A:           
		jmp     MarkObjGone             ; loc_D2A0
J_Adjust2PArtPointer_01: ; loc_16210:
		jmp     Adjust2PArtPointer     ; loc_DC30
J_SpeedToPos_00: ; loc_16216:
		jmp     SpeedToPos              ; loc_D27A               
;=============================================================================== 
; Object 0x16 - Hill Top Teleferics
; [ End ]		         
;===============================================================================		             
;=============================================================================== 
; Object 0x19 - Oil Ocean - Elevators
; [ Begin ]		         
;===============================================================================  
Obj_0x19_Elevator: ; loc_1621C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1622A(PC, D0), D1
		jmp     loc_1622A(PC, D1)
loc_1622A:
		dc.w    loc_16238-loc_1622A
		dc.w    loc_162A0-loc_1622A
loc_1622E		
		dc.b    $20, $00, $18, $01, $20, $02, $40, $03, $30, $04
loc_16238:
		addq.b  #$02, $0024(A0)
		move.l  #Obj19_MapUnc_16412, $0004(A0) ; loc_16412
		move.w  #$63A0, $0002(A0)
		cmpi.b  #oil_ocean_zone, (Current_Zone).w
		bne.s   loc_16258
		move.w  #$6300, $0002(A0)
loc_16258:
		bsr.w     J_Adjust2PArtPointer_02 ; loc_1645C
		move.b  #$04, $0001(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$001E, D0
		lea     loc_1622E(PC, D0), A2
		move.b  (A2)+, $0019(A0)
		move.b  (A2)+, $001A(A0)
		move.b  #$04, $0018(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0032(A0)
		andi.b  #$0F, $0028(A0)
		cmpi.b  #$07, $0028(A0)
		bne.s   loc_162A0
		subi.w  #$00C0, $000C(A0)
loc_162A0:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_162D0
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  #$0010, D3
		move.w  (A7)+, D4
		bsr.w     PlatformObject
		move.w  $0030(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_0C       ; loc_16456
		bra.w     J_DisplaySprite_01      ; loc_16450
loc_162D0:
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		add.w   D0, D0
		move.w  loc_162E4(PC, D0), D1
		jmp     loc_162E4(PC, D1)
loc_162E4:
		dc.w    loc_16304-loc_162E4
		dc.w    loc_1630E-loc_162E4
		dc.w    loc_1632E-loc_162E4
		dc.w    loc_1634E-loc_162E4
		dc.w    loc_1635E-loc_162E4
		dc.w    loc_1637E-loc_162E4
		dc.w    loc_16380-loc_162E4
		dc.w    loc_16380-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_1639C-loc_162E4
		dc.w    loc_163D6-loc_162E4
		dc.w    loc_163D6-loc_162E4
		dc.w    loc_163D6-loc_162E4
		dc.w    loc_163D6-loc_162E4
loc_16304:
		move.b  (Oscillating_Data+8).w, D0
		move.w  #$0040, D1
		bra.s   loc_16316
loc_1630E:
		move.b  (Oscillating_Data+$C).w, D0
		move.w  #$0060, D1
loc_16316:
		btst    #$00, $0022(A0)
		beq.s   loc_16322
		neg.w   D0
		add.w   D1, D0
loc_16322:
		move.w  $0030(A0), D1
		sub.w   D0, D1
		move.w  D1, $0008(A0)
		rts
loc_1632E:
		move.b  (Oscillating_Data+$1C).w, D0
		move.w  #$0080, D1
		btst    #$00, $0022(A0)
		beq.s   loc_16342
		neg.w   D0
		add.w   D1, D0
loc_16342:
		move.w  $0032(A0), D1
		sub.w   D0, D1
		move.w  D1, $000C(A0)
		rts
loc_1634E:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_1635C
		addq.b  #$01, $0028(A0)
loc_1635C:
		rts
loc_1635E:
		bsr.w     J_SpeedToPos_01         ; loc_16462
		moveq   #$08, D1
		move.w  $0032(A0), D0
		subi.w  #$0060, D0
		cmp.w   $000C(A0), D0
		bcc.s   loc_16374
		neg.w   D1
loc_16374:
		add.w   D1, $0012(A0)
		bne.s   loc_1637E
		addq.b  #$01, $0028(A0)
loc_1637E:
		rts
loc_16380:
		bsr.w     J_SpeedToPos_01         ; loc_16462
		moveq   #$08, D1
		move.w  $0032(A0), D0
		subi.w  #$0060, D0
		cmp.w   $000C(A0), D0
		bcc.s   loc_16396
		neg.w   D1
loc_16396:
		add.w   D1, $0012(A0)
		rts
loc_1639C:
		move.b  (Oscillating_Data+$38).w, D1
		subi.b  #$40, D1
		ext.w   D1
		move.b  (Oscillating_Data+$3C).w, D2
		subi.b  #$40, D2
		ext.w   D2
		btst    #$02, D0
		beq.s   loc_163BA
		neg.w   D1
		neg.w   D2
loc_163BA:
		btst    #$01, D0
		beq.s   loc_163C4
		neg.w   D1
		exg.l   D1, D2
loc_163C4:
		add.w   $0030(A0), D1
		move.w  D1, $0008(A0)
		add.w   $0032(A0), D2
		move.w  D2, $000C(A0)
		rts
loc_163D6:
		move.b  (Oscillating_Data+$38).w, D1
		subi.b  #$40, D1
		ext.w   D1
		move.b  (Oscillating_Data+$3C).w, D2
		subi.b  #$40, D2
		ext.w   D2
		btst    #$02, D0
		beq.s   loc_163F4
		neg.w   D1
		neg.w   D2
loc_163F4:
		btst    #$01, D0
		beq.s   loc_163FE
		neg.w   D1
		exg.l   D1, D2
loc_163FE:
		neg.w   D1
		add.w   $0030(A0), D1
		move.w  D1, $0008(A0)
		add.w   $0032(A0), D2
		move.w  D2, $000C(A0)
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj19_MapUnc_16412:	BINCLUDE	"mappings/sprite/obj19.bin"
; ===========================================================================
		nop

J_DisplaySprite_01: ; loc_16450:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_0C: ; loc_16456:
		jmp     DeleteObject            ; (loc_D3B4)
J_Adjust2PArtPointer_02: ; loc_1645C:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SpeedToPos_01: ; loc_16462:
		jmp     SpeedToPos              ; (loc_D27A)   
		
;=============================================================================== 
; Object 0x1B - Chemical Plant - Speed Booster
; [ Begin ]		         
;===============================================================================		  
Obj_0x1B_Speed_Booster: ; loc_16468:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_16476(PC, D0), D1
		jmp     loc_16476(PC, D1)
loc_16476:
		dc.w    loc_1647E-loc_16476
		dc.w    loc_164B4-loc_16476		 
loc_1647A:
		dc.w    $1000, $0A00
loc_1647E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj1B_MapUnc_1658A, $0004(A0) ; loc_1658A
		move.w  #$E39C, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_03 ; loc_165AA
		ori.b   #$04, $0001(A0)
		move.b  #$20, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  $0028(A0), D0
		andi.w  #$0002, D0
		move.w  loc_1647A(PC, D0), $0030(A0)
loc_164B4:
		move.b  (Timer_frames+1).w, D0
		andi.b  #$02, D0
		move.b  D0, $001A(A0)
		move.w  $0008(A0), D0
		move.w  D0, D1
		subi.w  #$0010, D0
		addi.w  #$0010, D1
		move.w  $000C(A0), D2
		move.w  D2, D3
		subi.w  #$0010, D2
		addi.w  #$0010, D3
		lea     ($FFFFB000).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_16510
		move.w  $0008(A1), D4
		cmp.w   D0, D4
		bcs.w    loc_16510
		cmp.w   D1, D4
		bcc.w    loc_16510
		move.w  $000C(A1), D4
		cmp.w   D2, D4
		bcs.w    loc_16510
		cmp.w   D3, D4
		bcc.w    loc_16510
		move.w  D0, -(A7)
		bsr.w     loc_16544
		move.w  (A7)+, D0
loc_16510:
		lea     ($FFFFB040).w, A1
		btst    #$01, $0022(A1)
		bne.s   loc_16540
		move.w  $0008(A1), D4
		cmp.w   D0, D4
		bcs.w    loc_16540
		cmp.w   D1, D4
		bcc.w    loc_16540
		move.w  $000C(A1), D4
		cmp.w   D2, D4
		bcs.w    loc_16540
		cmp.w   D3, D4
		bcc.w    loc_16540
		bsr.w     loc_16544
loc_16540:
		bra.w     J_MarkObjGone_01        ; loc_165A4
loc_16544:
		move.w  $0030(A0), $0010(A1)
		bclr    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		beq.s   loc_16562
		bset    #$00, $0022(A1)
		neg.w   $0010(A1)
loc_16562:
		move.w  #$000F, $002E(A1)
		move.w  $0010(A1), $0014(A1)
		bclr    #$05, $0022(A0)
		bclr    #$06, $0022(A0)
		bclr    #$05, $0022(A1)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj1B_MapUnc_1658A:	BINCLUDE	"mappings/sprite/obj1B.bin"
; ===========================================================================
J_MarkObjGone_01: ; loc_165A4:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_03: ; loc_165AA:
		jmp     Adjust2PArtPointer     ; (loc_DC30)   
;=============================================================================== 
; Object 0x1D - Chemical Plant - Worms
; [ Begin ]		         
;===============================================================================  
Obj_0x1D_Worms: ; loc_165B0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_165BE(PC, D0), D1
		jmp     loc_165BE(PC, D1)
loc_165BE:
		dc.w    loc_165D0-loc_165BE
		dc.w    loc_1667E-loc_165BE
		dc.w    loc_1669C-loc_165BE
		dc.w    loc_1667E-loc_165BE
		dc.w    loc_166D0-loc_165BE		 
;loc_165C8:
		dc.w    $FB80, $FB00, $FA00, $F900		  
loc_165D0:
		addq.b  #$02, $0024(A0)
		move.w  #$FB80, $0012(A0)
		moveq   #$00, D1
		move.b  $0028(A0), D1
		move.b  D1, D0
		andi.b  #$0F, D1
		moveq   #$02, D5
		andi.b  #$F0, D0
		beq.s   loc_165F0
		moveq   #$06, D5
loc_165F0:
		move.b  $0022(A0), D4
		moveq   #$00, D2
		move.l  A0, A1
		bra.s   loc_16600
loc_165FA:		
		bsr.w     SingleObjLoad2      ; loc_E788
		bne.s   loc_16678
loc_16600:
		_move.b  0(A0), 0(A1)
		move.b  D5, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  #Obj1D_MapUnc_16702, $0004(A1) ; loc_16702
		move.w  #$643C, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_00 ; loc_16716
		move.b  #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$8B, $0020(A1)
		move.w  $0008(A1), $0038(A1)
		move.w  $000C(A1), $0030(A1)
		move.w  $0012(A0), $0012(A1)
		move.w  $0012(A1), $0034(A1)
		move.b  #$08, $0019(A1)
		move.w  #$0060, $003A(A1)
		move.w  #$000B, $0036(A1)
		andi.b  #$01, D4
		beq.s   loc_16672
		neg.w   $0036(A1)
		neg.w   $003A(A1)
loc_16672:
		move.w  D2, $0032(A1)
		addq.w  #$03, D2
loc_16678:
		dbf    D1, loc_165FA
		rts
loc_1667E:
		subq.w  #$01, $0032(A0)
		bpl.s   loc_16698
		addq.b  #$02, $0024(A0)
		move.w  #$003B, $0032(A0)
		move.w  #$00AE, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_16698:
		bra.w     J_MarkObjGone_02        ; loc_16710
loc_1669C:
		bsr.w     J_SpeedToPos_02         ; loc_1671C
		move.w  $0036(A0), D0
		add.w   D0, $0010(A0)
		addi.w  #$0018, $0012(A0)
		bne.s   loc_166B4
		neg.w   $0036(A0)
loc_166B4:
		move.w  $0030(A0), D0
		cmp.w   $000C(A0), D0
		bhi.s   loc_166CC
		move.w  $0034(A0), $0012(A0)
		clr.w   $0010(A0)
		subq.b  #$02, $0024(A0)
loc_166CC:
		bra.w     J_MarkObjGone_02        ; loc_16710
loc_166D0:
		bsr.w     J_SpeedToPos_02         ; loc_1671C
		addi.w  #$0018, $0012(A0)
		bne.s   loc_166E8
		move.w  $003A(A0), D0
		add.w   $0038(A0), D0
		move.w  D0, $0008(A0)
loc_166E8:
		move.w  $0030(A0), D0
		cmp.w   $000C(A0), D0
		bhi.s   loc_166FE
		move.w  $0034(A0), $0012(A0)
		move.w  $0038(A0), $0008(A0)
loc_166FE:
		bra.w     J_MarkObjGone_02        ; loc_16710
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj1D_MapUnc_16702:	BINCLUDE	"mappings/sprite/obj1D.bin"
; ===========================================================================
		nop

J_MarkObjGone_02: ; loc_16710:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer2_00: ; loc_16716:
		jmp     Adjust2PArtPointer2   ; (loc_DC4C)
J_SpeedToPos_02: ; loc_1671C:
		jmp     SpeedToPos              ; (loc_D27A)   
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x1E - Chemical Plant - Tube Attributes
; [ Begin ]		         
;===============================================================================		  
Obj_0x1E_Tube_Attributes: ; loc_16724:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_16740(PC, D0), D1
		jsr     loc_16740(PC, D1)
		move.b  $002C(A0), D0
		add.b   $0036(A0), D0
		beq.w    loc_1716C
		rts
loc_16740:
		dc.w    loc_1674A-loc_16740
		dc.w    loc_1675E-loc_16740
loc_16744:		
		dc.w    $00A0, $0100, $0120
loc_1674A:
		addq.b  #$02, $0024(A0)
		move.b  $0028(A0), D0
		add.w   D0, D0
		andi.w  #$0006, D0
		move.w  loc_16744(PC, D0), $002A(A0)
loc_1675E:
		lea     ($FFFFB000).w, A1
		lea     $002C(A0), A4
		bsr.s   loc_16770
		lea     ($FFFFB040).w, A1
		lea     $0036(A0), A4
loc_16770:
		moveq   #$00, D0
		move.b  (A4), D0
		move.w  loc_1677C(PC, D0), D0
		jmp     loc_1677C(PC, D0)
loc_1677C:
		dc.w    loc_16784-loc_1677C
		dc.w    loc_16898-loc_1677C
		dc.w    loc_1697C-loc_1677C
		dc.w    loc_169E8-loc_1677C
loc_16784:
		tst.w   (Debug_placement_mode).w
		bne.w    loc_16896
		move.w  $002A(A0), D2
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		cmp.w   D2, D0
		bcc.w    loc_16896
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		cmpi.w  #$0080, D1
		bcc.w    loc_16896
		moveq   #$00, D3
		cmpi.w  #$00A0, D2
		beq.s   loc_167C6
		moveq   #$08, D3
		cmpi.w  #$0120, D2
		beq.s   loc_167C6
		moveq   #$04, D3
		neg.w   D0
		addi.w  #$0100, D0
loc_167C6:
		cmpi.w  #$0080, D0
		bcs.s   loc_167FC
		moveq   #$00, D2
		move.b  $0028(A0), D0
		lsr.w   #$02, D0
		andi.w  #$000F, D0
		move.b  loc_167EC(PC, D0), D2
		cmpi.b  #$02, D2
loc_167E0:
		bne.s   loc_16806
		move.b  (Timer_frames).w, D2
		andi.b  #$01, D2
		bra.s   loc_16806
loc_167EC:
		dc.b    $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $00, $02, $00, $01, $02, $01
loc_167FC:
		moveq   #$02, D2
		cmpi.w  #$0040, D1
		bcc.s   loc_16806
		moveq   #$03, D2
loc_16806:
		move.b  D2, $0001(A4)
		add.w   D3, D2
		add.w   D2, D2
		andi.w  #$001E, D2
		lea     loc_16AFE(PC), A2
		adda.w  $00(A2, D2), A2
		move.w  (A2)+, $0004(A4)
		subq.w  #$04, $0004(A4)
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		move.w  D5, $000C(A1)
		move.l  A2, $0006(A4)
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
loc_16840:
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		addq.b  #$02, (A4)
		move.b  #$81, $002A(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0800, $0014(A1)
		move.w  #$0000, $0010(A1)
loc_16860:
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A0)
		bclr    #$05, $0022(A1)
		bset    #$01, $0022(A1)
		move.b  #$00, $003C(A1)
		bclr    #$07, $0002(A1)
		move.w  #$0800, D2
		bsr.w     loc_16A80
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_16896:
		rts
loc_16898:
		subq.b  #$01, $0002(A4)
		bpl.s   loc_168DC
		move.l  $0006(A4), A2
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		move.w  D5, $000C(A1)
		tst.b   $0001(A4)
		bpl.s   loc_168BE
		subq.w  #$08, A2
loc_168BE:
		move.l  A2, $0006(A4)
		subq.w  #$04, $0004(A4)
		beq.s   loc_16902
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		move.w  #$0800, D2
		bra.w     loc_16A80
loc_168DC:
		move.l  $0008(A1), D2
		move.l  $000C(A1), D3
		move.w  $0010(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A1)
		move.l  D3, $000C(A1)
		rts
loc_16902:
		cmpi.b  #$04, $0001(A4)
		bcc.s   loc_16924
		move.b  $0028(A0), D0
		andi.w  #$00FC, D0
		add.b   $0001(A4), D0
		move.b  #$04, $0001(A4)
		move.b  loc_1693C(PC, D0), D0
		bne.w    loc_16A10
loc_16924:
		andi.w  #$07FF, $000C(A1)
		move.b  #$06, (A4)
		clr.b   $002A(A1)
		move.w  #$00BC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_1693C:
		dc.b    $02, $01, $00, $00, $FF, $03, $00, $00, $04, $FE, $00, $00, $FD, $FC, $00, $00
		dc.b    $FB, $FB, $00, $00, $07, $06, $00, $00, $F9, $FA, $00, $00, $08, $09, $00, $00
		dc.b    $F8, $F7, $00, $00, $0B, $0A, $00, $00, $0C, $00, $00, $00, $F5, $F6, $00, $00
		dc.b    $F4, $00, $00, $00, $00, $0D, $00, $00, $F3, $0E, $00, $00, $00, $F2, $00, $00
loc_1697C:
		subq.b  #$01, $0002(A4)
		bpl.s   loc_169B0
		move.l  $0006(A4), A2
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
		tst.b   $0001(A4)
		bpl.s   loc_1699A
		subq.w  #$08, A2
loc_1699A:
		move.l  A2, $0006(A4)
		subq.w  #$04, $0004(A4)
		beq.s   loc_169D6
		move.w  (A2)+, D4
		move.w  (A2)+, D5
		move.w  #$0800, D2
		bra.w     loc_16A80
loc_169B0:
		move.l  $0008(A1), D2
		move.l  $000C(A1), D3
		move.w  $0010(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A1)
		move.l  D3, $000C(A1)
		rts
loc_169D6:
		andi.w  #$07FF, $000C(A1)
		clr.b   (A4)
		move.w  #$00BC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_169E8:
		move.w  $002A(A0), D2
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		cmp.w   D2, D0
		bcc.w    loc_16A0C
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		cmpi.w  #$0080, D1
		bcc.w    loc_16A0C
		rts
loc_16A0C:
		clr.b   (A4)
		rts
loc_16A10:
		bpl.s   loc_16A42
		neg.b   D0
		move.b  #$FC, $0001(A4)
		add.w   D0, D0
		lea     (loc_17006).l, A2
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D0
		subq.w  #$04, D0
		move.w  D0, $0004(A4)
		lea     $00(A2, D0), A2
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
		subq.w  #$08, A2
		bra.s   loc_16A62
loc_16A42:
		add.w   D0, D0
		lea     (loc_17006).l, A2
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, $0004(A4)
		subq.w  #$04, $0004(A4)
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
loc_16A62:
		move.l  A2, $0006(A4)
		move.w  (A2)+, D4
		move.w  (A2)+, D5
		move.w  #$0800, D2
		bsr.w     loc_16A80
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, (A4)
		rts
loc_16A80:
		moveq   #$00, D0
		move.w  D2, D3
		move.w  D4, D0
		sub.w   $0008(A1), D0
		bge.s   loc_16A90
		neg.w   D0
		neg.w   D2
loc_16A90:
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		bge.s   loc_16A9E
		neg.w   D1
		neg.w   D3
loc_16A9E:
		cmp.w   D0, D1
		bcs.s   loc_16AD0
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		swap  D1
		divs.w  D3, D1
		moveq   #$00, D0
		move.w  D4, D0
		sub.w   $0008(A1), D0
		beq.s   loc_16ABC
		swap  D0
		divs.w  D1, D0
loc_16ABC:
		move.w  D0, $0010(A1)
		move.w  D3, $0012(A1)
		tst.w   D1
		bpl.s   loc_16ACA
		neg.w   D1
loc_16ACA:
		move.w  D1, $0002(A4)
		rts
loc_16AD0:
		moveq   #$00, D0
		move.w  D4, D0
		sub.w   $0008(A1), D0
		swap  D0
		divs.w  D2, D0
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		beq.s   loc_16AEA
		swap  D1
		divs.w  D0, D1
loc_16AEA:
		move.w  D1, $0012(A1)
		move.w  D2, $0010(A1)
		tst.w   D0
		bpl.s   loc_16AF8
		neg.w   D0
loc_16AF8:
		move.w  D0, $0002(A4)
		rts
loc_16AFE:              
		dc.w    loc_16B16-loc_16AFE
		dc.w    loc_16B8C-loc_16AFE
		dc.w    loc_16BEA-loc_16AFE
		dc.w    loc_16C60-loc_16AFE
		dc.w    loc_16CBE-loc_16AFE
		dc.w    loc_16D30-loc_16AFE
		dc.w    loc_16D8E-loc_16AFE
		dc.w    loc_16E00-loc_16AFE
		dc.w    loc_16E5E-loc_16AFE
		dc.w    loc_16ED4-loc_16AFE
		dc.w    loc_16F32-loc_16AFE
		dc.w    loc_16FA8-loc_16AFE
loc_16B16:
		dc.w    $0074
		dc.w    $0090, $0010, $0090, $0070, $0040, $0070, $0035, $006F
		dc.w    $0028, $006A, $001E, $0062, $0015, $0058, $0011, $004A
		dc.w    $0010, $0040, $0011, $0035, $0015, $0027, $001E, $001E
		dc.w    $0028, $0015, $0035, $0011, $0040, $0010, $0050, $0010
		dc.w    $005E, $0012, $0068, $0018, $006D, $0024, $0070, $0030
		dc.w    $006D, $003D, $0068, $0048, $005E, $004E, $0050, $0050
		dc.w    $0030, $0050, $0022, $0052, $0017, $005A, $0011, $0063
		dc.w    $0010, $0070 
loc_16B8C:
		dc.w    $005C
		dc.w    $0090, $0010, $0090, $0070, $0040, $0070, $002E, $006E
		dc.w    $001D, $0062, $0013, $0053, $0010, $0040, $0013, $002D
		dc.w    $001D, $001E, $002E, $0013, $0040, $0010, $0058, $0010
		dc.w    $0064, $0014, $006C, $001A, $0070, $0028, $006C, $0036
		dc.w    $0064, $003C, $0058, $0040, $004B, $003D, $0040, $0038
		dc.w    $0036, $0032, $0028, $0030, $0010, $0030
loc_16BEA:
		dc.w    $0074
		dc.w    $0010, $0070, $0011, $0063, $0017, $005A, $0022, $0052
		dc.w    $0030, $0050, $0050, $0050, $005E, $004E, $0068, $0048
		dc.w    $006D, $003D, $0070, $0030, $006D, $0024, $0068, $0018
		dc.w    $005E, $0012, $0050, $0010, $0040, $0010, $0035, $0011
		dc.w    $0028, $0015, $001E, $001E, $0015, $0027, $0011, $0035
		dc.w    $0010, $0040, $0011, $004A, $0015, $0058, $001E, $0062
		dc.w    $0028, $006A, $0035, $006F, $0040, $0070, $0090, $0070
		dc.w    $0090, $0010
loc_16C60:
		dc.w    $005C
		dc.w    $0010, $0030, $0028, $0030, $0036, $0032, $0040, $0038
		dc.w    $004B, $003D, $0058, $0040, $0064, $003C, $006C, $0036
		dc.w    $0070, $0028, $006C, $001A, $0064, $0014, $0058, $0010
		dc.w    $0040, $0010, $002E, $0013, $001D, $001E, $0013, $002D
		dc.w    $0010, $0040, $0013, $0053, $001D, $0062, $002E, $006E
		dc.w    $0040, $0070, $0090, $0070, $0090, $0010
loc_16CBE:
		dc.w    $0070
		dc.w    $0010, $0010, $0010, $0070, $00C0, $0070, $00CA, $006F
		dc.w    $00D4, $006C, $00DB, $0068, $00E3, $0062, $00E8, $005A
		dc.w    $00ED, $0052, $00EF, $0048, $00F0, $0040, $00EF, $0036
		dc.w    $00ED, $002E, $00E8, $0026, $00E3, $001E, $00DB, $0017
		dc.w    $00D4, $0014, $00CA, $0012, $00C0, $0010, $00B7, $0011
		dc.w    $00AF, $0012, $00A6, $0017, $009E, $001E, $0097, $0026
		dc.w    $0093, $002E, $0091, $0036, $0090, $0040, $0090, $0070		  
loc_16D30:
		dc.w    $005C
		dc.w    $0010, $0010, $0010, $0070, $00C0, $0070, $00D2, $006E
		dc.w    $00E3, $0062, $00ED, $0053, $00F0, $0040, $00ED, $002D
		dc.w    $00E3, $001E, $00D2, $0013, $00C0, $0010, $00A8, $0010
		dc.w    $009C, $0014, $0094, $001A, $0090, $0028, $0094, $0036
		dc.w    $009C, $003C, $00A8, $0040, $00B5, $003D, $00C0, $0038
		dc.w    $00CA, $0032, $00D8, $0030, $00F0, $0030
loc_16D8E:
		dc.w    $0070
		dc.w    $0090, $0070, $0090, $0040, $0091, $0036, $0093, $002E
		dc.w    $0097, $0026, $009E, $001E, $00A6, $0017, $00AF, $0012
		dc.w    $00B7, $0011, $00C0, $0010, $00CA, $0012, $00D4, $0014
		dc.w    $00DB, $0017, $00E3, $001E, $00E8, $0026, $00ED, $002E
		dc.w    $00EF, $0036, $00F0, $0040, $00EF, $0048, $00ED, $0052
		dc.w    $00E8, $005A, $00E3, $0062, $00DB, $0068, $00D4, $006C
		dc.w    $00CA, $006F, $00C0, $0070, $0010, $0070, $0010, $0010		
loc_16E00:
		dc.w    $005C
		dc.w    $00F0, $0030, $00D8, $0030, $00CA, $0032, $00C0, $0038
		dc.w    $00B5, $003D, $00A8, $0040, $009C, $003C, $0094, $0036
		dc.w    $0090, $0028, $0094, $001A, $009C, $0014, $00A8, $0010
		dc.w    $00C0, $0010, $00D2, $0013, $00E3, $001E, $00ED, $002D
		dc.w    $00F0, $0040, $00ED, $0053, $00E3, $0062, $00D2, $006E
		dc.w    $00C0, $0070, $0010, $0070, $0010, $0010
loc_16E5E:
		dc.w    $0074
		dc.w    $0110, $0010, $0110, $0070, $0040, $0070, $0035, $006F
		dc.w    $0028, $006A, $001E, $0062, $0015, $0058, $0011, $004A
		dc.w    $0010, $0040, $0011, $0035, $0015, $0027, $001E, $001E
		dc.w    $0028, $0015, $0035, $0011, $0040, $0010, $0050, $0010
		dc.w    $005E, $0012, $0068, $0018, $006D, $0024, $0070, $0030
		dc.w    $006D, $003D, $0068, $0048, $005E, $004E, $0050, $0050
		dc.w    $0030, $0050, $0022, $0052, $0017, $005A, $0011, $0063
		dc.w    $0010, $0070
loc_16ED4:
		dc.w    $005C
		dc.w    $0110, $0010, $0110, $0070, $0040, $0070, $002E, $006E
		dc.w    $001D, $0062, $0013, $0053, $0010, $0040, $0013, $002D
		dc.w    $001D, $001E, $002E, $0013, $0040, $0010, $0058, $0010
		dc.w    $0064, $0014, $006C, $001A, $0070, $0028, $006C, $0036
		dc.w    $0064, $003C, $0058, $0040, $004B, $003D, $0040, $0038
		dc.w    $0036, $0032, $0028, $0030, $0010, $0030
loc_16F32:
		dc.w    $0074
		dc.w    $0010, $0070, $0011, $0063, $0017, $005A, $0022, $0052
		dc.w    $0030, $0050, $0050, $0050, $005E, $004E, $0068, $0048
		dc.w    $006D, $003D, $0070, $0030, $006D, $0024, $0068, $0018
		dc.w    $005E, $0012, $0050, $0010, $0040, $0010, $0035, $0011
		dc.w    $0028, $0015, $001E, $001E, $0015, $0027, $0011, $0035
		dc.w    $0010, $0040, $0011, $004A, $0015, $0058, $001E, $0062
		dc.w    $0028, $006A, $0035, $006F, $0040, $0070, $0110, $0070
		dc.w    $0110, $0010
loc_16FA8:
		dc.w    $005C
		dc.w    $0010, $0030, $0028, $0030, $0036, $0032, $0040, $0038
		dc.w    $004B, $003D, $0058, $0040, $0064, $003C, $006C, $0036
		dc.w    $0070, $0028, $006C, $001A, $0064, $0014, $0058, $0010
		dc.w    $0040, $0010, $002E, $0013, $001D, $001E, $0013, $002D
		dc.w    $0010, $0040, $0013, $0053, $001D, $0062, $002E, $006E
		dc.w    $0040, $0070, $0110, $0070, $0110, $0010
loc_17006:
		dc.w    loc_17024-loc_17006
		dc.w    loc_17024-loc_17006
		dc.w    loc_1703A-loc_17006
		dc.w    loc_17064-loc_17006
		dc.w    loc_1707A-loc_17006
		dc.w    loc_17090-loc_17006
		dc.w    loc_170A6-loc_17006
		dc.w    loc_170B8-loc_17006
		dc.w    loc_170D2-loc_17006
		dc.w    loc_170EC-loc_17006
		dc.w    loc_170FE-loc_17006
		dc.w    loc_17110-loc_17006
		dc.w    loc_1712A-loc_17006
		dc.w    loc_17140-loc_17006
		dc.w    loc_1714E-loc_17006
loc_17024:
		dc.w    $0014
		dc.w    $0790, $03B0, $0710, $03B0, $0710, $06B0, $0A90, $06B0
		dc.w    $0A90, $0670
loc_1703A:
		dc.w    $0028
		dc.w    $0790, $03F0, $0790, $04B0, $0A00, $04B0, $0C10, $04B0
		dc.w    $0C10, $0330, $0D90, $0330, $0D90, $01B0, $0F10, $01B0
		dc.w    $0F10, $02B0, $0F90, $02B0
loc_17064:
		dc.w    $0014
		dc.w    $0AF0, $0630, $0E90, $0630, $0E90, $06B0, $0F90, $06B0
		dc.w    $0F90, $0670
loc_1707A:
		dc.w    $0014
		dc.w    $0F90, $02F0, $0F90, $04B0, $0F10, $04B0, $0F10, $0630
		dc.w    $0F90, $0630
loc_17090:
		dc.w    $0014
		dc.w    $1410, $0530, $1190, $0530, $1190, $06B0, $1410, $06B0
		dc.w    $1410, $0570
loc_170A6:
		dc.w    $0010
		dc.w    $1AF0, $0530, $1B90, $0530, $1B90, $0330, $1E10, $0330
loc_170B8:
		dc.w    $0018
		dc.w    $1A90, $0570, $1A90, $05B0, $1C10, $05B0, $1C10, $0430
		dc.w    $1E10, $0430, $1E10, $0370
loc_170D2:
		dc.w    $0018
		dc.w    $2490, $0370, $2490, $03D0, $2390, $03D0, $2390, $05D0
		dc.w    $2510, $05D0, $2510, $0570
loc_170EC:
		dc.w    $0010
		dc.w    $24F0, $0330, $2590, $0330, $2590, $0530, $2570, $0530
loc_170FE:
		dc.w    $0010
		dc.w    $0310, $0330, $0290, $0330, $0290, $0230, $0490, $0230
loc_17110:
		dc.w    $0018
		dc.w    $0310, $0370, $0310, $03B0, $0410, $03B0, $0410, $02B0
		dc.w    $0490, $02B0, $0490, $0270
loc_1712A:
		dc.w    $0014
		dc.w    $0490, $06F0, $0490, $0730, $0690, $0730, $0890, $0730
		dc.w    $0890, $06F0
loc_17140:
		dc.w    $000C
		dc.w    $0BF0, $0330, $0D90, $0330, $0D90, $02F0
loc_1714E:
		dc.w    $001C
		dc.w    $0D90, $02B0, $0C90, $02B0, $0C90, $00B0, $0E80, $00B0
		dc.w    $1110, $00B0, $1110, $0230, $10F0, $0230 
;=============================================================================== 
; Object 0x1E - Chemical Plant - Tube Attributes
; [ End ]		         
;===============================================================================		   
loc_1716C:
		jmp     (loc_D30C) 
		dc.w    $0000		   ; Filler  
		
;=============================================================================== 
; Object 0x20 - Fireball - Hill Top 
; [ Begin ]		         
;===============================================================================  
Obj_0x20_Fireball: ; loc_17174:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_17182(PC, D0), D1
		jmp     loc_17182(PC, D1)
loc_17182:
		dc.w    loc_17190-loc_17182
		dc.w    loc_171F2-loc_17182
		dc.w    loc_17200-loc_17182
		dc.w    loc_1729A-loc_17182
		dc.w    loc_172C0-loc_17182
		dc.w    loc_1734E-loc_17182
		dc.w    loc_173AE-loc_17182
loc_17190:
		addq.b  #$02, $0024(A0)
		move.b  #$08, $0016(A0)
		move.b  #$08, $0017(A0)
		move.l  #Fireball_Mappings, $0004(A0) ; loc_173D0
		move.w  #$8416, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_04 ; loc_17470
		ori.b   #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$08, $0019(A0)
		move.w  $000C(A0), $0030(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsl.w   #$03, D0
		andi.w  #$0780, D0
		neg.w   D0
		move.w  D0, $0010(A0)
		move.w  D0, $0012(A0)
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		lsl.w   #$04, D0
		move.w  D0, $0032(A0)
		move.w  D0, $0034(A0)
loc_171F2:
		lea     (loc_173B2).l, A1
		bsr.w     J_AnimateSprite_00      ; loc_1746A
		bra.w     J_MarkObjGone_03        ; loc_1745E
loc_17200:
		cmpi.b  #$05, $001E(A0)
		bne.s   loc_17230
		bsr.w     J_SingleObjLoad2_00 ; loc_17464
		bne.s   loc_17222
		bsr.s   loc_1723E
		bsr.w     J_SingleObjLoad2_00 ; loc_17464
		bne.s   loc_17222
		bsr.s   loc_1723E
		neg.w   $0010(A1)
		bset    #$00, $0001(A1)
loc_17222:
		move.w  #$00AE, D0
		jsr     (PlaySound).l             ; loc_14C6
		addq.b  #$02, $0024(A0)
loc_17230:
		lea     (loc_173B2).l, A1
		bsr.w     J_AnimateSprite_00      ; loc_1746A
		bra.w     J_MarkObjGone_03        ; loc_1745E
loc_1723E:
		_move.b  #$20, 0(A1)
		move.b  #$08, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0010(A0), $0010(A1)
		move.w  $0012(A0), $0012(A1)
		move.b  #$08, $0016(A1)
		move.b  #$08, $0017(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$08, $0019(A1)
		move.b  #$8B, $0020(A1)
		move.w  $000C(A1), $0030(A1)
		rts
loc_1729A:
		subq.w  #$01, $0032(A0)
		bpl.s   loc_172B2
		move.w  $0034(A0), $0032(A0)
		move.b  #$02, $0024(A0)
		move.w  #$0001, $001C(A0)
loc_172B2:
		lea     (loc_173B2).l, A1
		bsr.w     J_AnimateSprite_00      ; loc_1746A
		bra.w     J_MarkObjGone_03        ; loc_1745E
loc_172C0:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_172D6
		move.b  #$07, $001E(A0)
		addq.b  #$01, $001A(A0)
		andi.b  #$01, $001A(A0)
loc_172D6:
		bsr.w     J_SpeedToPos_03         ; loc_17476
		addi.w  #$0018, $0012(A0)
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcc.s   loc_172F2
		bra.w     J_DeleteObject_0D       ; loc_17458
loc_172F2:
		bclr    #$01, $0001(A0)
		tst.w   $0012(A0)
		bmi.s   loc_1734A
		bset    #$01, $0001(A0)
		bsr.w     ObjHitFloor             ; loc_13898
		tst.w   D1
		bpl.s   loc_1734A
		add.w   D1, $000C(A0)
		addq.b  #$02, $0024(A0)
		move.b  #$02, $001C(A0)
		move.b  #$04, $001A(A0)
		move.w  #$0000, $0012(A0)
		move.l  #$00017410, $0004(A0)
		move.w  #$839E, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_04 ; loc_17470
		move.b  #$00, $001A(A0)
		move.w  #$0009, $0032(A0)
		move.b  #$03, $0036(A0)
loc_1734A:
		bra.w     J_MarkObjGone_03        ; loc_1745E
loc_1734E:
		subq.w  #$01, $0032(A0)
		bpl.s   loc_173A0
		move.w  #$007F, $0032(A0)
		subq.b  #$01, $0036(A0)
		bmi.s   loc_173A0
		bsr.w     J_SingleObjLoad2_00 ; loc_17464
		bne.s   loc_173A0
		moveq   #$00, D0
		move.w  #$000F, D1
loc_1736C:		
		move.l  $00(A0, D0), $00(A1, D0)
		addq.w  #$04, D0
		dbf    D1, loc_1736C
		move.w  #$0009, $0032(A1)
		move.w  #$0200, $001C(A1)
		move.w  #$000E, D0
		tst.w   $0010(A1)
		bpl.s   loc_17390
		neg.w   D0
loc_17390:
		add.w   D0, $0008(A1)
		move.l  A1, -(A7)
		bsr.w     loc_138CE
		move.l  (A7)+, A1
		add.w   D1, $000C(A1)
loc_173A0:
		lea     (loc_173B2).l, A1
		bsr.w     J_AnimateSprite_00      ; loc_1746A
		bra.w     J_MarkObjGone_03        ; loc_1745E
loc_173AE:
		bra.w     J_DeleteObject_0D       ; loc_17458
loc_173B2:
		dc.w    loc_173B8-loc_173B2
		dc.w    loc_173BF-loc_173B2
		dc.w    loc_173C2-loc_173B2
loc_173B8:
		dc.b    $0B, $02, $03, $FC, $04, $FD, $01
loc_173BF:
		dc.b    $7F, $05, $FF
loc_173C2:
		dc.b    $05, $04, $05, $02, $03, $00, $01, $00, $01, $02, $03, $04, $05, $FC
Fireball_Mappings:		
loc_173D0:
		dc.w    loc_173DC-loc_173D0
		dc.w    loc_173E6-loc_173D0
		dc.w    loc_173F0-loc_173D0
		dc.w    loc_173FA-loc_173D0
		dc.w    loc_17404-loc_173D0
		dc.w    loc_1740E-loc_173D0
loc_173DC:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_173E6:
		dc.w    $0001
		dc.l    $F8050004, $0002FFF8
loc_173F0:
		dc.w    $0001
		dc.l    $F9050008, $0004FFF8
loc_173FA:
		dc.w    $0001
		dc.l    $F6050008, $0004FFF8
loc_17404:
		dc.w    $0001
		dc.l    $F605000C, $0006FFF8
loc_1740E:
		dc.w    $0000
loc_17410_B:
		dc.w    loc_1741C-loc_17410_B
		dc.w    loc_17426-loc_17410_B
		dc.w    loc_17430-loc_17410_B
		dc.w    loc_1743A-loc_17410_B
		dc.w    loc_17444-loc_17410_B
		dc.w    loc_1744E-loc_17410_B
loc_1741C:
		dc.w    $0001
		dc.l    $F0070000, $0000FFF8
loc_17426:
		dc.w    $0001
		dc.l    $F0070800, $0800FFF8
loc_17430:
		dc.w    $0001
		dc.l    $F0070008, $0004FFF8
loc_1743A:
		dc.w    $0001
		dc.l    $F0070808, $0804FFF8
loc_17444:
		dc.w    $0001
		dc.l    $00050010, $0008FFF8
loc_1744E:
		dc.w    $0001
		dc.l    $00050810, $0808FFF8    
J_DeleteObject_0D: ; loc_17458:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_03: ; loc_1745E:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_00: ; loc_17464:
		jmp     SingleObjLoad2      ; (loc_E788)
J_AnimateSprite_00: ; loc_1746A:
		jmp     AnimateSprite           ; (loc_D412)
J_Adjust2PArtPointer_04: ; loc_17470:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SpeedToPos_03: ; loc_17476:
		jmp     SpeedToPos              ; (loc_D27A)        
;=============================================================================== 
; Object 0x20 - Fireball - Hill Top 
; [ End ]		         
;=============================================================================== 
;=============================================================================== 
; Object 0x2F - Hill Top - Breakable Floor
; [ Begin ]		         
;=============================================================================== 
Obj_0x2F_Breakable_Floor: ; loc_1747C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1748A(PC, D0), D1
		jmp     loc_1748A(PC, D1)
loc_1748A:
		dc.w    loc_1749A-loc_1748A
		dc.w    loc_174D8-loc_1748A
		dc.w    loc_1764C-loc_1748A
loc_17490:
		dc.b    $24, $00, $20, $02, $18, $04, $10, $06, $08, $08
loc_1749A:
		addq.b  #$02, $0024(A0)
		move.l  #Obj2F_MapUnc_1786A, $0004(A0) ; loc_1786A
		move.w  #$C000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_05 ; loc_17A34
		move.b  #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$001E, D0
		lea     loc_17490(PC, D0), A2
		move.b  (A2)+, $0016(A0)
		move.b  (A2)+, $001A(A0)
loc_174D8:
		move.w  (Chain_Bonus_counter).w, $0038(A0)
		move.b  ($FFFFB01C).w, $0032(A0)
		move.b  ($FFFFB05C).w, $0033(A0)
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_00        ; loc_17A40
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_17514
loc_17510:		
		bra.w     J_MarkObjGone_04        ; loc_17A2E
loc_17514:
		cmpi.b  #$18, D0
		bne.s   loc_17578
		cmpi.b  #$02, $0032(A0)
		bne.s   loc_17530
		tst.b   $0028(A0)
		bmi.s   loc_17560
		cmpi.b  #$0E, ($FFFFB03E).w
		beq.s   loc_17560
loc_17530:
		move.b  #$0C, ($FFFFB03E).w
		move.b  #$0D, ($FFFFB03F).w
		cmpi.b  #$02, $0033(A0)
		bne.s   loc_17552
		tst.b   $0028(A0)
		bmi.s   loc_17560
		cmpi.b  #$0E, ($FFFFB07E).w
		beq.s   loc_17560
loc_17552:
		move.b  #$0C, ($FFFFB07E).w
		move.b  #$0D, ($FFFFB07F).w
		bra.s   loc_17510
loc_17560:
		lea     ($FFFFB000).w, A1
		move.b  $0032(A0), D0
		bsr.s   loc_175AE
		lea     ($FFFFB040).w, A1
		move.b  $0033(A0), D0
		bsr.s   loc_175AE
		bra.w     loc_17614
loc_17578:
		move.b  D0, D1
		andi.b  #$08, D1
		beq.s   loc_175E0
		cmpi.b  #$02, $0032(A0)
		bne.s   loc_17596
		tst.b   $0028(A0)
		bmi.s   loc_175A6
		cmpi.b  #$0E, ($FFFFB03E).w
		beq.s   loc_175A6
loc_17596:
		move.b  #$0C, ($FFFFB03E).w
		move.b  #$0D, ($FFFFB03F).w
		bra.w     loc_17510
loc_175A6:
		lea     ($FFFFB000).w, A1
		bsr.s   loc_175B4
		bra.s   loc_17614
loc_175AE:
		cmpi.b  #$02, D0
		bne.s   loc_175CC
loc_175B4:
		bset    #$02, $0022(A1)
		move.b  #$0E, $0016(A1)
		move.b  #$07, $0017(A1)
		move.b  #$02, $001C(A1)
loc_175CC:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		rts
loc_175E0:
		andi.b  #$10, D0
		beq.w    loc_17510
		cmpi.b  #$02, $0033(A0)
		bne.s   loc_175FE
		tst.b   $0028(A0)
		bmi.s   loc_1760E
		cmpi.b  #$0E, ($FFFFB07E).w
		beq.s   loc_1760E
loc_175FE:
		move.b  #$0C, ($FFFFB07E).w
		move.b  #$0D, ($FFFFB07F).w
		bra.w     loc_17510
loc_1760E:
		lea     ($FFFFB040).w, A1
		bsr.s   loc_175B4
loc_17614:
		move.w  $0038(A0), (Chain_Bonus_counter).w
		andi.b  #$E7, $0022(A0)
		lea     (loc_17662).l, A4
		moveq   #$00, D0
		move.b  $001A(A0), D0
		addq.b  #$01, $001A(A0)
		move.l  D0, D1
		add.w   D0, D0
		add.w   D0, D0
		lea     $00(A4, D0), A4
		neg.w   D1
		addi.w  #$0009, D1
		move.w  #$0018, D2
		bsr.w     loc_17A3A
		bsr.w     loc_17818
loc_1764C:
		bsr.w     J_SpeedToPos_04         ; loc_17A46
		addi.w  #$0018, $0012(A0)
		tst.b   $0001(A0)
		bpl.w    J_DeleteObject_0E       ; loc_17A22
		bra.w     J_DisplaySprite_02      ; loc_17A1C  
loc_17662:
		dc.w    $FF00, $F800, $0100, $F800, $FF20, $F900, $00E0, $F900
		dc.w    $FF40, $FA00, $00C0, $FA00, $FF60, $FB00, $00A0, $FB00
		dc.w    $FF80, $FC00, $0080, $FC00  
;=============================================================================== 
; Object 0x2F - Hill Top - Breakable Floor
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x32 - Rock - Hill Top / Tunel Obstacule - Chemical Plant
; [ Begin ]		         
;=============================================================================== 
Obj_0x32_Breakable_Obstacule: ; loc_1768A:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_17698(PC, D0), D1
		jmp     loc_17698(PC, D1)
loc_17698:
		dc.w    loc_1769E-loc_17698
		dc.w    loc_176F2-loc_17698
		dc.w    loc_177DA-loc_17698
loc_1769E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj32_MapUnc_179C2, $0004(A0) ; loc_179C2
		move.w  #$43B2, $0002(A0)
		move.b  #$18, $0019(A0)
		move.l  #loc_177F0, $003C(A0)
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		bne.s   loc_176E2
		move.l  #Obj32_MapUnc_179F6, $0004(A0) ; loc_179F6
		move.w  #$6430, $0002(A0)
		move.b  #$10, $0019(A0)
		move.l  #loc_17808, $003C(A0)
loc_176E2:
		bsr.w     J_Adjust2PArtPointer_05 ; loc_17A34
		move.b  #$04, $0001(A0)
		move.b  #$04, $0018(A0)
loc_176F2:
		move.w  (Chain_Bonus_counter).w, $0038(A0)
		move.b  ($FFFFB01C).w, $0032(A0)
		move.b  ($FFFFB05C).w, $0033(A0)
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_00        ; loc_17A40
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_1772C
loc_17728:		
		bra.w     J_MarkObjGone_04        ; loc_17A2E
loc_1772C:
		cmpi.b  #$18, D0
		bne.s   loc_1775A
		cmpi.b  #$02, $0032(A0)
		beq.s   loc_17742
		cmpi.b  #$02, $0033(A0)
		bne.s   loc_17728
loc_17742:
		lea     ($FFFFB000).w, A1
		move.b  $0032(A0), D0
		bsr.s   loc_17772
		lea     ($FFFFB040).w, A1
		move.b  $0033(A0), D0
		bsr.s   loc_17772
		bra.w     loc_177C2
loc_1775A:
		move.b  D0, D1
		andi.b  #$08, D1
		beq.s   loc_177AA
		cmpi.b  #$02, $0032(A0)
		bne.s   loc_17728
		lea     ($FFFFB000).w, A1
		bsr.s   loc_17778
		bra.s   loc_177C2
loc_17772:
		cmpi.b  #$02, D0
		bne.s   loc_17796
loc_17778:
		bset    #$02, $0022(A1)
		move.b  #$0E, $0016(A1)
		move.b  #$07, $0017(A1)
		move.b  #$02, $001C(A1)
		move.w  #$FD00, $0012(A1)
loc_17796:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		rts
loc_177AA:
		andi.b  #$10, D0
		beq.w    loc_17728
		cmpi.b  #$02, $0033(A0)
		bne.w    loc_17728
		lea     ($FFFFB040).w, A1
		bsr.s   loc_17778
loc_177C2:
		move.w  $0038(A0), (Chain_Bonus_counter).w
		andi.b  #$E7, $0022(A0)
		move.l  $003C(A0), A4
		bsr.w     loc_17A3A
		bsr.w     loc_17818
loc_177DA:
		bsr.w     J_SpeedToPos_04         ; loc_17A46
		addi.w  #$0018, $0012(A0)
		tst.b   $0001(A0)
		bpl.w    J_DeleteObject_0E       ; loc_17A22
		bra.w     J_DisplaySprite_02      ; loc_17A1C
loc_177F0:
		dc.w    $FE00, $FE00, $0000, $FD80, $0200, $FE00, $FE40, $FE40
		dc.w    $0000, $FE00, $01C0, $FE40
loc_17808:
		dc.w    $FF00, $FE00, $0100, $FE00, $FF40, $FE40, $00C0, $FE40		
;=============================================================================== 
; Object 0x32 - Rock - Hill Top / Tunel Obstacule - Chemical Plant
; [ End ]		         
;===============================================================================              
loc_17818:
		bsr.w     J_SingleObjLoad_00   ; loc_17A28
		bne.s   loc_17860
		_move.b  #$29, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  (Chain_Bonus_counter).w, D2
		addq.w  #$02, (Chain_Bonus_counter).w
		cmpi.w  #$0006, D2
		bcs.s   loc_17840
		moveq   #$06, D2
loc_17840:
		moveq   #$00, D0
		move.w  loc_17862(PC, D2), D0
		cmpi.w  #$0020, (Chain_Bonus_counter).w
		bcs.s   loc_17854
		move.w  #$03E8, D0
		moveq   #$0A, D2
loc_17854:
		jsr     AddPoints               ; (loc_22FD0)
		lsr.w   #$01, D2
		move.b  D2, $001A(A1)
loc_17860:
		rts
loc_17862:
		dc.w    $000A, $0014, $0032, $0064
; ---------------------------------------------------------------------------
; Sprite mappings - Obj2F
; ---------------------------------------------------------------------------
Obj2F_MapUnc_1786A:	BINCLUDE	"mappings/sprite/obj2F.bin"
; ---------------------------------------------------------------------------
; Sprite mappings - Obj32
; ---------------------------------------------------------------------------
Obj32_MapUnc_179C2:	BINCLUDE	"mappings/sprite/obj32_HTZ.bin"	; HTZ rock
Obj32_MapUnc_179F6:	BINCLUDE	"mappings/sprite/obj32_CPZ.bin" ; CPZ tube cover
; ===========================================================================
		nop

J_DisplaySprite_02: ; loc_17A1C:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_0E: ; loc_17A22:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_00: ; loc_17A28:
		jmp     SingleObjLoad        ; (loc_E772)
J_MarkObjGone_04: ; loc_17A2E:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_05: ; loc_17A34:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_17A3A:
		jmp     (BreakObjectToPieces)
J_SolidObject_00: ; loc_17A40:
		jmp     SolidObject             ; (loc_F4A0)
J_SpeedToPos_04: ; loc_17A46:
		jmp     SpeedToPos              ; (loc_D27A) 
		
;=============================================================================== 
; Object 0x30 - 
; [ Begin ]		         
;===============================================================================		  
Obj_0x30: ; loc_17A4C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_17A5A(PC, D0), D1
		jmp     loc_17A5A(PC, D1)
loc_17A5A:
		dc.w    loc_17A68-loc_17A5A
		dc.w    loc_17AB4-loc_17A5A
loc_17A5E:
		dc.w    $C000, $C000, $C000, $E000, $FF00
loc_17A68:
		addq.b  #$02, $0024(A0)
		move.w  $000C(A0), $0032(A0)
		move.w  $0008(A0), $0030(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.b  loc_17A5E(PC, D0), $0019(A0)
		cmpi.b  #$06, D0
		bcs.s   loc_17AB4
		bne.s   loc_17A96
		cmpi.w  #$0380, (Camera_Y_pos).w
		bcc.s   loc_17AB4
		bra.s   loc_17A9E
loc_17A96:
		cmpi.w  #$0380, (Camera_Y_pos).w
		bcs.s   loc_17AB4
loc_17A9E:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_17AB0
		bclr    #$07, $02(A2, D0)
loc_17AB0:
		bra.w     J_DeleteObject_0F       ; loc_17C80
loc_17AB4:
		move.w  $0032(A0), D0
		add.w   (Camera_BG_Y_offset).w, D0
		move.w  D0, $000C(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.w  loc_17AD8(PC, D0), D1
		jsr     loc_17AD8(PC, D1)
		tst.b   (Screen_Shaking_Flag_HTZ).w
		beq.w    loc_17C8C
		rts
loc_17AD8:
		dc.w    loc_17AE2-loc_17AD8
		dc.w    loc_17AE2-loc_17AD8
		dc.w    loc_17AFA-loc_17AD8
		dc.w    loc_17B40-loc_17AD8
		dc.w    loc_17B5A-loc_17AD8
loc_17AE2:
		move.w  #$00CB, D1
		move.w  #$0080, D2
		move.w  #$0081, D3
		move.w  $0008(A0), D4
		bsr.w     loc_17C92
		bra.w     loc_FBF4
loc_17AFA:
		move.w  #$00CB, D1
		move.w  #$0078, D2
		move.w  #$0079, D3
		move.w  $0008(A0), D4
		bsr.w     loc_17C92
		bsr.w     loc_FBF4
loc_17B12:               
		btst    #$03, $0022(A0)
		beq.s   loc_17B28
		move.l  A0, -(A7)
		move.l  A0, A1
		lea     ($FFFFB000).w, A0
		bsr.w     loc_17C86
		move.l  (A7)+, A0
loc_17B28:
		btst    #$04, $0022(A0)
		beq.s   loc_17B3E
		move.l  A0, -(A7)
		move.l  A0, A1
		lea     ($FFFFB040).w, A0
		bsr.w     loc_17C86
		move.l  (A7)+, A0
loc_17B3E:
		rts
loc_17B40:
		move.w  #$00EB, D1
		move.w  #$0078, D2
		move.w  #$0079, D3
		move.w  $0008(A0), D4
		bsr.w     loc_17C92
		bsr.w     loc_FBF4
		bra.s   loc_17B12
loc_17B5A:
		move.w  #$010A, D1
		move.w  #$003E, D2
		move.w  $0008(A0), D4
		lea     (loc_17B74).l, A2
		bsr.w     loc_17C98
		bra.w     loc_FBF4     
loc_17B74:
		dc.b    $40, $40, $40, $40, $40, $40, $40, $40, $3F, $3F, $3E, $3E, $3D, $3D, $3C, $3C
		dc.b    $3B, $3B, $3A, $3A, $39, $39, $38, $38, $37, $37, $36, $36, $35, $35, $34, $34
		dc.b    $33, $33, $32, $32, $31, $31, $30, $30, $2F, $2F, $2E, $2E, $2D, $2D, $2C, $2C
		dc.b    $2B, $2B, $2A, $2A, $29, $29, $28, $28, $27, $27, $26, $26, $25, $25, $24, $24
		dc.b    $23, $23, $22, $22, $21, $21, $20, $20, $1F, $1F, $1E, $1E, $1D, $1D, $1C, $1C
		dc.b    $1B, $1B, $1A, $1A, $19, $19, $18, $18, $17, $17, $16, $16, $15, $15, $14, $14
		dc.b    $13, $13, $12, $12, $11, $11, $10, $10, $0F, $0F, $0E, $0E, $0D, $0D, $0C, $0C
		dc.b    $0B, $0B, $0A, $0A, $09, $09, $08, $08, $07, $07, $06, $06, $05, $05, $04, $04
		dc.b    $03, $03, $02, $02, $01, $01, $00, $00, $FF, $FF, $FE, $FE, $FD, $FD, $FC, $FC
		dc.b    $FB, $FB, $FA, $FA, $F9, $F9, $F8, $F8, $F7, $F7, $F6, $F6, $F5, $F5, $F4, $F4
		dc.b    $F3, $F3, $F2, $F2, $F1, $F1, $F0, $F0, $EF, $EF, $EE, $EE, $ED, $ED, $EC, $EC
		dc.b    $EB, $EB, $EA, $EA, $E9, $E9, $E8, $E8, $E7, $E7, $E6, $E6, $E5, $E5, $E4, $E4
		dc.b    $E3, $E3, $E2, $E2, $E1, $E1, $E0, $E0, $DF, $DF, $DE, $DE, $DD, $DD, $DC, $DC
		dc.b    $DB, $DB, $DA, $DA, $D9, $D9, $D8, $D8, $D7, $D7, $D6, $D6, $D5, $D5, $D4, $D4
		dc.b    $D3, $D3, $D2, $D2, $D1, $D1, $D0, $D0, $CF, $CF, $CE, $CE, $CD, $CD, $CC, $CC
		dc.b    $CB, $CB, $CA, $CA, $C9, $C9, $C8, $C8, $C7, $C7, $C6, $C6, $C5, $C5, $C4, $C4
		dc.b    $C3, $C3, $C2, $C2, $C1, $C1, $C0, $C0, $C0, $C0, $C0, $C0		         
;=============================================================================== 
; Object 0x30 - 
; [ End ]		         
;===============================================================================  
J_DeleteObject_0F: ; loc_17C80:
		jmp     DeleteObject            ; (loc_D3B4)
loc_17C86:
		jmp     (loc_21370)
loc_17C8C:
		jmp     (loc_D30C)
loc_17C92:
		jmp     (loc_F4FA)
loc_17C98:
		jmp     (loc_F54C)
		dc.w    $0000		   ; Filler		  
;=============================================================================== 
; Object 0x33 - Oil Ocean - Touch to Boost Up
; [ Begin ]		         
;===============================================================================		  
Obj_0x33_Touch_Booster: ; loc_17CA0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_17CAE(PC, D0), D1
		jmp     loc_17CAE(PC, D1)
loc_17CAE:
		dc.w    loc_17CB2-loc_17CAE
		dc.w    loc_17CF6-loc_17CAE
loc_17CB2:
		addq.b  #$02, $0024(A0)
		move.l  #Obj33_MapUnc_17EE2, $0004(A0) ; loc_17EE2
		move.w  #$632C, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_06 ; loc_17EFE
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$18, $0019(A0)
		move.w  $000C(A0), $0030(A0)
		addq.b  #$02, $0025(A0)
		move.w  #$0078, $0036(A0)
		tst.b   $0028(A0)
		beq.s   loc_17CF6
		move.b  #$04, $0025(A0)
loc_17CF6:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_17D22(PC, D0), D1
		jsr     loc_17D22(PC, D1)
		move.w  (A7)+, D4
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$08, D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_01        ; loc_17F04
		bra.w     J_MarkObjGone_05        ; loc_17EF8
loc_17D22:
		dc.w    loc_17D2C-loc_17D22
		dc.w    loc_17D46-loc_17D22
		dc.w    loc_17D82-loc_17D22
		dc.w    loc_17E68-loc_17D22
		dc.w    loc_17EE0-loc_17D22
loc_17D2C:
		subq.w  #$01, $0036(A0)
		bpl.s   loc_17D44
		move.w  #$0078, $0036(A0)
		move.l  #$FFF69800, $0032(A0)
		addq.b  #$02, $0025(A0)
loc_17D44:
		rts
loc_17D46:
		move.l  $000C(A0), D1
		add.l   $0032(A0), D1
		move.l  D1, $000C(A0)
		addi.l  #$00003800, $0032(A0)
		swap  D1
		cmp.w   $0030(A0), D1
		bcs.s   loc_17D80
		move.l  $0032(A0), D0
		cmpi.l  #$00010000, D0
		bcc.s   loc_17D72
		subq.b  #$02, $0025(A0)
loc_17D72:
		lsr.l   #$02, D0
		neg.l   D0
		move.l  D0, $0032(A0)
		move.w  $0030(A0), $000C(A0)
loc_17D80:
		rts
loc_17D82:
		move.w  $0008(A0), D2
		move.w  D2, D3
		subi.w  #$0010, D2
		addi.w  #$0010, D3
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_17DF0
		cmpi.b  #$18, D0
		beq.s   loc_17DF2
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		bsr.s   loc_17DAE
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
loc_17DAE:
		btst    D6, $0022(A0)
		beq.s   loc_17DF0
		move.w  $0008(A1), D0
		cmp.w   D2, D0
		bcs.s   loc_17DF0
		cmp.w   D3, D0
		bcc.s   loc_17DF0
		move.b  #$01, $002A(A1)
		move.w  #$0000, $0014(A1)
		move.w  #$0000, $0010(A1)
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A1)
		bclr    #$07, $0002(A1)
		move.l  #$FFF69800, $0032(A0)
		addq.b  #$02, $0025(A0)
loc_17DF0:
		rts
loc_17DF2:
		lea     ($FFFFB000).w, A1
		move.w  $0008(A1), D0
		cmp.w   D2, D0
		bcs.s   loc_17E66
		cmp.w   D3, D0
		bcc.s   loc_17E66
		lea     ($FFFFB040).w, A2
		move.w  $0008(A2), D0
		cmp.w   D2, D0
		bcs.s   loc_17E66
		cmp.w   D3, D0
		bcc.s   loc_17E66
		move.b  #$01, $002A(A1)
		move.w  #$0000, $0014(A1)
		move.w  #$0000, $0010(A1)
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A1)
		bclr    #$07, $0002(A1)
		move.b  #$01, $002A(A2)
		move.w  #$0000, $0014(A2)
		move.w  #$0000, $0010(A2)
		move.w  #$0000, $0012(A2)
		bclr    #$05, $0022(A2)
		bclr    #$07, $0002(A2)
		move.l  #$FFF69800, $0032(A0)
		addq.b  #$02, $0025(A0)
loc_17E66:
		rts
loc_17E68:
		move.l  $000C(A0), D1
		add.l   $0032(A0), D1
		move.l  D1, $000C(A0)
		addi.l  #$00003800, $0032(A0)
		swap  D1
		move.w  $0030(A0), D0
		subi.w  #$007D, D0
		cmp.w   D0, D1
		bne.s   loc_17EDE
		addq.b  #$02, $0025(A0)
		lea     ($FFFFB000).w, A1
		move.b  $0022(A0), D0
		andi.b  #$08, D0
		bsr.s   loc_17EA8
		lea     ($FFFFB040).w, A1
		move.b  $0022(A0), D0
		andi.b  #$10, D0
loc_17EA8:
		beq.s   loc_17EDE
		move.w  $0008(A0), $0008(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0800, $0014(A1)
		bset    #$01, $0022(A1)
		move.w  #$F000, $0012(A1)
		bclr    #$03, $0022(A1)
		move.b  #$00, $002A(A1)
		move.w  #$00CC, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_17EDE:
		rts
loc_17EE0:
		rts

; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj33_MapUnc_17EE2:	BINCLUDE	"mappings/sprite/obj33.bin"
; ===========================================================================
		nop
J_MarkObjGone_05: ; loc_17EF8:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_06: ; loc_17EFE:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_01: ; loc_17F04:
		jmp     SolidObject             ; (loc_F4A0)
		dc.w    $0000		   ; Filler
		
;=============================================================================== 
; Object 0x43 - Oil Ocean - Giant Spikeball
; [ Begin ]		         
;===============================================================================		 
Obj_0x43_Giant_Spikeball: ; loc_17F0C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_17F1A(PC, D0), D1
		jmp     loc_17F1A(PC, D1)
loc_17F1A:
		dc.w    loc_17F32-loc_17F1A
		dc.w    loc_17FD6-loc_17F1A
		dc.w    loc_18028-loc_17F1A
loc_17F20:
		dc.b    $00, $68, $00, $00, $00, $00, $01, $E8, $FF, $E8, $00, $18, $01, $A8, $FF, $A8
		dc.b    $FF, $D8
loc_17F32:
		addq.b  #$02, $0024(A0)
		move.w  #$C30C, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_07 ; loc_180CA
		moveq   #$00, D1
		move.b  $0028(A0), D1
		lea     loc_17F20(PC, D1), A2
		move.b  (A2)+, D1
		move.l  A0, A1
		bra.s   loc_17F74
loc_17F50:		
		bsr.w     J_SingleObjLoad2_01  ; loc_180C4
		bne.s   loc_17FA0
		_move.b  0(A0), 0(A1)
		move.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  #$01, $0036(A1)
loc_17F74:
		move.l  #Giant_Spikeball_Mappings, $0004(A1) ; loc_1808E
		move.w  $0002(A0), $0002(A1)
		move.b  #$04, $0001(A1)
		move.b  #$04, $0018(A1)
		move.b  #$18, $0019(A1)
		move.b  #$A5, $0020(A1)
		move.w  $0008(A1), $0030(A1)
loc_17FA0:
		dbf    D1, loc_17F50
		move.l  A0, $003C(A1)
		move.l  A1, $003C(A0)
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  $0030(A0), D0
		sub.w   D1, D0
		move.w  D0, $0032(A0)
		move.w  D0, $0032(A1)
		add.w   D1, D0
		add.w   D1, D0
		move.w  D0, $0034(A0)
		move.w  D0, $0034(A1)
		move.w  (A2)+, D0
		add.w   D0, $0008(A0)
		move.w  (A2)+, D0
		add.w   D0, $0008(A1)
loc_17FD6:
		bsr.s   loc_18032
		move.w  $0032(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bls.s   loc_17FFC
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_18002
loc_17FFC:
		jmp     DisplaySprite           ; (loc_D3C2)
loc_18002:
		move.l  $003C(A0), A1
		cmpa.l  A0, A1
		beq.s   loc_18010
		jsr     (loc_D3B6)
loc_18010:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_10       ; loc_18022
		bclr    #$07, $02(A2, D0)
J_DeleteObject_10: ; loc_18022:
		jmp     DeleteObject            ; (loc_D3B4)
loc_18028:
		bsr.s   loc_18032
		bsr.s   loc_18068
		jmp     DisplaySprite           ; (loc_D3C2)
loc_18032:
		tst.b   $0036(A0)
		bne.s   loc_18050
		move.w  $0008(A0), D0
		subq.w  #$01, D0
		cmp.w   $0032(A0), D0
		bne.s   loc_1804A
		move.b  #$01, $0036(A0)
loc_1804A:
		move.w  D0, $0008(A0)
		rts
loc_18050:
		move.w  $0008(A0), D0
		addq.w  #$01, D0
		cmp.w   $0034(A0), D0
		bne.s   loc_18062
		move.b  #$00, $0036(A0)
loc_18062:
		move.w  D0, $0008(A0)
		rts
loc_18068:
		move.l  $003C(A0), A1
		move.w  $0008(A0), D0
		subi.w  #$0018, D0
		move.w  $0008(A1), D2
		addi.w  #$0018, D2
		cmp.w   D0, D2
		bne.s   loc_1808C
		eori.b  #$01, $0036(A0)
		eori.b  #$01, $0036(A1)
loc_1808C:
		rts
Giant_Spikeball_Mappings:
loc_1808E:
		dc.w    loc_18090-loc_1808E
loc_18090:
		dc.w    $0006
		dc.l    $E0050000, $0000FFE8, $D80F0004, $0002FFF8
		dc.l    $F8090014, $000AFFE8, $F809001A, $000D0000
		dc.l    $10051000, $1000FFE8, $080F1004, $1002FFF8		
;=============================================================================== 
; Object 0x43 - Oil Ocean - Big Spikeball
; [ End ]		         
;===============================================================================		
		nop		             ; Filler
J_SingleObjLoad2_01: ; loc_180C4:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_07: ; loc_180CA:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
;=============================================================================== 
; Object 0x07 - 
; [ Begin ]		         
;===============================================================================  
Obj_0x07: ; loc_180D0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_180DE(PC, D0), D1
		jmp     loc_180DE(PC, D1)
loc_180DE:		
		dc.w    loc_180E2-loc_180DE
		dc.w    loc_18104-loc_180DE   
loc_180E2:
		addq.b  #$02, $0024(A0)
		move.w  #$0758, $000C(A0)
		move.b  #$20, $0019(A0)
		move.w  $000C(A0), $0030(A0)
		move.b  #$30, $0038(A0)
		bset    #$07, $0022(A0)
loc_18104:
		lea     ($FFFFB000).w, A1
		moveq   #$08, D1
		move.b  $0022(A0), D0
		and.b   D1, D0
		bne.s   loc_18120
		cmpi.b  #$30, $0038(A0)
		beq.s   loc_1812A
		addq.b  #$01, $0038(A0)
		bra.s   loc_1812A
loc_18120:
		tst.b   $0038(A0)
		beq.s   loc_1817E
		subq.b  #$01, $0038(A0)
loc_1812A:
		moveq   #$20, D1
		moveq   #$00, D3
		move.b  $0038(A0), D3
		moveq   #$03, D6
		move.w  $0008(A1), D4
		move.w  D4, $0008(A0)
		bsr.w     loc_1819A
		lea     ($FFFFB040).w, A1
		moveq   #$10, D1
		move.b  $0022(A0), D0
		and.b   D1, D0
		bne.s   loc_1815C
		cmpi.b  #$30, $003A(A0)
		beq.s   loc_18166
		addq.b  #$01, $003A(A0)
		bra.s   loc_18166
loc_1815C:
		tst.b   $003A(A0)
		beq.s   loc_1817E
		subq.b  #$01, $003A(A0)
loc_18166:
		moveq   #$20, D1
		moveq   #$00, D3
		move.b  $003A(A0), D3
		moveq   #$04, D6
		move.w  $0008(A1), D4
		move.w  D4, $0008(A0)
		bsr.w     loc_1819A
		rts
loc_1817E:
		not.b  D1
		and.b   D1, $0022(A0)
		move.l  A0, -(A7)
		move.l  A0, A2
		move.l  A1, A0
		bsr.w     J_KillSonic_01          ; loc_18194
		move.l  (A7)+, A0
		rts
;=============================================================================== 
; Object 0x07 - 
; [ End ]		         
;===============================================================================		  
		nop		             ; Filler            
J_KillSonic_01: ; loc_18194:
		jmp     KillSonic               ; (loc_21422)
loc_1819A:
		jmp     (loc_F99A)

;=============================================================================== 
; Object 0x45 - Oil Ocean - Spring Push to Boost 
; [ Begin ]		         
;===============================================================================  
Obj_0x45_Spring_Push_Boost: ; loc_181A0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_181B2(PC, D0), D1
		jsr     loc_181B2(PC, D1)
		bra.w     J_MarkObjGone_06        ; loc_18D78
loc_181B2:
		dc.w    loc_181B8-loc_181B2
		dc.w    loc_1822E-loc_181B2
		dc.w    loc_18322-loc_181B2
loc_181B8:
		addq.b  #$02, $0024(A0)
		move.l  #Spring_Push_Boost_Mappings, $0004(A0) ; loc_185C2
		move.w  #$43C5, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$000E, D0
		move.w  loc_181EE(PC, D0), D0
		jmp     loc_181EE(PC, D0)
loc_181EE:
		dc.w    loc_18216-loc_181EE
		dc.w    loc_181F2-loc_181EE
loc_181F2:
		move.b  #$04, $0024(A0)
		move.b  #$01, $001C(A0)
		move.b  #$0A, $001A(A0)
		move.w  #$43C5, $0002(A0)
		move.b  #$14, $0019(A0)
		move.w  $0008(A0), $0034(A0)
loc_18216:
		move.b  $0028(A0), D0
		andi.w  #$0002, D0
		move.w  loc_1822A(PC, D0), $0030(A0)
		bsr.w     J_Adjust2PArtPointer_08 ; loc_18D7E
		rts
loc_1822A:
		dc.w    $F000, $F600
loc_1822E:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_18244
		tst.b   $0032(A0)
		beq.s   loc_18250
		subq.b  #$01, $0032(A0)
		bra.s   loc_18250
loc_18244:
		cmpi.b  #$09, $0032(A0)
		beq.s   loc_1826E
		addq.b  #$01, $0032(A0)
loc_18250:
		moveq   #$00, D3
		move.b  $0032(A0), D3
		move.b  D3, $001A(A0)
		add.w   D3, D3
		move.w  #$001B, D1
		move.w  #$0014, D2
		move.w  $0008(A0), D4
		bsr.w     loc_18D90
		rts
loc_1826E:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		bsr.s   loc_1827C
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
loc_1827C:
		bclr    D6, $0022(A0)
		beq.w    loc_18320
		move.w  $0030(A0), $0012(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		bpl.s   loc_182AE
		move.w  #$0000, $0010(A1)
loc_182AE:
		btst    #$00, D0
		beq.s   loc_182EE
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$00, $002C(A1)
		move.b  #$04, $002D(A1)
		btst    #$01, D0
		bne.s   loc_182DE
		move.b  #$01, $002C(A1)
loc_182DE:
		btst    #$00, $0022(A1)
		beq.s   loc_182EE
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_182EE:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_18304
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_18304:
		cmpi.b  #$08, D0
		bne.s   loc_18316
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_18316:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_18320:
		rts
loc_18322:
		move.b  #$00, $0036(A0)
		move.w  #$001F, D1
		move.w  #$000C, D2
		move.w  #$000D, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_18D8A
		cmpi.w  #$0001, D4
		bne.s   loc_18368
		move.b  $0022(A0), D1
		move.w  $0008(A0), D2
		sub.w   $0008(A1), D2
		bcs.s   loc_1835E
		eori.b  #$01, D1
loc_1835E:
		andi.b  #$01, D1
		bne.s   loc_18368
		bsr.w     loc_183E4
loc_18368:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_18D8A
		cmpi.w  #$0001, D4
		bne.s   loc_18396
		move.b  $0022(A0), D1
		move.w  $0008(A0), D2
		sub.w   $0008(A1), D2
		bcs.s   loc_1838E
		eori.b  #$01, D1
loc_1838E:
		andi.b  #$01, D1
		bne.s   loc_18396
		bsr.s   loc_183E4
loc_18396:
		tst.b   $0036(A0)
		bne.s   loc_183E2
		move.w  $0034(A0), D0
		cmp.w   $0008(A0), D0
		beq.s   loc_183E2
		bcc.s   loc_183C4
		subq.b  #$04, $001A(A0)
		subq.w  #$04, $0008(A0)
		cmp.w   $0008(A0), D0
		bcs.s   loc_183DE
		move.b  #$0A, $001A(A0)
		move.w  $0034(A0), $0008(A0)
		bra.s   loc_183DE
loc_183C4:
		subq.b  #$04, $001A(A0)
		addq.w  #$04, $0008(A0)
		cmp.w   $0008(A0), D0
		bcc.s   loc_183DE
		move.b  #$0A, $001A(A0)
		move.w  $0034(A0), $0008(A0)
loc_183DE:
		bsr.w     loc_18478
loc_183E2:
		rts
loc_183E4:
		btst    #$00, $0022(A0)
		beq.s   loc_18420
		btst    #$00, $0022(A1)
		bne.w    loc_18476
		tst.w   D0
		bne.w    loc_18406
		tst.w   $0014(A1)
		beq.s   loc_18476
		bpl.s   loc_18470
		bra.s   loc_18476
loc_18406:
		move.w  $0034(A0), D0
		addi.w  #$0012, D0
		cmp.w   $0008(A0), D0
		beq.s   loc_18470
		addq.w  #$01, $0008(A0)
		moveq   #$01, D0
		move.w  #$0040, D1
		bra.s   loc_1844E
loc_18420:
		btst    #$00, $0022(A1)
		beq.s   loc_18476
		tst.w   D0
		bne.w    loc_18436
		tst.w   $0014(A1)
		bmi.s   loc_18470
		bra.s   loc_18476
loc_18436:
		move.w  $0034(A0), D0
		subi.w  #$0012, D0
		cmp.w   $0008(A0), D0
		beq.s   loc_18470
		subq.w  #$01, $0008(A0)
		moveq   #-1, D0
		move.w  #$FFC0, D1
loc_1844E:
		add.w   D0, $0008(A1)
		move.w  D1, $0014(A1)
		move.w  #$0000, $0010(A1)
		move.w  $0034(A0), D0
		sub.w   $0008(A0), D0
		bcc.s   loc_18468
		neg.w   D0
loc_18468:
		addi.w  #$000A, D0
		move.b  D0, $001A(A0)
loc_18470:
		move.b  #$01, $0036(A0)
loc_18476:
		rts
loc_18478:
		move.b  $0022(A0), D0
		andi.b  #$60, D0
		beq.w    loc_18578
		lea     ($FFFFB000).w, A1
		moveq   #$05, D6
		bsr.s   loc_18492
		lea     ($FFFFB040).w, A1
		moveq   #$06, D6
loc_18492:
		bclr    D6, $0022(A0)
		beq.w    loc_18578
		move.w  $0034(A0), D0
		sub.w   $0008(A0), D0
		bcc.s   loc_184A6
		neg.w   D0
loc_184A6:
		addi.w  #$000A, D0
		lsl.w   #$07, D0
		neg.w   D0
		move.w  D0, $0010(A1)
		subq.w  #$04, $0008(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_184D4
		bclr    #$00, $0022(A1)
		addi.w  #$0008, $0008(A1)
		neg.w   $0010(A1)
loc_184D4:
		move.w  #$000F, $002E(A1)
		move.w  $0010(A1), $0014(A1)
		btst    #$02, $0022(A1)
		bne.s   loc_184EE
		move.b  #$00, $001C(A1)
loc_184EE:
		move.b  $0028(A0), D0
		bpl.s   loc_184FA
		move.w  #$0000, $0012(A1)
loc_184FA:
		btst    #$00, D0
		beq.s   loc_1853A
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0
		bne.s   loc_1852A
		move.b  #$03, $002C(A1)
loc_1852A:
		btst    #$00, $0022(A1)
		beq.s   loc_1853A
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_1853A:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_18550
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_18550:
		cmpi.b  #$08, D0
		bne.s   loc_18562
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_18562:
		bclr    #$05, $0022(A1)
		move.b  #$01, $001D(A1)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_18578:
		rts 
loc_1857A:   ; Unused Obj Conf
		dc.w    loc_1857E-loc_1857A
		dc.w    loc_185A0-loc_1857A
loc_1857E:
		dc.b    $00, $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $08, $07, $06, $05, $04, $03, $02, $01, $00, $00, $00, $00, $00, $00
		dc.b    $00, $FF
loc_185A0:
		dc.b    $00, $0A, $0B, $0C, $0D, $0E, $0F, $10, $11, $12, $13, $13, $13, $13, $13, $13
		dc.b    $13, $13, $12, $11, $10, $0F, $0E, $0D, $0C, $0B, $0A, $0A, $0A, $0A, $0A, $0A
		dc.b    $0A, $FF		
Spring_Push_Boost_Mappings: 
loc_185C2:
		dc.w    loc_185FC-loc_185C2
		dc.w    loc_18626-loc_185C2
		dc.w    loc_18650-loc_185C2
		dc.w    loc_1867A-loc_185C2
		dc.w    loc_186A4-loc_185C2
		dc.w    loc_186CE-loc_185C2
		dc.w    loc_186F8-loc_185C2
		dc.w    loc_18722-loc_185C2
		dc.w    loc_1874C-loc_185C2
		dc.w    loc_18776-loc_185C2
		dc.w    loc_187A0-loc_185C2
		dc.w    loc_187CA-loc_185C2
		dc.w    loc_187F4-loc_185C2
		dc.w    loc_1881E-loc_185C2
		dc.w    loc_18848-loc_185C2
		dc.w    loc_18872-loc_185C2
		dc.w    loc_1889C-loc_185C2
		dc.w    loc_188C6-loc_185C2
		dc.w    loc_188F0-loc_185C2
		dc.w    loc_1891A-loc_185C2
		dc.w    loc_18944-loc_185C2
		dc.w    loc_1896E-loc_185C2
		dc.w    loc_18998-loc_185C2
		dc.w    loc_189C2-loc_185C2
		dc.w    loc_189EC-loc_185C2
		dc.w    loc_18A16-loc_185C2
		dc.w    loc_18A40-loc_185C2
		dc.w    loc_18A6A-loc_185C2
		dc.w    loc_18A94-loc_185C2               
loc_185FC:
		dc.w    $0005
		dc.l    $EC0C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $04081007, $1003FFF4, $FC08300A, $3005FFF4
		dc.l    $F404100D, $1006FFF8
loc_18626:
		dc.w    $0005
		dc.l    $EE0C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $04081007, $1003FFF4, $FC08300A, $3005FFF4
		dc.l    $F604100D, $1006FFF8
loc_18650:
		dc.w    $0005
		dc.l    $F00C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $04081007, $1003FFF4, $FE08300A, $3005FFF4
		dc.l    $F804100D, $1006FFF8
loc_1867A:
		dc.w    $0005
		dc.l    $F20C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $06081007, $1003FFF4, $0008300A, $3005FFF4
		dc.l    $FA04100D, $1006FFF8
loc_186A4:
		dc.w    $0005
		dc.l    $F40C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $06081007, $1003FFF4, $0008300A, $3005FFF4
		dc.l    $FC04100D, $1006FFF8
loc_186CE:
		dc.w    $0005
		dc.l    $F60C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $06081007, $1003FFF4, $0208300A, $3005FFF4
		dc.l    $FE04100D, $1006FFF8
loc_186F8:
		dc.w    $0005
		dc.l    $F80C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $08081007, $1003FFF4, $0408300A, $3005FFF4
		dc.l    $0004100D, $1006FFF8
loc_18722:
		dc.w    $0005
		dc.l    $FA0C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $08081007, $1003FFF4, $0408300A, $3005FFF4
		dc.l    $0204100D, $1006FFF8
loc_1874C:
		dc.w    $0005
		dc.l    $FC0C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $08081007, $1003FFF4, $0608300A, $3005FFF4
		dc.l    $0404100D, $1006FFF8
loc_18776:
		dc.w    $0005
		dc.l    $FE0C3000, $3000FFF0, $0C083004, $3002FFF4
		dc.l    $0A081007, $1003FFF4, $0808300A, $3005FFF4
		dc.l    $0604100D, $1006FFF8
loc_187A0:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFEC
		dc.l    $F4020016, $000BFFF4, $F4022019, $200CFFFC
		dc.l    $F801001C, $000E0004
loc_187CA:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFED
		dc.l    $F4020016, $000BFFF5, $F4022019, $200CFFFD
		dc.l    $F801001C, $000E0004
loc_187F4:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFEE
		dc.l    $F4020016, $000BFFF6, $F4022019, $200CFFFE
		dc.l    $F801001C, $000E0004
loc_1881E:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFEF
		dc.l    $F4020016, $000BFFF7, $F4022019, $200CFFFF
		dc.l    $F801001C, $000E0004
loc_18848:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF0
		dc.l    $F4020016, $000BFFF8, $F4022019, $200CFFFE
		dc.l    $F801001C, $000E0004
loc_18872:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF1
		dc.l    $F4020016, $000BFFF9, $F4022019, $200CFFFF
		dc.l    $F801001C, $000E0004
loc_1889C:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF2
		dc.l    $F4020016, $000BFFF8, $F4022019, $200CFFFE
		dc.l    $F801001C, $000E0004
loc_188C6:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF3
		dc.l    $F4020016, $000BFFF9, $F4022019, $200CFFFF
		dc.l    $F801001C, $000E0004
loc_188F0:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF4
		dc.l    $F4020016, $000BFFFA, $F4022019, $200C0000
		dc.l    $F801001C, $000E0004
loc_1891A:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF5
		dc.l    $F4020016, $000BFFFB, $F4022019, $200C0001
		dc.l    $F801001C, $000E0004
loc_18944:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF6
		dc.l    $F4020016, $000BFFFC, $F4022019, $200C0000
		dc.l    $F801001C, $000E0004
loc_1896E:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF7
		dc.l    $F4020016, $000BFFFD, $F4022019, $200C0001
		dc.l    $F801001C, $000E0004
loc_18998:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF8
		dc.l    $F4020016, $000BFFFC, $F4022019, $200C0000
		dc.l    $F801001C, $000E0004
loc_189C2:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFF9
		dc.l    $F4020016, $000BFFFD, $F4022019, $200C0001
		dc.l    $F801001C, $000E0004
loc_189EC:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFFA
		dc.l    $F4020016, $000BFFFE, $F4022019, $200C0002
		dc.l    $F801001C, $000E0004
loc_18A16:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFFB
		dc.l    $F4020016, $000BFFFF, $F4022019, $200C0003
		dc.l    $F801001C, $000E0004
loc_18A40:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFFC
		dc.l    $F4020016, $000B0000, $F4022019, $200C0002
		dc.l    $F801001C, $000E0004
loc_18A6A:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFFD
		dc.l    $F4020016, $000B0001, $F4022019, $200C0003
		dc.l    $F801001C, $000E0004
loc_18A94:
		dc.w    $0005
		dc.l    $F003200F, $2007000C, $F4022013, $2009FFFE
		dc.l    $F4020016, $000B0000, $F4022019, $200C0002
		dc.l    $F801001C, $000E0004		
;=============================================================================== 
; Object 0x45 - Oil Ocean - Spring Push to Boost 
; [ End ]		         
;===============================================================================  

;=============================================================================== 
; Object 0x46 - Oil Ocean - Spring With Ball - Sonic call stay on ball 
; [ Begin ]		         
;===============================================================================  
Obj_0x46_Spring_Ball: ; loc_18ABE:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_18ACC(PC, D0), D1
		jmp     loc_18ACC(PC, D1)
loc_18ACC:
		dc.w    loc_18AD4-loc_18ACC
		dc.w    loc_18B92-loc_18ACC
		dc.w    loc_18BE0-loc_18ACC
		dc.w    loc_18C84-loc_18ACC
loc_18AD4:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_18AF0
		bclr    #$07, $02(A2, D0)
		bset    #$00, $02(A2, D0)
		bne.w    J_DeleteObject_11       ; loc_18D6C
loc_18AF0:
		addq.b  #$02, $0024(A0)
		move.b  #$0F, $0016(A0)
		move.b  #$0F, $0017(A0)
		move.l  #Obj46_MapUnc_18CFA, $0004(A0) ; loc_18CFA
		move.w  #$6354, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_08 ; loc_18D7E
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0036(A0)
		move.b  #$10, $0019(A0)
		move.b  #$00, $001A(A0)
		move.w  #$0000, $0014(A0)
		move.b  #$01, $001F(A0)
		bsr.w     J_SingleObjLoad_01   ; loc_18D72
		bne.s   loc_18B8E
		_move.b  #$46, 0(A1)
		addq.b  #$06, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$0012, $000C(A1)
		move.l  #Spring_Push_Boost_Mappings, $0004(A1) ; loc_185C2
		move.w  #$43C5, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$04, $0018(A1)
		move.b  #$09, $001A(A1)
		move.l  A0, $003C(A1)
loc_18B8E:
		move.l  A1, $003C(A0)
loc_18B92:
		btst    #$06, (Ctrl_2_Press).w
		bne.s   loc_18BAC
		lea     (ButtonVine_Trigger).w, A2
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$04, D0
		tst.b   $00(A2, D0)
		beq.s   loc_18BD8
loc_18BAC:
		addq.b  #$02, $0024(A0)
		bset    #$01, $0022(A0)
		move.w  #$FD00, $0012(A0)
		move.w  #$0100, $0014(A0)
		move.l  $003C(A0), A1
		move.b  #$01, $0030(A1)
		btst    #$00, $0022(A0)
		beq.s   loc_18BD8
		neg.w   $0014(A0)
loc_18BD8:
		bsr.w     loc_18C98
		bra.w     J_MarkObjGone_06        ; loc_18D78
loc_18BE0:
		move.w  $0008(A0), -(A7)
		bsr.w     J_SpeedToPos_05         ; loc_18D96
		btst    #$01, $0022(A0)
		beq.s   loc_18C34
		addi.w  #$0018, $0012(A0)
		bmi.s   loc_18C32
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcs.s   loc_18C6C
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.w    loc_18C32
		add.w   D1, $000C(A0)
		clr.w   $0012(A0)
		bclr    #$01, $0022(A0)
		move.w  #$0100, $0010(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_18C32
		neg.w   $0010(A0)
loc_18C32:
		bra.s   loc_18C4C
loc_18C34:
		jsr     ObjHitFloor             ; (loc_13898)
		cmpi.w  #$0008, D1
		blt.s   loc_18C48
		bset    #$01, $0022(A0)
		bra.s   loc_18C4C
loc_18C48:
		add.w   D1, $000C(A0)
loc_18C4C:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  (A7)+, D4
		bsr.w     J_SolidObject_02        ; loc_18D84
		bsr.w     loc_18C98
		bra.w     J_MarkObjGone_06        ; loc_18D78
loc_18C6C:
		move.w  (A7)+, D4
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_18C80
		bclr    #$07, $02(A2, D0)
loc_18C80:
		bra.w     J_DeleteObject_11       ; loc_18D6C
loc_18C84:
		tst.b   $0030(A0)
		beq.s   loc_18C94
		subq.b  #$01, $001A(A0)
		bne.s   loc_18C94
		clr.b   $0030(A0)
loc_18C94:
		bra.w     J_MarkObjGone_06        ; loc_18D78
loc_18C98:
		tst.b   $001A(A0)
		beq.s   loc_18CA6
		move.b  #$00, $001A(A0)
		rts
loc_18CA6:
		move.b  $0014(A0), D0
		beq.s   loc_18CD2
		bmi.s   loc_18CDA
		subq.b  #$01, $001E(A0)
		bpl.s   loc_18CD2
		neg.b   D0
		addq.b  #$08, D0
		bcs.s   loc_18CBC
		moveq   #$00, D0
loc_18CBC:
		move.b  D0, $001E(A0)
		move.b  $001F(A0), D0
		addq.b  #$01, D0
		cmpi.b  #$04, D0
		bne.s   loc_18CCE
		moveq   #$01, D0
loc_18CCE:
		move.b  D0, $001F(A0)
loc_18CD2:
		move.b  $001F(A0), $001A(A0)
		rts
loc_18CDA:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_18CD2
		addq.b  #$08, D0
		bcs.s   loc_18CE6
		moveq   #$00, D0
loc_18CE6:
		move.b  D0, $001E(A0)
		move.b  $001F(A0), D0
		subq.b  #$01, D0
		bne.s   loc_18CF4
		moveq   #$03, D0
loc_18CF4:
		move.b  D0, $001F(A0)
		bra.s   loc_18CD2 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj46_MapUnc_18CFA:	BINCLUDE	"mappings/sprite/obj46.bin"
; ===========================================================================
		nop
J_DeleteObject_11: ; loc_18D6C:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_01: ; loc_18D72:
		jmp     SingleObjLoad        ; (loc_E772)
J_MarkObjGone_06: ; loc_18D78:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_08: ; loc_18D7E:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_02: ; loc_18D84:
		jmp     SolidObject             ; (loc_F4A0)
loc_18D8A:
		jmp     (loc_F510)
loc_18D90:
		jmp     (loc_F5F0)
J_SpeedToPos_05: ; loc_18D96:
		jmp     SpeedToPos              ; (loc_D27A)
;=============================================================================== 
; Object 0x47 - Switch - Oil Ocean / Dust Hill
; [ Begin ]		         
;===============================================================================		  
Obj_0x47_Switch: ; loc_18D9C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_18DAA(PC, D0), D1
		jmp     loc_18DAA(PC, D1)  
loc_18DAA:		  
		dc.w    loc_18DAE-loc_18DAA
		dc.w    loc_18DDA-loc_18DAA
loc_18DAE:
		addq.b  #$02, $0024(A0)
		move.l  #Obj47_MapUnc_18E3E, $0004(A0) ; loc_18E3E
		move.w  #$0424, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_09 ; loc_18E6A
		move.b  #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		addq.w  #$04, $000C(A0)
loc_18DDA:
		tst.b   $0001(A0)
		bpl.s   loc_18E3A
		move.w  #$001B, D1
		move.w  #$0004, D2
		move.w  #$0005, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_03        ; loc_18E70
		move.b  #$00, $001A(A0)
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		lea     (ButtonVine_Trigger).w, A3
		lea     $00(A3, D0), A3
		moveq   #$00, D3
		btst    #$06, $0028(A0)
		beq.s   loc_18E16
		moveq   #$07, D3
loc_18E16:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_18E24
		bclr    D3, (A3)
		bra.s   loc_18E3A
loc_18E24:
		tst.b   (A3)
		bne.s   loc_18E32
		move.w  #$00CD, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_18E32:
		bset    D3, (A3)
		move.b  #$01, $001A(A0)
loc_18E3A:
		bra.w     J_MarkObjGone_07        ; loc_18E64 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj47_MapUnc_18E3E:	BINCLUDE	"mappings/sprite/obj47.bin"
; ===========================================================================
		nop

J_MarkObjGone_07: ; loc_18E64:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_09 ; loc_18E6A:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_03: ; loc_18E70:
		jmp     SolidObject             ; (loc_F4A0)
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x3D - Break to Boost - Oil Ocean
; [ Begin ]		         
;===============================================================================  
Obj_0x3D_Break_Boost: ; loc_18E78:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_18E86(PC, D0), D1
		jmp     loc_18E86(PC, D1)
loc_18E86:
		dc.w    loc_18E8E-loc_18E86
		dc.w    loc_18EB6-loc_18E86
		dc.w    loc_18FCC-loc_18E86
		dc.w    loc_18FE2-loc_18E86
loc_18E8E:
		addq.b  #$02, $0024(A0)
		move.l  #Break_Boost_Mappings, $0004(A0) ; loc_1916E
		move.w  #$6332, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0A ; loc_19236
		move.b  #$04, $0001(A0)
		move.b  #$18, $0019(A0)
		move.b  #$04, $0018(A0)
loc_18EB6:
		move.b  ($FFFFB01C).w, $0032(A0)
		move.b  ($FFFFB05C).w, $0033(A0)
		move.w  ($FFFFB012).w, $0034(A0)
		move.w  ($FFFFB052).w, $0036(A0)
		move.w  #$001B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_04        ; loc_19242
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.s   loc_18EF0
loc_18EEC:		
		bra.w     J_MarkObjGone_08        ; loc_19224
loc_18EF0:
		cmpi.b  #$18, D0
		bne.s   loc_18F26
		cmpi.b  #$02, $0032(A0)
		beq.s   loc_18F06
		cmpi.b  #$02, $0033(A0)
		bne.s   loc_18EEC
loc_18F06:
		lea     ($FFFFB000).w, A1
		move.b  $0032(A0), D0
		move.w  $0034(A0), D1
		bsr.s   loc_18F42
		lea     ($FFFFB040).w, A1
		move.b  $0033(A0), D0
		move.w  $0036(A0), D1
		bsr.s   loc_18F42
		bra.w     loc_18F94
loc_18F26:
		move.b  D0, D1
		andi.b  #$08, D1
		beq.s   loc_18F78
		cmpi.b  #$02, $0032(A0)
		bne.s   loc_18EEC
		lea     ($FFFFB000).w, A1
		move.w  $0034(A0), D1
		bsr.s   loc_18F48
		bra.s   loc_18F94
loc_18F42:
		cmpi.b  #$02, D0
		bne.s   loc_18F64
loc_18F48:
		bset    #$02, $0022(A1)
		move.b  #$0E, $0016(A1)
		move.b  #$07, $0017(A1)
		move.b  #$02, $001C(A1)
		move.w  D1, $0012(A1)
loc_18F64:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
		rts
loc_18F78:
		andi.b  #$10, D0
		beq.w    loc_18EEC
		cmpi.b  #$02, $0033(A0)
		bne.w    loc_18EEC
		lea     ($FFFFB040).w, A1
		move.w  $0036(A0), D1
		bsr.s   loc_18F48
loc_18F94:
		andi.b  #$E7, $0022(A0)
		bsr.w     J_SingleObjLoad2_02  ; loc_1922A
		bne.s   loc_18FB8
		moveq   #$00, D0
		move.w  #$0009, D1
loc_18FA6:		
		move.l  $00(A0, D0), $00(A1, D0)
		addq.w  #$04, D0
		dbf    D1, loc_18FA6
		move.b  #$06, $0024(A1)
loc_18FB8:
		lea     (loc_1912E).l, A4
		addq.b  #$01, $001A(A0)
		moveq   #$0F, D1
		move.w  #$0018, D2
		bsr.w     loc_1923C
loc_18FCC:
		bsr.w     J_SpeedToPos_06         ; loc_19248
		addi.w  #$0018, $0012(A0)
		tst.b   $0001(A0)
		bpl.w    J_DeleteObject_12       ; loc_1921E
		bra.w     J_DisplaySprite_03      ; loc_19218
loc_18FE2:
		lea     ($FFFFB000).w, A1
		lea     $002C(A0), A4
		bsr.s   loc_19004
		lea     ($FFFFB040).w, A1
		lea     $0036(A0), A4
		bsr.s   loc_19004
		move.b  $002C(A0), D0
		add.b   $0036(A0), D0
		beq.w    loc_19230
		rts
loc_19004:
		moveq   #$00, D0
		move.b  (A4), D0
		move.w  loc_19010(PC, D0), D0
		jmp     loc_19010(PC, D0)   
loc_19010:
		dc.w    loc_19014-loc_19010
		dc.w    loc_19092-loc_19010
loc_19014:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		addi.w  #$0010, D0
		cmpi.w  #$0020, D0
		bcc.w    loc_19090
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		cmpi.w  #$0010, D1
		bcc.w    loc_19090
		addq.b  #$02, (A4)
		move.w  $000C(A0), $000C(A1)
		move.b  #$81, $002A(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0800, $0014(A1)
		move.w  #$0800, $0010(A1)
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A0)
		bclr    #$05, $0022(A1)
		bset    #$01, $0022(A1)
		bset    #$03, $0022(A1)
		move.w  A0, D0
		subi.w  #$B000, D0
		lsr.w   #$06, D0
		andi.w  #$007F, D0
		move.b  D0, $003D(A1)
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_19090:
		rts
loc_19092:
		bra.s   loc_190D8
		subq.b  #$01, $0002(A4)
		bpl.s   loc_190D8
		move.l  $0006(A4), A2
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		move.w  D5, $000C(A1)
		tst.b   $0001(A4)
		bpl.s   loc_190BA
		subq.w  #$08, A2
loc_190BA:
		move.l  A2, $0006(A4)
		subq.w  #$04, $0004(A4)
		beq.s   loc_190FE
		move.w  (A2)+, D4
		add.w   $0008(A0), D4
		move.w  (A2)+, D5
		add.w   $000C(A0), D5
		move.w  #$0800, D2
		bra.w     loc_16A80
loc_190D8:
		move.l  $0008(A1), D2
		move.l  $000C(A1), D3
		move.w  $0010(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A1)
		move.l  D3, $000C(A1)
		rts
loc_190FE:
		cmpi.b  #$04, $0001(A4)
		bcc.s   loc_19116
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.b   $0001(A4), D0
		move.b  #$04, $0001(A4)
loc_19116:
		andi.w  #$07FF, $000C(A1)
		move.b  #$06, (A4)
		clr.b   $002A(A1)
		move.w  #$00BC, D0
		jmp     (PlaySound).l             ; loc_14C6     
loc_1912E:
		dc.w    $FC00, $FC00, $FE00, $FC00, $0200, $FC00, $0400, $FC00
		dc.w    $FC40, $FE00, $FE40, $FE00, $01C0, $FE00, $03C0, $FE00
		dc.w    $FC80, $0200, $FE80, $0200, $0180, $0200, $0380, $0200
		dc.w    $FCC0, $0400, $FEC0, $0400, $0140, $0400, $0340, $0400 
Break_Boost_Mappings: ; loc_1916E:
		dc.w    loc_19172-Break_Boost_Mappings
		dc.w    loc_19194-Break_Boost_Mappings
loc_19172:
		dc.w    $0004
		dc.l    $F0030000, $0000FFF0, $F0030000, $0000FFF8
		dc.l    $F0030000, $00000000, $F0030000, $00000008
loc_19194:
		dc.w    $0010
		dc.l    $F0000000, $0000FFF0, $F0000000, $0000FFF8
		dc.l    $F0000000, $00000000, $F0000000, $00000008
		dc.l    $F8000000, $0000FFF0, $F8000000, $0000FFF8
		dc.l    $F8000000, $00000000, $F8000000, $00000008
		dc.l    $00000000, $0000FFF0, $00000000, $0000FFF8
		dc.l    $00000000, $00000000, $00000000, $00000008
		dc.l    $08000000, $0000FFF0, $08000000, $0000FFF8
		dc.l    $08000000, $00000000, $08000000, $00000008		
;=============================================================================== 
; Object 0x3D - Break to Boost - Oil Ocean 
; [ End ]		         
;=============================================================================== 
		nop		             ; Filler
J_DisplaySprite_03: ; loc_19218:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_12: ; loc_1921E:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_08: ; loc_19224:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_02: ; loc_1922A:
		jmp     SingleObjLoad2      ; (loc_E788)
loc_19230:
		jmp     (loc_D30C)
J_Adjust2PArtPointer_0A: ; loc_19236:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1923C:
		jmp     (BreakObjectToPieces)
J_SolidObject_04: ; loc_19242:
		jmp     SolidObject             ; (loc_F4A0)
J_SpeedToPos_06: ; loc_19248:
		jmp     SpeedToPos              ; (loc_D27A)
		dc.w    $0000		   ; Filler		    
		
;=============================================================================== 
; Object 0x48 - Cannon - Oil Ocean 
; [ Begin ]		         
;===============================================================================		  
Obj_0x48_Cannon: ; loc_19250:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1926E(PC, D0), D1
		jsr     loc_1926E(PC, D1)
		move.b  $002C(A0), D0
		add.b   $0036(A0), D0
		beq.w    J_MarkObjGone_09        ; loc_19652
		bra.w     J_DisplaySprite_04      ; loc_1964C
loc_1926E:
		dc.w    loc_19282-loc_1926E
		dc.w    loc_192D2-loc_1926E
loc_19272:
		dc.b    $04
loc_19273:
		dc.b    $00, $06, $07, $07, $00, $05, $07, $05, $00, $04, $07, $06, $00, $07, $07
loc_19282:
		addq.b  #$02, $0024(A0)
		move.l  #Cannon_Mappings, $0004(A0) ; loc_194CA
		move.w  #$6368, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0B ; loc_19658
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		btst    #$00, $0022(A0)
		beq.s   loc_192AA
		addq.w  #$04, D0
loc_192AA:
		add.w   D0, D0
		move.b  loc_19272(PC, D0), $0001(A0)
		move.b  loc_19273(PC, D0), $003F(A0)
		beq.s   loc_192C0
		move.b  #$01, $003E(A0)
loc_192C0:
		move.b  $003F(A0), $001A(A0)
		move.b  #$28, $0019(A0)
		move.b  #$01, $0018(A0)
loc_192D2:
		lea     ($FFFFB000).w, A1
		lea     $002C(A0), A4
		moveq   #$2C, D2
		bsr.s   loc_192E8
		lea     ($FFFFB040).w, A1
		lea     $0036(A0), A4
		moveq   #$36, D2
loc_192E8:
		moveq   #$00, D0
		move.b  (A4), D0
		move.w  loc_192F4(PC, D0), D0
		jmp     loc_192F4(PC, D0)
loc_192F4:
		dc.w    loc_192FC-loc_192F4
		dc.w    loc_193B0-loc_192F4
		dc.w    loc_1945E-loc_192F4
		dc.w    loc_194BE-loc_192F4
loc_192FC:
		tst.w   (Debug_placement_mode).w
		bne.w    loc_193AE
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		addi.w  #$0010, D0
		cmpi.w  #$0020, D0
		bcc.w    loc_193AE
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		addi.w  #$0010, D1
		cmpi.w  #$0020, D1
		bcc.w    loc_193AE
		btst    #$03, $0022(A1)
		beq.s   loc_1934A
		moveq   #$00, D0
		move.b  $003D(A1), D0
		lsl.w   #$06, D0
		addi.l  #$FFFFB000, D0
		move.l  D0, A3
		move.b  #$00, $00(A3, D2)
loc_1934A:
		move.w  A0, D0
		subi.w  #$B000, D0
		lsr.w   #$06, D0
		andi.w  #$007F, D0
		move.b  D0, $003D(A1)
		addq.b  #$02, (A4)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  #$81, $002A(A1)
		move.b  #$02, $001C(A1)
		move.w  #$1000, $0014(A1)
		move.w  #$0000, $0010(A1)
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A0)
		bclr    #$05, $0022(A1)
		bset    #$01, $0022(A1)
		bset    #$03, $0022(A1)
		move.b  $003F(A0), $001A(A0)
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_193AE:
		rts
loc_193B0:
		tst.b   $003E(A0)
		bne.s   loc_193D8
		cmpi.b  #$07, $001A(A0)
		beq.s   loc_193F2
		subq.w  #$01, $001E(A0)
		bpl.s   loc_193D6
		move.w  #$0007, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$07, $001A(A0)
		beq.s   loc_193F2
loc_193D6:
		rts
loc_193D8:
		tst.b   $001A(A0)
		beq.s   loc_193F2
		subq.w  #$01, $001E(A0)
		bpl.s   loc_193D6
		move.w  #$0007, $001E(A0)
		subq.b  #$01, $001A(A0)
		beq.s   loc_193F2
		rts
loc_193F2:
		addq.b  #$02, (A4)
		move.b  $0028(A0), D0
		addq.b  #$01, D0
		btst    #$00, $0022(A0)
		beq.s   loc_19404
		subq.b  #$02, D0
loc_19404:
		andi.w  #$0003, D0
		add.w   D0, D0
		add.w   D0, D0
		move.w  loc_1944E(PC, D0), $0010(A1)
		move.w  loc_19450(PC, D0), $0012(A1)
		move.w  #$0003, $001E(A0)
		tst.b   $0028(A0)
		bpl.s   loc_1944C
		move.b  #$00, $002A(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$00, $003C(A1)
		move.b  #$02, $0024(A1)
		move.b  #$06, (A4)
		move.w  #$0007, $003C(A0)
loc_1944C:
		rts     
loc_1944E:
		dc.w    $0000
loc_19450:
		dc.w    $F000, $1000, $0000, $0000, $1000, $F000, $0000
loc_1945E:
		cmpi.b  #$02, $002C(A0)
		beq.s   loc_19498
		cmpi.b  #$02, $0036(A0)
		beq.s   loc_19498
		subq.w  #$01, $001E(A0)
		bpl.s   loc_19498
		move.w  #$0001, $001E(A0)
		tst.b   $003E(A0)
		beq.s   loc_1948E
		cmpi.b  #$07, $001A(A0)
		beq.s   loc_19498
		addq.b  #$01, $001A(A0)
		bra.s   loc_19498
loc_1948E:
		tst.b   $001A(A0)
		beq.s   loc_19498
		subq.b  #$01, $001A(A0)
loc_19498:
		move.l  $0008(A1), D2
		move.l  $000C(A1), D3
		move.w  $0010(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A1)
		move.l  D3, $000C(A1)
		rts
loc_194BE:
		subq.w  #$01, $003C(A0)
		bpl.s   loc_194C8
		move.b  #$00, (A4)
loc_194C8:
		rts		
Cannon_Mappings:
loc_194CA:
		dc.w    loc_194DA-loc_194CA
		dc.w    loc_1951C-loc_194CA
		dc.w    loc_1954E-loc_194CA
		dc.w    loc_19570-loc_194CA
		dc.w    loc_19592-loc_194CA
		dc.w    loc_195B4-loc_194CA
		dc.w    loc_195D6-loc_194CA
		dc.w    loc_19608-loc_194CA
loc_194DA:
		dc.w    $0008
		dc.l    $D8040000, $0000FFF0, $D8040800, $08000000
		dc.l    $E0040002, $0001FFF0, $E0040802, $08010000
		dc.l    $E80A0011, $0008FFE8, $E80A0811, $08080000
		dc.l    $000A1008, $1004FFE8, $000A1808, $18040000
loc_1951C:
		dc.w    $0006
		dc.l    $E0040000, $0000FFF0, $E0040800, $08000000
		dc.l    $E80A0011, $0008FFE8, $E80A0811, $08080000
		dc.l    $000A1008, $1004FFE8, $000A1808, $18040000
loc_1954E:
		dc.w    $0004
		dc.l    $E80A0011, $0008FFE8, $E80A0811, $08080000
		dc.l    $000A1008, $1004FFE8, $000A1808, $18040000
loc_19570:
		dc.w    $0004
		dc.l    $E80A001A, $000DFFE8, $E80A1823, $18110000
		dc.l    $000A0023, $0011FFE8, $000A181A, $180D0000
loc_19592:
		dc.w    $0004
		dc.l    $E80A1023, $1011FFE8, $E80A081A, $080D0000
		dc.l    $000A101A, $100DFFE8, $000A0823, $08110000
loc_195B4:
		dc.w    $0004
		dc.l    $E80A0008, $0004FFE8, $E80A102C, $10160000
		dc.l    $000A1008, $1004FFE8, $000A002C, $00160000
loc_195D6:
		dc.w    $0006
		dc.l    $E80A0008, $0004FFE8, $E80A102C, $10160000
		dc.l    $000A1008, $1004FFE8, $000A002C, $00160000
		dc.l    $F0010006, $00030018, $00011006, $10030018
loc_19608:
		dc.w    $0008
		dc.l    $E80A0008, $0004FFE8, $E80A102C, $10160000
		dc.l    $000A1008, $1004FFE8, $000A002C, $00160000
		dc.l    $F0010004, $00020018, $00011004, $10020018
		dc.l    $F0010006, $00030020, $00011006, $10030020		
;=============================================================================== 
; Object 0x48 - Cannon - Oil Ocean 
; [ End ]		         
;===============================================================================   
		nop		             ; Filler
J_DisplaySprite_04: ; loc_1964C:
		jmp     DisplaySprite           ; (loc_D3C2)
J_MarkObjGone_09: ; loc_19652:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_0B: ; loc_19658:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x22 - Arrow Shooter - Neo Green Hill 
; [ Begin ]		         
;===============================================================================  
Obj_0x22_Arrow_Shooter: ; loc_19660:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1966E(PC, D0), D1
		jmp     loc_1966E(PC, D1)
loc_1966E:
		dc.w    loc_19678-loc_1966E
		dc.w    loc_196AC-loc_1966E
		dc.w    loc_196F6-loc_1966E
		dc.w    loc_1973C-loc_1966E
		dc.w    loc_19780-loc_1966E
loc_19678:
		addq.b  #$02, $0024(A0)
		move.l  #Obj22_MapUnc_197C6, $0004(A0) ; loc_197C6
		move.w  #$0417, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0C ; loc_19844
		ori.b   #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $001A(A0)
		andi.b  #$0F, $0028(A0)
loc_196AC:
		cmpi.b  #$02, $001C(A0)
		beq.s   loc_196D2
		moveq   #$00, D2
		lea     ($FFFFB000).w, A1
		bsr.s   loc_196E0
		lea     ($FFFFB040).w, A1
		bsr.s   loc_196E0
		tst.b   D2
		bne.s   loc_196CE
		tst.b   $001C(A0)
		beq.s   loc_196CE
		moveq   #$02, D2
loc_196CE:
		move.b  D2, $001C(A0)
loc_196D2:
		lea     (loc_197B0).l, A1
		bsr.w     J_AnimateSprite_01      ; loc_1983E
		bra.w     J_MarkObjGone_0A        ; loc_19838
loc_196E0:
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_196EC
		neg.w   D0
loc_196EC:
		cmpi.w  #$0040, D0
		bcc.s   loc_196F4
		moveq   #$01, D2
loc_196F4:
		rts
loc_196F6:
		bsr.w     J_SingleObjLoad_02   ; loc_19832
		bne.s   loc_1972A
		_move.b  0(A0), 0(A1)
		addq.b  #$06, $0024(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0022(A0), $0022(A1)
loc_1972A:
		subq.b  #$02, $0024(A0)
		lea     (loc_197B0).l, A1
		bsr.w     J_AnimateSprite_01      ; loc_1983E
		bra.w     J_MarkObjGone_0A        ; loc_19838
loc_1973C:
		addq.b  #$02, $0024(A0)
		move.b  #$08, $0016(A0)
		move.b  #$10, $0017(A0)
		move.b  #$04, $0018(A0)
		move.b  #$9B, $0020(A0)
		move.b  #$08, $0019(A0)
		move.b  #$00, $001A(A0)
		move.w  #$0400, $0010(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_19776
		neg.w   $0010(A0)
loc_19776:
		move.w  #$00AE, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_19780:
		bsr.w     J_SpeedToPos_07         ; loc_1984A
		btst    #$00, $0022(A0)
		bne.s   loc_197A0
		moveq   #-8, D3
		bsr.w     ObjHitWallLeft          ; loc_13B24
		tst.w   D1
		bmi.w    loc_1979C
		bra.w     J_MarkObjGone_0A        ; loc_19838
loc_1979C:
		bra.w     J_DeleteObject_13       ; loc_1982C
loc_197A0:
		moveq   #$08, D3
		bsr.w     ObjHitWallRight         ; loc_1399E
		tst.w   D1
		bmi.w    loc_1979C
		bra.w     J_MarkObjGone_0A        ; loc_19838
loc_197B0:		
		dc.w    loc_197B6-loc_197B0
		dc.w    loc_197B9-loc_197B0
		dc.w    loc_197BD-loc_197B0
loc_197B6:
		dc.b    $1F, $01, $FF
loc_197B9:
		dc.b    $03, $01, $02, $FF
loc_197BD:
		dc.b    $07, $03, $04, $FC, $04, $03, $01, $FD, $00
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj22_MapUnc_197C6:	BINCLUDE	"mappings/sprite/obj22.bin"
; ===========================================================================
		nop

J_DeleteObject_13: ; loc_1982C:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_02: ; loc_19832:
		jmp     SingleObjLoad        ; (loc_E772)
J_MarkObjGone_0A: ; loc_19838:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_01: ; loc_1983E:
		jmp     AnimateSprite           ; (loc_D412)
J_Adjust2PArtPointer_0C: ; loc_19844:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SpeedToPos_07: ; loc_1984A:
		jmp     SpeedToPos              ; (loc_D27A)		             
;=============================================================================== 
; Object 0x23 - Neo Green Hill - Pillar That Drops Lower Half 
; [ Begin ]		         
;=============================================================================== 
Obj_0x23_Pillar: ; loc_19850:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1985E(PC, D0), D1
		jmp     loc_1985E(PC, D1)
loc_1985E:
		dc.w    loc_19862-loc_1985E
		dc.w    loc_198E6-loc_1985E
loc_19862:
		addq.b  #$02, $0024(A0)
		move.l  #Pillar_Mappings, $0004(A0) ; loc_199AA
		move.w  #$2000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0D ; loc_1A0B0
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$20, $0016(A0)
		move.b  #$04, $0018(A0)
		bsr.w     J_SingleObjLoad2_03  ; loc_1A0AA
		bne.s   loc_198E6
		_move.b  0(A0), 0(A1)
		addq.b  #$02, $0024(A1)
		addq.b  #$02, $0025(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $0008(A0), $0030(A1)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$0030, $000C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$10, $0016(A1)
		move.b  #$04, $0018(A1)
		move.b  #$01, $001A(A1)
loc_198E6:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_1990C
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  (A7)+, D4
		bsr.w     J_SolidObject_05        ; loc_1A0B6
		bra.w     J_MarkObjGone_0B        ; loc_1A0A4
loc_1990C:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1991A(PC, D0), D1
		jmp     loc_1991A(PC, D1)		 
loc_1991A:
		dc.w    loc_19950-loc_1991A
		dc.w    loc_19922-loc_1991A
		dc.w    loc_19952-loc_1991A
		dc.w    loc_1997C-loc_1991A
loc_19922:
		tst.w   (Debug_placement_mode).w
		bne.s   loc_19950
		lea     ($FFFFB000).w, A1
		bsr.s   loc_19932
		lea     ($FFFFB040).w, A1
loc_19932:
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_1993E
		neg.w   D0
loc_1993E:
		cmpi.w  #$0080, D0
		bcc.s   loc_19950
		move.b  #$04, $0025(A0)
		move.w  #$0008, $0034(A0)
loc_19950:
		rts
loc_19952:
		move.w  $0034(A0), D0
		subq.w  #$01, D0
		bcc.s   loc_19960
		addq.b  #$02, $0025(A0)
		rts
loc_19960:
		move.w  D0, $0034(A0)
		move.b  loc_19974(PC, D0), D0
		ext.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		rts
loc_19974:
		dc.b    $00, $01, $FF, $01, $00, $FF, $00, $01
loc_1997C:
		bsr.w     J_SpeedToPos_08         ; loc_1A0BC
		addi.w  #$0038, $0012(A0)
		bsr.w     ObjHitFloor             ; loc_13898
		tst.w   D1
		bpl.w    loc_199A8
		add.w   D1, $000C(A0)
		clr.w   $0012(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  #$02, $001A(A0)
		clr.b   $0025(A0)
loc_199A8:
		rts
Pillar_Mappings:		
loc_199AA:		
		dc.w    loc_199B0-loc_199AA
		dc.w    loc_199E2-loc_199AA
		dc.w    loc_199FC-loc_199AA
loc_199B0:
		dc.w    $0006
		dc.l    $E005005D, $002EFFE0, $E005085D, $082E0010
		dc.l    $E00D0061, $0030FFF0, $F00D0069, $0034FFF0
		dc.l    $000D0069, $0034FFF0, $100D0071, $0038FFF0
loc_199E2:
		dc.w    $0003
		dc.l    $F00D0069, $0034FFF0, $000D0079, $003CFFF0
		dc.l    $10040081, $0040FFF0
loc_199FC:
		dc.w    $0004
		dc.l    $090D208B, $2045FFF0, $F00D0069, $0034FFF0
		dc.l    $000D0079, $003CFFF0, $10040081, $0040FFF0
;=============================================================================== 
; Object 0x23 - Neo Green Hill - Pillar That Drops Lower Half 
; [ End ]		         
;===============================================================================		 
;=============================================================================== 
; Object 0x2B - Neo Green Hill - Breakable Pillar
; [ Begin ]		         
;===============================================================================		       
Obj_0x2B_Breakable_Pillar: ; loc_19A1E:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_19A2C(PC, D0), D1
		jmp     loc_19A2C(PC, D1)
loc_19A2C:
		dc.w    loc_19A32-loc_19A2C
		dc.w    loc_19A60-loc_19A2C
		dc.w    loc_19B50-loc_19A2C
loc_19A32:
		addq.b  #$02, $0024(A0)
		move.l  #Breakable_Pillar_Mappings, $0004(A0) ; loc_19C30
		move.w  #$2000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0D ; loc_1A0B0
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$18, $0016(A0)
		move.b  #$04, $0018(A0)
loc_19A60:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_19AEA
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  (A7)+, D4
		bsr.w     J_SolidObject_05        ; loc_1A0B6
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		bne.w    loc_19A92
		bra.w     J_MarkObjGone_0B        ; loc_1A0A4
loc_19A92:
		lea     (loc_19B80).l, A4
		lea     (loc_19B72).l, A2
		addq.b  #$07, $001A(A0)
		bsr.w     loc_19BB8
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		bsr.s   loc_19AB8
		lea     ($FFFFB040).w, A1
		addq.b  #$01, D6
		bra.w     loc_19B50
loc_19AB8:
		bclr    D6, $0022(A0)
		beq.s   loc_19AE8
		bset    #$02, $0022(A1)
		move.b  #$0E, $0016(A1)
		move.b  #$07, $0017(A1)
		move.b  #$02, $001C(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$02, $0024(A1)
loc_19AE8:
		rts
loc_19AEA:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_19AF8(PC, D0), D1
		jmp     loc_19AF8(PC, D1)
loc_19AF8:
		dc.w    loc_19AFE-loc_19AF8
		dc.w    loc_19B28-loc_19AF8
		dc.w    loc_19B26-loc_19AF8
loc_19AFE:
		tst.w   (Debug_placement_mode).w
		bne.s   loc_19B26
		lea     ($FFFFB000).w, A1
		bsr.s   loc_19B0E
		lea     ($FFFFB040).w, A1
loc_19B0E:
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_19B1A
		neg.w   D0
loc_19B1A:
		cmpi.w  #$0040, D0
		bcc.s   loc_19B26
		move.b  #$02, $0025(A0)
loc_19B26:
		rts
loc_19B28:
		subq.w  #$01, $0034(A0)
		bcc.s   loc_19B4E
		move.w  #$0003, $0034(A0)
		subq.w  #$04, $000C(A0)
		addq.b  #$04, $0016(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$06, $001A(A0)
		bne.s   loc_19B4E
		move.b  #$04, $0025(A0)
loc_19B4E:
		rts
loc_19B50:
		tst.b   $003F(A0)
		beq.s   loc_19B5C
		subq.b  #$01, $003F(A0)
		bra.s   loc_19B66
loc_19B5C:
		bsr.w     J_SpeedToPos_08         ; loc_1A0BC
		addi.w  #$0018, $0012(A0)
loc_19B66:
		tst.b   $0001(A0)
		bpl.w    J_DeleteObject_14       ; loc_1A09E
		bra.w     J_DisplaySprite_05      ; loc_1A098
loc_19B72:
		dc.b    $00, $00, $00, $00, $04, $04, $08, $08, $0C, $0C, $10, $10, $14, $14		
loc_19B80:
		dc.w    $FE00, $FE00, $0200, $FE00, $FE40, $FE40, $01C0, $FE40
		dc.w    $FE80, $FE80, $0180, $FE80, $FEC0, $FEC0, $0140, $FEC0
		dc.w    $FF00, $FF00, $0100, $FF00, $FF40, $FF40, $00C0, $FF40
		dc.w    $FF80, $FF80, $0080, $FF80  
loc_19BB8:
		moveq   #$00, D0
		move.b  $001A(A0), D0
		add.w   D0, D0
		move.l  $0004(A0), A3
		adda.w  $00(A3, D0), A3
		move.w  (A3)+, D1
		subq.w  #$01, D1
		bset    #$05, $0001(A0)
		_move.b  0(A0), D4
		move.b  $0001(A0), D5
		move.l  A0, A1
		bra.s   loc_19BE6
loc_19BDE:		
		bsr.w     J_SingleObjLoad2_03  ; loc_1A0AA
		bne.s   loc_19C26
		addq.w  #$08, A3
loc_19BE6:
		move.b  #$04, $0024(A1)
		_move.b  D4, 0(A1)
		move.l  A3, $0004(A1)
		move.b  D5, $0001(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  $0018(A0), $0018(A1)
		move.b  $0019(A0), $0019(A1)
		move.w  (A4)+, $0010(A1)
		move.w  (A4)+, $0012(A1)
		move.b  (A2)+, $003F(A1)
		dbf    D1, loc_19BDE
loc_19C26:
		move.w  #$00CB, D0
		jmp     (PlaySound).l             ; loc_14C6  
Breakable_Pillar_Mappings:				             
loc_19C30:
		dc.w    loc_19C4C-loc_19C30
		dc.w    loc_19C7E-loc_19C30
		dc.w    loc_19CB8-loc_19C30
		dc.w    loc_19CF2-loc_19C30
		dc.w    loc_19D34-loc_19C30
		dc.w    loc_19D76-loc_19C30
		dc.w    loc_19DC0-loc_19C30
		dc.w    loc_19E0A-loc_19C30
		dc.w    loc_19E4C-loc_19C30
		dc.w    loc_19E9E-loc_19C30
		dc.w    loc_19EF0-loc_19C30
		dc.w    loc_19F52-loc_19C30
		dc.w    loc_19FB4-loc_19C30
		dc.w    loc_1A026-loc_19C30
loc_19C4C:
		dc.w    $0006
		dc.l    $100D208B, $2045FFF0, $E805005D, $002EFFE0
		dc.l    $E805085D, $082E0010, $E80D0061, $0030FFF0
		dc.l    $F80D0069, $0034FFF0, $080D0083, $0041FFF0
loc_19C7E:
		dc.w    $0007
		dc.l    $140D208B, $2045FFF0, $E405005D, $002EFFE0
		dc.l    $E405085D, $082E0010, $E40D0061, $0030FFF0
		dc.l    $F40D0069, $0034FFF0, $FC0D0069, $0034FFF0
		dc.l    $0C0D0083, $0041FFF0
loc_19CB8:
		dc.w    $0007
		dc.l    $180D208B, $2045FFF0, $E005005D, $002EFFE0
		dc.l    $E005085D, $082E0010, $E00D0061, $0030FFF0
		dc.l    $F00D0069, $0034FFF0, $000D0069, $0034FFF0
		dc.l    $100D0083, $0041FFF0
loc_19CF2:
		dc.w    $0008
		dc.l    $1C0D208B, $2045FFF0, $DC05005D, $002EFFE0
		dc.l    $DC05085D, $082E0010, $DC0D0061, $0030FFF0
		dc.l    $EC0D0069, $0034FFF0, $FC0D0069, $0034FFF0
		dc.l    $040D0069, $0034FFF0, $140D0083, $0041FFF0
loc_19D34:
		dc.w    $0008
		dc.l    $200D208B, $2045FFF0, $D805005D, $002EFFE0
		dc.l    $D805085D, $082E0010, $D80D0061, $0030FFF0
		dc.l    $E80D0069, $0034FFF0, $F80D0069, $0034FFF0
		dc.l    $080D0069, $0034FFF0, $180D0083, $0041FFF0
loc_19D76:
		dc.w    $0009
		dc.l    $240D208B, $2045FFF0, $D405005D, $002EFFE0
		dc.l    $D405085D, $082E0010, $D40D0061, $0030FFF0
		dc.l    $E40D0069, $0034FFF0, $F40D0069, $0034FFF0
		dc.l    $040D0069, $0034FFF0, $0C0D0069, $0034FFF0
		dc.l    $1C0D0083, $0041FFF0
loc_19DC0:
		dc.w    $0009
		dc.l    $280D208B, $2045FFF0, $D005005D, $002EFFE0
		dc.l    $D005085D, $082E0010, $D00D0061, $0030FFF0
		dc.l    $E00D0069, $0034FFF0, $F00D0069, $0034FFF0
		dc.l    $000D0069, $0034FFF0, $100D0069, $0034FFF0
		dc.l    $200D0083, $0041FFF0
loc_19E0A:
		dc.w    $0008
		dc.l    $E805005D, $002EFFE0, $E805085D, $082E0010
		dc.l    $E8050061, $0030FFF0, $E8050065, $00320000
		dc.l    $F8050069, $0034FFF0, $F805006D, $00360000
		dc.l    $08050083, $0041FFF0, $08050087, $00430000
loc_19E4C:
		dc.w    $000A
		dc.l    $E405005D, $002EFFE0, $E405085D, $082E0010
		dc.l    $E4050061, $0030FFF0, $E4050065, $00320000
		dc.l    $F4050069, $0034FFF0, $F405006D, $00360000
		dc.l    $FC050069, $0034FFF0, $FC05006D, $00360000
		dc.l    $0C050083, $0041FFF0, $0C050087, $00430000
loc_19E9E:
		dc.w    $000A
		dc.l    $E005005D, $002EFFE0, $E005085D, $082E0010
		dc.l    $E0050061, $0030FFF0, $E0050065, $00320000
		dc.l    $F0050069, $0034FFF0, $F005006D, $00360000
		dc.l    $00050069, $0034FFF0, $0005006D, $00360000
		dc.l    $10050083, $0041FFF0, $10050087, $00430000
loc_19EF0:
		dc.w    $000C
		dc.l    $DC05005D, $002EFFE0, $DC05085D, $082E0010
		dc.l    $DC050061, $0030FFF0, $DC050065, $00320000
		dc.l    $EC050069, $0034FFF0, $EC05006D, $00360000
		dc.l    $FC050069, $0034FFF0, $FC05006D, $00360000
		dc.l    $04050069, $0034FFF0, $0405006D, $00360000
		dc.l    $14050083, $0041FFF0, $14050087, $00430000
loc_19F52:
		dc.w    $000C
		dc.l    $D805005D, $002EFFE0, $D805085D, $082E0010
		dc.l    $D8050061, $0030FFF0, $D8050065, $00320000
		dc.l    $E8050069, $0034FFF0, $E805006D, $00360000
		dc.l    $F8050069, $0034FFF0, $F805006D, $00360000
		dc.l    $08050069, $0034FFF0, $0805006D, $00360000
		dc.l    $18050083, $0041FFF0, $18050087, $00430000
loc_19FB4:
		dc.w    $000E
		dc.l    $D405005D, $002EFFE0, $D405085D, $082E0010
		dc.l    $D4050061, $0030FFF0, $D4050065, $00320000
		dc.l    $E4050069, $0034FFF0, $E405006D, $00360000
		dc.l    $F4050069, $0034FFF0, $F405006D, $00360000
		dc.l    $04050069, $0034FFF0, $0405006D, $00360000
		dc.l    $0C050069, $0034FFF0, $0C05006D, $00360000
		dc.l    $1C050083, $0041FFF0, $1C050087, $00430000
loc_1A026:
		dc.w    $000E
		dc.l    $D005005D, $002EFFE0, $D005085D, $082E0010
		dc.l    $D0050061, $0030FFF0, $D0050065, $00320000
		dc.l    $E0050069, $0034FFF0, $E005006D, $00360000
		dc.l    $F0050069, $0034FFF0, $F005006D, $00360000
		dc.l    $00050069, $0034FFF0, $0005006D, $00360000
		dc.l    $10050069, $0034FFF0, $1005006D, $00360000
		dc.l    $20050083, $0041FFF0, $20050087, $00430000		
;=============================================================================== 
; Object 0x2B - Neo Green Hill - Breakable Pillar
; [ End ]		         
;=============================================================================== 
J_DisplaySprite_05: ; loc_1A098:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_14: ; loc_1A09E:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_0B: ; loc_1A0A4:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_03: ; loc_1A0AA:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_0D: ; loc_1A0B0:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_05: ; loc_1A0B6:
		jmp     SolidObject             ; (loc_F4A0)
J_SpeedToPos_08: ; loc_1A0BC:
		jmp     SpeedToPos              ; (loc_D27A)
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x2C - Neo Green Hill - Leaves
; [ Begin ]		         
;===============================================================================		  
Obj_0x2C_Leaves: ; loc_1A0C4:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1A0D2(PC, D0), D1
		jmp     loc_1A0D2(PC, D1)
loc_1A0D2:
		dc.w    loc_1A0DC-loc_1A0D2
		dc.w    loc_1A112-loc_1A0D2
		dc.w    loc_1A234-loc_1A0D2
loc_1A0D8:
		dc.b    $D6, $D4, $D5, $00
loc_1A0DC:
		addq.b  #$02, $0024(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.b  loc_1A0D8(PC, D0), $0020(A0)
		move.l  #Lava_Attributes_Mappings, $0004(A0) ; loc_15612
		move.w  #$8680, $0002(A0)
		move.b  #$84, $0001(A0)
		move.b  #$80, $0019(A0)
		move.b  #$04, $0018(A0)
		move.b  $0028(A0), $001A(A0)
loc_1A112:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_15       ; loc_1A2F2
		tst.w   (Debug_placement_mode).w
		beq.s   loc_1A130
		bsr.w     J_DisplaySprite_06      ; loc_1A2EC
loc_1A130:
		move.b  $0021(A0), D0
		beq.s   loc_1A16C
		move.b  (Timer_frames+1).w, D0
		andi.w  #$000F, D0
		bne.s   loc_1A150
		lea     ($FFFFB000).w, A2
		bclr    #$00, $0021(A0)
		beq.s   loc_1A168
		bsr.s   loc_1A16E
		bra.s   loc_1A168
loc_1A150:
		addi.w  #$0008, D0
		andi.w  #$000F, D0
		bne.s   loc_1A168
		lea     ($FFFFB040).w, A2
		bclr    #$01, $0021(A0)
		beq.s   loc_1A168
		bsr.s   loc_1A16E
loc_1A168:
		clr.b   $0021(A0)
loc_1A16C:
		rts
loc_1A16E:
		move.w  $0010(A2), D0
		bpl.s   loc_1A176
		neg.w   D0
loc_1A176:
		cmpi.w  #$0200, D0
		bcc.s   loc_1A18A
		move.w  $0012(A2), D0
		bpl.s   loc_1A184
		neg.w   D0
loc_1A184:
		cmpi.w  #$0200, D0
		bcs.s   loc_1A16C
loc_1A18A:
		lea     (loc_1A224).l, A3
		moveq   #$03, D6
loc_1A192:		
		bsr.w     J_SingleObjLoad_03   ; loc_1A2F8
		bne.w    loc_1A21E
		_move.b  #$2C, 0(A1)
		move.b  #$04, $0024(A1)
		move.w  $0008(A2), $0008(A1)
		move.w  $000C(A2), $000C(A1)
		bsr.w     loc_1A2FE
		andi.w  #$000F, D0
		subq.w  #$08, D0
		add.w   D0, $0008(A1)
		swap  D0
		andi.w  #$000F, D0
		subq.w  #$08, D0
		add.w   D0, $000C(A1)
		move.w  (A3)+, $0010(A1)
		move.w  (A3)+, $0012(A1)
		btst    #$00, $0022(A2)
		beq.s   loc_1A1E0
		neg.w   $0010(A1)
loc_1A1E0:
		move.w  $0008(A1), $0030(A1)
		move.w  $000C(A1), $0034(A1)
		andi.b  #$01, D0
		move.b  D0, $001A(A1)
		move.l  #Leaves_Mappings, $0004(A1) ; loc_1A2BC
		move.w  #$E410, $0002(A1)
		move.b  #$84, $0001(A1)
		move.b  #$08, $0019(A1)
		move.b  #$01, $0018(A1)
		move.b  #$04, $0038(A1)
		move.b  D1, $0026(A0)
loc_1A21E:
		dbf    D6, loc_1A192
		rts  
loc_1A224:
		dc.w    $FF80, $FF80, $00C0, $FFC0, $FF40, $0040, $0080, $0080
loc_1A234:
		move.b  $0038(A0), D0
		add.b   D0, $0026(A0)
		add.b   (Vint_runcount+3).w, D0
		andi.w  #$001F, D0
		bne.s   loc_1A252
		add.b   D7, D0
		andi.b  #$01, D0
		beq.s   loc_1A252
		neg.b   $0038(A0)
loc_1A252:
		move.l  $0030(A0), D2
		move.l  $0034(A0), D3
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0030(A0)
		move.l  D3, $0034(A0)
		swap  D2
		andi.w  #$0003, D3
		addq.w  #$04, D3
		add.w   D3, $0012(A0)
		move.b  $0026(A0), D0
		bsr.w     JmpTo3_CalcSine
		asr.w   #$06, D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		asr.w   #$06, D1
		add.w   $0034(A0), D1
		move.w  D1, $000C(A0)
		subq.b  #$01, $001E(A0)
		bpl.s   loc_1A2B0
		move.b  #$0B, $001E(A0)
		bchg    #1, $001A(A0)
loc_1A2B0:
		tst.b   $0001(A0)
		bpl.w    J_DeleteObject_15       ; loc_1A2F2
		bra.w     J_DisplaySprite_06      ; loc_1A2EC
Leaves_Mappings:		
loc_1A2BC:
		dc.w    loc_1A2C4-loc_1A2BC
		dc.w    loc_1A2CE-loc_1A2BC
		dc.w    loc_1A2D8-loc_1A2BC
		dc.w    loc_1A2E2-loc_1A2BC
loc_1A2C4:
		dc.w    $0001
		dc.l    $FC000000, $0000FFFC
loc_1A2CE:
		dc.w    $0001
		dc.l    $FC040001, $0000FFF8
loc_1A2D8:
		dc.w    $0001
		dc.l    $FC040003, $0001FFF8
loc_1A2E2:
		dc.w    $0001
		dc.l    $FC040005, $0002FFF8		            
;=============================================================================== 
; Object 0x2C - Neo Green Hill - Leaves
; [ End ]		         
;===============================================================================		   
J_DisplaySprite_06: ; loc_1A2EC:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_15: ; loc_1A2F2:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_03: ; loc_1A2F8:
		jmp     SingleObjLoad        ; (loc_E772)
loc_1A2FE:
		jmp     (PseudoRandomNumber).l      ; loc_31E4
; loc_1A304:
JmpTo3_CalcSine:
		jmp	(CalcSine).l

		align 4

;=============================================================================== 
; Object 0x40 - Chemical Plant / Neo Green Hill - Springs 
; [ Begin ]		         
;===============================================================================  
Obj_0x40_Diagonal_Springs: ; loc_1A30C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1A31E(PC, D0), D1
		jsr     loc_1A31E(PC, D1)
		bra.w     J_MarkObjGone_0C        ; loc_1A5B4
loc_1A31E:
		dc.w    loc_1A328-loc_1A31E
		dc.w    loc_1A364-loc_1A31E
loc_1A322:
		dc.w    $FC00, $F600, $F800
loc_1A328:
		addq.b  #$02, $0024(A0)
		move.l  #Obj40_MapUnc_1A58A, $0004(A0) ; loc_1A58A
		move.w  #$0440, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_0E ; loc_1A5C0
		ori.b   #$04, $0001(A0)
		move.b  #$1C, $0019(A0)
		move.b  #$04, $0018(A0)
		bset    #$07, $0022(A0)
		move.b  $0028(A0), D0
		andi.w  #$0002, D0
		move.w  loc_1A322(PC, D0), $0030(A0)
loc_1A364:
		lea     (loc_1A57E).l, A1
		bsr.w     J_AnimateSprite_02      ; loc_1A5BA
		move.w  #$0027, D1
		move.w  #$0008, D2
		move.w  $0008(A0), D4
		lea     loc_1A52E(PC), A2
		tst.b   $001A(A0)
		beq.s   loc_1A388
		lea     loc_1A556(PC), A2
loc_1A388:
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_1A5C6
		btst    #$03, $0022(A0)
		beq.s   loc_1A3A0
		bsr.s   loc_1A3BA
loc_1A3A0:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_1A5C6
		btst    #$04, $0022(A0)
		beq.s   loc_1A3B8
		bsr.s   loc_1A3BA
loc_1A3B8:
		rts
loc_1A3BA:
		btst    #$00, $0022(A0)
		bne.s   loc_1A3D2
		move.w  $0008(A0), D0
		subi.w  #$0010, D0
		cmp.w   $0008(A1), D0
		bcs.s   loc_1A3E2
		rts
loc_1A3D2:
		move.w  $0008(A0), D0
		addi.w  #$0010, D0
		cmp.w   $0008(A1), D0
		bcc.s   loc_1A3E2
		rts
loc_1A3E2:
		cmpi.b  #$01, $001C(A0)
		beq.s   loc_1A3F2
		move.w  #$0100, $001C(A0)
		rts
loc_1A3F2:
		tst.b   $001A(A0)
		beq.s   loc_1A3FA
		rts
loc_1A3FA:
		move.w  $0008(A0), D0
		subi.w  #$001C, D0
		sub.w   $0008(A1), D0
		neg.w   D0
		btst    #$00, $0022(A0)
		beq.s   loc_1A416
		not.w  D0
		addi.w  #$0027, D0
loc_1A416:
		tst.w   D0
		bpl.s   loc_1A41C
		moveq   #$00, D0
loc_1A41C:
		lea     (loc_1A4E6).l, A3
		move.b  $00(A3, D0), D0
		move.w  #$FC00, $0012(A1)
		sub.b   D0, $0012(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_1A446
		bclr    #$00, $0022(A1)
		neg.b   D0
loc_1A446:
		move.w  $0010(A1), D1
		bpl.s   loc_1A44E
		neg.w   D1
loc_1A44E:
		cmpi.w  #$0400, D1
		bcs.s   loc_1A458
		sub.b   D0, $0010(A1)
loc_1A458:
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		btst    #$00, D0
		beq.s   loc_1A4B4
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0
		bne.s   loc_1A4A4
		move.b  #$03, $002C(A1)
loc_1A4A4:
		btst    #$00, $0022(A1)
		beq.s   loc_1A4B4
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_1A4B4:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_1A4CA
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_1A4CA:
		cmpi.b  #$08, D0
		bne.s   loc_1A4DC
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_1A4DC:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6   
loc_1A4E6:
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01
		dc.b    $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $02, $02, $02
		dc.b    $03, $03, $03, $03, $03, $03, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00   
loc_1A52E:
		dc.b    $08, $08, $08, $08, $08, $08, $08, $09, $0A, $0B, $0C, $0D, $0E, $0F, $10, $10
		dc.b    $11, $12, $13, $14, $14, $15, $15, $16, $17, $18, $18, $18, $18, $18, $18, $18
		dc.b    $18, $18, $18, $18, $18, $18, $18, $18      
loc_1A556:
		dc.b    $08, $08, $08, $08, $08, $08, $08, $09, $0A, $0B, $0C, $0C, $0C, $0C, $0D, $0D
		dc.b    $0D, $0D, $0D, $0D, $0E, $0E, $0F, $0F, $10, $10, $10, $10, $0F, $0F, $0E, $0E
		dc.b    $0D, $0D, $0D, $0D, $0D, $0D, $0D, $0D		
loc_1A57E:
		dc.w    loc_1A582-loc_1A57E
		dc.w    loc_1A585-loc_1A57E
loc_1A582:
		dc.b    $0F, $00, $FF
loc_1A585:
		dc.b    $03, $01, $00, $FD, $00 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj40_MapUnc_1A58A:	BINCLUDE	"mappings/sprite/obj40.bin"
; ===========================================================================
		nop

J_MarkObjGone_0C: ; loc_1A5B4:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_02: ; loc_1A5BA:
		jmp     AnimateSprite           ; (loc_D412)
J_Adjust2PArtPointer_0E: ; loc_1A5C0:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1A5C6:
		jmp     (loc_F562)
		
;=============================================================================== 
; Object 0x42 - Metropolis - Steam Vent 
; [ Begin ]		         
;===============================================================================		  
Obj_0x42_Steam_Vent: ; loc_1A5CC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1A5DA(PC, D0), D1
		jmp     loc_1A5DA(PC, D1)
loc_1A5DA:
		dc.w    loc_1A5E0-loc_1A5DA
		dc.w    loc_1A620-loc_1A5DA
		dc.w    loc_1A7CC-loc_1A5DA
loc_1A5E0:
		addq.b  #$02, $0024(A0)
		move.l  #Obj42_MapUnc_1A7FE, $0004(A0) ; loc_1A7FE
		move.w  #$6000, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		bsr.w     J_Adjust2PArtPointer_0F ; loc_1A8A8
		move.b  #$07, $001A(A0)
		move.w  $000C(A0), $0034(A0)
		move.w  #$0010, $0036(A0)
		addi.w  #$0010, $000C(A0)
loc_1A620:
		move.w  #$001B, D1
		move.w  #$0010, D2
		move.w  #$0010, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_1A8AE
		btst    #$03, $0022(A0)
		beq.s   loc_1A64A
		bsr.w     loc_1A726
loc_1A64A:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_1A8AE
		btst    #$04, $0022(A0)
		beq.s   loc_1A664
		bsr.w     loc_1A726
loc_1A664:
		move.b  $0025(A0), D0
		bne.s   loc_1A67C
		subq.w  #$01, $0032(A0)
		bpl.s   loc_1A6E0
		move.w  #$007F, $0032(A0)
		addq.b  #$02, $0025(A0)
		bra.s   loc_1A6E0
loc_1A67C:
		subq.b  #$02, D0
		bne.s   loc_1A6AE
		subq.w  #$08, $0036(A0)
		bne.s   loc_1A6A0
		addq.b  #$02, $0025(A0)
		bsr.s   loc_1A6E4
		addi.w  #$0028, $0008(A1)
		bsr.s   loc_1A6E4
		subi.w  #$0028, $0008(A1)
		bset    #$00, $0001(A1)
loc_1A6A0:
		move.w  $0036(A0), D0
		add.w   $0034(A0), D0
		move.w  D0, $000C(A0)
		bra.s   loc_1A6E0
loc_1A6AE:
		subq.b  #$02, D0
		bne.s   loc_1A6C4
		subq.w  #$01, $0032(A0)
		bpl.s   loc_1A6E0
		move.w  #$007F, $0032(A0)
		addq.b  #$02, $0025(A0)
		bra.s   loc_1A6E0
loc_1A6C4:
		addq.w  #$08, $0036(A0)
		cmpi.w  #$0010, $0036(A0)
		bne.s   loc_1A6D4
		clr.b   $0025(A0)
loc_1A6D4:
		move.w  $0036(A0), D0
		add.w   $0034(A0), D0
		move.w  D0, $000C(A0)
loc_1A6E0:
		bra.w     J_MarkObjGone_0D        ; loc_1A8A2
loc_1A6E4:
		bsr.w     J_SingleObjLoad_04   ; loc_1A89C
		bne.s   loc_1A724
		_move.b  0(A0), 0(A1)
		addq.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $0034(A0), $000C(A1)
		move.b  #$07, $001E(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  #$2405, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$18, $0019(A1)
		move.b  #$04, $0018(A1)
loc_1A724:
		rts
loc_1A726:
		cmpi.b  #$02, $0025(A0)
		beq.s   loc_1A730
		rts
loc_1A730:
		move.w  #$FA00, $0012(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		bpl.s   loc_1A75A
		move.w  #$0000, $0010(A1)
loc_1A75A:
		btst    #$00, D0
		beq.s   loc_1A79A
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$00, $002C(A1)
		move.b  #$04, $002D(A1)
		btst    #$01, D0
		bne.s   loc_1A78A
		move.b  #$01, $002C(A1)
loc_1A78A:
		btst    #$00, $0022(A1)
		beq.s   loc_1A79A
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_1A79A:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_1A7B0
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_1A7B0:
		cmpi.b  #$08, D0
		bne.s   loc_1A7C2
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_1A7C2:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_1A7CC:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_1A7FA
		move.b  #$07, $001E(A0)
		move.b  #$00, $0020(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$02, $001A(A0)
		bne.s   loc_1A7F0
		move.b  #$8B, $0020(A0)
loc_1A7F0:
		cmpi.b  #$07, $001A(A0)
		beq.w    J_DeleteObject_16       ; loc_1A896
loc_1A7FA:
		bra.w     J_DisplaySprite_07      ; loc_1A890
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj42_MapUnc_1A7FE:	BINCLUDE	"mappings/sprite/obj42.bin"
; ===========================================================================
		nop

J_DisplaySprite_07: ; loc_1A890:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_16: ; loc_1A896:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_04: ; loc_1A89C:
		jmp     SingleObjLoad        ; (loc_E772)
J_MarkObjGone_0D: ; loc_1A8A2:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_0F: ; loc_1A8A8:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1A8AE:
		jmp     (loc_F510)   
;=============================================================================== 
; Object 0x64 - Metropolis - Pistons 
; [ Begin ]		         
;===============================================================================		  
Obj_0x64_Pistons: ; loc_1A8B4:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1A8C2(PC, D0), D1
		jmp     loc_1A8C2(PC, D1)
loc_1A8C2:
		dc.w    loc_1A8CE-loc_1A8C2
		dc.w    loc_1A936-loc_1A8C2
loc_1A8C6:
		dc.b    $40, $0C, $40, $01, $10, $20, $40, $01
loc_1A8CE:
		addq.b  #$02, $0024(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$02, D0
		andi.w  #$001C, D0
		lea     loc_1A8C6(PC, D0), A3
		move.b  (A3)+, $0019(A0)
		move.b  (A3)+, $002E(A0)
		lsr.w   #$02, D0
		move.b  D0, $001A(A0)
		bne.s   loc_1A8FE
		move.b  #$6C, $0016(A0)
		bset    #$04, $0001(A0)
loc_1A8FE:
		move.l  #Obj64_MapUnc_1A9F0, $0004(A0) ; loc_1A9F0
		move.w  #$2000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_10 ; loc_1AA68
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0030(A0)
		moveq   #$00, D0
		move.b  (A3)+, D0
		move.w  D0, $003C(A0)
		andi.b  #$0F, $0028(A0)
loc_1A936:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.w  loc_1A988(PC, D0), D1
		jsr     loc_1A988(PC, D1)
		move.w  (A7)+, D4
		tst.b   $0001(A0)
		bpl.s   loc_1A96A
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $002E(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_06        ; loc_1AA6E
loc_1A96A:
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   J_DeleteObject_17       ; loc_1A982
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_17: ; loc_1A982:
		jmp     DeleteObject            ; (loc_D3B4)   
loc_1A988:		              
		dc.w    loc_1A98C-loc_1A988
		dc.w    loc_1A98E-loc_1A988
loc_1A98C:
		rts
loc_1A98E:
		tst.b   $0038(A0)
		bne.s   loc_1A9B2
		tst.w   $003A(A0)
		beq.s   loc_1A9A0
		subq.w  #$08, $003A(A0)
		bra.s   loc_1A9D2
loc_1A9A0:
		subq.w  #$01, $0036(A0)
		bpl.s   loc_1A9D2
		move.w  #$003C, $0036(A0)
		move.b  #$01, $0038(A0)
loc_1A9B2:
		move.w  $003A(A0), D0
		cmp.w   $003C(A0), D0
		beq.s   loc_1A9C2
		addq.w  #$08, $003A(A0)
		bra.s   loc_1A9D2
loc_1A9C2:
		subq.w  #$01, $0036(A0)
		bpl.s   loc_1A9D2
		move.w  #$003C, $0036(A0)
		clr.b   $0038(A0)
loc_1A9D2:
		move.w  $003A(A0), D0
		btst    #$00, $0022(A0)
		beq.s   loc_1A9E4
		neg.w   D0
		addi.w  #$0040, D0
loc_1A9E4:
		move.w  $0030(A0), D1
		add.w   D0, D1
		move.w  D1, $000C(A0)
		rts		   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj64_MapUnc_1A9F0:	BINCLUDE	"mappings/sprite/obj64.bin"

;=============================================================================== 
; Object 0x64 - Metropolis - Pistons 
; [ End ]		         
;===============================================================================		  
J_Adjust2PArtPointer_10: ; loc_1AA68:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_06: ; loc_1AA6E:
		jmp     SolidObject             ; (loc_F4A0)             
;=============================================================================== 
; Object 0x65 - Metropolis - Platform / Platform Over Gears
; [ Begin ]		         
;===============================================================================		 
Obj_0x65_Platform: ; loc_1AA74:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1AA82(PC, D0), D1
		jmp     loc_1AA82(PC, D1)
loc_1AA82:
		dc.w    loc_1AA9A-loc_1AA82
		dc.w    loc_1ABB0-loc_1AA82
		dc.w    loc_1AE08-loc_1AA82
		dc.w    loc_1AE26-loc_1AA82
loc_1AA8A:
		dc.b    $40, $0C, $80, $01, $20, $0C, $40, $03, $10, $10, $20, $00, $40, $0C, $80, $07
loc_1AA9A:
		addq.b  #$02, $0024(A0)
		move.l  #Obj65_MapUnc_1AE2C, $0004(A0) ; loc_1AE2C
		move.w  #$6000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_11 ; loc_1AEB0
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$02, D0
		andi.w  #$001C, D0
		lea     loc_1AA8A(PC, D0), A3
		move.b  (A3)+, $0019(A0)
		move.b  (A3)+, $0016(A0)
		lsr.w   #$02, D0
		move.b  D0, $001A(A0)
		cmpi.b  #$01, D0
		bne.s   loc_1AAE6
		bset    #$07, $0022(A0)
loc_1AAE6:
		cmpi.b  #$02, D0
		bne.s   loc_1AB02
		addq.b  #$04, $0024(A0)
		move.l  #Obj65_MapUnc_1AE68, $0004(A0) ; loc_1AE68
		move.w  #$655F, $0002(A0)
		bra.w     loc_1AE26
loc_1AB02:
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0030(A0)
		moveq   #$00, D0
		move.b  (A3)+, D0
		move.w  D0, $003C(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		bpl.w    loc_1ABAA
		andi.b  #$0F, D0
		move.b  D0, $003E(A0)
		move.b  (A3), $0028(A0)
		cmpi.b  #$07, (A3)
		bne.s   loc_1AB38
		move.w  $003C(A0), $003A(A0)
loc_1AB38:
		bsr.w     J_SingleObjLoad2_04  ; loc_1AEAA
		bne.s   loc_1AB98
		_move.b  0(A0), 0(A1)
		addq.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$FFB4, $0008(A1)
		addi.w  #$0014, $000C(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_1AB74
		subi.w  #$FFE8, $0008(A1)
		bset    #$00, $0001(A1)
loc_1AB74:
		move.l  #Obj65_MapUnc_1AE68, $0004(A1) ; loc_1AE68
		move.w  #$655F, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$04, $0018(A1)
		move.l  A0, $003C(A1)
loc_1AB98:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_1ABAA
		bclr    #$07, $02(A2, D0)
loc_1ABAA:
		andi.b  #$0F, $0028(A0)
loc_1ABB0:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.w  loc_1AC0E(PC, D0), D1
		jsr     loc_1AC0E(PC, D1)
		move.w  (A7)+, D4
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_07        ; loc_1AEB6
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1ABF6
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1ABF6:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_18       ; loc_1AC08
		bclr    #$07, $02(A2, D0)
J_DeleteObject_18: ; loc_1AC08:
		jmp     DeleteObject            ; (loc_D3B4)
loc_1AC0E:
		dc.w    loc_1AC1E-loc_1AC0E
		dc.w    loc_1AC34-loc_1AC0E
		dc.w    loc_1ACC0-loc_1AC0E
		dc.w    loc_1AD1C-loc_1AC0E
		dc.w    loc_1ADC0-loc_1AC0E
		dc.w    loc_1ADCE-loc_1AC0E
		dc.w    loc_1AC20-loc_1AC0E
		dc.w    loc_1ACA0-loc_1AC0E
loc_1AC1E:
		rts
loc_1AC20:
		tst.b   $0038(A0)
		bne.s   loc_1AC32
		subq.w  #$01, $0036(A0)
		bne.s   loc_1AC60
		move.b  #$01, $0038(A0)
loc_1AC32:
		bra.s   loc_1AC52
loc_1AC34:
		tst.b   $0038(A0)
		bne.s   loc_1AC52
		lea     (ButtonVine_Trigger).w, A2
		moveq   #$00, D0
		move.b  $003E(A0), D0
		btst    #$00, $00(A2, D0)
		beq.s   loc_1AC60
		move.b  #$01, $0038(A0)
loc_1AC52:
		move.w  $003C(A0), D0
		cmp.w   $003A(A0), D0
		beq.s   loc_1AC7E
		addq.w  #$02, $003A(A0)
loc_1AC60:
		move.w  $003A(A0), D0
		btst    #$00, $0022(A0)
		beq.s   loc_1AC72
		neg.w   D0
		addi.w  #$0080, D0
loc_1AC72:
		move.w  $0034(A0), D1
		sub.w   D0, D1
		move.w  D1, $0008(A0)
		rts
loc_1AC7E:
		addq.b  #$01, $0028(A0)
		move.w  #$00B4, $0036(A0)
		clr.b   $0038(A0)
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_1AC60
		bset    #$00, $02(A2, D0)
		bra.s   loc_1AC60
loc_1ACA0:
		tst.b   $0038(A0)
		bne.s   loc_1ACBE
		lea     (ButtonVine_Trigger).w, A2
		moveq   #$00, D0
		move.b  $003E(A0), D0
		btst    #$00, $00(A2, D0)
		beq.s   loc_1ACDC
		move.b  #$01, $0038(A0)
loc_1ACBE:
		bra.s   loc_1ACD2
loc_1ACC0:
		tst.b   $0038(A0)
		bne.s   loc_1ACD2
		subq.w  #$01, $0036(A0)
		bne.s   loc_1ACDC
		move.b  #$01, $0038(A0)
loc_1ACD2:
		tst.w   $003A(A0)
		beq.s   loc_1ACFA
		subq.w  #$02, $003A(A0)
loc_1ACDC:
		move.w  $003A(A0), D0
		btst    #$00, $0022(A0)
		beq.s   loc_1ACEE
		neg.w   D0
		addi.w  #$0080, D0
loc_1ACEE:
		move.w  $0034(A0), D1
		sub.w   D0, D1
		move.w  D1, $0008(A0)
		rts
loc_1ACFA:
		subq.b  #$01, $0028(A0)
		move.w  #$00B4, $0036(A0)
		clr.b   $0038(A0)
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_1ACDC
		bclr    #$00, $02(A2, D0)
		bra.s   loc_1ACDC
loc_1AD1C:
		move.w  $0034(A0), D4
		move.w  D4, D5
		btst    #$00, $0022(A0)
		bne.s   loc_1AD34
		subi.w  #$0020, D4
		addi.w  #$0060, D5
		bra.s   loc_1AD3C
loc_1AD34:
		subi.w  #$00A0, D4
		subi.w  #$0020, D5
loc_1AD3C:
		move.w  $000C(A0), D2
		move.w  D2, D3
		subi.w  #$0010, D2
		addi.w  #$0040, D3
		moveq   #$00, D1
		move.w  ($FFFFB008).w, D0
		cmp.w   D4, D0
		bcs.s   loc_1AD66
		cmp.w   D5, D0
		bcc.s   loc_1AD66
		move.w  ($FFFFB00C).w, D0
		cmp.w   D2, D0
		bcs.s   loc_1AD66
		cmp.w   D3, D0
		bcc.s   loc_1AD66
		moveq   #$01, D1
loc_1AD66:
		move.w  ($FFFFB048).w, D0
		cmp.w   D4, D0
		bcs.s   loc_1AD80
		cmp.w   D5, D0
		bcc.s   loc_1AD80
		move.w  ($FFFFB04C).w, D0
		cmp.w   D2, D0
		bcs.s   loc_1AD80
		cmp.w   D3, D0
		bcc.s   loc_1AD80
		moveq   #$01, D1
loc_1AD80:
		tst.b   D1
		beq.s   loc_1AD96
		move.w  $003C(A0), D0
		cmp.w   $003A(A0), D0
		beq.s   loc_1ADBE
		addi.w  #$0010, $003A(A0)
		bra.s   loc_1ADA2
loc_1AD96:
		tst.w   $003A(A0)
		beq.s   loc_1ADA2
		subi.w  #$0010, $003A(A0)
loc_1ADA2:
		move.w  $003A(A0), D0
		btst    #$00, $0022(A0)
		beq.s   loc_1ADB4
		neg.w   D0
		addi.w  #$0040, D0
loc_1ADB4:
		move.w  $0034(A0), D1
		sub.w   D0, D1
		move.w  D1, $0008(A0)
loc_1ADBE:
		rts
loc_1ADC0:
		btst    #$03, $0022(A0)
		beq.s   loc_1ADCC
		addq.b  #$01, $0028(A0)
loc_1ADCC:
		rts
loc_1ADCE:
		tst.b   $0038(A0)
		bne.s   loc_1ADE8
		addq.w  #$02, $0008(A0)
		cmpi.w  #$1B40, $0008(A0)
		bne.s   loc_1ADFA
		move.b  #$01, $0038(A0)
		bra.s   loc_1ADFA
loc_1ADE8:
		subq.w  #$02, $0008(A0)
		cmpi.w  #$1800, $0008(A0)
		bne.s   loc_1ADFA
		move.b  #$00, $0038(A0)
loc_1ADFA:
		move.w  $0008(A0), $0034(A0)
		move.w  $0008(A0), (MTZ_Platform_Cog_X).w
		rts
loc_1AE08:
		move.l  $003C(A0), A1
		move.w  $003A(A1), D0
loc_1AE10:		
		andi.w  #$0007, D0
		move.b  loc_1AE1E(PC, D0), $001A(A0)
		bra.w     J_MarkObjGone_0E        ; loc_1AEA4    
loc_1AE1E:
		dc.b    $00, $00, $02, $02, $02, $01, $01, $01
loc_1AE26:
		move.w  (MTZ_Platform_Cog_X).w, D0
		bra.s   loc_1AE10  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj65_MapUnc_1AE2C:	BINCLUDE	"mappings/sprite/obj65_a.bin"
Obj65_MapUnc_1AE68:	BINCLUDE	"mappings/sprite/obj65_b.bin"

;=============================================================================== 
; Object 0x65 - Metropolis - Platform Over Gears
; [ End ]		         
;===============================================================================		  
J_MarkObjGone_0E: ; loc_1AEA4:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_04: ; loc_1AEAA:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_11: ; loc_1AEB0:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_07: ; loc_1AEB6:
		jmp     SolidObject             ; (loc_F4A0)     
;=============================================================================== 
; Object 0x66 - Metropolis - Springs on Walls
; [ Begin ]		         
;===============================================================================		   
Obj_0x66_Spring_Wall: ; loc_1AEBC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1AECA(PC, D0), D1
		jmp     loc_1AECA(PC, D1)
loc_1AECA:
		dc.w    loc_1AECE-loc_1AECA
		dc.w    loc_1AF12-loc_1AECA
loc_1AECE:
		addq.b  #$02, $0024(A0)
		move.l  #Obj66_MapUnc_1B084, $0004(A0) ; loc_1B084
		move.w  #$8680, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_12 ; loc_1B0B8
		ori.b   #$04, $0001(A0)
		move.b  #$08, $0019(A0)
		move.b  #$04, $0018(A0)
		move.b  #$40, $0016(A0)
		move.b  $0028(A0), D0
		lsr.b   #$04, D0
		andi.b  #$07, D0
		move.b  D0, $001A(A0)
		beq.s   loc_1AF12
		move.b  #$80, $0016(A0)
loc_1AF12:
		move.w  #$0013, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_1B0BE
		cmpi.b  #$01, D4
		bne.s   loc_1AF5A
		btst    #$01, $0022(A1)
		beq.s   loc_1AF5A
		move.b  $0022(A0), D1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcs.s   loc_1AF52
		eori.b  #$01, D1
loc_1AF52:
		andi.b  #$01, D1
		bne.s   loc_1AF5A
		bsr.s   loc_1AFB0
loc_1AF5A:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_1B0BE
		cmpi.b  #$01, D4
		bne.s   loc_1AF90
		btst    #$01, $0022(A1)
		beq.s   loc_1AF90
		move.b  $0022(A0), D1
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcs.s   loc_1AF88
		eori.b  #$01, D1
loc_1AF88:
		andi.b  #$01, D1
		bne.s   loc_1AF90
		bsr.s   loc_1AFB0
loc_1AF90:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_19       ; loc_1B0B2
		tst.w   (Debug_placement_mode).w
		beq.s   loc_1AFAE
		bsr.w     J_DisplaySprite_08      ; loc_1B0AC
loc_1AFAE:
		rts
loc_1AFB0:
		move.w  $0030(A0), $0010(A1)
		move.w  #$F800, $0010(A1)
		move.w  #$F800, $0012(A1)
		bset    #$00, $0022(A1)
		btst    #$00, $0022(A0)
		bne.s   loc_1AFDA
		bclr    #$00, $0022(A1)
		neg.w   $0010(A1)
loc_1AFDA:
		move.w  #$000F, $002E(A1)
		move.w  $0010(A1), $0014(A1)
		btst    #$02, $0022(A1)
		bne.s   loc_1AFF4
		move.b  #$00, $001C(A1)
loc_1AFF4:
		move.b  $0028(A0), D0
		bpl.s   loc_1B000
		move.w  #$0000, $0012(A1)
loc_1B000:
		btst    #$00, D0
		beq.s   loc_1B040
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$01, $002C(A1)
		move.b  #$08, $002D(A1)
		btst    #$01, D0
		bne.s   loc_1B030
		move.b  #$03, $002C(A1)
loc_1B030:
		btst    #$00, $0022(A1)
		beq.s   loc_1B040
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_1B040:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_1B056
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_1B056:
		cmpi.b  #$08, D0
		bne.s   loc_1B068
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_1B068:
		bclr    #$05, $0022(A0)
		bclr    #$06, $0022(A0)
		bclr    #$05, $0022(A1)
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj66_MapUnc_1B084:	BINCLUDE	"mappings/sprite/obj66.bin"

;=============================================================================== 
; Object 0x66 - Metropolis - Springs on Walls
; [ End ]		         
;===============================================================================  
J_DisplaySprite_08: ; loc_1B0AC:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_19: ; loc_1B0B2:
		jmp     DeleteObject            ; (loc_D3B4)
J_Adjust2PArtPointer_12: ; loc_1B0B8:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1B0BE:
		jmp     (loc_F510)		  
;=============================================================================== 
; Object 0x67 - Metropolis - Teleport Attributes
; [ Begin ]		         
;===============================================================================		    
Obj_0x67_Teleport_Attributes: ; loc_1B0C4:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1B0EC(PC, D0), D1
		jsr     loc_1B0EC(PC, D1)
		move.b  $002C(A0), D0
		add.b   $0036(A0), D0
		beq.w    loc_1B518
		lea     (loc_1B4BA).l, A1
		bsr.w     J_AnimateSprite_03      ; loc_1B512
		bra.w     J_DisplaySprite_09      ; loc_1B50C
loc_1B0EC:
		dc.w    loc_1B0F0-loc_1B0EC
		dc.w    loc_1B114-loc_1B0EC
loc_1B0F0:
		addq.b  #$02, $0024(A0)
		move.l  #Teleport_Attributes_Mappings, $0004(A0) ; loc_1B4D4
		move.w  #$633C, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$05, $0018(A0)
loc_1B114:
		lea     ($FFFFB000).w, A1
		lea     $002C(A0), A4
		bsr.s   loc_1B126
		lea     ($FFFFB040).w, A1
		lea     $0036(A0), A4
loc_1B126:
		moveq   #$00, D0
		move.b  (A4), D0
		move.w  loc_1B132(PC, D0), D0
		jmp     loc_1B132(PC, D0)
loc_1B132:
		dc.w    loc_1B138-loc_1B132
		dc.w    loc_1B1C8-loc_1B132
		dc.w    loc_1B1FC-loc_1B132
loc_1B138:
		tst.w   (Debug_placement_mode).w
		bne.w    loc_1B1C6
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		addq.w  #$03, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1B156
		addi.w  #$000A, D0
loc_1B156:
		cmpi.w  #$0010, D0
		bcc.s   loc_1B1C6
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		addi.w  #$0020, D1
		cmpi.w  #$0040, D1
		bcc.s   loc_1B1C6
		tst.b   $002A(A1)
		bne.s   loc_1B1C6
		addq.b  #$02, (A4)
		move.b  #$81, $002A(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0800, $0014(A1)
		move.w  #$0000, $0010(A1)
		move.w  #$0000, $0012(A1)
		bclr    #$05, $0022(A0)
		bclr    #$05, $0022(A1)
		bset    #$01, $0022(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		clr.b   $0001(A4)
		move.w  #$00BE, D0
		jsr     (PlaySound).l             ; loc_14C6
		move.w  #$0100, $001C(A0)
loc_1B1C6:
		rts
loc_1B1C8:
		move.b  $0001(A4), D0
		addq.b  #$02, $0001(A4)
		jsr    ( CalcSine).l		; loc_320A
		asr.w   #$05, D0
		move.w  $000C(A0), D2
		sub.w   D0, D2
		move.w  D2, $000C(A1)
		cmpi.b  #$80, $0001(A4)
		bne.s   loc_1B1FA
		bsr.w     loc_1B278
		addq.b  #$02, (A4)
		move.w  #$00BC, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1B1FA:
		rts
loc_1B1FC:
		subq.b  #$01, $0002(A4)
		bpl.s   loc_1B230
		move.l  $0006(A4), A2
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
		tst.b   $0028(A0)
		bpl.s   loc_1B21A
		subq.w  #$08, A2
loc_1B21A:
		move.l  A2, $0006(A4)
		subq.w  #$04, $0004(A4)
		beq.s   loc_1B256
		move.w  (A2)+, D4
		move.w  (A2)+, D5
		move.w  #$1000, D2
		bra.w     loc_1B2DC
loc_1B230:
		move.l  $0008(A1), D2
		move.l  $000C(A1), D3
		move.w  $0010(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.w  $0012(A1), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D2, $0008(A1)
		move.l  D3, $000C(A1)
		rts
loc_1B256:
		andi.w  #$07FF, $000C(A1)
		clr.b   (A4)
		clr.b   $002A(A1)
		btst    #$04, $0028(A0)
		bne.s   loc_1B276
		move.w  #$0000, $0010(A1)
		move.w  #$0000, $0012(A1)
loc_1B276:
		rts
loc_1B278:
		move.b  $0028(A0), D0
		bpl.s   loc_1B2AC
		neg.b   D0
		andi.w  #$000F, D0
		add.w   D0, D0
		lea     (loc_1B35A).l, A2
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D0
		subq.w  #$04, D0
		move.w  D0, $0004(A4)
		lea     $00(A2, D0), A2
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
		subq.w  #$08, A2
		bra.s   loc_1B2D0
loc_1B2AC:
		andi.w  #$000F, D0
		add.w   D0, D0
		lea     (loc_1B35A).l, A2
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, $0004(A4)
		subq.w  #$04, $0004(A4)
		move.w  (A2)+, D4
		move.w  D4, $0008(A1)
		move.w  (A2)+, D5
		move.w  D5, $000C(A1)
loc_1B2D0:
		move.l  A2, $0006(A4)
		move.w  (A2)+, D4
		move.w  (A2)+, D5
		move.w  #$1000, D2
loc_1B2DC:
		moveq   #$00, D0
		move.w  D2, D3
		move.w  D4, D0
		sub.w   $0008(A1), D0
		bge.s   loc_1B2EC
		neg.w   D0
		neg.w   D2
loc_1B2EC:
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		bge.s   loc_1B2FA
		neg.w   D1
		neg.w   D3
loc_1B2FA:
		cmp.w   D0, D1
		bcs.s   loc_1B32C
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		swap  D1
		divs.w  D3, D1
		moveq   #$00, D0
		move.w  D4, D0
		sub.w   $0008(A1), D0
		beq.s   loc_1B318
		swap  D0
		divs.w  D1, D0
loc_1B318:
		move.w  D0, $0010(A1)
		move.w  D3, $0012(A1)
		tst.w   D1
		bpl.s   loc_1B326
		neg.w   D1
loc_1B326:
		move.w  D1, $0002(A4)
		rts
loc_1B32C:
		moveq   #$00, D0
		move.w  D4, D0
		sub.w   $0008(A1), D0
		swap  D0
		divs.w  D2, D0
		moveq   #$00, D1
		move.w  D5, D1
		sub.w   $000C(A1), D1
		beq.s   loc_1B346
		swap  D1
		divs.w  D0, D1
loc_1B346:
		move.w  D1, $0012(A1)
		move.w  D2, $0010(A1)
		tst.w   D0
		bpl.s   loc_1B354
		neg.w   D0
loc_1B354:
		move.w  D0, $0002(A4)
		rts
loc_1B35A:
		dc.w    loc_1B37A-loc_1B35A
		dc.w    loc_1B394-loc_1B35A
		dc.w    loc_1B39E-loc_1B35A
		dc.w    loc_1B3A8-loc_1B35A
		dc.w    loc_1B3B2-loc_1B35A
		dc.w    loc_1B3BC-loc_1B35A
		dc.w    loc_1B3C6-loc_1B35A
		dc.w    loc_1B3D0-loc_1B35A
		dc.w    loc_1B3EA-loc_1B35A
		dc.w    loc_1B404-loc_1B35A
		dc.w    loc_1B41E-loc_1B35A
		dc.w    loc_1B438-loc_1B35A
		dc.w    loc_1B452-loc_1B35A
		dc.w    loc_1B46C-loc_1B35A
		dc.w    loc_1B486-loc_1B35A
		dc.w    loc_1B4A0-loc_1B35A
loc_1B37A:
		dc.w    $0018
		dc.b    $07, $28, $02, $70, $06, $D0, $02, $70, $06, $C0, $02, $88, $06, $C0, $03, $E0
		dc.b    $06, $D0, $03, $F0, $07, $28, $03, $F0
loc_1B394:
		dc.w    $0008
		dc.b    $0B, $D8, $05, $F0, $0E, $00, $05, $F0
loc_1B39E:
		dc.w    $0008
		dc.b    $0C, $58, $03, $70, $0E, $00, $03, $70
loc_1B3A8:
		dc.w    $0008
		dc.b    $13, $D8, $01, $F0, $15, $80, $01, $F0
loc_1B3B2:
		dc.w    $0008
		dc.b    $05, $D8, $03, $70, $07, $80, $03, $70
loc_1B3BC:
		dc.w    $0008
		dc.b    $05, $D8, $05, $F0, $07, $00, $05, $F0
loc_1B3C6:
		dc.w    $0008
		dc.b    $0B, $A8, $07, $70, $08, $80, $07, $70
loc_1B3D0:
		dc.w    $0018
		dc.b    $0B, $D8, $01, $F0, $0C, $30, $01, $F0, $0C, $40, $01, $E0, $0C, $40, $00, $C0
		dc.b    $0C, $50, $00, $B0, $0C, $A8, $00, $B0
loc_1B3EA:
		dc.w    $0018
		dc.b    $14, $D8, $04, $B0, $15, $30, $04, $B0, $15, $40, $04, $C0, $15, $40, $05, $A0
		dc.b    $15, $30, $05, $B0, $14, $D8, $05, $B0
loc_1B404:
		dc.w    $0018
		dc.b    $17, $28, $03, $30, $15, $D0, $03, $30, $15, $C0, $03, $20, $15, $C0, $02, $40
		dc.b    $15, $D0, $02, $30, $16, $28, $02, $30
loc_1B41E:
		dc.w    $0018
		dc.b    $0F, $D8, $03, $B0, $10, $30, $03, $B0, $10, $40, $03, $A0, $10, $40, $02, $C0
		dc.b    $10, $50, $02, $B0, $10, $A8, $02, $B0
loc_1B438:
		dc.w    $0018
		dc.b    $0F, $D8, $04, $B0, $10, $B0, $04, $B0, $10, $C0, $04, $A0, $10, $C0, $03, $C0
		dc.b    $10, $D0, $03, $B0, $11, $28, $03, $B0
loc_1B452:
		dc.w    $0018
		dc.b    $1E, $58, $01, $B0, $1F, $30, $01, $B0, $1F, $40, $01, $C0, $1F, $40, $02, $A0
		dc.b    $1F, $50, $02, $B0, $20, $A8, $02, $B0
loc_1B46C:
		dc.w    $0018
		dc.b    $20, $A8, $04, $70, $20, $50, $04, $70, $20, $40, $04, $80, $20, $40, $05, $A0
		dc.b    $20, $50, $05, $B0, $20, $A8, $05, $B0
loc_1B486:
		dc.w    $0018
		dc.b    $22, $58, $05, $B0, $23, $30, $05, $B0, $23, $40, $05, $A0, $23, $40, $04, $C0
		dc.b    $23, $50, $04, $B0, $23, $A8, $04, $B0
loc_1B4A0:
		dc.w    $0018
		dc.b    $22, $D8, $02, $B0, $23, $30, $02, $B0, $23, $40, $02, $C0, $23, $40, $04, $60
		dc.b    $23, $30, $04, $70, $22, $D8, $04, $70		
loc_1B4BA:		 
		dc.w    loc_1B4BE-loc_1B4BA
		dc.w    loc_1B4C1-loc_1B4BA
loc_1B4BE:
		dc.b    $1F, $00, $FF
loc_1B4C1:
		dc.b    $01, $01, $00, $00, $00, $00, $00, $01, $00, $00, $00, $01, $00, $00, $01, $00
		dc.b    $FE, $02, $00   
Teleport_Attributes_Mappings:
loc_1B4D4:
		dc.w    loc_1B4D8-loc_1B4D4
		dc.w    loc_1B4DA-loc_1B4D4
loc_1B4D8:
		dc.w    $0000
loc_1B4DA:
		dc.w    $0006
		dc.l    $E0050000, $0000FFEC, $E0050000, $0000FFF8
		dc.l    $F0050000, $0000FFEC, $F0050000, $0000FFF8
		dc.l    $00050000, $0000FFEC, $00050000, $0000FFF8		             
;=============================================================================== 
; Object 0x67 - Metropolis - Teleport Attributes
; [ End ]		         
;===============================================================================               
J_DisplaySprite_09: ; loc_1B50C:
		jmp     DisplaySprite           ; (loc_D3C2)
J_AnimateSprite_03: ; loc_1B512:
		jmp     AnimateSprite           ; (loc_D412)
loc_1B518:
		jmp     (loc_D30C)
		dc.w    $0000		   ; Filler		       
;=============================================================================== 
; Object 0x68 - Metropolis - Block with Arrow
; [ Begin ]		         
;===============================================================================		    
Obj_0x68_Block_Arrow: ; loc_1B520:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1B52E(PC, D0), D1
		jmp     loc_1B52E(PC, D1)
loc_1B52E:
		dc.w    loc_1B534-loc_1B52E
		dc.w    loc_1B5D6-loc_1B52E
		dc.w    loc_1B5EE-loc_1B52E
loc_1B534:
		addq.b  #$02, $0024(A0)
		move.l  #Obj68_MapUnc_1B6DC, $0004(A0) ; loc_1B6DC
		move.w  #$6414, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_13 ; loc_1B7FC
		move.b  #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		bsr.w     J_SingleObjLoad2_05  ; loc_1B7F6
		bne.s   loc_1B5D0
		_move.b  0(A0), 0(A1)
		addq.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0008(A1), $0030(A1)
		move.w  $000C(A1), $0032(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  #$241C, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$04, $0018(A1)
		move.w  (Timer_frames).w, D0
		lsr.w   #$06, D0
		move.w  D0, D1
		andi.w  #$0001, D0
		move.w  D0, $0036(A1)
		lsr.w   #$01, D1
		add.b   $0028(A0), D1
		andi.w  #$0003, D1
		move.b  D1, $0025(A1)
		move.b  D1, $001A(A1)
		lea     (loc_1B6D8).l, A2
		move.b  $00(A2, D1), $0020(A1)
loc_1B5D0:
		move.b  #$04, $001A(A0)
loc_1B5D6:
		move.w  #$001B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_08        ; loc_1B802
		bra.w     J_MarkObjGone_0F        ; loc_1B7F0
loc_1B5EE:
		bsr.w     loc_1B656
		moveq   #$00, D0
		move.b  $0025(A0), D0
		add.w   D0, D0
		move.w  loc_1B60A(PC, D0), D1
		jsr     loc_1B60A(PC, D1)
		move.w  $0030(A0), D0
		bra.w     loc_1B808
loc_1B60A:
		dc.w    loc_1B612-loc_1B60A
		dc.w    loc_1B624-loc_1B60A
		dc.w    loc_1B634-loc_1B60A
		dc.w    loc_1B644-loc_1B60A
loc_1B612:
		moveq   #$00, D0
		move.b  $0034(A0), D0
		neg.w   D0
		add.w   $0032(A0), D0
		move.w  D0, $000C(A0)
		rts
loc_1B624:
		moveq   #$00, D0
		move.b  $0034(A0), D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		rts
loc_1B634:
		moveq   #$00, D0
		move.b  $0034(A0), D0
		add.w   $0032(A0), D0
		move.w  D0, $000C(A0)
		rts
loc_1B644:
		moveq   #$00, D0
		move.b  $0034(A0), D0
		neg.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $0008(A0)
		rts
loc_1B656:
		tst.w   $0038(A0)
		beq.s   loc_1B67A
		move.b  (Timer_frames+1).w, D0
		andi.b  #$3F, D0
		bne.s   loc_1B6D6
		clr.w   $0038(A0)
		tst.b   $0001(A0)
		bpl.s   loc_1B67A
		move.w  #$00B6, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1B67A:
		tst.w   $0036(A0)
		beq.s   loc_1B6B6
		subi.w  #$0800, $0034(A0)
		bcc.s   loc_1B6D6
		move.w  #$0000, $0034(A0)
		move.w  #$0000, $0036(A0)
		move.w  #$0001, $0038(A0)
		addq.b  #$01, $0025(A0)
		andi.b  #$03, $0025(A0)
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.b  D0, $001A(A0)
		move.b  loc_1B6D8(PC, D0), $0020(A0)
		rts
loc_1B6B6:
		addi.w  #$0800, $0034(A0)
		cmpi.w  #$2000, $0034(A0)
		bcs.s   loc_1B6D6
		move.w  #$2000, $0034(A0)
		move.w  #$0001, $0036(A0)
		move.w  #$0001, $0038(A0)
loc_1B6D6:
		rts
loc_1B6D8:
		dc.b    $84, $A6, $84, $A6  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj68_MapUnc_1B6DC:	BINCLUDE	"mappings/sprite/obj68.bin"

;=============================================================================== 
; Object 0x68 - Metropolis - Block with Arrow
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x6D - Metropolis - Floor Harpoon
; [ Begin ]		         
;===============================================================================  
Obj_0x6D_Harpoon: ; loc_1B720:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1B72E(PC, D0), D1
		jmp     loc_1B72E(PC, D1)
loc_1B72E:
		dc.w    loc_1B732-loc_1B72E
		dc.w    loc_1B76C-loc_1B72E
loc_1B732:
		addq.b  #$02, $0024(A0)
		move.l  #Obj68_MapUnc_1B6DC, $0004(A0) ; loc_1B6DC
		move.w  #$241C, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_13 ; loc_1B7FC
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0019(A0)
		move.b  #$04, $0018(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  #$84, $0020(A0)
loc_1B76C:
		bsr.w     loc_1B788
		moveq   #$00, D0
		move.b  $0034(A0), D0
		neg.w   D0
		add.w   $0032(A0), D0
		move.w  D0, $000C(A0)
		move.w  $0030(A0), D0
		bra.w     loc_1B808
loc_1B788:
		tst.w   $003A(A0)
		beq.s   loc_1B794
		subq.w  #$01, $003A(A0)
		rts
loc_1B794:
		tst.w   $0038(A0)
		beq.s   loc_1B7AC
		move.b  (Timer_frames+1).w, D0
		sub.b   $0028(A0), D0
		andi.b  #$7F, D0
		bne.s   loc_1B7EE
		clr.w   $0038(A0)
loc_1B7AC:
		tst.w   $0036(A0)
		beq.s   loc_1B7CE
		subi.w  #$0400, $0034(A0)
		bcc.s   loc_1B7EE
		move.w  #$0000, $0034(A0)
		move.w  #$0000, $0036(A0)
		move.w  #$0001, $0038(A0)
		rts
loc_1B7CE:
		addi.w  #$0400, $0034(A0)
		cmpi.w  #$2000, $0034(A0)
		bcs.s   loc_1B7EE
		move.w  #$2000, $0034(A0)
		move.w  #$0001, $0036(A0)
		move.w  #$0003, $003A(A0)
loc_1B7EE:
		rts
;=============================================================================== 
; Object 0x6D - Metropolis - Floor Harpoon
; [ End ]		         
;===============================================================================  

J_MarkObjGone_0F: ; loc_1B7F0:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_05: ; loc_1B7F6:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_13: ; loc_1B7FC:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_08: ; loc_1B802:
		jmp     SolidObject             ; (loc_F4A0)
loc_1B808:
		jmp     (loc_D2D8)       
		dc.w    $0000		   ; Filler       
;=============================================================================== 
; Object 0x69 - Metropolis - Screew Nut
; [ Begin ]		         
;===============================================================================		   
Obj_0x69_Screw_Nut: ; loc_1B810:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1B81E(PC, D0), D1
		jmp     loc_1B81E(PC, D1)
loc_1B81E:
		dc.w    loc_1B826-loc_1B81E
		dc.w    loc_1B868-loc_1B81E
		dc.w    loc_1B982-loc_1B81E
		dc.w    loc_1B880-loc_1B81E
loc_1B826:
		addq.b  #$02, $0024(A0)
		move.l  #Obj69_MapUnc_1B9A6, $0004(A0) ; loc_1B9A6
		move.w  #$2500, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_14 ; loc_1BA16
		move.b  #$04, $0001(A0)
		move.b  #$20, $0019(A0)
		move.b  #$0B, $0016(A0)
		move.b  #$04, $0018(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  $0028(A0), D0
		andi.w  #$007F, D0
		lsl.w   #$03, D0
		move.w  D0, $0036(A0)
loc_1B868:
		lea     ($FFFFB000).w, A1
		lea     $0038(A0), A4
		moveq   #$03, D6
		bsr.s   loc_1B898
		lea     ($FFFFB040).w, A1
		lea     $003C(A0), A4
		moveq   #$04, D6
		bsr.s   loc_1B898
loc_1B880:
		move.w  #$002B, D1
		move.w  #$000C, D2
		move.w  #$000D, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_09        ; loc_1BA1C
		bra.w     J_MarkObjGone_10        ; loc_1BA10
loc_1B898:
		btst    D6, $0022(A0)
		bne.s   loc_1B8A0
		clr.b   (A4)
loc_1B8A0:
		moveq   #$00, D0
		move.b  (A4), D0
		move.w  loc_1B8AC(PC, D0), D0
		jmp     loc_1B8AC(PC, D0)
loc_1B8AC:
		dc.w    loc_1B8B2-loc_1B8AC
		dc.w    loc_1B8D2-loc_1B8AC
		dc.w    loc_1B8F4-loc_1B8AC
loc_1B8B2:
		btst    D6, $0022(A0)
		bne.s   loc_1B8BA
		rts
loc_1B8BA:
		addq.b  #$02, (A4)
		move.b  #$00, $0001(A4)
		move.w  $0008(A0), D0
		sub.w   $0008(A1), D0
		bcc.s   loc_1B8D2
		move.b  #$01, $0001(A4)
loc_1B8D2:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		tst.b   $0001(A4)
		beq.s   loc_1B8E4
		addi.w  #$000F, D0
loc_1B8E4:
		cmpi.w  #$0010, D0
		bcc.s   loc_1B8F2
		move.w  $0008(A0), $0008(A1)
		addq.b  #$02, (A4)
loc_1B8F2:
		rts
loc_1B8F4:
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		bcc.s   loc_1B95A
		add.w   D0, $0034(A0)
		move.w  $0008(A0), $0008(A1)
		move.w  $0034(A0), D0
		asr.w   #$03, D0
		move.w  D0, D1
		asr.w   #$01, D0
		andi.w  #$0003, D0
		move.b  D0, $001A(A0)
		neg.w   D1
		add.w   $0032(A0), D1
		move.w  D1, $000C(A0)
		sub.w   $0032(A0), D1
		move.w  $0036(A0), D0
		cmp.w   D0, D1
		blt.s   loc_1B958
		move.w  D0, D1
		add.w   $0032(A0), D1
		move.w  D1, $000C(A0)
		lsl.w   #$03, D0
		neg.w   D0
		move.w  D0, $0034(A0)
		move.b  #$00, $001A(A0)
		tst.b   $0028(A0)
		bmi.s   loc_1B952
		clr.b   (A4)
		rts
loc_1B952:
		move.b  #$04, $0024(A0)
loc_1B958:
		rts
loc_1B95A:
		add.w   D0, $0034(A0)
		move.w  $0008(A0), $0008(A1)
		move.w  $0034(A0), D0
		asr.w   #$03, D0
		move.w  D0, D1
		asr.w   #$01, D0
		andi.w  #$0003, D0
		move.b  D0, $001A(A0)
		neg.w   D1
		add.w   $0032(A0), D1
		move.w  D1, $000C(A0)
		rts
loc_1B982:
		bsr.w     J_SpeedToPos_09         ; loc_1BA22
		addi.w  #$0038, $0012(A0)
		bsr.w     J_ObjHitFloor_00        ; loc_1BA28
		tst.w   D1
		bpl.w    loc_1B9A2
		add.w   D1, $000C(A0)
		clr.w   $0012(A0)
		addq.b  #$02, $0024(A0)
loc_1B9A2:
		bra.w     loc_1B880     
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj69_MapUnc_1B9A6:	BINCLUDE	"mappings/sprite/obj69.bin"
; ===========================================================================
		nop

J_MarkObjGone_10: ; loc_1BA10:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_14: ; loc_1BA16:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_09: ; loc_1BA1C:
		jmp     SolidObject             ; (loc_F4A0)
J_SpeedToPos_09: ; loc_1BA22:
		jmp     SpeedToPos              ; (loc_D27A)
J_ObjHitFloor_00: ; loc_1BA28:
		jmp     ObjHitFloor             ; (loc_13898)
		dc.w    $0000		   ; Filler		     
;=============================================================================== 
; Object 0x6A - Dust Hill - Three Rotating Boxes
; [ Begin ]		         
;===============================================================================		  
Obj_0x6A_Rotating_Boxes: ; loc_1BA30:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1BA3E(PC, D0), D1
		jmp     loc_1BA3E(PC, D1)
loc_1BA3E:
		dc.w    loc_1BA44-loc_1BA3E
		dc.w    loc_1BB5E-loc_1BA3E
		dc.w    loc_1BBE6-loc_1BA3E
loc_1BA44:
		addq.b  #$02, $0024(A0)
		move.l  #Obj65_MapUnc_1AE2C, $0004(A0) ; loc_1AE2C
		move.w  #$6000, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$20, $0019(A0)
		move.b  #$0C, $0016(A0)
		move.l  #loc_1BC5C, $002C(A0)
		move.b  #$01, $001A(A0)
		cmpi.b  #dust_hill_zone, (Current_Zone).w
		bne.w    loc_1BB44
		addq.b  #$02, $0024(A0)
		move.l  #Obj6A_MapUnc_1BCB0, $0004(A0) ; loc_1BCB0
		move.w  #$63D4, $0002(A0)
		move.b  #$20, $0019(A0)
		move.b  #$20, $0016(A0)
		move.l  #loc_1BC74, $002C(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_1BABC
		move.l  #loc_1BC92, $002C(A0)
loc_1BABC:
		move.b  #$00, $001A(A0)
		cmpi.b  #$18, $0028(A0)
		bne.w    loc_1BB50
		bsr.w     J_SingleObjLoad2_06  ; loc_1BCD4
		bne.s   loc_1BB1C
		bsr.s   loc_1BB1E
		addi.w  #$0040, $0008(A1)
		addi.w  #$0040, $000C(A1)
		move.b  #$06, $0028(A1)
		btst    #$00, $0022(A0)
		beq.s   loc_1BAF4
		move.b  #$0C, $0028(A1)
loc_1BAF4:
		bsr.w     J_SingleObjLoad2_06  ; loc_1BCD4
		bne.s   loc_1BB1C
		bsr.s   loc_1BB1E
		subi.w  #$0040, $0008(A1)
		addi.w  #$0040, $000C(A1)
		move.b  #$0C, $0028(A1)
		btst    #$00, $0022(A0)
		beq.s   loc_1BB1C
		move.b  #$06, $0028(A1)
loc_1BB1C:
		bra.s   loc_1BB44
loc_1BB1E:
		_move.b  0(A0), 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0008(A0), $0032(A1)
		move.w  $000C(A0), $0030(A1)
		move.b  $0022(A0), $0022(A1)
		rts
loc_1BB44:
		move.w  $0008(A0), $0032(A0)
		move.w  $000C(A0), $0030(A0)
loc_1BB50:
		bsr.w     J_Adjust2PArtPointer_15 ; loc_1BCDA
		move.b  $0028(A0), $0038(A0)
		bra.w     loc_1BC22
loc_1BB5E:
		move.w  $0008(A0), -(A7)
		tst.w   $0036(A0)
		bne.s   loc_1BBAE
		move.b  $003C(A0), D1
		move.b  $0022(A0), D0
		btst    #$03, D0
		bne.s   loc_1BB8A
		btst    #$03, D1
		beq.s   loc_1BB8E
		move.b  #$01, $0036(A0)
		move.b  #$00, $003C(A0)
		bra.s   loc_1BBBE
loc_1BB8A:
		move.b  D0, $003C(A0)
loc_1BB8E:
		btst    #$04, D0
		bne.s   loc_1BBA8
		btst    #$04, D1
		beq.s   loc_1BBBE
		move.b  #$01, $0036(A0)
		move.b  #$00, $003C(A0)
		bra.s   loc_1BBBE
loc_1BBA8:
		move.b  D0, $003C(A0)
		bra.s   loc_1BBBE
loc_1BBAE:
		jsr     SpeedToPos              ; (loc_D27A)
		subq.w  #$01, $0034(A0)
		bne.s   loc_1BBBE
		bsr.w     loc_1BC22
loc_1BBBE:
		move.w  (A7)+, D4
		tst.b   $0001(A0)
		bpl.s   loc_1BBDE
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_0A        ; loc_1BCE0
loc_1BBDE:
		move.w  $0032(A0), D0
		bra.w     loc_1BCE6
loc_1BBE6:
		move.w  $0008(A0), -(A7)
		jsr     SpeedToPos              ; (loc_D27A)
		subq.w  #$01, $0034(A0)
		bne.s   loc_1BBFA
		bsr.w     loc_1BC22
loc_1BBFA:
		move.w  (A7)+, D4
		tst.b   $0001(A0)
		bpl.s   loc_1BC1A
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_0A        ; loc_1BCE0
loc_1BC1A:
		move.w  $0032(A0), D0
		bra.w     loc_1BCE6
loc_1BC22:
		moveq   #$00, D0
		move.b  $0038(A0), D0
		move.l  $002C(A0), A1
		lea     $00(A1, D0), A1
		move.w  (A1)+, $0010(A0)
		move.w  (A1)+, $0012(A0)
		move.w  (A1)+, $0034(A0)
		move.w  #$0007, $003A(A0)
		move.b  #$00, $0036(A0)
		addq.b  #$06, $0038(A0)
		cmpi.b  #$18, $0038(A0)
		bcs.s   loc_1BC5A
		move.b  #$00, $0038(A0)
loc_1BC5A:
		rts    
loc_1BC5C:
		dc.w    $0000, $0400, $0010, $0400, $FE00, $0020, $0000, $0400
		dc.w    $0010, $FC00, $FE00, $0020
loc_1BC74:
		dc.w    $0000, $0100, $0040, $FF00, $0000, $0080, $0000, $FF00
		dc.w    $0040, $0100, $0000, $0080, $0100, $0000, $0040
loc_1BC92:
		dc.w    $0000, $0100, $0040, $0100, $0000, $0080, $0000, $FF00
		dc.w    $0040, $FF00, $0000, $0080, $FF00, $0000, $0040
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6A_MapUnc_1BCB0:	BINCLUDE	"mappings/sprite/obj77.bin"
; ===========================================================================
J_SingleObjLoad2_06: ; loc_1BCD4:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_15: ; loc_1BCDA:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_0A: ; loc_1BCE0:
		jmp     SolidObject             ; (loc_F4A0)
loc_1BCE6:
		jmp     (loc_D2D8)		
;=============================================================================== 
; Object 0x6B - Metropolis Platforms / Chemical Plant - Block
; [ Begin ]		         
;===============================================================================   
Obj_0x6B_Mz_Platform: ; Obj_0x6B_Block: ; loc_1BCEC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1BCFA(PC, D0), D1
		jmp     loc_1BCFA(PC, D1)
loc_1BCFA:
		dc.w    loc_1BD06-loc_1BCFA
		dc.w    loc_1BD88-loc_1BCFA
loc_1BCFE:
		dc.b    $20, $0C, $01, $00, $10, $10, $00, $00
loc_1BD06:
		addq.b  #$02, $0024(A0)
		move.l  #Obj65_MapUnc_1AE2C, $0004(A0) ; loc_1AE2C
		move.w  #$6000, $0002(A0)
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		bne.s   loc_1BD2E
		move.l  #Obj6B_MapUnc_1BF4A, $0004(A0)       ; loc_1BF4A
		move.w  #$6418, $0002(A0)
loc_1BD2E:
		bsr.w     J_Adjust2PArtPointer_16 ; loc_1BF58
		move.b  #$04, $0001(A0)
		move.b  #$03, $0018(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$02, D0
		andi.w  #$001C, D0
		lea     loc_1BCFE(PC, D0), A2
		move.b  (A2)+, $0019(A0)
		move.b  (A2)+, $0016(A0)
		move.b  (A2)+, $001A(A0)
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0030(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		subq.w  #$08, D0
		bcs.s   loc_1BD88
		lsl.w   #$02, D0
		lea     (Oscillating_Data+$2A).w, A2
		lea     $00(A2, D0), A2
		tst.w   (A2)
		bpl.s   loc_1BD88
		bchg    #0, $0022(A0)
loc_1BD88:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		add.w   D0, D0
		move.w  loc_1BDC8(PC, D0), D1
		jsr     loc_1BDC8(PC, D1)
		move.w  (A7)+, D4
		tst.b   $0001(A0)
		bpl.s   loc_1BDC0
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_0B        ; loc_1BF5E
loc_1BDC0:
		move.w  $0034(A0), D0
		bra.w     loc_1BF64
loc_1BDC8:
		dc.w    loc_1BDE0-loc_1BDC8
		dc.w    loc_1BDE2-loc_1BDC8
		dc.w    loc_1BDEE-loc_1BDC8
		dc.w    loc_1BE10-loc_1BDC8
		dc.w    loc_1BE1C-loc_1BDC8
		dc.w    loc_1BE3E-loc_1BDC8
		dc.w    loc_1BE5C-loc_1BDC8
		dc.w    loc_1BDE0-loc_1BDC8
		dc.w    loc_1BE8A-loc_1BDC8
		dc.w    loc_1BE9C-loc_1BDC8
		dc.w    loc_1BEAC-loc_1BDC8
		dc.w    loc_1BEBC-loc_1BDC8
loc_1BDE0:
		rts
loc_1BDE2:
		move.w  #$0040, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+8).w, D0
		bra.s   loc_1BDF8
loc_1BDEE:
		move.w  #$0080, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$1C).w, D0
loc_1BDF8:
		btst    #$00, $0022(A0)
		beq.s   loc_1BE04
		neg.w   D0
		add.w   D1, D0
loc_1BE04:
		move.w  $0034(A0), D1
		sub.w   D0, D1
		move.w  D1, $0008(A0)
		rts
loc_1BE10:
		move.w  #$0040, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+8).w, D0
		bra.s   loc_1BE26
loc_1BE1C:
		move.w  #$0080, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$1C).w, D0
loc_1BE26:
		btst    #$00, $0022(A0)
		beq.s   loc_1BE32
		neg.w   D0
		add.w   D1, D0
loc_1BE32:
		move.w  $0030(A0), D1
		sub.w   D0, D1
		move.w  D1, $000C(A0)
		rts
loc_1BE3E:
		move.b  (Oscillating_Data).w, D0
		lsr.w   #$01, D0
		add.w   $0030(A0), D0
		move.w  D0, $000C(A0)
		move.b  $0022(A0), D1
		andi.b  #$18, D1
		beq.s   loc_1BE5A
		addq.b  #$01, $0028(A0)
loc_1BE5A:
		rts
loc_1BE5C:
		move.l  $000C(A0), D3
		move.w  $0012(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D3
		move.l  D3, $000C(A0)
		addi.w  #$0008, $0012(A0)
		move.w  (Camera_Max_Y_pos_now).w, D0
		addi.w  #$00E0, D0
		cmp.w   $000C(A0), D0
		bcc.s   loc_1BE88
		move.b  #$00, $0028(A0)
loc_1BE88:
		rts
loc_1BE8A:
		move.w  #$0010, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$28).w, D0
		lsr.w   #$01, D0
		move.w  (Oscillating_Data+$2A).w, D3
		bra.s   loc_1BECA
loc_1BE9C:
		move.w  #$0030, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$2C).w, D0
		move.w  (Oscillating_Data+$2E).w, D3
		bra.s   loc_1BECA
loc_1BEAC:
		move.w  #$0050, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$30).w, D0
		move.w  (Oscillating_Data+$32).w, D3
		bra.s   loc_1BECA
loc_1BEBC:
		move.w  #$0070, D1
		moveq   #$00, D0
		move.b  (Oscillating_Data+$34).w, D0
		move.w  (Oscillating_Data+$36).w, D3
loc_1BECA:
		tst.w   D3
		bne.s   loc_1BED8
		addq.b  #$01, $0022(A0)
		andi.b  #$03, $0022(A0)
loc_1BED8:
		move.b  $0022(A0), D2
		andi.b  #$03, D2
		bne.s   loc_1BEF8
		sub.w   D1, D0
		add.w   $0034(A0), D0
		move.w  D0, $0008(A0)
		neg.w   D1
		add.w   $0030(A0), D1
		move.w  D1, $000C(A0)
		rts
loc_1BEF8:
		subq.b  #$01, D2
		bne.s   loc_1BF16
		subq.w  #$01, D1
		sub.w   D1, D0
		neg.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $000C(A0)
		addq.w  #$01, D1
		add.w   $0034(A0), D1
		move.w  D1, $0008(A0)
		rts
loc_1BF16:
		subq.b  #$01, D2
		bne.s   loc_1BF34
		subq.w  #$01, D1
		sub.w   D1, D0
		neg.w   D0
		add.w   $0034(A0), D0
		move.w  D0, $0008(A0)
		addq.w  #$01, D1
		add.w   $0030(A0), D1
		move.w  D1, $000C(A0)
		rts
loc_1BF34:
		sub.w   D1, D0
		add.w   $0030(A0), D0
		move.w  D0, $000C(A0)
		neg.w   D1
		add.w   $0034(A0), D1
		move.w  D1, $0008(A0)
		rts 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6B_MapUnc_1BF4A:	BINCLUDE	"mappings/sprite/obj6B.bin"
; ===========================================================================
		nop

J_Adjust2PArtPointer_16: ; loc_1BF58:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_0B: ; loc_1BF5E:
		jmp     SolidObject             ; (loc_F4A0)
loc_1BF64:
		jmp     (loc_D2D8)    
		dc.w    $0000		   ; Filler      
;=============================================================================== 
; Object 0x6C - Moving platforms - clockwise
; [ Begin ]		         
;===============================================================================		  
Obj_0x6C_Mz_Moving_Platforms: ; loc_1BF6C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1BF94(PC, D0), D1
		jsr     loc_1BF94(PC, D1)
		move.w  $0030(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1BF90
		bra.w     J_DisplaySprite_0A      ; loc_1C2C0
loc_1BF90:
		bra.w     J_DeleteObject_1A       ; loc_1C2C6
loc_1BF94:
		dc.w    loc_1BF98-loc_1BF94
		dc.w    loc_1C0A0-loc_1BF94
loc_1BF98:
		move.b  $0028(A0), D0
		bmi.w    loc_1C04A
		addq.b  #$02, $0024(A0)
		move.l  #Obj6C_MapUnc_1C2AA, $0004(A0) ; loc_1C2AA
		move.w  #$63F9, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$04, $0018(A0)
		bsr.w     J_Adjust2PArtPointer_17 ; loc_1C2D2
		move.b  #$00, $001A(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.w  D0, D1
		lsr.w   #$03, D0
		andi.w  #$001E, D0
		lea     loc_1C18A(PC), A2
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, $0038(A0)
		move.l  A2, $003C(A0)
		andi.w  #$000F, D1
		lsl.w   #$02, D1
		move.b  D1, $0038(A0)
		move.b  #$04, $003A(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_1C02A
		neg.b   $003A(A0)
		moveq   #$00, D1
		move.b  $0038(A0), D1
		add.b   $003A(A0), D1
		cmp.b   $0039(A0), D1
		bcs.s   loc_1C026
		move.b  D1, D0
		moveq   #$00, D1
		tst.b   D0
		bpl.s   loc_1C026
		move.b  $0039(A0), D1
		subq.b  #$04, D1
loc_1C026:
		move.b  D1, $0038(A0)
loc_1C02A:
		move.w  $00(A2, D1), D0
		add.w   $0030(A0), D0
		move.w  D0, $0034(A0)
		move.w  $02(A2, D1), D0
		add.w   $0032(A0), D0
		move.w  D0, $0036(A0)
		bsr.w     loc_1C112
		bra.w     loc_1C0A0
loc_1C04A:
		andi.w  #$007F, D0
		add.w   D0, D0
		lea     (loc_1C20E).l, A2    
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D1
		move.l  A0, A1
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		bra.s   loc_1C06E
loc_1C068:		
		bsr.w     J_SingleObjLoad_05   ; loc_1C2CC
		bne.s   loc_1C098
loc_1C06E:
		_move.b  #$6C, 0(A1)
		move.w  (A2)+, D0
		add.w   D2, D0
		move.w  D0, $0008(A1)
		move.w  (A2)+, D0
		add.w   D3, D0
		move.w  D0, $000C(A1)
		move.w  D2, $0030(A1)
		move.w  D3, $0032(A1)
		move.w  (A2)+, D0
		move.b  D0, $0028(A1)
		move.b  $0022(A0), $0022(A1)
loc_1C098:
		dbf    D1, loc_1C068
		addq.l  #$04, A7
		rts
loc_1C0A0:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_1C0B6
		moveq   #$00, D1
		move.b  $0019(A0), D1
		moveq   #$08, D3
		move.w  (A7)+, D4
		bra.w     loc_1C2D8
loc_1C0B6:
		move.w  $0008(A0), D0
		cmp.w   $0034(A0), D0
		bne.s   loc_1C10C
		move.w  $000C(A0), D0
		cmp.w   $0036(A0), D0
		bne.s   loc_1C10C
		moveq   #$00, D1
		move.b  $0038(A0), D1
		add.b   $003A(A0), D1
		cmp.b   $0039(A0), D1
		bcs.s   loc_1C0E8
		move.b  D1, D0
		moveq   #$00, D1
		tst.b   D0
		bpl.s   loc_1C0E8
		move.b  $0039(A0), D1
		subq.b  #$04, D1
loc_1C0E8:
		move.b  D1, $0038(A0)
		move.l  $003C(A0), A1
		move.w  $00(A1, D1), D0
		add.w   $0030(A0), D0
		move.w  D0, $0034(A0)
		move.w  $02(A1, D1), D0
		add.w   $0032(A0), D0
		move.w  D0, $0036(A0)
		bsr.w     loc_1C112
loc_1C10C:
		bsr.w     J_SpeedToPos_0A         ; loc_1C2DE
		rts
loc_1C112:
		moveq   #$00, D0
		move.w  #$FF00, D2
		move.w  $0008(A0), D0
		sub.w   $0034(A0), D0
		bcc.s   loc_1C126
		neg.w   D0
		neg.w   D2
loc_1C126:
		moveq   #$00, D1
		move.w  #$FF00, D3
		move.w  $000C(A0), D1
		sub.w   $0036(A0), D1
		bcc.s   loc_1C13A
		neg.w   D1
		neg.w   D3
loc_1C13A:
		cmp.w   D0, D1
		bcs.s   loc_1C164
		move.w  $0008(A0), D0
		sub.w   $0034(A0), D0
		beq.s   loc_1C150
		ext.l   D0
		asl.l   #$08, D0
		divs.w  D1, D0
		neg.w   D0
loc_1C150:
		move.w  D0, $0010(A0)
		move.w  D3, $0012(A0)
		swap  D0
		move.w  D0, $000A(A0)
		clr.w   $000E(A0)
		rts
loc_1C164:
		move.w  $000C(A0), D1
		sub.w   $0036(A0), D1
		beq.s   loc_1C176
		ext.l   D1
		asl.l   #$08, D1
		divs.w  D0, D1
		neg.w   D1
loc_1C176:
		move.w  D1, $0012(A0)
		move.w  D2, $0010(A0)
		swap  D1
		move.w  D1, $000E(A0)
		clr.w   $000A(A0)
		rts    
loc_1C18A:
		dc.w    loc_1C190-loc_1C18A
		dc.w    loc_1C1BA-loc_1C18A
		dc.w    loc_1C1E4-loc_1C18A
loc_1C190:
		dc.w    $0028
		dc.b    $00, $00, $00, $00, $FF, $EA, $00, $0A, $FF, $E0, $00, $20, $FF, $E0, $00, $E0
		dc.b    $FF, $EA, $00, $F6, $00, $00, $01, $00, $00, $16, $00, $F6, $00, $20, $00, $E0
		dc.b    $00, $20, $00, $20, $00, $16, $00, $0A
loc_1C1BA:
		dc.w    $0028
		dc.b    $00, $00, $00, $00, $FF, $EA, $00, $0A, $FF, $E0, $00, $20, $FF, $E0, $01, $60
		dc.b    $FF, $EA, $01, $76, $00, $00, $01, $80, $00, $16, $01, $76, $00, $20, $01, $60
		dc.b    $00, $20, $00, $20, $00, $16, $00, $0A
loc_1C1E4:
		dc.w    $0028
		dc.b    $00, $00, $00, $00, $FF, $EA, $00, $0A, $FF, $E0, $00, $20, $FF, $E0, $01, $E0
		dc.b    $FF, $EA, $01, $F6, $00, $00, $02, $00, $00, $16, $01, $F6, $00, $20, $01, $E0
		dc.b    $00, $20, $00, $20, $00, $16, $00, $0A		
loc_1C20E: 
		dc.w    loc_1C214-loc_1C20E
		dc.w    loc_1C246-loc_1C20E
		dc.w    loc_1C278-loc_1C20E
loc_1C214:
		dc.w    $0007
		dc.b    $00, $00, $00, $00, $00, $01, $FF, $E0, $00, $3A, $00, $03, $FF, $E0, $00, $80
		dc.b    $00, $03, $FF, $E0, $00, $C6, $00, $03, $00, $00, $01, $00, $00, $06, $00, $20
		dc.b    $00, $C6, $00, $08, $00, $20, $00, $80, $00, $08, $00, $20, $00, $3A, $00, $08  
loc_1C246:
		dc.w    $0007
		dc.b    $00, $00, $00, $00, $00, $11, $FF, $E0, $00, $5A, $00, $13, $FF, $E0, $00, $C0
		dc.b    $00, $13, $FF, $E0, $01, $26, $00, $13, $00, $00, $01, $80, $00, $16, $00, $20
		dc.b    $01, $26, $00, $18, $00, $20, $00, $C0, $00, $18, $00, $20, $00, $5A, $00, $18		
loc_1C278:
		dc.w    $0007
		dc.b    $00, $00, $00, $00, $00, $21, $FF, $E0, $00, $7A, $00, $23, $FF, $E0, $01, $00
		dc.b    $00, $23, $FF, $E0, $01, $86, $00, $23, $00, $00, $02, $00, $00, $26, $00, $20
		dc.b    $01, $86, $00, $28, $00, $20, $01, $00, $00, $28, $00, $20, $00, $7A, $00, $28
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6C_MapUnc_1C2AA:	BINCLUDE	"mappings/sprite/obj6C.bin"
; ===========================================================================
		nop

J_DisplaySprite_0A: ; loc_1C2C0:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_1A: ; loc_1C2C6:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_05: ; loc_1C2CC:
		jmp     SingleObjLoad        ; (loc_E772)
J_Adjust2PArtPointer_17: ; loc_1C2D2:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1C2D8:
		jmp     (PlatformObject)
J_SpeedToPos_0A: ; loc_1C2DE:
		jmp     SpeedToPos              ; (loc_D27A)    
;=============================================================================== 
; Object 0x6E - Metropolis - Machine
; [ Begin ]		         
;===============================================================================		   
Obj_0x6E_Machine: ; loc_1C2E4:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1C2F2(PC, D0), D1
		jmp     loc_1C2F2(PC, D1)
loc_1C2F2:
		dc.w    loc_1C300-loc_1C2F2
		dc.w    loc_1C36A-loc_1C2F2
		dc.w    loc_1C3F4-loc_1C2F2
loc_1C2F8: 
		dc.b    $10, $0C, $28, $08, $60, $18, $0C, $0C
loc_1C300:
		addq.b  #$02, $0024(A0)
		move.l  #Obj6E_MapUnc_1C464, $0004(A0) ; loc_1C464
		move.w  #$6000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_18 ; loc_1C4EC
loc_1C316:
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$000E, D0
		lea     loc_1C2F8(PC, D0), A3
		move.b  (A3)+, $0019(A0)
		move.b  (A3)+, $0016(A0)
		lsr.w   #$01, D0
		move.b  D0, $001A(A0)
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0030(A0)
		cmpi.b  #$03, D0
		bne.s   loc_1C36A
		addq.b  #$02, $0024(A0)
		move.w  #$63F0, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_18 ; loc_1C4EC
		move.b  #$05, $0018(A0)
		bra.w     loc_1C3F4
loc_1C36A:
		move.w  $0008(A0), -(A7)
		move.b  (Oscillating_Data+$20).w, D1
		subi.b  #$38, D1
		ext.w   D1
		move.b  (Oscillating_Data+$24).w, D2
		subi.b  #$38, D2
		ext.w   D2
		btst    #$00, $0028(A0)
		beq.s   loc_1C38E
		neg.w   D1
		neg.w   D2
loc_1C38E:
		btst    #$01, $0028(A0)
		beq.s   loc_1C39A
		neg.w   D1
		exg.l   D1, D2
loc_1C39A:
		add.w   $0034(A0), D1
		move.w  D1, $0008(A0)
		add.w   $0030(A0), D2
		move.w  D2, $000C(A0)
		move.w  (A7)+, D4
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_0C        ; loc_1C4F2
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1C3DC
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1C3DC:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_1B       ; loc_1C3EE
		bclr    #$07, $02(A2, D0)
J_DeleteObject_1B: ; loc_1C3EE:
		jmp     DeleteObject            ; (loc_D3B4)
loc_1C3F4:
		move.b  (Oscillating_Data+$20).w, D1
		lsr.b   #$01, D1
		subi.b  #$1C, D1
		ext.w   D1
		move.b  (Oscillating_Data+$24).w, D2
		lsr.b   #$01, D2
		subi.b  #$1C, D2
		ext.w   D2
		btst    #$00, $0028(A0)
		beq.s   loc_1C418
		neg.w   D1
		neg.w   D2
loc_1C418:
		btst    #$01, $0028(A0)
		beq.s   loc_1C424
		neg.w   D1
		exg.l   D1, D2
loc_1C424:
		add.w   $0034(A0), D1
		move.w  D1, $0008(A0)
		add.w   $0030(A0), D2
		move.w  D2, $000C(A0)
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1C44C
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1C44C:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_1C       ; loc_1C45E
		bclr    #$07, $02(A2, D0)
J_DeleteObject_1C: ; loc_1C45E:
		jmp     DeleteObject            ; (loc_D3B4)   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6E_MapUnc_1C464:	BINCLUDE	"mappings/sprite/obj6E.bin"

;=============================================================================== 
; Object 0x6E - Metropolis - Machine
; [ End ]		         
;===============================================================================		   
J_Adjust2PArtPointer_18: ; loc_1C4EC:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_0C: ; loc_1C4F2:
		jmp     SolidObject             ; (loc_F4A0)   
;=============================================================================== 
; Object 0x6F - Metropolis - Parallelogram Elevators
; [ Begin ]		         
;===============================================================================		    
Obj_Ox6F_Parallelogram_Elevator: ; loc_1C4F8:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1C506(PC, D0), D1
		jmp     loc_1C506(PC, D1)
loc_1C506:
		dc.w    loc_1C50A-loc_1C506
		dc.w    loc_1C570-loc_1C506
loc_1C50A:
		addq.b  #$02, $0024(A0)
		move.l  #Obj6F_MapUnc_1C7BE, $0004(A0) ; loc_1C7BE
		move.w  #$653F, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_19 ; loc_1C844
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$80, $0019(A0)
		move.b  #$20, $0016(A0)
		move.w  $0008(A0), $0032(A0)
		move.w  $000C(A0), $0030(A0)
		move.b  $0028(A0), D0
		lsr.w   #$03, D0
		andi.w  #$000E, D0
		lea     (loc_1C632).l, A1
		move.w  $00(A1, D0), D0
		lea     $00(A1, D0), A1
		move.l  A1, $003C(A0)
		bsr.w     loc_1C604
		bset    #$07, $0022(A0)
		andi.b  #$0F, $0028(A0)
loc_1C570:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		add.w   D0, D0
		move.w  loc_1C5DA(PC, D0), D1
		jsr     loc_1C5DA(PC, D1)
		move.w  (A7)+, D4
		moveq   #$00, D1
		move.b  $0019(A0), D1
		lea     (loc_1C6BE).l, A2
		bsr.w     loc_1C84A
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1C5AE
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1C5AE:
		move.w  $0032(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1C5C2
		rts
loc_1C5C2:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_1D       ; loc_1C5D4
		bclr    #$07, $02(A2, D0)
J_DeleteObject_1D: ; loc_1C5D4:
		jmp     DeleteObject            ; (loc_D3B4)
loc_1C5DA:
		dc.w    loc_1C5E0-loc_1C5DA
		dc.w    loc_1C5E2-loc_1C5DA
		dc.w    loc_1C5F2-loc_1C5DA
loc_1C5E0:
		rts
loc_1C5E2:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_1C5F0
		addq.b  #$01, $0028(A0)
loc_1C5F0:
		rts
loc_1C5F2:
		jsr     SpeedToPos              ; (loc_D27A)
		subq.w  #$01, $0034(A0)
		bne.s   loc_1C602
		bsr.w     loc_1C604
loc_1C602:
		rts
loc_1C604:
		moveq   #$00, D0
		move.b  $0038(A0), D0
		move.l  $003C(A0), A1
		move.w  (A1)+, D1
		lea     $00(A1, D0), A1
		move.w  (A1)+, $0010(A0)
		move.w  (A1)+, $0012(A0)
		move.w  (A1)+, $0034(A0)
		addq.b  #$06, $0038(A0)
		cmp.b   $0038(A0), D1
		bhi.s   loc_1C630
		move.b  #$00, $0038(A0)
loc_1C630:
		rts   
loc_1C632:
		dc.w    loc_1C63C-loc_1C632
		dc.w    loc_1C64A-loc_1C632
		dc.w    loc_1C658-loc_1C632
		dc.w    loc_1C672-loc_1C632
		dc.w    loc_1C6A4-loc_1C632
loc_1C63C:
		dc.w    $000C
		dc.b    $01, $00, $FF, $80, $01, $00, $FF, $00, $00, $80, $01, $00
loc_1C64A:
		dc.w    $000C
		dc.b    $01, $00, $FF, $80, $01, $80, $FF, $00, $00, $80, $01, $80
loc_1C658:
		dc.w    $0018
		dc.b    $FF, $00, $00, $80, $00, $80, $FF, $00, $00, $00, $01, $80, $01, $00, $FF, $80
		dc.b    $00, $80, $01, $00, $00, $00, $01, $80
loc_1C672:
		dc.w    $0030
		dc.b    $01, $00, $FF, $80, $02, $00, $01, $00, $00, $00, $01, $00, $FF, $00, $00, $80
		dc.b    $01, $00, $01, $00, $00, $00, $01, $80, $FF, $00, $00, $00, $01, $80, $01, $00
		dc.b    $FF, $80, $01, $00, $FF, $00, $00, $00, $01, $00, $FF, $00, $00, $80, $02, $00
loc_1C6A4:
		dc.w    $0018
		dc.b    $FF, $00, $00, $80, $01, $80, $01, $00, $00, $00, $02, $00, $FF, $00, $00, $00
		dc.b    $02, $00, $01, $00, $FF, $80, $01, $80  
loc_1C6BE:
		dc.w    $E101, $E202, $E303, $E404, $E505, $E606, $E707, $E808
		dc.w    $E909, $EA0A, $EB0B, $EC0C, $ED0D, $EE0E, $EF0F, $F010
		dc.w    $F111, $F212, $F313, $F414, $F515, $F616, $F717, $F818
		dc.w    $F919, $FA1A, $FB1B, $FC1C, $FD1D, $FE1E, $FF1F, $0020
		dc.w    $0121, $0222, $0323, $0424, $0525, $0626, $0727, $0828
		dc.w    $0929, $0A2A, $0B2B, $0C2C, $0D2D, $0E2E, $0F2F, $1030
		dc.w    $1131, $1232, $1333, $1434, $1535, $1636, $1737, $1838
		dc.w    $1939, $1A3A, $1B3B, $1C3C, $1D3D, $1E3E, $1F3F, $2040
		dc.w    $2040, $203F, $203E, $203D, $203C, $203B, $203A, $2039
		dc.w    $2038, $2037, $2036, $2035, $2034, $2033, $2032, $2031
		dc.w    $2030, $202F, $202E, $202D, $202C, $202B, $202A, $2029
		dc.w    $2028, $2027, $2026, $2025, $2024, $2023, $2022, $2021
		dc.w    $2020, $201F, $201E, $201D, $201C, $201B, $201A, $2019
		dc.w    $2018, $2017, $2016, $2015, $2014, $2013, $2012, $2011
		dc.w    $2010, $200F, $200E, $200D, $200C, $200B, $200A, $2009
		dc.w    $2008, $2007, $2006, $2005, $2004, $2003, $2002, $2001   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj6F_MapUnc_1C7BE:	BINCLUDE	"mappings/sprite/obj6F.bin"
; ===========================================================================
		nop

J_Adjust2PArtPointer_19: ; loc_1C844:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1C84A:
		jmp     (loc_F59E)   
		
;=============================================================================== 
; Object 0x70 - Metropolis - Rotating Gears
; [ Begin ]		         
;===============================================================================		     
Obj_0x70_Rotating_Gears: ; loc_1C850:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1C85E(PC, D0), D1
		jmp     loc_1C85E(PC, D1)
loc_1C85E:
		dc.w    loc_1C862-loc_1C85E
		dc.w    loc_1C8E2-loc_1C85E
loc_1C862:
		moveq   #$07, D1
		moveq   #$00, D4
		lea     (loc_1C9B6).l, A2
		move.l  A0, A1
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		bset    #$07, $0022(A0)
		bra.s   loc_1C884
loc_1C87E:		
		bsr.w     J_SingleObjLoad2_07  ; loc_1CBB8
		bne.s   loc_1C8DE
loc_1C884:
		_move.b  0(A0), 0(A1)
		addq.b  #$02, $0024(A1)
		move.l  #Obj70_MapUnc_1CA16, $0004(A1) ; loc_1CA16
		move.w  #$6378, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_01 ; loc_1CBBE
		move.b  #$04, $0001(A1)
		move.b  #$04, $0018(A1)
		move.b  #$10, $0019(A1)
		move.w  D2, $0032(A1)
		move.w  D3, $0030(A1)
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D2, D0
		move.w  D0, $0008(A1)
		move.b  (A2)+, D0
		ext.w   D0
		add.w   D3, D0
		move.w  D0, $000C(A1)
		move.b  (A2)+, $001A(A1)
		move.w  D4, $0034(A1)
		addq.w  #$03, D4
		move.b  $0022(A0), $0022(A1)
loc_1C8DE:
		dbf    D1, loc_1C87E
loc_1C8E2:
		move.w  $0008(A0), -(A7)
		move.b  (Timer_frames+1).w, D0
		move.b  D0, D1
		andi.w  #$000F, D0
		bne.s   loc_1C95A
		move.w  $0036(A0), D1
		btst    #$00, $0022(A0)
		beq.s   loc_1C914
		subi.w  #$0018, D1
		bcc.s   loc_1C932
		moveq   #$48, D1
		subq.w  #$03, $0034(A0)
		bcc.s   loc_1C932
		move.w  #$0015, $0034(A0)
		bra.s   loc_1C932
loc_1C914:
		addi.w  #$0018, D1
		cmpi.w  #$0060, D1
		bcs.s   loc_1C932
		moveq   #$00, D1
		addq.w  #$03, $0034(A0)
		cmpi.w  #$0018, $0034(A0)
		bcs.s   loc_1C932
		move.w  #$0000, $0034(A0)
loc_1C932:
		move.w  D1, $0036(A0)
		add.w   $0034(A0), D1
		lea     loc_1C9B6(PC, D1), A1
		move.b  (A1)+, D0
		ext.w   D0
		add.w   $0032(A0), D0
		move.w  D0, $0008(A0)
		move.b  (A1)+, D0
		ext.w   D0
		add.w   $0030(A0), D0
		move.w  D0, $000C(A0)
		move.b  (A1)+, $001A(A0)
loc_1C95A:
		move.b  $001A(A0), D0
		add.w   D0, D0
		andi.w  #$001E, D0
		moveq   #$00, D1
		moveq   #$00, D2
		move.b  loc_1C996(PC, D0), D1
		move.b  loc_1C997(PC, D0), D2
		move.w  D2, D3
		move.w  (A7)+, D4
		bsr.w     J_SolidObject_0D        ; loc_1CBC4
		move.w  $0032(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   J_DeleteObject_1E       ; loc_1C990
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_1E: ; loc_1C990:
		jmp     DeleteObject            ; (loc_D3B4)   

loc_1C996:		  
		dc.b    $10
loc_1C997:
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $0C, $10
		dc.b    $08, $10, $0C, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10, $10
loc_1C9B6:
		dc.b    $00, $B8, $00, $32, $CE, $04, $48, $00, $08, $32, $32, $0C, $00, $48, $10, $CE
		dc.b    $32, $14, $B8, $00, $18, $CE, $CE, $1C, $0D, $B8, $01, $3F, $DA, $05, $48, $0C
		dc.b    $09, $27, $3C, $0D, $F3, $48, $11, $C1, $26, $15, $B8, $F4, $19, $D9, $C4, $1D
		dc.b    $19, $BC, $02, $46, $E9, $06, $46, $17, $0A, $19, $44, $0E, $E7, $44, $12, $BA
		dc.b    $17, $16, $BA, $E9, $1A, $E7, $BC, $1E, $27, $C4, $03, $48, $F4, $07, $3F, $26
		dc.b    $0B, $0D, $48, $0F, $D9, $3C, $13, $B8, $0C, $17, $C1, $DA, $1B, $F3, $B8, $1F
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj70_MapUnc_1CA16:	BINCLUDE	"mappings/sprite/obj70.bin"
; ===========================================================================
		nop

J_SingleObjLoad2_07: ; loc_1CBB8:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer2_01: ; loc_1CBBE:
		jmp     Adjust2PArtPointer2   ; (loc_DC4C)
J_SolidObject_0D: ; loc_1CBC4:
		jmp     SolidObject             ; (loc_F4A0)  
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x72 - Metropolis - Conveyor Belt Attributes
; [ Begin ]		         
;===============================================================================		   
Obj_0x72_Conveyor_Belt_Attributes: ; loc_1CBCC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1CBDA(PC, D0), D1
		jmp     loc_1CBDA(PC, D1)
loc_1CBDA:
		dc.w    loc_1CBDE-loc_1CBDA
		dc.w    loc_1CBFE-loc_1CBDA
loc_1CBDE:
		addq.b  #$02, $0024(A0)
		move.b  $0028(A0), D0
		lsl.b   #$04, D0
		move.b  D0, $0038(A0)
		move.w  #$0002, $0036(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_1CBFE
		neg.w   $0036(A0)
loc_1CBFE:
		lea     ($FFFFB000).w, A1
		bsr.s   loc_1CC0E
		lea     ($FFFFB040).w, A1
		bsr.s   loc_1CC0E
		bra.w     loc_1CC4C
loc_1CC0E:
		moveq   #$00, D2
		move.b  $0038(A0), D2
		move.w  D2, D3
		add.w   D3, D3
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		add.w   D2, D0
		cmp.w   D3, D0
		bcc.s   loc_1CC48
		move.w  $000C(A1), D1
		sub.w   $000C(A0), D1
		addi.w  #$0030, D1
		cmpi.w  #$0030, D1
		bcc.s   loc_1CC48
		btst    #$01, $0022(A1)
		bne.s   loc_1CC48
		move.w  $0036(A0), D0
		add.w   D0, $0008(A1)
loc_1CC48:
		rts
		
;=============================================================================== 
; Object 0x72 - Metropolis - Conveyor Belt Attributes
; [ End ]		         
;===============================================================================             
		nop		             ; Filler
loc_1CC4C:
		jmp     (loc_D30C)     
		dc.w    $000		    ; Filler
;=============================================================================== 
; Object 0x73 - Dust Hill - Rotating Rings - Sonic can walk Through
; [ Begin ]		         
;===============================================================================  
Obj_0x73_Rotating_Rings: ; loc_1CC54:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1CC62(PC, D0), D1
		jmp     loc_1CC62(PC, D1)
loc_1CC62:
		dc.w    loc_1CC68-loc_1CC62
		dc.w    loc_1CD56-loc_1CC62
		dc.w    loc_1CDFE-loc_1CC62
loc_1CC68:
		addq.b  #$02, $0024(A0)
		move.l  #MapUnc_Obj73_1CE1C, $0004(A0) ; loc_1CE1C
		move.w  #$26BC, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_1A ; loc_1CE3A
		move.b  #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$08, $0019(A0)
		move.w  $0008(A0), $003A(A0)
		move.w  $000C(A0), $0038(A0)
		move.b  #$00, $0020(A0)
		bset    #$07, $0022(A0)
		move.b  $0028(A0), D1
		andi.b  #$F0, D1
		ext.w   D1
		asl.w   #$03, D1
		move.w  D1, $003E(A0)
		move.b  $0022(A0), D0
		ror.b   #$02, D0
		andi.b  #$C0, D0
		move.b  D0, $0026(A0)
		lea     $0029(A0), A2
		move.b  $0028(A0), D1
		andi.w  #$0007, D1
		move.b  #$00, (A2)+
		move.w  D1, D3
		lsl.w   #$04, D3
		move.b  D3, $003C(A0)
		subq.w  #$01, D1
		bcs.s   loc_1CD48
		btst    #$03, $0028(A0)
		beq.s   loc_1CCEE
		subq.w  #$01, D1
		bcs.s   loc_1CD48
loc_1CCEE:
		bsr.w     J_SingleObjLoad_06   ; loc_1CE2E
		bne.s   loc_1CD48
		addq.b  #$01, $0029(A0)
		move.w  A1, D5
		subi.w  #$B000, D5
		lsr.w   #$06, D5
		andi.w  #$007F, D5
		move.b  D5, (A2)+
		move.b  #$04, $0024(A1)
		_move.b  0(A0), 0(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0018(A0), $0018(A1)
		move.b  $0019(A0), $0019(A1)
		move.b  $0020(A0), $0020(A1)
		move.b  $0022(A0), $0022(A1)
		subi.b  #$10, D3
		move.b  D3, $003C(A1)
		dbf    D1, loc_1CCEE
loc_1CD48:
		move.w  A0, D5
		subi.w  #$B000, D5
		lsr.w   #$06, D5
		andi.w  #$007F, D5
		move.b  D5, (A2)+
loc_1CD56:
		move.w  $0008(A0), -(A7)
		bsr.w     loc_1CD74
		move.w  #$0008, D1
		move.w  #$0008, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  (A7)+, D4
		bsr.w     J_SolidObject_0E        ; loc_1CE40
		bra.w     loc_1CDC6
loc_1CD74:
		move.w  $003E(A0), D0
		add.w   D0, $0026(A0)
		move.b  $0026(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		move.w  $0038(A0), D2
		move.w  $003A(A0), D3
		lea     $0029(A0), A2
		moveq   #$00, D6
		move.b  (A2)+, D6
loc_1CD96:		
		moveq   #$00, D4
		move.b  (A2)+, D4
		lsl.w   #$06, D4
		addi.l  #$FFFFB000, D4
		move.l  D4, A1
		moveq   #$00, D4
		move.b  $003C(A1), D4
		move.l  D4, D5
		muls.w  D0, D4
		asr.l   #$08, D4
		muls.w  D1, D5
		asr.l   #$08, D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  D4, $000C(A1)
		move.w  D5, $0008(A1)
		dbf    D6, loc_1CD96
		rts
loc_1CDC6:
		move.w  $003A(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_1CDDE
		bra.w     J_DisplaySprite_0B      ; loc_1CE28
loc_1CDDE:
		moveq   #$00, D2
		lea     $0029(A0), A2
		move.b  (A2)+, D2
loc_1CDE6:		
		moveq   #$00, D0
		move.b  (A2)+, D0
		lsl.w   #$06, D0
		addi.l  #$FFFFB000, D0
		move.l  D0, A1
		bsr.w     loc_1CE34
		dbf    D2, loc_1CDE6
		rts
loc_1CDFE:
		move.w  #$0008, D1
		move.w  #$0008, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0036(A0), D4
		bsr.w     J_SolidObject_0E        ; loc_1CE40
		move.w  $0008(A0), $0036(A0)
		bra.w     J_DisplaySprite_0B      ; loc_1CE28  
MapUnc_Obj73_1CE1C:		     
loc_1CE1C:
		dc.w    loc_1CE1E-loc_1CE1C
loc_1CE1E:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8		       
;=============================================================================== 
; Object 0x73 - Dust Hill - Rotating Rings - Sonic can walk Through
; [ End ]		         
;===============================================================================
J_DisplaySprite_0B: ; loc_1CE28:
		jmp     DisplaySprite           ; (loc_D3C2)
J_SingleObjLoad_06: ; loc_1CE2E:
		jmp     SingleObjLoad        ; (loc_E772)
loc_1CE34:
		jmp     (loc_D3B6)
J_Adjust2PArtPointer_1A: ; loc_1CE3A:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_0E: ; loc_1CE40:
		jmp     SolidObject             ; (loc_F4A0)      
		dc.w    $0000		   ; Filler     
;=============================================================================== 
; Object 0x75 - Dust Hill - Spikeball with chain
; [ Begin ]		         
;===============================================================================		
Obj_0x75_Spikeball_Chain: ; loc_1CE48:
		btst    #$06, $0001(A0)
		bne.w    loc_1CE60
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1CE68(PC, D0), D1
		jmp     loc_1CE68(PC, D1)
loc_1CE60:
		move.w  #$0280, D0
		bra.w     J_DisplaySprite_Param_00  ; loc_1D040
loc_1CE68:
		dc.w    loc_1CE6E-loc_1CE68
		dc.w    loc_1CF4A-loc_1CE68
		dc.w    loc_1CFEC-loc_1CE68
loc_1CE6E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj75_MapUnc_1D00A, $0004(A0) ; loc_1D00A
		move.w  #$2000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_1B ; loc_1D064
		move.b  #$04, $0001(A0)
		move.b  #$05, $0018(A0)
		move.b  #$10, $0019(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0032(A0)
		move.b  $0028(A0), D1
		move.b  D1, D0
		andi.w  #$000F, D1
		andi.b  #$F0, D0
		ext.w   D0
		asl.w   #$03, D0
		move.w  D0, $0034(A0)
		move.b  $0022(A0), D0
		ror.b   #$02, D0
		andi.b  #$C0, D0
		move.b  D0, $0026(A0)
		cmpi.b  #$0F, D1
		bne.s   loc_1CEDE
		addq.b  #$02, $0024(A0)
		move.b  #$04, $0018(A0)
		move.b  #$02, $001A(A0)
		rts
loc_1CEDE:
		move.b  #$9A, $0020(A0)
		bsr.w     J_SingleObjLoad2_08  ; loc_1D05E
		bne.s   loc_1CF4A
		_move.b  0(A0), 0(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  $0002(A0), $0002(A1)
		move.b  #$04, $0001(A1)
		bset    #$06, $0001(A1)
		move.b  #$40, $000E(A1)
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		move.b  D1, $000F(A1)
		subq.w  #$01, D1
		lea     $0010(A1), A2
loc_1CF20:		
		move.w  D2, (A2)+
		move.w  D3, (A2)+
		move.w  #$0001, (A2)+
		dbf    D1, loc_1CF20
		move.w  D2, $0008(A1)
		move.w  D3, $000C(A1)
		move.b  #$00, $000B(A1)
		move.l  A1, $003C(A0)
		move.b  #$40, $0014(A1)
		bset    #$04, $0001(A1)
loc_1CF4A:
		move.w  $0034(A0), D0
		add.w   D0, $0026(A0)
		move.b  $0026(A0), D0
		bsr.w     JmpTo4_CalcSine
		move.w  $0032(A0), D2
		move.w  $0030(A0), D3
		moveq   #$00, D6
		move.l  $003C(A0), A1
		move.b  $000F(A1), D6
		subq.w  #$01, D6
		bcs.s   loc_1CFBE
		asl.w   #$04, D0
		ext.l   D0
		asl.l   #$08, D0
		asl.w   #$04, D1
		ext.l   D1
		asl.l   #$08, D1
		moveq   #$00, D4
		moveq   #$00, D5
		lea     $0010(A1), A2
loc_1CF84:		
		movem.l D4/D5, -(A7)
		swap  D4
		swap  D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  D5, (A2)+
		move.w  D4, (A2)+
		movem.l (A7)+, D4/D5
		add.l   D0, D4
		add.l   D1, D5
		addq.w  #$02, A2
		dbf    D6, loc_1CF84
		swap  D4
		swap  D5
		add.w   D2, D4
		add.w   D3, D5
		move.w  D5, $0008(A0)
		move.w  D4, $000C(A0)
		move.w  $0028(A1), $0008(A1)
		move.w  $002A(A1), $000C(A1)
loc_1CFBE:
		tst.w   (Two_player_mode).w
		beq.s   loc_1CFC8
		bra.w     J_DisplaySprite_0C      ; loc_1D046
loc_1CFC8:
		move.w  $0030(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_1CFE0
		bra.w     J_DisplaySprite_0C      ; loc_1D046
loc_1CFE0:
		move.l  $003C(A0), A1
		bsr.w     loc_1D058
		bra.w     J_DeleteObject_1F       ; loc_1D04C
loc_1CFEC:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_0F        ; loc_1D070
		bra.w     J_MarkObjGone_11        ; loc_1D052   
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj75_MapUnc_1D00A:	BINCLUDE	"mappings/sprite/obj75.bin"
; ============================================================================
		nop

J_DisplaySprite_Param_00: ; loc_1D040:		               
		jmp     DisplaySprite_Param     ; (loc_D3FE)
J_DisplaySprite_0C: ; loc_1D046:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_1F: ; loc_1D04C:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_11: ; loc_1D052:
		jmp     MarkObjGone             ; (loc_D2A0)
loc_1D058:
		jmp     (loc_D3B6)
J_SingleObjLoad2_08: ; loc_1D05E:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_1B: ; loc_1D064:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
; loc_1D06A:
JmpTo4_CalcSine:
		jmp	(CalcSine).l
J_SolidObject_0F: ; loc_1D070:
		jmp     SolidObject             ; (loc_F4A0)     
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x76 - Dust Hill - Platform with spikes on sides 
; [ Begin ]		         
;===============================================================================		    
Obj_0x76_Platform_Spikes: ; loc_1D078:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D086(PC, D0), D1
		jmp     loc_1D086(PC, D1)
loc_1D086:
		dc.w    loc_1D08E-loc_1D086
		dc.w    loc_1D0DE-loc_1D086
loc_1D08A:
		dc.b    $40, $10, $00, $00
loc_1D08E:
		addq.b  #$02, $0024(A0)
		move.l  #Obj76_MapUnc_1D1BA, $0004(A0) ; loc_1D1BA
		move.w  #$0000, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_1C ; loc_1D1F6
		ori.b   #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsr.w   #$02, D0
		andi.w  #$001C, D0
		lea     loc_1D08A(PC, D0), A2
		move.b  (A2)+, $0019(A0)
		move.b  (A2)+, $0016(A0)
		move.b  (A2)+, $001A(A0)
		move.w  $0008(A0), $0034(A0)
		move.w  $000C(A0), $0030(A0)
		andi.w  #$000F, $0028(A0)
loc_1D0DE:
		move.w  $0008(A0), -(A7)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.w  loc_1D14A(PC, D0), D1
		jsr     loc_1D14A(PC, D1)
		move.w  (A7)+, D4
		tst.b   $0001(A0)
		bpl.s   loc_1D142
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		moveq   #$00, D2
		move.b  $0016(A0), D2
		move.w  D2, D3
		addq.w  #$01, D3
		bsr.w     J_SolidObject_10        ; loc_1D1FC
		swap  D6
		andi.w  #$0003, D6
		beq.s   loc_1D142
		move.b  D6, D0
		andi.b  #$01, D0
		beq.s   loc_1D12E
		lea     ($FFFFB000).w, A1
		bsr.w     loc_1D1F0
		bclr    #$05, $0022(A0)
loc_1D12E:
		andi.b  #$02, D6
		beq.s   loc_1D142
		lea     ($FFFFB040).w, A1
		bsr.w     loc_1D1F0
		bclr    #$06, $0022(A0)
loc_1D142:
		move.w  $0034(A0), D0
		bra.w     loc_1D202
loc_1D14A:		  
		dc.w    loc_1D14E-loc_1D14A
		dc.w    loc_1D19E-loc_1D14A
loc_1D14E:
		lea     ($FFFFB000).w, A1
		bsr.s   loc_1D158
		lea     ($FFFFB040).w, A1
loc_1D158:
		btst    #$01, $0022(A1)
		bne.s   loc_1D19C
		move.w  $0008(A1), D0
		sub.w   $0008(A0), D0
		addi.w  #$00C0, D0
loc_1D16C:
		btst    #$00, $0022(A0)
		beq.s   loc_1D178
		subi.w  #$0100, D0
loc_1D178:
		cmpi.w  #$0080, D0
		bcc.s   loc_1D19C
		move.w  $000C(A1), D0
		sub.w   $000C(A0), D0
		addi.w  #$0010, D0
		cmpi.w  #$0020, D0
		bcc.s   loc_1D19C
		move.b  #$02, $0028(A0)
		move.w  #$0080, $0036(A0)
loc_1D19C:
		rts
loc_1D19E:
		tst.w   $0036(A0)
		beq.s   loc_1D1B8
		subq.w  #$01, $0036(A0)
		moveq   #-1, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1D1B4
		neg.w   D0
loc_1D1B4:
		add.w   D0, $0008(A0)
loc_1D1B8:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj76_MapUnc_1D1BA:	BINCLUDE	"mappings/sprite/obj76.bin"
; ===========================================================================
		nop

loc_1D1F0:
		jmp     Touch_Spikes            ; (loc_CAD0)
J_Adjust2PArtPointer_1C: ; loc_1D1F6:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_10: ; loc_1D1FC:
		jmp     SolidObject             ; (loc_F4A0)
loc_1D202:
		jmp     (loc_D2D8)
;=============================================================================== 
; Object 0x77 - Dust Hill - Bridge 
; [ Begin ]		         
;===============================================================================		    
Obj_0x77_Bridge: ; loc_1D208:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D216(PC, D0), D1
		jmp     loc_1D216(PC, D1)
loc_1D216:
		dc.w    loc_1D21A-loc_1D216
		dc.w    loc_1D23C-loc_1D216
loc_1D21A:
		addq.b  #$02, $0024(A0)
		move.l  #Obj77_MapUnc_1D2E0, $0004(A0) ; loc_1D2E0
		move.w  #$643C, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_1D ; loc_1D3B2
		ori.b   #$04, $0001(A0)
		move.b  #$80, $0019(A0)
loc_1D23C:
		tst.b   $0034(A0)
		bne.s   loc_1D270
		lea     (ButtonVine_Trigger).w, A2
		moveq   #$00, D0
		move.b  $0028(A0), D0
		btst    #$00, $00(A2, D0)
		beq.s   loc_1D270
		move.b  #$01, $0034(A0)
		bchg    #$00, $001C(A0)
		tst.b   $0001(A0)
		bpl.s   loc_1D270
		move.w  #$00BB, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1D270:
		lea     (loc_1D2D0).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		tst.b   $001A(A0)
		bne.s   loc_1D29A
		move.w  #$004B, D1
		move.w  #$0008, D2
		move.w  D2, D3
		addq.w  #$01, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_11        ; loc_1D3B8
		bra.w     J_MarkObjGone_12        ; loc_1D3AC
loc_1D29A:
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_1D2CC
		move.b  D0, D1
		andi.b  #$08, D0
		beq.s   loc_1D2B6
		lea     ($FFFFB000).w, A1
		bclr    #$03, $0022(A1)
loc_1D2B6:
		andi.b  #$10, D1
		beq.s   loc_1D2C6
		lea     ($FFFFB040).w, A1
		bclr    #$03, $0022(A1)
loc_1D2C6:
		andi.b  #$E7, $0022(A0)
loc_1D2CC:
		bra.w     J_MarkObjGone_12        ; loc_1D3AC  

loc_1D2D0:               
		dc.w    loc_1D2D4-loc_1D2D0
		dc.w    loc_1D2DA-loc_1D2D0
loc_1D2D4:
		dc.b    $03, $02, $01, $00, $FE, $01
loc_1D2DA:
		dc.b    $03, $00, $01, $02, $FE, $01
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj77_MapUnc_1D2E0:	BINCLUDE	"mappings/sprite/obj77.bin"
; ===========================================================================

J_MarkObjGone_12: ; loc_1D3AC:
		jmp     MarkObjGone             ; (loc_D2A0)
J_Adjust2PArtPointer_1D: ; loc_1D3B2:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
J_SolidObject_11: ; loc_1D3B8:
		jmp     SolidObject             ; (loc_F4A0)
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x78 - Chemical Plant - Rotanting Platforms / Down when Touch Platform 
; [ Begin ]		         
;===============================================================================		  
Obj_0x78_Rotating_Platforms: ; loc_1D3C0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D3D6(PC, D0), D1
		jsr     loc_1D3D6(PC, D1)
		move.w  $0030(A0), D0
		bra.w     loc_1D58E
loc_1D3D6:
		dc.w    loc_1D3DC-loc_1D3D6
		dc.w    loc_1D460-loc_1D3D6
		dc.w    loc_1D474-loc_1D3D6
loc_1D3DC:
		addq.b  #$02, $0024(A0)
		moveq   #$34, D3
		moveq   #$02, D4
		btst    #$00, $0022(A0)
		beq.s   loc_1D3F0
		moveq   #$3A, D3
		moveq   #-2, D4
loc_1D3F0:
		move.w  $0008(A0), D2
		move.l  A0, A1
		moveq   #$03, D1
		bra.s   loc_1D408
loc_1D3FA:		
		bsr.w     J_SingleObjLoad2_09 ; loc_1D57C
		bne.w    loc_1D460
		move.b  #$04, $0024(A1)
loc_1D408:
		_move.b  0(A0), 0(A1)
		move.l  #Obj6B_MapUnc_1BF4A, $0004(A1) ; loc_1BF4A
		move.w  #$6418, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_02 ; loc_1D582
		move.b  #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$10, $0019(A1)
		move.b  $0028(A0), $0028(A1)
		move.w  D2, $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  $0008(A0), $0030(A1)
		move.w  $000C(A1), $0032(A1)
		addi.w  #$0020, D2
		move.b  D3, $002F(A1)
		move.l  A0, $003C(A1)
		add.b   D4, D3
		dbf    D1, loc_1D3FA
loc_1D460:
		moveq   #$00, D0
		move.b  $0028(A0), D0
		andi.w  #$0007, D0
		add.w   D0, D0
		move.w  loc_1D4AC(PC, D0), D1
		jsr     loc_1D4AC(PC, D1)
loc_1D474:
		move.l  $003C(A0), A2
		moveq   #$00, D0
		move.b  $002F(A0), D0
		move.w  $00(A2, D0), D0
		add.w   $0032(A0), D0
		move.w  D0, $000C(A0)
		moveq   #$00, D1
		move.b  $0019(A0), D1
		addi.w  #$000B, D1
		move.w  #$0010, D2
		move.w  #$0011, D3
		move.w  $0008(A0), D4
		bsr.w     J_SolidObject_12        ; loc_1D588
		swap  D6
		or.b    D6, $002E(A2)
		rts
loc_1D4AC:
		dc.w    loc_1D4BC-loc_1D4AC
		dc.w    loc_1D528-loc_1D4AC
		dc.w    loc_1D4E0-loc_1D4AC
		dc.w    loc_1D528-loc_1D4AC
		dc.w    loc_1D4BC-loc_1D4AC
		dc.w    loc_1D552-loc_1D4AC
		dc.w    loc_1D4E0-loc_1D4AC
		dc.w    loc_1D552-loc_1D4AC
loc_1D4BC:
		tst.w   $002C(A0)
		bne.s   loc_1D4D4
		move.b  $002E(A0), D0
		andi.b  #$30, D0
		beq.s   loc_1D4D2
		move.w  #$001E, $002C(A0)
loc_1D4D2:
		rts
loc_1D4D4:
		subq.w  #$01, $002C(A0)
		bne.s   loc_1D4D2
		addq.b  #$01, $0028(A0)
		rts
loc_1D4E0:
		tst.w   $002C(A0)
		bne.s   loc_1D4F8
		move.b  $002E(A0), D0
		andi.b  #$0C, D0
		beq.s   loc_1D4F6
		move.w  #$003C, $002C(A0)
loc_1D4F6:
		rts
loc_1D4F8:
		subq.w  #$01, $002C(A0)
		bne.s   loc_1D504
		addq.b  #$01, $0028(A0)
		rts
loc_1D504:
		lea     $0034(A0), A1
		move.w  $002C(A0), D0
		lsr.b   #$02, D0
		andi.b  #$01, D0
		move.w  D0, (A1)+
		eori.b  #$01, D0
		move.w  D0, (A1)+
		eori.b  #$01, D0
		move.w  D0, (A1)+
		eori.b  #$01, D0
		move.w  D0, (A1)+
		rts
loc_1D528:
		lea     $0034(A0), A1
		cmpi.w  #$0080, (A1)
		beq.s   loc_1D550
		addq.w  #$01, (A1)
		moveq   #$00, D1
		move.w  (A1)+, D1
		swap  D1
		lsr.l   #$01, D1
		move.l  D1, D2
		lsr.l   #$01, D1
		move.l  D1, D3
		add.l   D2, D3
		swap  D1
		swap  D2
		swap  D3
		move.w  D3, (A1)+
		move.w  D2, (A1)+
		move.w  D1, (A1)+
loc_1D550:
		rts
loc_1D552:
		lea     $0034(A0), A1
		cmpi.w  #$FF80, (A1)
		beq.s   loc_1D57A
		subq.w  #$01, (A1)
		moveq   #$00, D1
		move.w  (A1)+, D1
		swap  D1
		asr.l   #$01, D1
		move.l  D1, D2
		asr.l   #$01, D1
		move.l  D1, D3
		add.l   D2, D3
		swap  D1
		swap  D2
		swap  D3
		move.w  D3, (A1)+
		move.w  D2, (A1)+
		move.w  D1, (A1)+
loc_1D57A:
		rts   
;=============================================================================== 
; Object 0x78 - Chemical Plant - Rotanting Platforms / Down when Touch Platform 
; [ End ]		         
;===============================================================================		   
J_SingleObjLoad2_09: ; loc_1D57C:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer2_02: ; loc_1D582:
		jmp     Adjust2PArtPointer2   ; (loc_DC4C)
J_SolidObject_12: ; loc_1D588:
		jmp     SolidObject             ; (loc_F4A0)
loc_1D58E:
		jmp     (loc_D2D8)  
;=============================================================================== 
; Object 0x7A - Chemical Plant - Platforms - Move horizontally
; [ Begin ]		         
;===============================================================================		     
Obj_0x7A_Platform_Horizontal: ; loc_1D594:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D5A2(PC, D0), D1
		jmp     loc_1D5A2(PC, D1)
loc_1D5A2:
		dc.w    loc_1D5BA-loc_1D5A2
		dc.w    loc_1D660-loc_1D5A2
		dc.w    loc_1D6B2-loc_1D5A2
loc_1D5A8:		
		dc.b    $00, $70, $FF, $90, $00, $00, $01, $B0, $FF, $50, $00, $40, $01, $F0, $FF, $80
		dc.b    $00, $80
loc_1D5BA:
		addq.b  #$02, $0024(A0)
		move.w  #$E418, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_1E ; loc_1D73E
		moveq   #$00, D1
		move.b  $0028(A0), D1
		lea     loc_1D5A8(PC, D1), A2
		move.b  (A2)+, D1
		move.l  A0, A1
		bra.s   loc_1D5F6
loc_1D5D8:		
		bsr.w     J_SingleObjLoad2_0A  ; loc_1D738
		bne.s   loc_1D61C
		_move.b  0(A0), 0(A1)
		move.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
loc_1D5F6:
		move.l  #Obj7A_MapUnc_1D72C, $0004(A1) ; loc_1D72C
		move.w  $0002(A0), $0002(A1)
		move.b  #$04, $0001(A1)
		move.b  #$04, $0018(A1)
		move.b  #$10, $0019(A1)
		move.w  $0008(A1), $0030(A1)
loc_1D61C:
		dbf    D1, loc_1D5D8
		move.l  A0, $003C(A1)
		move.l  A1, $003C(A0)
		cmpi.b  #$0C, $0028(A0)
		bne.s   loc_1D636
		move.b  #$01, $0036(A0)
loc_1D636:
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  $0030(A0), D0
		sub.w   D1, D0
		move.w  D0, $0032(A0)
		move.w  D0, $0032(A1)
		add.w   D1, D0
		add.w   D1, D0
		move.w  D0, $0034(A0)
		move.w  D0, $0034(A1)
		move.w  (A2)+, D0
		add.w   D0, $0008(A0)
		move.w  (A2)+, D0
		add.w   D0, $0008(A1)
loc_1D660:
		bsr.s   loc_1D6BC
		move.w  $0032(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bls.s   loc_1D686
		move.w  $0034(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   loc_1D68C
loc_1D686:
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1D68C:
		move.l  $003C(A0), A1
		cmpa.l  A0, A1
		beq.s   loc_1D69A
		jsr     (loc_D3B6)
loc_1D69A:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   J_DeleteObject_20       ; loc_1D6AC
		bclr    #$07, $02(A2, D0)
J_DeleteObject_20: ; loc_1D6AC:
		jmp     DeleteObject            ; (loc_D3B4)
loc_1D6B2:
		bsr.s   loc_1D6BC
		bsr.s   loc_1D706
		jmp     DisplaySprite           ; (loc_D3C2)
loc_1D6BC:
		move.w  $0008(A0), -(A7)
		tst.b   $0036(A0)
		beq.s   loc_1D6DE
		move.w  $0008(A0), D0
		subq.w  #$01, D0
		cmp.w   $0032(A0), D0
		bne.s   loc_1D6D8
		move.b  #$00, $0036(A0)
loc_1D6D8:
		move.w  D0, $0008(A0)
		bra.s   loc_1D6F4
loc_1D6DE:
		move.w  $0008(A0), D0
		addq.w  #$01, D0
		cmp.w   $0034(A0), D0
		bne.s   loc_1D6F0
		move.b  #$01, $0036(A0)
loc_1D6F0:
		move.w  D0, $0008(A0)
loc_1D6F4:
		moveq   #$00, D1
		move.b  $0019(A0), D1
		move.w  #$0008, D3
		move.w  (A7)+, D4
		bsr.w     loc_1D744
		rts
loc_1D706:
		move.l  $003C(A0), A1
		move.w  $0008(A0), D0
		subi.w  #$0010, D0
		move.w  $0008(A1), D2
		addi.w  #$0010, D2
		cmp.w   D0, D2
		bne.s   loc_1D72A
		eori.b  #$01, $0036(A0)
		eori.b  #$01, $0036(A1)
loc_1D72A:
		rts
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj7A_MapUnc_1D72C:	BINCLUDE	"mappings/sprite/obj7A.bin"
; ===========================================================================

J_SingleObjLoad2_0A: ; loc_1D738:
		jmp     SingleObjLoad2      ; (loc_E788)
J_Adjust2PArtPointer_1E: ; loc_1D73E:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1D744:
		jmp     (PlatformObject)
		dc.w    $0000		   ; Filler    
;=============================================================================== 
; Object 0x7B - Chemical Plant - Spring Over Tubes 
; [ Begin ]		         
;===============================================================================		 
Obj_0x7B_Spring_Tubes: ; loc_1D74C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D77C(PC, D0), D1
		jsr     loc_1D77C(PC, D1)
		tst.w   (Two_player_mode).w
		beq.s   loc_1D764
		bra.w     J_DisplaySprite_0D      ; loc_1D964
loc_1D764:
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    J_DeleteObject_21       ; loc_1D96A
		bra.w     J_DisplaySprite_0D      ; loc_1D964
loc_1D77C:
		dc.w    loc_1D784-loc_1D77C
		dc.w    loc_1D7BA-loc_1D77C
loc_1D780:
		dc.w    $F000, $F600
loc_1D784:
		addq.b  #$02, $0024(A0)
		move.l  #Obj7B_MapUnc_1D920, $0004(A0) ; loc_1D920
		move.w  #$03E0, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$10, $0019(A0)
		move.b  #$01, $0018(A0)
		move.b  $0028(A0), D0
		andi.w  #$0002, D0
		move.w  loc_1D780(PC, D0), $0030(A0)
		bsr.w     J_Adjust2PArtPointer_1F ; loc_1D976
loc_1D7BA:
		cmpi.b  #$01, $001A(A0)
		beq.s   loc_1D802
		move.w  #$001B, D1
		move.w  #$0008, D2
		move.w  #$0010, D3
		move.w  $0008(A0), D4
		lea     ($FFFFB000).w, A1
		moveq   #$03, D6
		movem.l D1-D4, -(A7)
		bsr.w     loc_1D97C
		btst    #$03, $0022(A0)
		beq.s   loc_1D7EA
		bsr.s   loc_1D862
loc_1D7EA:
		movem.l (A7)+, D1-D4
		lea     ($FFFFB040).w, A1
		moveq   #$04, D6
		bsr.w     loc_1D97C
		btst    #$04, $0022(A0)
		beq.s   loc_1D802
		bsr.s   loc_1D862
loc_1D802:
		move.w  $0008(A0), D4
		move.w  D4, D5
		subi.w  #$0010, D4
		addi.w  #$0010, D5
		move.w  $000C(A0), D2
		move.w  D2, D3
		addi.w  #$0030, D3
		move.w  ($FFFFB008).w, D0
		cmp.w   D4, D0
		bcs.s   loc_1D838
		cmp.w   D5, D0
		bcc.s   loc_1D838
		move.w  ($FFFFB00C).w, D0
		cmp.w   D2, D0
		bcs.s   loc_1D838
		cmp.w   D3, D0
		bcc.s   loc_1D838
		move.b  #$02, $001C(A0)
loc_1D838:
		move.w  ($FFFFB048).w, D0
		cmp.w   D4, D0
		bcs.s   loc_1D856
		cmp.w   D5, D0
		bcc.s   loc_1D856
		move.w  ($FFFFB04C).w, D0
		cmp.w   D2, D0
		bcs.s   loc_1D856
		cmp.w   D3, D0
		bcc.s   loc_1D856
		move.b  #$03, $001C(A0)
loc_1D856:
		lea     (loc_1D908).l, A1
		bra.w     J_AnimateSprite_04      ; loc_1D970
		rts
loc_1D862:
		move.w  #$0100, $001C(A0)
		addq.w  #$04, $000C(A1)
		move.w  $0030(A0), $0012(A1)
		bset    #$01, $0022(A1)
		bclr    #$03, $0022(A1)
		move.b  #$10, $001C(A1)
		move.b  #$02, $0024(A1)
		move.b  $0028(A0), D0
		bpl.s   loc_1D896
		move.w  #$0000, $0010(A1)
loc_1D896:
		btst    #$00, D0
		beq.s   loc_1D8D6
		move.w  #$0001, $0014(A1)
		move.b  #$01, $0027(A1)
		move.b  #$00, $001C(A1)
		move.b  #$00, $002C(A1)
		move.b  #$04, $002D(A1)
		btst    #$01, D0
		bne.s   loc_1D8C6
		move.b  #$01, $002C(A1)
loc_1D8C6:
		btst    #$00, $0022(A1)
		beq.s   loc_1D8D6
		neg.b   $0027(A1)
		neg.w   $0014(A1)
loc_1D8D6:
		andi.b  #$0C, D0
		cmpi.b  #$04, D0
		bne.s   loc_1D8EC
		move.b  #$0C, $003E(A1)
		move.b  #$0D, $003F(A1)
loc_1D8EC:
		cmpi.b  #$08, D0
		bne.s   loc_1D8FE
		move.b  #$0E, $003E(A1)
		move.b  #$0F, $003F(A1)
loc_1D8FE:
		move.w  #$00CC, D0
		jmp     (PlaySound).l             ; loc_14C6    
loc_1D908:
		dc.w    loc_1D910-loc_1D908
		dc.w    loc_1D913-loc_1D908
		dc.w    loc_1D917-loc_1D908
		dc.w    loc_1D917-loc_1D908
loc_1D910:
		dc.b    $0F, $00, $FF
loc_1D913:
		dc.b    $00, $03, $FD, $00
loc_1D917:
		dc.b    $05, $01, $02, $02, $02, $04, $FD, $00, $00  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj7B_MapUnc_1D920:	BINCLUDE	"mappings/sprite/obj7B.bin"
; ===========================================================================
		nop

J_DisplaySprite_0D: ; loc_1D964:				
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_21: ; loc_1D96A:
		jmp     DeleteObject            ; (loc_D3B4)
J_AnimateSprite_04: ; loc_1D970:
		jmp     AnimateSprite           ; (loc_D412)
J_Adjust2PArtPointer_1F: ; loc_1D976:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
loc_1D97C:
		jmp     (loc_F510)
		dc.w    $0000		   ; Filler		    
;=============================================================================== 
; Object 0x4D - Hidden Palace - Rhinobot 
; [ Begin ]		         
;===============================================================================		      
Obj_0x4D_Rhinobot: ; loc_1D984:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1D992(PC, D0), D1
		jmp     loc_1D992(PC, D1)
loc_1D992:
		dc.w    loc_1D996-loc_1D992
		dc.w    loc_1D9E6-loc_1D992
loc_1D996:
		move.l  #Rhinobot_Mappings, $0004(A0) ; loc_1DAEE
		move.w  #$23C4, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$18, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$18, $0017(A0)
		bsr.w     J_ObjectFall_01         ; loc_1DC4C
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_1D9E4
		add.w   D1, $000C(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
loc_1D9E4:
		rts
loc_1D9E6:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1DA02(PC, D0), D1
		jsr     loc_1DA02(PC, D1)
		lea     (loc_1DAD2).l, A1
		bsr.w     J_AnimateSprite_05      ; loc_1DC46
		bra.w     J_MarkObjGone_13        ; loc_1DC40
loc_1DA02:
		dc.w    loc_1DA06-loc_1DA02
		dc.w    loc_1DA2A-loc_1DA02
loc_1DA06:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_1DA28
		addq.b  #$02, $0025(A0)
		move.w  #$FF80, $0010(A0)
		move.b  #$00, $001C(A0)
		bchg    #0, $0022(A0)
		bne.s   loc_1DA28
		neg.w   $0010(A0)
loc_1DA28:
		rts
loc_1DA2A:
		bsr.w     loc_1DA74
		bsr.w     J_ObjectFall_01         ; loc_1DC4C
		jsr     ObjHitFloor             ; (loc_13898)
		cmpi.w  #$FFF8, D1
		blt.s   loc_1DA50
		cmpi.w  #$000C, D1
		bge.s   loc_1DA4E
		move.w  #$0000, $0012(A0)
		add.w   D1, $000C(A0)
loc_1DA4E:
		rts
loc_1DA50:
		subq.b  #$02, $0025(A0)
		move.w  #$003B, $0030(A0)
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		sub.l   D0, $0008(A0)
		move.w  #$0000, $0010(A0)
		move.b  #$01, $001C(A0)
		rts
loc_1DA74:
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bmi.s   loc_1DAA8
		cmpi.w  #$0060, D0
		bgt.s   loc_1DA98
		btst    #$00, $0022(A0)
		bne.s   loc_1DA9A
		move.b  #$02, $001C(A0)
		move.w  #$FE00, $0010(A0)
loc_1DA98:
		rts
loc_1DA9A:
		move.b  #$00, $001C(A0)
		move.w  #$0080, $0010(A0)
		rts
loc_1DAA8:
		cmpi.w  #$FFA0, D0
		blt.s   loc_1DA98
		btst    #$00, $0022(A0)
		beq.s   loc_1DAC4
		move.b  #$02, $001C(A0)
		move.w  #$0200, $0010(A0)
		rts
loc_1DAC4:
		move.b  #$00, $001C(A0)
		move.w  #$FF80, $0010(A0)
		rts
loc_1DAD2:
		dc.w    loc_1DAD8-loc_1DAD2
		dc.w    loc_1DAE6-loc_1DAD2
		dc.w    loc_1DAE9-loc_1DAD2
loc_1DAD8:
		dc.b    $02, $00, $00, $00, $03, $03, $04, $01, $01, $02, $05, $05, $05, $FF
loc_1DAE6:
		dc.b    $0F, $00, $FF
loc_1DAE9:
		dc.b    $02, $06, $07, $FF, $00
Rhinobot_Mappings:		
loc_1DAEE:
		dc.w    loc_1DAFE-loc_1DAEE
		dc.w    loc_1DB28-loc_1DAEE
		dc.w    loc_1DB52-loc_1DAEE
		dc.w    loc_1DB7C-loc_1DAEE
		dc.w    loc_1DBA6-loc_1DAEE
		dc.w    loc_1DBD0-loc_1DAEE
		dc.w    loc_1DBFA-loc_1DAEE
		dc.w    loc_1DC1C-loc_1DAEE
loc_1DAFE:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $0005000A, $0005FFF0
		dc.l    $00090022, $00110000
loc_1DB28:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $0005000E, $0007FFF0
		dc.l    $00090022, $00110000
loc_1DB52:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $00050012, $0009FFF0
		dc.l    $00090022, $00110000
loc_1DB7C:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $0005000A, $0005FFF0
		dc.l    $00090028, $00140000
loc_1DBA6:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $0005000E, $0007FFF0
		dc.l    $00090028, $00140000
loc_1DBD0:
		dc.w    $0005
		dc.l    $F0050000, $0000FFF0, $F0050004, $00020000
		dc.l    $F8010008, $0004FFE8, $00050012, $0009FFF0
		dc.l    $00090028, $00140000
loc_1DBFA:
		dc.w    $0004
		dc.l    $F00B0016, $000BFFE8, $F0050004, $00020000
		dc.l    $00090022, $00110000, $FB01002E, $0017001A
loc_1DC1C:
		dc.w    $0004
		dc.l    $F00B0016, $000BFFE8, $F0050004, $00020000
		dc.l    $00090028, $00140000, $FB010030, $0018001A		
;=============================================================================== 
; Object 0x4D - Hidden Palace - Rhinobot 
; [ End ]		         
;===============================================================================  
		dc.w    $0000		   ; Filler    
J_MarkObjGone_13: ; loc_1DC40:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_05: ; loc_1DC46:
		jmp     AnimateSprite           ; (loc_D412)
J_ObjectFall_01: ; loc_1DC4C:
		jmp     ObjectFall              ; (loc_D24E)  
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x52 - Piranha 
; [ Begin ]		         
;===============================================================================		  
Obj_0x52_Piranha: ; loc_1DC54:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1DC62(PC, D0), D1
		jmp     loc_1DC62(PC, D1)
loc_1DC62:
		dc.w    loc_1DC68-loc_1DC62
		dc.w    loc_1DCE0-loc_1DC62
		dc.w    loc_1DD50-loc_1DC62
loc_1DC68:
		addq.b  #$02, $0024(A0)
		move.l  #Piranha_Mappings, $0004(A0) ; loc_1DE66
		move.w  #$2530, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		move.b  D0, D1
		andi.w  #$00F0, D1
		add.w   D1, D1
		add.w   D1, D1
		move.w  D1, $003A(A0)
		move.w  D1, $003C(A0)
		andi.w  #$000F, D0
		lsl.w   #$06, D0
		subq.w  #$01, D0
		move.w  D0, $0030(A0)
		move.w  D0, $0032(A0)
		move.w  #$FF80, $0010(A0)
		move.l  #$FFFB8000, $0036(A0)
		move.w  $000C(A0), $0034(A0)
		bset    #$06, $0022(A0)
		btst    #$00, $0022(A0)
		beq.s   loc_1DCE0
		neg.w   $0010(A0)
loc_1DCE0:
		cmpi.w  #$FFFF, $003A(A0)
		beq.s   loc_1DCEC
		subq.w  #$01, $003A(A0)
loc_1DCEC:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_1DD0E
		move.w  $0032(A0), $0030(A0)
		neg.w   $0010(A0)
		bchg    #0, $0022(A0)
		move.b  #$01, $001D(A0)
		move.w  $003C(A0), $003A(A0)
loc_1DD0E:
		lea     (loc_1DE4E).l, A1
		bsr.w     J_AnimateSprite_06      ; loc_1DE9E
		bsr.w     J_SpeedToPos_0B         ; loc_1DEA4
		tst.w   $003A(A0)
		bgt.w    J_MarkObjGone_14        ; loc_1DE98
		cmpi.w  #$FFFF, $003A(A0)
		beq.w    J_MarkObjGone_14        ; loc_1DE98
		move.l  #$FFFB8000, $0036(A0)
		addq.b  #$02, $0024(A0)
		move.w  #$FFFF, $003A(A0)
		move.b  #$02, $001C(A0)
		move.w  #$0001, $003E(A0)
		bra.w     J_MarkObjGone_14        ; loc_1DE98
loc_1DD50:
		move.w  #$0390, (Water_Level_1).w
		lea     (loc_1DE4E).l, A1
		bsr.w     J_AnimateSprite_06      ; loc_1DE9E
		move.w  $003E(A0), D0
		sub.w   D0, $0030(A0)
		bsr.w     loc_1DE00
		tst.l   $0036(A0)
		bpl.s   loc_1DDA8
		move.w  $000C(A0), D0
		cmp.w   (Water_Level_1).w, D0
		bgt.w    J_MarkObjGone_14        ; loc_1DE98
		move.b  #$03, $001C(A0)
		bclr    #$06, $0022(A0)
		tst.b   $002A(A0)
		bne.w    J_MarkObjGone_14        ; loc_1DE98
		move.w  $0010(A0), D0
		asl.w   #$01, D0
		move.w  D0, $0010(A0)
		addq.w  #$01, $003E(A0)
		st      $002A(A0)
		bra.w     J_MarkObjGone_14        ; loc_1DE98
loc_1DDA8:
		move.w  $000C(A0), D0
		cmp.w   (Water_Level_1).w, D0
		bgt.s   loc_1DDBC
		move.b  #$01, $001C(A0)
		bra.w     J_MarkObjGone_14        ; loc_1DE98
loc_1DDBC:
		move.b  #$00, $001C(A0)
		bset    #$06, $0022(A0)
		bne.s   loc_1DDD6
		move.l  $0036(A0), D0
		asr.l   #$01, D0
		move.l  D0, $0036(A0)
		nop
loc_1DDD6:
		move.w  $0034(A0), D0
		cmp.w   $000C(A0), D0
		bgt.w    J_MarkObjGone_14        ; loc_1DE98
		subq.b  #$02, $0024(A0)
		tst.b   $002A(A0)
		beq.w    J_MarkObjGone_14        ; loc_1DE98
		move.w  $0010(A0), D0
		asr.w   #$01, D0
		move.w  D0, $0010(A0)
		sf      $002A(A0)
		bra.w     J_MarkObjGone_14        ; loc_1DE98
loc_1DE00:
		move.l  $0008(A0), D2
		move.l  $000C(A0), D3
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		add.l   $0036(A0), D3
		btst    #$06, $0022(A0)
		beq.s   loc_1DE3C
		tst.l   $0036(A0)
		bpl.s   loc_1DE34
		addi.l  #$00001000, $0036(A0)
		addi.l  #$00001000, $0036(A0)
loc_1DE34:
		subi.l  #$00001000, $0036(A0)
loc_1DE3C:
		addi.l  #$00001800, $0036(A0)
		move.l  D2, $0008(A0)
		move.l  D3, $000C(A0)
		rts      
loc_1DE4E:		 
		dc.w    loc_1DE56-loc_1DE4E
		dc.w    loc_1DE5A-loc_1DE4E
		dc.w    loc_1DE5E-loc_1DE4E
		dc.w    loc_1DE62-loc_1DE4E
loc_1DE56:
		dc.b    $0E, $00, $01, $FF
loc_1DE5A:
		dc.b    $03, $00, $01, $FF
loc_1DE5E:
		dc.b    $0E, $02, $03, $FF
loc_1DE62:
		dc.b    $03, $02, $03, $FF  
Piranha_Mappings: ; loc_1DE66:
		dc.w    loc_1DE6E-Piranha_Mappings
		dc.w    loc_1DE78-Piranha_Mappings
		dc.w    loc_1DE82-Piranha_Mappings
		dc.w    loc_1DE8C-Piranha_Mappings               
loc_1DE6E:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_1DE78:
		dc.w    $0001
		dc.l    $F00F0010, $0008FFF0
loc_1DE82:
		dc.w    $0001
		dc.l    $F00F0020, $0010FFF0
loc_1DE8C:
		dc.w    $0001
		dc.l    $F00F0030, $0018FFF0				  
;=============================================================================== 
; Object 0x52 - Piranha 
; [ End ]		         
;===============================================================================   
		dc.w    $0000		   ; Filler   
J_MarkObjGone_14: ; loc_1DE98:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_06: ; loc_1DE9E:
		jmp     AnimateSprite           ; (loc_D412)
J_SpeedToPos_0B: ; loc_1DEA4:
		jmp     SpeedToPos              ; (loc_D27A)						    
		dc.w    $0000		   ; Filler  
;=============================================================================== 
; Object 0x4F - Hidden Palace - Dinobot 
; [ Begin ]		         
;===============================================================================		 
Obj_0x4F_Dinobot: ; loc_1DEAC:               
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1DEBA(PC, D0), D1
		jmp     loc_1DEBA(PC, D1)
loc_1DEBA:		
		dc.w    loc_1DEC0-loc_1DEBA
		dc.w    loc_1DF16-loc_1DEBA
		dc.w    loc_1DFB8-loc_1DEBA
loc_1DEC0:
		move.l  #Obj4F_MapUnc_1DFCA, $0004(A0) ; loc_1DFCA
		move.w  #$0500, $0002(A0)
		move.b  #$04, $0001(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$06, $0017(A0)
		move.b  #$0C, $0020(A0)
		bsr.w     J_ObjectFall_02         ; loc_1E002
		jsr     ObjHitFloor             ; loc_13898
		tst.w   D1
		bpl.s   loc_1DF14
		add.w   D1, $000C(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
		bchg    #0, $0022(A0)
loc_1DF14:
		rts
loc_1DF16:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1DF5C(PC, D0), D1
		jsr     loc_1DF5C(PC, D1)
		lea     (loc_1DFBC).l, A1
		bsr.w     J_AnimateSprite_07      ; loc_1DFFC
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.w    loc_1DF46
		bra.w     J_DisplaySprite_0E      ; loc_1DFF0
loc_1DF46:
		lea     (Object_Respawn_Table).w, A2
		moveq   #$00, D0
		move.b  $0023(A0), D0
		beq.s   loc_1DF58
		bclr    #$07, $02(A2, D0)
loc_1DF58:
		bra.w     J_DeleteObject_22       ; loc_1DFF6
loc_1DF5C:               
		ori.b   #$28, D4
		subq.w  #$01, $0030(A0)
		bpl.s   loc_1DF82
		addq.b  #$02, $0025(A0)
		move.w  #$FF80, $0010(A0)
		move.b  #$01, $001C(A0)
		bchg    #0, $0022(A0)
		bne.s   loc_1DF82
		neg.w   $0010(A0)
loc_1DF82:
		rts
		bsr.w     J_SpeedToPos_0C         ; loc_1E008
		jsr     ObjHitFloor             ; loc_13898
		cmpi.w  #$FFF8, D1
		blt.s   loc_1DFA0
		cmpi.w  #$000C, D1
		bge.s   loc_1DFA0
		add.w   D1, $000C(A0)
		rts
loc_1DFA0:
		subq.b  #$02, $0025(A0)
		move.w  #$003B, $0030(A0)
		move.w  #$0000, $0010(A0)
		move.b  #$00, $001C(A0)
		rts
loc_1DFB8:
		bra.w     J_DeleteObject_22       ; loc_1DFF6  
loc_1DFBC:
		dc.w    loc_1DFC0-loc_1DFBC
		dc.w    loc_1DFC3-loc_1DFBC
loc_1DFC0:				 
		dc.b    $09, $01, $FF 
loc_1DFC3:
		dc.b    $09, $00, $01, $02, $01, $FF, $00  
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4F_MapUnc_1DFCA:	BINCLUDE	"mappings/sprite/obj4F.bin"

; ===========================================================================
		align 4

J_DisplaySprite_0E: ; loc_1DFF0:
		jmp     DisplaySprite           ; loc_D3C2
J_DeleteObject_22: ; loc_1DFF6:
		jmp     DeleteObject            ; loc_D3B4
J_AnimateSprite_07: ; loc_1DFFC:
		jmp     AnimateSprite           ; loc_D412
J_ObjectFall_02: ; loc_1E002:
		jmp     ObjectFall              ; loc_D24E  
J_SpeedToPos_0C: ; loc_1E008:
		jmp     SpeedToPos              ; loc_D27A  
		dc.w    $0000		   ; Filler 
;=============================================================================== 
; Object 0x50 - Oil Ocean - Aquis (Seahorse)  
; [ Begin ]		         
;===============================================================================  
Obj_0x50_Aquis: ; loc_1E010:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1E01E(PC, D0), D1
		jmp     loc_1E01E(PC, D1)
loc_1E01E:
		dc.w    loc_1E02A-loc_1E01E
		dc.w    loc_1E0E2-loc_1E01E
		dc.w    loc_1E10E-loc_1E01E
		dc.w    loc_1E138-loc_1E01E
		dc.w    loc_1E31A-loc_1E01E
		dc.w    loc_1E356-loc_1E01E
loc_1E02A:
		addq.b  #$02, $0024(A0)
		move.l  #Aquis_Mappings, $0004(A0) ; loc_1E4E0
		move.w  #$2570, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.w  #$FF00, $0010(A0)
		move.b  $0028(A0), D0
		move.b  D0, D1
		andi.w  #$00F0, D1
		lsl.w   #$04, D1
		move.w  D1, $002E(A0)
		move.w  D1, $0030(A0)
		andi.w  #$000F, D0
		lsl.w   #$04, D0
		subq.w  #$01, D0
		move.w  D0, $0032(A0)
		move.w  D0, $0034(A0)
		move.w  $000C(A0), $002A(A0)
		bsr.w     J_SingleObjLoad_07   ; loc_1E87C
		bne.s   loc_1E0E2
		_move.b  #$50, 0(A1)
		move.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$000A, $0008(A1)
		addi.w  #$FFFA, $000C(A1)
		move.l  #Aquis_Mappings, $0004(A1) ; loc_1E4E0
		move.w  #$24E0, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  #$03, $001C(A1)
		move.l  A1, $0036(A0)
		move.l  A0, $0036(A1)
		bset    #$06, $0022(A0)
loc_1E0E2:
		lea     (loc_1E4A8).l, A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		move.w  #$039C, (Water_Level_1).w
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1E108(PC, D0), D1
		jsr     loc_1E108(PC, D1)
		bsr.w     loc_1E2E0
		bra.w     J_MarkObjGone_15        ; loc_1E882
loc_1E108:
		dc.w    loc_1E14E-loc_1E108
		dc.w    loc_1E160-loc_1E108
		dc.w    loc_1E16E-loc_1E108
loc_1E10E:
		move.l  $0036(A0), A1
		tst.b   (A1)
		beq.w    J_DeleteObject_23       ; loc_1E876
		cmpi.b  #$50, (A1)
		bne.w    J_DeleteObject_23       ; loc_1E876
		btst    #$07, $0022(A1)
		bne.w    J_DeleteObject_23       ; loc_1E876
		lea     (loc_1E4A8).l, A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		bra.w     J_DisplaySprite_0F      ; loc_1E870
loc_1E138:
		bsr.w     loc_1E404
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		lea     (loc_1E4A8).l, A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		bra.w     J_MarkObjGone_15        ; loc_1E882
loc_1E14E:
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		bsr.w     loc_1E3E6
		bsr.w     loc_1E28C
		bsr.w     loc_1E224
		rts
loc_1E160:
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		bsr.w     loc_1E3E6
		bsr.w     loc_1E2AE
		rts
loc_1E16E:
		bsr.w     J_ObjectFall_03         ; loc_1E88E
		bsr.w     loc_1E3E6
		bsr.w     loc_1E180
		bsr.w     loc_1E1FC
		rts
loc_1E180:
		tst.b   $002D(A0)
		bne.s   loc_1E18C
		tst.w   $0012(A0)
		bpl.s   loc_1E18E
loc_1E18C:
		rts
loc_1E18E:
		st      $002D(A0)
		bsr.w     J_SingleObjLoad_07   ; loc_1E87C
		bne.s   loc_1E1FA
		_move.b  #$50, 0(A1)
		move.b  #$06, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  #Aquis_Mappings, $0004(A1) ; loc_1E4E0
		move.w  #$24E0, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$E5, $0020(A1)
		move.b  #$02, $001C(A1)
		move.w  #$000C, D0
		move.w  #$0010, D1
		move.w  #$FD00, D2
		btst    #$00, $0022(A0)
		beq.s   loc_1E1EE
		neg.w   D1
		neg.w   D2
loc_1E1EE:
		sub.w   D0, $000C(A1)
		sub.w   D1, $0008(A1)
		move.w  D2, $0010(A1)
loc_1E1FA:
		rts
loc_1E1FC:
		move.w  $000C(A0), D0
		cmp.w   (Water_Level_1).w, D0
		blt.s   loc_1E222
		move.b  #$02, $0025(A0)
		move.b  #$00, $001C(A0)
		move.w  $0030(A0), $002E(A0)
		move.w  #$0040, $0012(A0)
		sf      $002D(A0)
loc_1E222:
		rts
loc_1E224:
		tst.b   $002C(A0)
		beq.s   loc_1E28A
		move.w  ($FFFFB008).w, D0
		move.w  ($FFFFB00C).w, D1
		sub.w   $000C(A0), D1
		bpl.s   loc_1E28A
		cmpi.w  #$FFD0, D1
		blt.s   loc_1E28A
		sub.w   $0008(A0), D0
		cmpi.w  #$0048, D0
		bgt.s   loc_1E28A
		cmpi.w  #$FFB8, D0
		blt.s   loc_1E28A
		tst.w   D0
		bpl.s   loc_1E262
		cmpi.w  #$FFD8, D0
		bgt.s   loc_1E28A
		btst    #$00, $0022(A0)
		bne.s   loc_1E28A
		bra.s   loc_1E270
loc_1E262:
		cmpi.w  #$0028, D0
		blt.s   loc_1E28A
		btst    #$00, $0022(A0)
		beq.s   loc_1E28A
loc_1E270:
		moveq   #$20, D0
		cmp.w   $0032(A0), D0
		bgt.s   loc_1E28A
		move.b  #$04, $0025(A0)
		move.b  #$01, $001C(A0)
		move.w  #$FC00, $0012(A0)
loc_1E28A:
		rts
loc_1E28C:
		subq.w  #$01, $002E(A0)
		bne.s   loc_1E2AC
		move.w  $0030(A0), $002E(A0)
		addq.b  #$02, $0025(A0)
		move.w  #$FFC0, D0
		tst.b   $002C(A0)
		beq.s   loc_1E2A8
		neg.w   D0
loc_1E2A8:
		move.w  D0, $0012(A0)
loc_1E2AC:
		rts
loc_1E2AE:
		move.w  $000C(A0), D0
		tst.b   $002C(A0)
		bne.s   loc_1E2CC
		cmp.w   (Water_Level_1).w, D0
		bgt.s   loc_1E2CA
		subq.b  #$02, $0025(A0)
		st      $002C(A0)
		clr.w   $0012(A0)
loc_1E2CA:
		rts
loc_1E2CC:
		cmp.w   $002A(A0), D0
		blt.s   loc_1E2CA
		subq.b  #$02, $0025(A0)
		sf      $002C(A0)
		clr.w   $0012(A0)
		rts
loc_1E2E0:
		moveq   #$0A, D0
		moveq   #Debug_mode_flag, D1
		move.l  $0036(A0), A1
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0023(A0), $0023(A1)
		move.b  $0001(A0), $0001(A1)
		btst    #$00, $0022(A1)
		beq.s   loc_1E310
		neg.w   D0
loc_1E310:
		add.w   D0, $0008(A1)
		add.w   D1, $000C(A1)
		rts
loc_1E31A:
		bsr.w     J_ObjectFall_03         ; loc_1E88E
		bsr.w     loc_1E330
		lea     (loc_1E4A8).l, A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		bra.w     J_MarkObjGone_15        ; loc_1E882
loc_1E330:
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_1E34A
		add.w   D1, $000C(A0)
		move.w  $0012(A0), D0
		asr.w   #$01, D0
		neg.w   D0
		move.w  D0, $0012(A0)
loc_1E34A:
		subi.b  #$01, $0021(A0)
		beq.w    J_DeleteObject_23       ; loc_1E876
		rts
loc_1E356:
		bsr.w     loc_1E3A6
		tst.b   $0025(A0)
		beq.s   loc_1E396
		subi.w  #$0001, $002C(A0)
		beq.w    J_DeleteObject_23       ; loc_1E876
		move.w  ($FFFFB008).w, $0008(A0)
		move.w  ($FFFFB00C).w, $000C(A0)
		addi.w  #$000C, $000C(A0)
		subi.b  #$01, $002A(A0)
		bne.s   loc_1E398
		move.b  #$03, $002A(A0)
		bchg    #0, $0022(A0)
		bchg    #0, $0001(A0)
loc_1E396:
		rts
loc_1E398:
		lea     (loc_1E4A8).l, A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		bra.w     J_DisplaySprite_0F      ; loc_1E870
loc_1E3A6:
		tst.b   $0025(A0)
		bne.s   loc_1E3E4
		move.b  ($FFFFB024).w, D0
		cmpi.b  #$02, D0
		bne.s   loc_1E3E4
		move.w  ($FFFFB008).w, $0008(A0)
		move.w  ($FFFFB00C).w, $000C(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$05, $001C(A0)
		st      $0025(A0)
		move.w  #$012C, $002C(A0)
		move.b  #$03, $002A(A0)
loc_1E3E4:
		rts
loc_1E3E6:
		subq.w  #$01, $0032(A0)
		bpl.s   loc_1E402
		move.w  $0034(A0), $0032(A0)
		neg.w   $0010(A0)
		bchg    #0, $0022(A0)
		move.b  #$01, $001D(A0)
loc_1E402:
		rts
loc_1E404:
		tst.b   $0021(A0)
		beq.w    loc_1E4A6
		moveq   #$02, D3
loc_1E40E:		
		bsr.w     J_SingleObjLoad_07   ; loc_1E87C
		bne.s   loc_1E480
		_move.b  0(A0), 0(A1)
		move.b  #$08, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  #$24E0, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.w  #$FF00, $0012(A1)
		move.b  #$04, $001C(A1)
		move.b  #$78, $0021(A1)
		cmpi.w  #$0001, D3
		beq.s   loc_1E47A
		blt.s   loc_1E46C
		move.w  #$00C0, $0010(A1)
		addi.w  #$FF40, $0012(A1)
		bra.s   loc_1E480
loc_1E46C:
		move.w  #$FF00, $0010(A1)
		addi.w  #$FFC0, $0012(A1)
		bra.s   loc_1E480
loc_1E47A:
		move.w  #$0040, $0010(A1)
loc_1E480:
		dbf    D3, loc_1E40E
		bsr.w     J_SingleObjLoad_07   ; loc_1E87C
		bne.s   loc_1E4A2
		_move.b  0(A0), 0(A1)
		move.b  #$0A, $0024(A1)
		move.l  $0004(A0), $0004(A1)
		move.w  #$24E0, $0002(A1)
loc_1E4A2:
		bra.w     J_DeleteObject_23       ; loc_1E876
loc_1E4A6:
		rts    
loc_1E4A8:
		dc.w    loc_1E4B8-loc_1E4A8
		dc.w    loc_1E4BB-loc_1E4A8
		dc.w    loc_1E4C3-loc_1E4A8
		dc.w    loc_1E4C9-loc_1E4A8
		dc.w    loc_1E4CD-loc_1E4A8
		dc.w    loc_1E4D0-loc_1E4A8
		dc.w    loc_1E4D3-loc_1E4A8
		dc.w    loc_1E4D7-loc_1E4A8
loc_1E4B8:
		dc.b    $0E, $00, $FF
loc_1E4BB:
		dc.b    $05, $03, $04, $03, $04, $03, $04, $FF
loc_1E4C3:
		dc.b    $03, $05, $06, $07, $06, $FF
loc_1E4C9:
		dc.b    $03, $01, $02, $FF
loc_1E4CD:
		dc.b    $01, $05, $FF
loc_1E4D0:
		dc.b    $0E, $08, $FF
loc_1E4D3:
		dc.b    $01, $09, $0A, $FF
loc_1E4D7:
		dc.b    $05, $0B, $0C, $0B, $0C, $0B, $0C, $FF, $00
Aquis_Mappings:		
loc_1E4E0:
		dc.w    loc_1E4FA-loc_1E4E0
		dc.w    loc_1E514-loc_1E4E0
		dc.w    loc_1E51E-loc_1E4E0
		dc.w    loc_1E528-loc_1E4E0
		dc.w    loc_1E54A-loc_1E4E0
		dc.w    loc_1E56C-loc_1E4E0
		dc.w    loc_1E576-loc_1E4E0
		dc.w    loc_1E580-loc_1E4E0
		dc.w    loc_1E58A-loc_1E4E0
		dc.w    loc_1E594-loc_1E4E0
		dc.w    loc_1E5B6-loc_1E4E0
		dc.w    loc_1E5D8-loc_1E4E0
		dc.w    loc_1E602-loc_1E4E0
loc_1E4FA:
		dc.w    $0003
		dc.l    $E80D0000, $0000FFF0, $F8090016, $000BFFF8
		dc.l    $08050024, $0012FFF8
loc_1E514:
		dc.w    $0001
		dc.l    $F8050028, $0014FFF8
loc_1E51E:
		dc.w    $0001
		dc.l    $F805002C, $0016FFF8
loc_1E528:
		dc.w    $0004
		dc.l    $E8090008, $0004FFF0, $E801000E, $00070008
		dc.l    $F8090016, $000BFFF8, $08050024, $0012FFF8
loc_1E54A:
		dc.w    $0004
		dc.l    $E8090010, $0008FFF0, $E801000E, $00070008
		dc.l    $F8090016, $000BFFF8, $08050024, $0012FFF8
loc_1E56C:
		dc.w    $0001
		dc.l    $F8010030, $0018FFFC
loc_1E576:
		dc.w    $0001
		dc.l    $F8010032, $0019FFFC
loc_1E580:
		dc.w    $0001
		dc.l    $F8010034, $001AFFFC
loc_1E58A:
		dc.w    $0001
		dc.l    $F80D0036, $001BFFF0
loc_1E594:
		dc.w    $0004
		dc.l    $E80D0000, $0000FFF0, $F805001C, $000EFFF8
		dc.l    $F8010020, $00100008, $08050024, $0012FFF8
loc_1E5B6:
		dc.w    $0004
		dc.l    $E80D0000, $0000FFF0, $F805001C, $000EFFF8
		dc.l    $F8010022, $00110008, $08050024, $0012FFF8
loc_1E5D8:
		dc.w    $0005
		dc.l    $E8090008, $0004FFF0, $E801000E, $00070008
		dc.l    $F805001C, $000EFFF8, $F8010020, $00100008
		dc.l    $08050024, $0012FFF8
loc_1E602:
		dc.w    $0005
		dc.l    $E8090010, $0008FFF0, $E801000E, $00070008
		dc.l    $F805001C, $000EFFF8, $F8010022, $00110008
		dc.l    $08050024, $0012FFF8		           
;=============================================================================== 
; Object 0x50 - Oil Ocean - Aquis (Seahorse)  
; [ End ]		         
;===============================================================================  
;=============================================================================== 
; Object 0x51 - Oil Ocean - Aquis (Seahorse)  
; [ Begin ]		         
;===============================================================================  
Obj_0x51_Aquis: ; loc_1E62C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1E63A(PC, D0), D1
		jmp     loc_1E63A(PC, D1)
loc_1E63A:
		dc.w    loc_1E646-loc_1E63A
		dc.w    loc_1E6A4-loc_1E63A
		dc.w    loc_1E6C8-loc_1E63A
loc_1E640:
		dc.w    $0000, $FCE0, $FD1C
loc_1E646:
		addq.b  #$02, $0024(A0)
		move.l  #Aquis_Mappings, $0004(A0) ; loc_1E4E0
		move.w  #$2570, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$06, $001C(A0)
		move.b  $0028(A0), D0
		andi.w  #$000F, D0
		move.w  D0, D1
		lsl.w   #$05, D1
		subq.w  #$01, D1
		move.w  D1, $0032(A0)
		move.w  D1, $0034(A0)
		move.w  $000C(A0), $002A(A0)
		move.w  $000C(A0), $002E(A0)
		addi.w  #$0060, $002E(A0)
		move.w  #$FF00, $0010(A0)
loc_1E6A4:
		lea     loc_1E4A8(PC), A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		move.w  #$039C, (Water_Level_1).w
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1E6C4(PC, D0), D1
		jsr     loc_1E6C4(PC, D1)
		bra.w     J_MarkObjGone_15        ; loc_1E882
loc_1E6C4:
		dc.w    loc_1E6DC-loc_1E6C4
		dc.w    loc_1E6F2-loc_1E6C4
loc_1E6C8:
		bsr.w     loc_1E404
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		lea     loc_1E4A8(PC), A1
		bsr.w     J_AnimateSprite_08      ; loc_1E888
		bra.w     J_MarkObjGone_15        ; loc_1E882
loc_1E6DC:
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		bsr.w     loc_1E3E6
		bsr.w     loc_1E72E
		bsr.w     loc_1E810
		bsr.w     loc_1E780
		rts
loc_1E6F2:
		bsr.w     J_SpeedToPos_0D         ; loc_1E894
		bsr.w     loc_1E3E6
		bsr.w     loc_1E72E
		bsr.w     loc_1E810
		bsr.w     loc_1E708
		rts
loc_1E708:
		subq.w  #$01, $0030(A0)
		beq.s   loc_1E71C
		move.w  $0030(A0), D0
		cmpi.w  #$0012, D0
		beq.w    loc_1E7A6
		rts
loc_1E71C:
		subq.b  #$02, $0025(A0)
		move.b  #$06, $001C(A0)
		move.w  #$00B4, $0030(A0)
		rts
loc_1E72E:
		sf      $002D(A0)
		sf      $002C(A0)
		sf      $0036(A0)
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		bpl.s   loc_1E74E
		btst    #$00, $0022(A0)
		bne.s   loc_1E756
		bra.s   loc_1E75A
loc_1E74E:
		btst    #$00, $0022(A0)
		bne.s   loc_1E75A
loc_1E756:
		st      $002C(A0)
loc_1E75A:
		move.w  ($FFFFB00C).w, D0
		sub.w   $000C(A0), D0
		cmpi.w  #$FFFC, D0
		blt.s   loc_1E77E
		cmpi.w  #$0004, D0
		bgt.s   loc_1E77A
		st      $002D(A0)
		move.w  #$0000, $0012(A0)
		rts
loc_1E77A:
		st      $0036(A0)
loc_1E77E:
		rts
loc_1E780:
		tst.b   $002C(A0)
		bne.s   loc_1E7A4
		subq.w  #$01, $0030(A0)
		bgt.s   loc_1E7A4
		tst.b   $002D(A0)
		beq.s   loc_1E7A4
		move.b  #$07, $001C(A0)
		move.w  #$0024, $0030(A0)
		addi.b  #$02, $0025(A0)
loc_1E7A4:
		rts
loc_1E7A6:
		bsr.w     J_SingleObjLoad_07   ; loc_1E87C
		bne.s   loc_1E80E
		_move.b  #$51, 0(A1)
		move.b  #$04, $0024(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.l  #Aquis_Mappings, $0004(A1) ; loc_1E4E0
		move.w  #$24E0, $0002(A1)
		ori.b   #$04, $0001(A1)
		move.b  #$03, $0018(A1)
		move.b  #$02, $001C(A1)
		move.b  #$E5, $0020(A1)
		move.w  #$000C, D0
		move.w  #$0010, D1
		move.w  #$FD00, D2
		btst    #$00, $0022(A0)
		beq.s   loc_1E802
		neg.w   D1
		neg.w   D2
loc_1E802:
		sub.w   D0, $000C(A1)
		sub.w   D1, $0008(A1)
		move.w  D2, $0010(A1)
loc_1E80E:
		rts
loc_1E810:
		tst.b   $002D(A0)
		bne.s   loc_1E86E
		tst.b   $0036(A0)
		beq.s   loc_1E840
		move.w  $002E(A0), D0
		cmp.w   $000C(A0), D0
		ble.s   loc_1E864
		tst.b   $002C(A0)
		beq.s   loc_1E838
		move.w  $002A(A0), D0
		cmp.w   $000C(A0), D0
		bge.s   loc_1E864
		rts
loc_1E838:
		move.w  #$0180, $0012(A0)
		rts
loc_1E840:
		move.w  $002A(A0), D0
		cmp.w   $000C(A0), D0
		bge.s   loc_1E864
		tst.b   $002C(A0)
		beq.s   loc_1E85C
		move.w  $002E(A0), D0
		cmp.w   $000C(A0), D0
		ble.s   loc_1E864
		rts
loc_1E85C:
		move.w  #$FE80, $0012(A0)
		rts
loc_1E864:
		move.w  D0, $000C(A0)
		move.w  #$0000, $0012(A0)
loc_1E86E:
		rts
;=============================================================================== 
; Object 0x51 - Oil Ocean - Aquis (Seahorse)  
; [ End ]		         
;===============================================================================  
J_DisplaySprite_0F: ; loc_1E870:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_23: ; loc_1E876:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad_07: ; loc_1E87C:
		jmp     SingleObjLoad        ; (loc_E772)
J_MarkObjGone_15: ; loc_1E882:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_08: ; loc_1E888:
		jmp     AnimateSprite           ; (loc_D412)
J_ObjectFall_03: ; loc_1E88E:
		jmp     ObjectFall              ; (loc_D24E)
J_SpeedToPos_0D: ; loc_1E894:
		jmp     SpeedToPos              ; (loc_D27A)
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x4B - Green Hill - Buzz Bomber  
; [ Begin ]		         
;===============================================================================		  
Obj_0x4B_Buzz_Bomber: ; loc_1E89C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1E8AA(PC, D0), D1
		jmp     loc_1E8AA(PC, D1)
loc_1E8AA:
		dc.w    loc_1E8FC-loc_1E8AA
		dc.w    loc_1E9A8-loc_1E8AA
		dc.w    loc_1E8C4-loc_1E8AA
		dc.w    loc_1E8B2-loc_1E8AA
loc_1E8B2:
		bsr.w     J_SpeedToPos_0E         ; loc_1EBB0
		lea     (loc_1EAF2).l, A1
		bsr.w     J_AnimateSprite_09      ; loc_1EB98
		bra.w     loc_1EBA4
loc_1E8C4:
		move.l  $002A(A0), A1
		tst.b   (A1)
		beq.w    J_DeleteObject_24       ; loc_1EB8C
		tst.w   $0030(A1)
		bmi.s   loc_1E8D6
		rts
loc_1E8D6:
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		lea     (loc_1EAF2).l, A1
		bsr.w     J_AnimateSprite_09      ; loc_1EB98
		bra.w     loc_1EBA4
loc_1E8FC:
		move.l  #Obj4B_MapUnc_1EB0E, $0004(A0) ; Obj4B_MapUnc_1EB0E
		move.w  #$03E6, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_20 ; loc_1EBAA
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$18, $0017(A0)
		move.b  #$03, $0018(A0)
		addq.b  #$02, $0024(A0)
		bsr.w     J_SingleObjLoad2_0B  ; loc_1EB92
		bne.s   loc_1E9A6
		_move.b  #$4B, 0(A1)
		move.b  #$04, $0024(A1)
		move.l  #Obj4B_MapUnc_1EB0E, $0004(A1) ; Obj4B_MapUnc_1EB0E
		move.w  #$03E6, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_03 ; loc_1EB9E
		move.b  #$04, $0018(A1)
		move.b  #$10, $0019(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  #$01, $001C(A1)
		move.l  A0, $002A(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$0100, $002E(A0)
		move.w  #$FF00, $0010(A0)
		btst    #$00, $0001(A0)
		beq.s   loc_1E9A6
		neg.w   $0010(A0)
loc_1E9A6:
		rts
loc_1E9A8:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1E9C4(PC, D0), D1
		jsr     loc_1E9C4(PC, D1)
		lea     (loc_1EAF2).l, A1
		bsr.w     J_AnimateSprite_09      ; loc_1EB98
		bra.w     loc_1EBA4
loc_1E9C4:
		dc.w    loc_1E9C8-loc_1E9C4
		dc.w    loc_1EA58-loc_1E9C4
loc_1E9C8:
		bsr.w     loc_1EA0A
		subq.w  #$01, $0030(A0)
		move.w  $0030(A0), D0
		cmpi.w  #$000F, D0
		beq.s   loc_1E9EE
		tst.w   D0
		bpl.s   loc_1E9EC
		subq.w  #$01, $002E(A0)
		bgt.w    J_SpeedToPos_0E         ; loc_1EBB0
		move.w  #$001E, $0030(A0)
loc_1E9EC:
		rts
loc_1E9EE:
		sf      $0032(A0)
		neg.w   $0010(A0)
		bchg    #0, $0001(A0)
		bchg    #0, $0022(A0)
		move.w  #$0100, $002E(A0)
		rts
loc_1EA0A:
		tst.b   $0032(A0)
		bne.w    loc_1EA56
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		move.w  D0, D1
		bpl.s   loc_1EA20
		neg.w   D0
loc_1EA20:
		cmpi.w  #$0028, D0
		blt.s   loc_1EA56
		cmpi.w  #$0030, D0
		bgt.s   loc_1EA56
		tst.w   D1
		bpl.s   loc_1EA3A
		btst    #$00, $0001(A0)
		beq.s   loc_1EA56
		bra.s   loc_1EA42
loc_1EA3A:
		btst    #$00, $0001(A0)
		bne.s   loc_1EA56
loc_1EA42:
		st      $0032(A0)
		addq.b  #$02, $0025(A0)
		move.b  #$03, $001C(A0)
		move.w  #$0032, $0034(A0)
loc_1EA56:
		rts
loc_1EA58:
		move.w  $0034(A0), D0
		subq.w  #$01, D0
		blt.s   loc_1EA6C
		move.w  D0, $0034(A0)
		cmpi.w  #$0014, D0
		beq.s   loc_1EA72
		rts
loc_1EA6C:
		subq.b  #$02, $0025(A0)
		rts
loc_1EA72:
		jsr     SingleObjLoad2      ; loc_E788
		bne.s   loc_1EAEC
		_move.b  #$4B, 0(A1)
		move.b  #$06, $0024(A1)
		move.l  #Obj4B_MapUnc_1EB0E, $0004(A1) ; Obj4B_MapUnc_1EB0E
		move.w  #$03E6, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_03 ; loc_1EB9E
		move.b  #$04, $0018(A1)
		move.b  #$98, $0020(A1)
		move.b  #$10, $0019(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  #$02, $001C(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		addi.w  #$0018, $000C(A1)
		move.w  #$000D, D0
		move.w  #$0180, $0012(A1)
		move.w  #$FE80, $0010(A1)
		btst    #$00, $0001(A1)
		beq.s   loc_1EAEC
		neg.w   $0010(A1)
		neg.w   D0
loc_1EAEC:
		add.w   D0, $0008(A1)
		rts		
loc_1EAF2:
		dc.w    loc_1EAFA-loc_1EAF2
		dc.w    loc_1EAFD-loc_1EAF2
		dc.w    loc_1EB01-loc_1EAF2
		dc.w    loc_1EB05-loc_1EAF2
loc_1EAFA:		
		dc.b    $0F, $00, $FF		         
loc_1EAFD:
		dc.b    $02, $03, $04, $FF
loc_1EB01:		
		dc.b    $03, $05, $06, $FF
loc_1EB05:		
		dc.b    $09, $01, $01, $01, $01, $01, $FD, $00, $00 
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4B_MapUnc_1EB0E:	BINCLUDE	"mappings/sprite/obj4B.bin"

;=============================================================================== 
; Object 0x4B - Green Hill - Buzz Bomber  
; [ End ]		         
;===============================================================================  
		align 4

J_DeleteObject_24: ; loc_1EB8C:
		jmp     DeleteObject            ; (loc_D3B4)
J_SingleObjLoad2_0B: ; loc_1EB92:
		jmp     SingleObjLoad2      ; loc_E788
J_AnimateSprite_09: ; loc_1EB98:
		jmp     AnimateSprite           ; loc_D412
J_Adjust2PArtPointer2_03: ; loc_1EB9E:
		jmp     Adjust2PArtPointer2   ; loc_DC4C
loc_1EBA4:
		jmp     loc_D340
J_Adjust2PArtPointer_20: ; loc_1EBAA:
		jmp     Adjust2PArtPointer     ; loc_DC30
J_SpeedToPos_0E: ; loc_1EBB0:
		jmp     SpeedToPos              ; loc_D27A
		dc.w    $0000		   ; Filler		
;=============================================================================== 
; Object 0x4A - Oil Ocean - Octus
; [ Begin ]		         
;===============================================================================		 
Obj_0x4A_Octus: ; loc_1EBB8:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1EBC6(PC, D0), D1
		jmp     loc_1EBC6(PC, D1)
loc_1EBC6:          
		dc.w    loc_1EBF6-loc_1EBC6
		dc.w    loc_1EC5C-loc_1EBC6
		dc.w    loc_1EBEA-loc_1EBC6
		dc.w    loc_1EBCE-loc_1EBC6
loc_1EBCE:
		subi.w  #$0001, $002C(A0)
		bmi.s   loc_1EBD8
		rts
loc_1EBD8:
		bsr.w     J_ObjectFall_04         ; loc_1EE60
loc_1EBDC:
		lea     (loc_1EDAA).l, A1
		bsr.w     J_AnimateSprite_0A      ; loc_1EE5A
		bra.w     J_MarkObjGone_16        ; loc_1EE54
loc_1EBEA:
		subq.w  #$01, $002C(A0)
		beq.w    J_DeleteObject_25       ; loc_1EE4E
		bra.w     J_DisplaySprite_10      ; loc_1EE48
loc_1EBF6:
		move.l  #Octus_Mappings, $0004(A0) ; loc_1EDBC
		move.w  #$238A, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$08, $0017(A0)
		bsr.w     J_ObjectFall_04         ; loc_1EE60
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_1EC54
		add.w   D1, $000C(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bpl.s   loc_1EC54
loc_1EC4E:
		bchg    #0, $0022(A0)
loc_1EC54:
		move.w  $000C(A0), $002A(A0)
		rts
loc_1EC5C:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1EC78(PC, D0), D1
		jsr     loc_1EC78(PC, D1)
		lea     (loc_1EDAA).l, A1
		bsr.w     J_AnimateSprite_0A      ; loc_1EE5A
		bra.w     J_MarkObjGone_16        ; loc_1EE54
loc_1EC78:
		dc.w    loc_1EC80-loc_1EC78
		dc.w    loc_1ECA0-loc_1EC78
		dc.w    loc_1ECC2-loc_1EC78
		dc.w    loc_1ED94-loc_1EC78
loc_1EC80:
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		cmpi.w  #$0080, D0
		bgt.s   loc_1EC9E
		cmpi.w  #$FF80, D0
		blt.s   loc_1EC9E
		addq.b  #$02, $0025(A0)
		move.b  #$01, $001C(A0)
loc_1EC9E:
		rts
loc_1ECA0:
		subi.l  #$00018000, $000C(A0)
		move.w  $002A(A0), D0
		sub.w   $000C(A0), D0
		cmpi.w  #$0020, D0
		ble.s   loc_1ECC0
		addq.b  #$02, $0025(A0)
		move.w  #$0000, $002C(A0)
loc_1ECC0:
		rts
loc_1ECC2:
		subi.w  #$0001, $002C(A0)
		beq.w    loc_1ED8E
		bpl.w    loc_1ED8C
		move.w  #$001E, $002C(A0)
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_1ED28
		_move.b  #$4A, 0(A1)
		move.b  #$04, $0024(A1)
		move.l  #Octus_Mappings, $0004(A1) ; loc_1EDBC
		move.b  #$04, $001A(A1)
		move.w  #$24C6, $0002(A1)
		move.b  #$03, $0018(A1)
		move.b  #$10, $0019(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$001E, $002C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0022(A0), $0022(A1)
loc_1ED28:
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_1ED8C
		_move.b  #$4A, 0(A1)
		move.b  #$06, $0024(A1)
		move.l  #Octus_Mappings, $0004(A1) ; loc_1EDBC
		move.w  #$24C6, $0002(A1)
		move.b  #$04, $0018(A1)
		move.b  #$10, $0019(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.w  #$000F, $002C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  #$02, $001C(A1)
		move.w  #$FA80, $0010(A1)
		btst    #$00, $0001(A1)
		beq.s   loc_1ED8C
		neg.w   $0010(A1)
loc_1ED8C:
		rts
loc_1ED8E:
		addq.b  #$02, $0025(A0)
		rts
loc_1ED94:
		move.w  #$FFFA, D0
		btst    #$00, $0001(A0)
		beq.s   loc_1EDA2
		neg.w   D0
loc_1EDA2:
		add.w   D0, $0008(A0)
		bra.w     J_MarkObjGone_16        ; loc_1EE54  
loc_1EDAA:
		dc.w    loc_1EDB0-loc_1EDAA
		dc.w    loc_1EDB3-loc_1EDAA
		dc.w    loc_1EDB8-loc_1EDAA
loc_1EDB0:
		dc.b    $0F, $00, $FF
loc_1EDB3:
		dc.b    $03, $01, $02, $03, $FF
loc_1EDB8:
		dc.b    $02, $05, $06, $FF
Octus_Mappings:		
loc_1EDBC:
		dc.w    loc_1EDCA-loc_1EDBC
		dc.w    loc_1EDDC-loc_1EDBC
		dc.w    loc_1EDF6-loc_1EDBC
		dc.w    loc_1EE10-loc_1EDBC
		dc.w    loc_1EE2A-loc_1EDBC
		dc.w    loc_1EE34-loc_1EDBC
		dc.w    loc_1EE3E-loc_1EDBC
loc_1EDCA:
		dc.w    $0002
		dc.l    $F00D0000, $0000FFF0, $000D0008, $0004FFF0
loc_1EDDC:
		dc.w    $0003
		dc.l    $F00D0000, $0000FFF0, $00090010, $0008FFE8
		dc.l    $00090016, $000B0000
loc_1EDF6:
		dc.w    $0003
		dc.l    $F00D0000, $0000FFF0, $0009001C, $000EFFE8
		dc.l    $00090022, $00110000
loc_1EE10:
		dc.w    $0003
		dc.l    $F00D0000, $0000FFF0, $00090028, $0014FFE8
		dc.l    $0009002E, $00170000
loc_1EE2A:
		dc.w    $0001
		dc.l    $F0010034, $001AFFF7
loc_1EE34:
		dc.w    $0001
		dc.l    $F2010036, $001BFFF0
loc_1EE3E:
		dc.w    $0001
		dc.l    $F2010038, $001CFFF0				         
;=============================================================================== 
; Object 0x4A - Oil Ocean - Octus
; [ End ]		         
;===============================================================================    
J_DisplaySprite_10: ; loc_1EE48:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_25: ; loc_1EE4E:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_16: ; loc_1EE54:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_0A: ; loc_1EE5A:
		jmp     AnimateSprite           ; (loc_D412)
J_ObjectFall_04: ; loc_1EE60:
		jmp     ObjectFall              ; (loc_D24E)
		dc.w    $0000		   ; Filler 
;=============================================================================== 
; Object 0x4C - Hidden Palace - Batbot
; [ Begin ]		         
;=============================================================================== 
Obj_0x4C_Batbot: ; loc_1EE68:  
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1EE76(PC, D0), D1
		jmp     loc_1EE76(PC, D1)
loc_1EE76:
		dc.w    loc_1EE7C-loc_1EE76
		dc.w    loc_1EEBA-loc_1EE76
		dc.w    loc_1EF28-loc_1EE76
loc_1EE7C:		
		move.l  #Obj4C_MapUnc_1F106, $0004(A0)  ; loc_1F106
		move.w  #$2530, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$08, $0017(A0)
		addq.b  #$02, $0024(A0)
		move.w  $000C(A0), $002E(A0)
		rts
loc_1EEBA:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1EEDA(PC, D0), D1
		jsr     loc_1EEDA(PC, D1)
		bsr.w     loc_1EEE0
		lea     (loc_1F0D2).l, A1
		bsr.w     J_AnimateSprite_0B      ; loc_1F2E2
		bra.w     J_MarkObjGone_17        ; loc_1F2DC
loc_1EEDA:
		dc.w    loc_1F046-loc_1EEDA
		dc.w    loc_1F07E-loc_1EEDA
		dc.w    loc_1F08A-loc_1EEDA		
loc_1EEE0:
		move.b  $003F(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		asr.w   #$06, D0
		add.w   $002E(A0), D0
		move.w  D0, $000C(A0)
		addq.b  #$04, $003F(A0)
		rts
loc_1EEFA:		
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		cmpi.w  #$0080, D0
		bgt.s   loc_1EF26
		cmpi.w  #$FF80, D0
		blt.s   loc_1EF26
		move.b  #$04, $0025(A0)
		move.b  #$02, $001C(A0)
		move.w  #$0008, $002A(A0)
		move.b  #$00, $003E(A0)
loc_1EF26:
		rts
loc_1EF28:
		bsr.w     loc_1F026
		bsr.w     loc_1EFC8
		bsr.w     loc_1EF48
		bsr.w     J_SpeedToPos_0F         ; loc_1F2E8
		lea     (loc_1F0D2).l, A1
		bsr.w     J_AnimateSprite_0B      ; loc_1F2E2
		bra.w     J_MarkObjGone_17        ; loc_1F2DC
		rts
loc_1EF48:
		tst.b   $003D(A0)
		beq.s   loc_1EF5A
		bset    #$00, $0001(A0)
		bset    #$00, $0022(A0)
loc_1EF5A:
		rts
loc_1EF5C:		
		subi.w  #$0001, $002C(A0)
		bpl.s   loc_1EFA6
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		cmpi.w  #$0060, D0
		bgt.s   loc_1EFA8
		cmpi.w  #$FFA0, D0
		blt.s   loc_1EFA8
		tst.w   D0
		bpl.s   loc_1EF80
		st      $003D(A0)
loc_1EF80:
		move.b  #$40, $003F(A0)
		move.w  #$0400, $0014(A0)
		move.b  #$04, $0024(A0)
		move.b  #$03, $001C(A0)
		move.w  #$000C, $002A(A0)
		move.b  #$01, $003E(A0)
		moveq   #$00, D0
loc_1EFA6:
		rts
loc_1EFA8:
		cmpi.w  #$0080, D0
		bgt.s   loc_1EFB4
		cmpi.w  #$FF80, D0
		bgt.s   loc_1EFA6
loc_1EFB4:
		move.b  #$01, $001C(A0)
		move.b  #$00, $0025(A0)
		move.w  #$0018, $002A(A0)
		rts
loc_1EFC8:
		tst.b   $003D(A0)
		bne.s   loc_1EFE2
		moveq   #$00, D0
		move.b  $003F(A0), D0
		cmpi.w  #$00C0, D0
		bge.s   loc_1EFF6
		addq.b  #$02, D0
		move.b  D0, $003F(A0)
		rts
loc_1EFE2:
		moveq   #$00, D0
		move.b  $003F(A0), D0
		cmpi.w  #$00C0, D0
		beq.s   loc_1EFF6
		subq.b  #$02, D0
		move.b  D0, $003F(A0)
		rts
loc_1EFF6:
		sf      $003D(A0)
		move.b  #$00, $001C(A0)
		move.b  #$02, $0024(A0)
		move.b  #$00, $0025(A0)
		move.w  #$0018, $002A(A0)
		move.b  #$01, $001C(A0)
		bclr    #$00, $0001(A0)
		bclr    #$00, $0022(A0)
		rts
loc_1F026:
		move.b  $003F(A0), D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  $0014(A0), D1
		asr.l   #$08, D1
		move.w  D1, $0010(A0)
		muls.w  $0014(A0), D0
		asr.l   #$08, D0
		move.w  D0, $0012(A0)
		rts
loc_1F046:
		subi.w  #$0001, $002A(A0)
		bpl.s   loc_1F07C
		bsr.w     loc_1EEFA
		beq.s   loc_1F07C
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.b  #$FF, D0
		bne.s   loc_1F07C
		move.w  #$0018, $002A(A0)
		move.w  #$001E, $002C(A0)
		addq.b  #$02, $0025(A0)
		move.b  #$01, $001C(A0)
		move.b  #$00, $003E(A0)
loc_1F07C:
		rts
loc_1F07E:
		subq.b  #$01, $002A(A0)
		bpl.s   loc_1F088
		subq.b  #$02, $0025(A0)
loc_1F088:
		rts
loc_1F08A:
		bsr.w     loc_1EF5C
		beq.s   loc_1F0D0
		subi.w  #$0001, $002A(A0)
		bne.s   loc_1F0D0
		move.b  $003E(A0), D0
		beq.s   loc_1F0B8
		move.b  #$00, $003E(A0)
		move.w  #$0008, $002A(A0)
		bset    #$00, $0001(A0)
		bset    #$00, $0022(A0)
		rts
loc_1F0B8:
		move.b  #$01, $003E(A0)
		move.w  #$000C, $002A(A0)
		bclr    #$00, $0001(A0)
		bclr    #$00, $0022(A0)
loc_1F0D0:
		rts
loc_1F0D2:
		dc.w    loc_1F0DA-loc_1F0D2
		dc.w    loc_1F0DE-loc_1F0D2
		dc.w    loc_1F0ED-loc_1F0D2
		dc.w    loc_1F0FE-loc_1F0D2
loc_1F0DA:  
		dc.b    $01, $00, $05, $FF
loc_1F0DE:
		dc.b    $01, $01, $06, $01, $06, $02, $07, $02, $07, $01, $06, $01, $06, $FD, $00
loc_1F0ED:
		dc.b    $01, $01, $06, $01, $06, $02, $07, $03, $08, $04, $09, $04, $09, $03, $08, $FE
		dc.b    $0A
loc_1F0FE:
		dc.b    $03, $0A, $0B, $0C, $0D, $0E, $FF, $00
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj4C_MapUnc_1F106:	BINCLUDE	"mappings/sprite/obj4C.bin"
; ===========================================================================
		align 4

J_MarkObjGone_17: ; loc_1F2DC:
		jmp     MarkObjGone             ; loc_D2A0
J_AnimateSprite_0B: ; loc_1F2E2:
		jmp     AnimateSprite           ; loc_D412
J_SpeedToPos_0F: ; loc_1F2E8:
		jmp     SpeedToPos              ; loc_D27A
		dc.w    $0000		   ; Filler
;=============================================================================== 
; Object 0x4E - (Desert Level) - Crocobot 
; [ Begin ]		         
;===============================================================================		   
Obj_0x4E_Crocobot: ; loc_1F2F0:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1F2FE(PC, D0), D1
		jmp     loc_1F2FE(PC, D1)
loc_1F2FE:
		dc.w    loc_1F302-loc_1F2FE
		dc.w    loc_1F352-loc_1F2FE
loc_1F302:
		move.l  #Crocobot_Mappings, $0004(A0) ; loc_1F420
		move.w  #$2300, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$08, $0017(A0)
		bsr.w     J_ObjectFall_05         ; loc_1F5DC
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_1F350
		add.w   D1, $000C(A0)
		move.w  #$0000, $0012(A0)
		addq.b  #$02, $0024(A0)
loc_1F350:
		rts
loc_1F352:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1F36E(PC, D0), D1
		jsr     loc_1F36E(PC, D1)
		lea     (loc_1F406).l, A1
		bsr.w     J_AnimateSprite_0C      ; loc_1F5D6
		bra.w     J_MarkObjGone_18        ; loc_1F5D0
loc_1F36E:
		dc.w    loc_1F372-loc_1F36E
		dc.w    loc_1F396-loc_1F36E
loc_1F372:
		subq.w  #$01, $0030(A0)
		bpl.s   loc_1F394
		addq.b  #$02, $0025(A0)
		move.w  #$FF40, $0010(A0)
		move.b  #$00, $001C(A0)
		bchg    #0, $0022(A0)
		bne.s   loc_1F394
		neg.w   $0010(A0)
loc_1F394:
		rts
loc_1F396:
		bsr.w     loc_1F3CE
		bsr.w     J_SpeedToPos_10         ; loc_1F5E2
		jsr     ObjHitFloor             ; (loc_13898)
		cmpi.w  #$FFF8, D1
		blt.s   loc_1F3B6
		cmpi.w  #$000C, D1
		bge.s   loc_1F3B6
		add.w   D1, $000C(A0)
		rts
loc_1F3B6:
		subq.b  #$02, $0025(A0)
		move.w  #$003B, $0030(A0)
		move.w  #$0000, $0010(A0)
		move.b  #$01, $001C(A0)
		rts
loc_1F3CE:
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bmi.s   loc_1F3E8
		cmpi.w  #$0040, D0
		bgt.s   loc_1F3FE
		btst    #$00, $0022(A0)
		beq.s   loc_1F3F6
		rts
loc_1F3E8:
		cmpi.w  #$FFC0, D0
		blt.s   loc_1F3FE
		btst    #$00, $0022(A0)
		beq.s   loc_1F3FE
loc_1F3F6:
		move.b  #$02, $001C(A0)
		rts
loc_1F3FE:
		move.b  #$00, $001C(A0)
		rts        

loc_1F406:
		dc.w    loc_1F40C-loc_1F406
		dc.w    loc_1F414-loc_1F406
		dc.w    loc_1F417-loc_1F406
loc_1F40C:
		dc.b    $03, $00, $04, $02, $03, $01, $05, $FF
loc_1F414:
		dc.b    $0F, $00, $FF
loc_1F417:
		dc.b    $03, $06, $0A, $08, $09, $07, $0B, $FF, $00
Crocobot_Mappings:		
loc_1F420:
		dc.w    loc_1F438-loc_1F420
		dc.w    loc_1F45A-loc_1F420
		dc.w    loc_1F47C-loc_1F420
		dc.w    loc_1F49E-loc_1F420
		dc.w    loc_1F4C0-loc_1F420
		dc.w    loc_1F4E2-loc_1F420
		dc.w    loc_1F504-loc_1F420
		dc.w    loc_1F526-loc_1F420
		dc.w    loc_1F548-loc_1F420
		dc.w    loc_1F56A-loc_1F420
		dc.w    loc_1F58C-loc_1F420
		dc.w    loc_1F5AE-loc_1F420
loc_1F438:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050020, $0010000C
loc_1F45A:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050024, $0012000C
loc_1F47C:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050028, $0014000C
loc_1F49E:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050020, $0010000C
loc_1F4C0:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050024, $0012000C
loc_1F4E2:
		dc.w    $0004
		dc.l    $F80E0000, $0000FFE4, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050028, $0014000C
loc_1F504:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050020, $0010000C
loc_1F526:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050024, $0012000C
loc_1F548:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001C, $000E0004, $00050028, $0014000C
loc_1F56A:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050020, $0010000C
loc_1F58C:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050024, $0012000C
loc_1F5AE:
		dc.w    $0004
		dc.l    $F00B000C, $0006FFEC, $F8050018, $000C0004
		dc.l    $0001001E, $000F0004, $00050028, $0014000C		
;=============================================================================== 
; Object 0x4E - (Desert Level) - Crocobot 
; [ End ]		         
;===============================================================================		 
J_MarkObjGone_18: ; loc_1F5D0:
		jmp     MarkObjGone             ; (loc_D2A0)
J_AnimateSprite_0C: ; loc_1F5D6:
		jmp     AnimateSprite           ; (loc_D412)
J_ObjectFall_05: ; loc_1F5DC:
		jmp     ObjectFall              ; (loc_D24E)
J_SpeedToPos_10: ; loc_1F5E2:
		jmp     SpeedToPos              ; (loc_D27A)
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 53 - Masher (jumping piranha fish badnik) from GHZ
; ---------------------------------------------------------------------------
; Sprite_1F5E8: Obj_0x53_Masher:
Obj53:
		moveq   #0,d0
		move.b	$24(a0),d0
		move.w	Obj53_Index(pc,d0.w),d1
		jsr	Obj53_Index(pc,d1.w)
		bra.w	JmpTo19_MarkObjGone
; ===========================================================================
; off_1F5FA:
Obj53_Index:
		dc.w    Obj53_Init-Obj53_Index
		dc.w    Obj53_Main-Obj53_Index
; ===========================================================================
; loc_1F5FE:
Obj53_Init:
		addq.b	#2,$24(a0)
		move.l	#Obj53_MapUnc_1F696,4(a0)
		move.w	#$41C,2(a0)
		bsr.w	JmpTo33_Adjust2PArtPointer
		move.b	#4,1(a0)
		move.b	#4,$18(a0)
		move.b	#9,$20(a0)
		move.b	#$10,$19(a0)
		move.w	#-$400,$12(a0)
		move.w	$C(a0),$30(a0)
; loc_1F638:
Obj53_Main:
		lea	(Ani_obj5C).l,a1
		bsr.w	JmpTo13_AnimateSprite
		bsr.w	JmpTo17_SpeedToPos
		addi.w	#$18,$12(a0)
		move.w	$30(a0),d0
		cmp.w	$C(a0),d0
		bcc.s	+
		move.w	d0,$C(a0)
		move.w	#-$500,$12(a0)
+
		move.b	#1,$1C(a0)
		subi.w	#$C0,d0
		cmp.w	$C(a0),d0
		bcc.s	return_1F682
		move.b	#0,$1C(a0)
		tst.w	$12(a0)
		bmi.s	return_1F682
		move.b	#2,$1C(a0)

return_1F682:
		rts
; ===========================================================================
; animation script
; off_1F684:
Ani_obj5C:	dc.w	byte_1F68A-Ani_obj5C
		dc.w	byte_1F68E-Ani_obj5C
		dc.w	byte_1F692-Ani_obj5C
byte_1F68A:	dc.b	7,  0,  1,$FF
byte_1F68E:	dc.b	3,  0,  1,$FF
byte_1F692:	dc.b	7,  0,$FF
		even
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj53_MapUnc_1F696:	BINCLUDE	"mappings/sprite/obj53.bin"

; ===========================================================================
		align 4

; loc_1F6D0:
JmpTo19_MarkObjGone:
		jmp	(MarkObjGone).l
; loc_1F6D6:
JmpTo13_AnimateSprite:
		jmp	(AnimateSprite).l
; loc_1F6DC:
JmpTo33_Adjust2PArtPointer:
		jmp	(Adjust2PArtPointer).l
; loc_1F6E2:
JmpTo17_SpeedToPos:
		jmp	(SpeedToPos).l
;=============================================================================== 
; Object 0x54 - Green Hill - Motobug
; [ Begin ]		         
;===============================================================================  
Obj_0x54_Motobug: ; loc_1F6E8:		 
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1F6F6(PC, D0), D1
		jmp     loc_1F6F6(PC, D1)
loc_1F6F6:		
		dc.w    loc_1F700-loc_1F6F6
		dc.w    loc_1F7A0-loc_1F6F6
		dc.w    loc_1F8CC-loc_1F6F6
		dc.w    loc_1F904-loc_1F6F6
		dc.w    loc_1F88A-loc_1F6F6
loc_1F700:
		move.l  #Obj54_MapUnc_1F938, $0004(A0) ; loc_1F938
		move.w  #$0402, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_22 ; loc_1F98A
		ori.b   #$04, $0001(A0)
		move.b  #$0A, $0020(A0)
		move.b  #$04, $0018(A0)
		move.b  #$10, $0019(A0)
		move.b  #$10, $0016(A0)
		move.b  #$0E, $0017(A0)
		bsr.w     J_SingleObjLoad2_0C  ; loc_1F972
		bne.s   loc_1F788
		_move.b  #$54, 0(A1)
		move.b  #$06, $0024(A1)
		move.l  #Obj54_MapUnc_1F938, $0004(A1) ; loc_1F938
		move.w  #$2402, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_04 ; loc_1F97E
		move.b  #$03, $0018(A1)
		move.b  #$10, $0019(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0001(A0), $0001(A1)
		move.l  A0, $002A(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		move.b  #$02, $001A(A1)
loc_1F788:
		addq.b  #$02, $0024(A0)
		move.w  #$FF80, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1F79A
		neg.w   D0
loc_1F79A:
		move.w  D0, $0010(A0)
		rts
loc_1F7A0:
		bsr.w     loc_1F7E8
		bsr.w     J_SpeedToPos_12         ; loc_1F996
		jsr     ObjHitFloor             ; loc_13898
		cmpi.w  #$FFF8, D1
		blt.s   loc_1F7CC
		cmpi.w  #$000C, D1
		bge.s   loc_1F7CC
		add.w   D1, $000C(A0)
		lea     (loc_1F92C).l, A1
		bsr.w     J_AnimateSprite_0E      ; loc_1F978
		bra.w     loc_1F984
loc_1F7CC:
		addq.b  #$02, $0024(A0)
		move.w  #$0014, $0030(A0)
		st      $0034(A0)
		lea     (loc_1F92C).l, A1
		bsr.w     J_AnimateSprite_0E      ; loc_1F978
		bra.w     loc_1F984
loc_1F7E8:
		tst.b   $0035(A0)
		bne.s   loc_1F82A
		move.w  ($FFFFB008).w, D0
		sub.w   $0008(A0), D0
		cmpi.w  #$0064, D0
		bgt.s   loc_1F82A
		cmpi.w  #$FF9C, D0
		blt.s   loc_1F82A
		tst.w   D0
		bmi.s   loc_1F810
		btst    #$00, $0022(A0)
		beq.s   loc_1F82A
		bra.s   loc_1F818
loc_1F810:
		btst    #$00, $0022(A0)
		bne.s   loc_1F82A
loc_1F818:
		move.w  $0010(A0), D0
		asl.w   #$02, D0
		move.w  D0, $0010(A0)
		st      $0035(A0)
		bsr.w     loc_1F82C
loc_1F82A:
		rts
loc_1F82C:
		bsr.w     J_SingleObjLoad2_0C  ; loc_1F972
		bne.s   loc_1F888
		_move.b  #$54, 0(A1)
		move.b  #$08, $0024(A1)
		move.l  #Obj4B_MapUnc_1EB0E, $0004(A1) ; Obj4B_MapUnc_1EB0E
		move.w  #$03E6, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_04 ; loc_1F97E
		move.b  #$04, $0018(A1)
		move.b  #$10, $0019(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0001(A0), $0001(A1)
		move.l  A0, $002A(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		addq.w  #$07, $000C(A1)
		addi.w  #$000D, $0008(A1)
		move.b  #$01, $001C(A1)
loc_1F888:
		rts
loc_1F88A:
		move.l  $002A(A0), A1
		cmpi.b  #$54, (A1)
		bne.w    J_DeleteObject_26       ; loc_1F96C
		tst.b   $0034(A1)
		bne.w    J_DeleteObject_26       ; loc_1F96C
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		addq.w  #$07, $000C(A0)
		moveq   #$0D, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1F8BA
		neg.w   D0
loc_1F8BA:
		add.w   D0, $0008(A0)
		lea     (loc_1EAF2).l, A1
		bsr.w     J_AnimateSprite_0E      ; loc_1F978
		bra.w     loc_1F984
loc_1F8CC:
		subi.w  #$0001, $0030(A0)
		bpl.w    loc_1F984
		neg.w   $0010(A0)
		bsr.w     J_ObjectFall_06         ; loc_1F990
		move.w  $0010(A0), D0
		asr.w   #$02, D0
		move.w  D0, $0010(A0)
		bchg    #0, $0022(A0)
		bchg    #0, $0001(A0)
		subq.b  #$02, $0024(A0)
		sf      $0034(A0)
		sf      $0035(A0)
		bra.w     loc_1F984
loc_1F904:
		move.l  $002A(A0), A1
		cmpi.b  #$54, (A1)
		bne.w    J_DeleteObject_26       ; loc_1F96C
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		bra.w     loc_1F984
loc_1F92C:
		dc.w    loc_1F930-loc_1F92C
		dc.w    loc_1F934-loc_1F92C
loc_1F930:
		dc.b    $05, $00, $01, $FF
loc_1F934:
		dc.b    $01, $00, $01, $FF
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj54_MapUnc_1F938:	BINCLUDE	"mappings/sprite/obj54.bin"

;=============================================================================== 
; Object 0x54 - Green Hill - Motobug
; [ End ]		         
;=============================================================================== 
J_DeleteObject_26: ; loc_1F96C:
		jmp     DeleteObject            ; loc_D3B4
J_SingleObjLoad2_0C: ; loc_1F972:
		jmp     SingleObjLoad2      ; loc_E788
J_AnimateSprite_0E: ; loc_1F978:
		jmp     AnimateSprite           ; loc_D412
J_Adjust2PArtPointer2_04: ; loc_1F97E:
		jmp     Adjust2PArtPointer2   ; loc_DC4C
loc_1F984:
		jmp     loc_D340
J_Adjust2PArtPointer_22: ; loc_1F98A:
		jmp     Adjust2PArtPointer     ; loc_DC30
J_ObjectFall_06: ; loc_1F990:
		jmp     ObjectFall              ; loc_D24E
J_SpeedToPos_12: ; loc_1F996:
		jmp     SpeedToPos              ; loc_D27A   
;=============================================================================== 
; Object 0x57 - 
; [ Begin ]		         
;===============================================================================		    
Obj_0x57: ; loc_1F99C:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1F9AA(PC, D0), D1
		jmp     loc_1F9AA(PC, D1)
loc_1F9AA:
		dc.w    loc_1F9B6-loc_1F9AA
		dc.w    loc_1F9DC-loc_1F9AA
		dc.w    loc_1FA38-loc_1F9AA
		dc.w    loc_1FA6A-loc_1F9AA
		dc.w    loc_1FA94-loc_1F9AA
		dc.w    loc_1FAAE-loc_1F9AA
loc_1F9B6:
		move.b  #$00, $0020(A0)
		cmpi.w  #$29D0, $0008(A0)
		ble.s   loc_1F9CE
		subi.w  #$0001, $0008(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1F9CE:
		move.w  #$29D0, $0008(A0)
		addq.b  #$02, $0025(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1F9DC:
		moveq   #$00, D0
		move.b  $002C(A0), D0
		move.w  loc_1F9EA(PC, D0), D1
		jmp     loc_1F9EA(PC, D1)
loc_1F9EA:
		dc.w    loc_1F9EE-loc_1F9EA
		dc.w    loc_1FA14-loc_1F9EA
loc_1F9EE:
		cmpi.w  #$041E, $000C(A0)
		bge.s   loc_1FA00
		addi.w  #$0001, $000C(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FA00:
		addq.b  #$02, $002C(A0)
		bset    #$00, $002D(A0)
		move.w  #$003C, $002A(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FA14:
		subi.w  #$0001, $002A(A0)
		bpl.w    J_DisplaySprite_11      ; loc_202DC
		move.w  #$FE00, $0010(A0)
		addq.b  #$02, $0025(A0)
		move.b  #$0F, $0020(A0)
		bset    #$01, $002D(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FA38:
		bsr.w     loc_1FBA8
		bsr.w     loc_1FB86
		move.w  $002E(A0), D0
		lsr.w   #$01, D0
		subi.w  #$0014, D0
		move.w  D0, $000C(A0)
		move.w  #$0000, $002E(A0)
		move.l  $0008(A0), D2
		move.w  $0010(A0), D0
		ext.l   D0
		asl.l   #$08, D0
		add.l   D0, D2
		move.l  D2, $0008(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FA6A:
		subq.w  #$01, $003C(A0)
		dc.w    $6A00, $0000
		bset    #$00, $0022(A0)
		bclr    #$07, $0022(A0)
		clr.w   $0010(A0)
		addq.b  #$02, $0025(A0)
		move.w  #$FFDA, $003C(A0)
		move.w  #$000C, $002A(A0)
		rts
loc_1FA94:
		addq.w  #$01, $000C(A0)
		subq.w  #$01, $002A(A0)
		bpl.w    J_DisplaySprite_11      ; loc_202DC
		addq.b  #$02, $0025(A0)
		move.b  #$00, $002C(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FAAE:
		moveq   #$00, D0
		move.b  $002C(A0), D0
		move.w  loc_1FAC0(PC, D0), D1
		jsr     loc_1FAC0(PC, D1)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FAC0:
		dc.w    loc_1FAC6-loc_1FAC0
		dc.w    loc_1FB3E-loc_1FAC0
		dc.w    loc_1FB58-loc_1FAC0
loc_1FAC6:
		bclr    #$00, $002D(A0)
		bsr.w     J_SingleObjLoad2_0D ; loc_202EE
		bne.w    J_DisplaySprite_11      ; loc_202DC
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #Obj_0x57_Mappings, $0004(A1) ; loc_20168
		move.w  #$2540, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$20, $0019(A1)
		move.b  #$04, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addi.w  #$000C, $000C(A1)
		move.b  $0022(A0), $0022(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  #$08, $0024(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0010, $002A(A1)
		move.w  #$0032, $002A(A0)
		addq.b  #$02, $002C(A0)
		rts
loc_1FB3E:
		subi.w  #$0001, $002A(A0)
		bpl.s   loc_1FB56
		bset    #$02, $002D(A0)
		move.w  #$0060, $002A(A0)
		addq.b  #$02, $002C(A0)
loc_1FB56:
		rts
loc_1FB58:
		subq.w  #$01, $000C(A0)
		subi.w  #$0001, $002A(A0)
		bpl.s   loc_1FB84
		addq.w  #$01, $000C(A0)
		addq.w  #$02, $0008(A0)
		cmpi.w  #$2B08, $0008(A0)
		bcs.s   loc_1FB84
		tst.b   (Boss_defeated_flag).w
		bne.s   loc_1FB84
		move.b  #$01, (Boss_defeated_flag).w
		bra.w     J_DeleteObject_27       ; loc_202E2
loc_1FB84:
		rts
loc_1FB86:
		move.w  $0008(A0), D0
		cmpi.w  #$2720, D0
		ble.s   loc_1FB96
		cmpi.w  #$2B08, D0
		blt.s   loc_1FBA6
loc_1FB96:
		bchg    #0, $0022(A0)
		bchg    #0, $0001(A0)
		neg.w   $0010(A0)
loc_1FBA6:
		rts
loc_1FBA8:
		cmpi.b  #$06, $0025(A0)
		bcc.s   loc_1FBEE
		tst.b   $0022(A0)
		bmi.s   loc_1FBF0
		tst.b   $0020(A0)
		bne.s   loc_1FBEE
		tst.b   $003E(A0)
		bne.s   loc_1FBD2
		move.b  #$20, $003E(A0)
		move.w  #$00AC, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_1FBD2:
		lea     (Normal_palette_line2+2).w, A1
		moveq   #$00, D0
		tst.w   (A1)
		bne.s   loc_1FBE0
		move.w  #$0EEE, D0
loc_1FBE0:
		move.w  D0, (A1)
		subq.b  #$01, $003E(A0)
		bne.s   loc_1FBEE
		move.b  #$0F, $0020(A0)
loc_1FBEE:
		rts
loc_1FBF0:
		moveq   #$64, D0
		bsr.w     AddPoints               ; loc_22FD0
		move.b  #$06, $0025(A0)
		move.w  #$00B3, $003C(A0)
		bset    #$03, $002D(A0)
		rts		       
;=============================================================================== 
; Object 0x57 - 
; [ End ]		         
;===============================================================================   

;=============================================================================== 
; Object 0x58 - 
; [ Begin ]		         
;===============================================================================  
Obj_0x58: ; loc_1FC0A:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_1FC18(PC, D0), D1
		jmp     loc_1FC18(PC, D1)
loc_1FC18:
		dc.w    loc_1FC46-loc_1FC18
		dc.w    loc_1FCCC-loc_1FC18
		dc.w    loc_1FD1E-loc_1FC18
		dc.w    loc_1FE00-loc_1FC18
		dc.w    loc_1FC22-loc_1FC18
loc_1FC22:
		subi.w  #$0001, $000C(A0)
		subi.w  #$0001, $002A(A0)
		bpl.w    J_DisplaySprite_11      ; loc_202DC
		move.b  #$00, $0024(A0)
		lea     (loc_2012E).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FC46:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1FC54(PC, D0), D1
		jmp     loc_1FC54(PC, D1)
loc_1FC54:
		dc.w    loc_1FC58-loc_1FC54
		dc.w    loc_1FCA2-loc_1FC54
loc_1FC58:
		move.l  $0034(A0), A1
		cmpi.b  #$55, (A1)
		bne.w    J_DeleteObject_27       ; loc_202E2
		btst    #$00, $002D(A1)
		beq.s   loc_1FC7C
		move.b  #$01, $001C(A0)
		move.w  #$0018, $002A(A0)
		addq.b  #$02, $0025(A0)
loc_1FC7C:
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		lea     (loc_2012E).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FCA2:
		subi.w  #$0001, $002A(A0)
		bpl.s   loc_1FCBE
		cmpi.w  #$FFF0, $002A(A0)
		ble.w    J_DeleteObject_27       ; loc_202E2
		addi.w  #$0001, $000C(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FCBE:
		lea     (loc_2012E).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FCCC:
		move.l  $0034(A0), A1
		cmpi.b  #$55, (A1)
		bne.w    J_DeleteObject_27       ; loc_202E2
		btst    #$01, $002D(A1)
		beq.w    J_DisplaySprite_11      ; loc_202DC
		btst    #$02, $002D(A1)
		bne.w    loc_1FD0E
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		addi.w  #$0008, $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FD0E:
		move.b  #$08, $001A(A0)
		move.b  #$00, $0018(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FD1E:
		moveq   #$00, D0
		move.b  $0025(A0), D0
		move.w  loc_1FD2C(PC, D0), D1
		jmp     loc_1FD2C(PC, D1)
loc_1FD2C:
		dc.w    loc_1FD34-loc_1FD2C
		dc.w    loc_1FD52-loc_1FD2C
		dc.w    loc_1FDB2-loc_1FD2C
		dc.w    loc_1FDDE-loc_1FD2C
loc_1FD34:
		move.l  $0034(A0), A1
		cmpi.b  #$55, (A1)
		bne.w    J_DeleteObject_27       ; loc_202E2
		btst    #$01, $002D(A1)
		beq.w    J_DisplaySprite_11      ; loc_202DC
		addq.b  #$02, $0025(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FD52:
		move.l  $0034(A0), A1
		cmpi.b  #$55, (A1)
		bne.w    J_DeleteObject_27       ; loc_202E2
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		tst.b   $0022(A0)
		bpl.s   loc_1FD74
		addq.b  #$02, $0025(A0)
loc_1FD74:
		bsr.w     loc_1FB86
		bsr.w     J_ObjectFall_07         ; loc_20306
		jsr     ObjHitFloor             ; (loc_13898)
		tst.w   D1
		bpl.s   loc_1FD8A
		add.w   D1, $000C(A0)
loc_1FD8A:
		move.w  #$0100, $0012(A0)
		cmpi.b  #$01, $0018(A0)
		bne.s   loc_1FDA4
		move.w  $000C(A0), D0
		move.l  $0034(A0), A1
		add.w   D0, $002E(A1)
loc_1FDA4:
		lea     (loc_2023C).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FDB2:
		subi.w  #$0001, $002A(A0)
		bpl.w    J_DisplaySprite_11      ; loc_202DC
		addq.b  #$02, $0025(A0)
		move.w  #$000A, $002A(A0)
		move.w  #$FD00, $0012(A0)
		cmpi.b  #$01, $0018(A0)
		beq.w    J_DisplaySprite_11      ; loc_202DC
		neg.w   $0010(A0)
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FDDE:
		subq.w  #$01, $002A(A0)
		bpl.w    J_DisplaySprite_11      ; loc_202DC
		bsr.w     J_ObjectFall_07         ; loc_20306
		bsr.w     J_ObjHitFloor_01        ; loc_20300
		tst.w   D1
		bpl.s   loc_1FDFC
		move.w  #$FE00, $0012(A0)
		add.w   D1, $000C(A0)
loc_1FDFC:
		bra.w     J_MarkObjGone_1A        ; loc_202E8
loc_1FE00:
		move.l  $0034(A0), A1
		cmpi.b  #$55, (A1)
		bne.w    J_DeleteObject_27       ; loc_202E2
		btst    #$03, $002D(A1)
		bne.s   loc_1FE66
		bsr.w     loc_1FE86
		btst    #$01, $002D(A1)
		beq.w    J_DisplaySprite_11      ; loc_202DC
		move.b  #$8B, $0020(A0)
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		addi.w  #$0010, $000C(A0)
		move.w  #$FFCA, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1FE54
		neg.w   D0
loc_1FE54:
		add.w   D0, $0008(A0)
		lea     (loc_2023C).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FE66:
		move.w  #$FFFD, D0
		btst    #$00, $0022(A0)
		beq.s   loc_1FE74
		neg.w   D0
loc_1FE74:
		add.w   D0, $0008(A0)
		lea     (loc_2023C).l, A1
		bsr.w     J_AnimateSprite_0F      ; loc_202F4
		bra.w     J_DisplaySprite_11      ; loc_202DC
loc_1FE86:
		cmpi.b  #$01, $0021(A1)
		beq.s   loc_1FE90
		rts
loc_1FE90:
		move.w  $0008(A0), D0
		sub.w   ($FFFFB008).w, D0
		bpl.s   loc_1FEA4
		btst    #$00, $0022(A1)
		bne.s   loc_1FEAE
		rts
loc_1FEA4:
		btst    #$00, $0022(A1)
		beq.s   loc_1FEAE
		rts
loc_1FEAE:
		bset    #$03, $002D(A1)
		rts  
loc_1FEB6:
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_1FF2E
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20250, $0004(A1)
		move.w  #$24C0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$01, $0018(A1)
		move.b  #$10, $0016(A1)
		move.b  #$10, $0017(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addi.w  #$001C, $0008(A1)
		addi.w  #$000C, $000C(A1)
		move.w  #$FE00, $0010(A1)
		move.b  #$04, $0024(A1)
		move.b  #$04, $001A(A1)
		move.b  #$01, $001C(A1)
		move.w  #$0016, $002A(A1)
loc_1FF2E:
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_1FFA6
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20250, $0004(A1)
		move.w  #$24C0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$01, $0018(A1)
		move.b  #$10, $0016(A1)
		move.b  #$10, $0017(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addi.w  #$FFF4, $0008(A1)
		addi.w  #$000C, $000C(A1)
		move.w  #$FE00, $0010(A1)
		move.b  #$04, $0024(A1)
		move.b  #$04, $001A(A1)
		move.b  #$01, $001C(A1)
		move.w  #$004B, $002A(A1)
loc_1FFA6:
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_2001E
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20250, $0004(A1)
		move.w  #$24C0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$02, $0018(A1)
		move.b  #$10, $0016(A1)
		move.b  #$10, $0017(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addi.w  #$FFD4, $0008(A1)
		addi.w  #$000C, $000C(A1)
		move.w  #$FE00, $0010(A1)
		move.b  #$04, $0024(A1)
		move.b  #$06, $001A(A1)
		move.b  #$02, $001C(A1)
		move.w  #$0030, $002A(A1)
loc_2001E:
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_2007E
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20250, $0004(A1)
		move.w  #$24C0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$10, $0019(A1)
		move.b  #$01, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addi.w  #$FFCA, $0008(A1)
		addi.w  #$0008, $000C(A1)
		move.b  #$06, $0024(A1)
		move.b  #$01, $001A(A1)
		move.b  #$00, $001C(A1)
loc_2007E:
		rts		
loc_20080:
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_200C8
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20250, $0004(A1)
		move.w  #$04C0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$20, $0019(A1)
		move.b  #$02, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		move.b  #$02, $0024(A1)
loc_200C8:
		bsr.w     loc_1FEB6
		subi.w  #$0008, $0038(A0)
		move.w  #$2A00, $0008(A0)
		move.w  #$02C0, $000C(A0)
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_2012C
		_move.b  #$58, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #loc_20168, $0004(A1)
		move.w  #$2540, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_05 ; loc_202FA
		move.b  #$04, $0001(A1)
		move.b  #$20, $0019(A1)
		move.b  #$04, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		move.w  #$001E, $002A(A1)
		move.b  #$00, $0024(A1)
loc_2012C:
		rts		
loc_2012E:
		dc.w    loc_20134-loc_2012E
		dc.w    loc_20138-loc_2012E
		dc.w    loc_2014E-loc_2012E
loc_20134:
		dc.b    $01, $05, $06, $FF
loc_20138:
		dc.b    $01, $01, $01, $01, $02, $02, $02, $03, $03, $03, $04, $04, $04, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $FF
loc_2014E:
		dc.b    $01, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $03, $03, $03, $02
		dc.b    $02, $02, $01, $01, $01, $05, $06, $FE, $02, $00               
Obj_0x57_Mappings:
loc_20168:
		dc.w    loc_20176-loc_20168
		dc.w    loc_20180-loc_20168
		dc.w    loc_201AA-loc_20168
		dc.w    loc_201D4-loc_20168
		dc.w    loc_201EE-loc_20168
		dc.w    loc_20208-loc_20168
		dc.w    loc_20222-loc_20168
loc_20176:
		dc.w    $0001
		dc.l    $D8050000, $00000002
loc_20180:
		dc.w    $0005
		dc.l    $D8050004, $00020002, $D80D000C, $00060012
		dc.l    $D80D000C, $00060032, $D80D000C, $0006FFE2
		dc.l    $D80D000C, $0006FFC2
loc_201AA:
		dc.w    $0005
		dc.l    $D8050004, $00020002, $D80D000C, $00060012
		dc.l    $D8050008, $00040032, $D80D000C, $0006FFE2
		dc.l    $D8050008, $0004FFD2
loc_201D4:
		dc.w    $0003
		dc.l    $D8050004, $00020002, $D80D000C, $00060012
		dc.l    $D80D000C, $0006FFE2
loc_201EE:
		dc.w    $0003
		dc.l    $D8050004, $00020002, $D8050008, $00040012
		dc.l    $D8050008, $0004FFF2
loc_20208:
		dc.w    $0003
		dc.l    $D8050000, $00000002, $D80D000C, $00060012
		dc.l    $D80D000C, $00060032
loc_20222:
		dc.w    $0003
		dc.l    $D8050004, $00020002, $D80D000C, $0006FFE2
		dc.l    $D80D000C, $0006FFC2     
loc_2023C:
		dc.w    loc_20242-loc_2023C
		dc.w    loc_20247-loc_2023C
		dc.w    loc_2024B-loc_2023C
loc_20242:
		dc.b    $05, $01, $02, $03, $FF
loc_20247:
		dc.b    $01, $04, $05, $FF
loc_2024B:
		dc.b    $01, $06, $07, $FF, $00 

loc_20250:
		dc.w    loc_20262-loc_20250
		dc.w    loc_2027C-loc_20250
		dc.w    loc_20286-loc_20250
		dc.w    loc_20290-loc_20250
		dc.w    loc_2029A-loc_20250
		dc.w    loc_202A4-loc_20250
		dc.w    loc_202AE-loc_20250
		dc.w    loc_202B8-loc_20250
		dc.w    loc_202C2-loc_20250
loc_20262:
		dc.w    $0003
		dc.l    $F00F0000, $0000FFD0, $F00F0010, $0008FFF0
		dc.l    $F00F0020, $00100010
loc_2027C:
		dc.w    $0001
		dc.l    $F00F0030, $0018FFF0
loc_20286:
		dc.w    $0001
		dc.l    $F00F0040, $0020FFF0
loc_20290:
		dc.w    $0001
		dc.l    $F00F0050, $0028FFF0
loc_2029A:
		dc.w    $0001
		dc.l    $F00F0060, $0030FFF0
loc_202A4:
		dc.w    $0001
		dc.l    $F00F1060, $1030FFF0
loc_202AE:
		dc.w    $0001
		dc.l    $F00F0070, $0038FFF0
loc_202B8:
		dc.w    $0001
		dc.l    $F00F1070, $1038FFF0
loc_202C2:
		dc.w    $0003
		dc.l    $F00F8000, $8000FFD0, $F00F8010, $8008FFF0
		dc.l    $F00F8020, $80100010				       
;=============================================================================== 
; Object 0x58 - 
; [ End ]		         
;===============================================================================    
J_DisplaySprite_11: ; loc_202DC:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_27: ; loc_202E2:
		jmp     DeleteObject            ; (loc_D3B4)
J_MarkObjGone_1A: ; loc_202E8:
		jmp     MarkObjGone             ; (loc_D2A0)
J_SingleObjLoad2_0D: ; loc_202EE:
		jmp     SingleObjLoad2      ; (loc_E788)
J_AnimateSprite_0F: ; loc_202F4:
		jmp     AnimateSprite           ; (loc_D412)
J_Adjust2PArtPointer2_05: ; loc_202FA:
		jmp     Adjust2PArtPointer2   ; (loc_DC4C)
J_ObjHitFloor_01: ; loc_20300:
		jmp     ObjHitFloor             ; (loc_13898)
J_ObjectFall_07: ; loc_20306:
		jmp     ObjectFall              ; (loc_D24E)
;=============================================================================== 
; Object 0x55 - Ghz Boss
; [ Begin ]		         
;===============================================================================		 
Obj_0x55_Ghz_Boss: ; loc_2030C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_2031A(PC, D0), D1
		jmp     loc_2031A(PC, D1)
loc_2031A:
		dc.w    loc_20324-loc_2031A
		dc.w    loc_2044E-loc_2031A
		dc.w    loc_2048C-loc_2031A
		dc.w    loc_204BE-loc_2031A
		dc.w    loc_20560-loc_2031A
loc_20324:
		move.l  #Ghz_Boss_Mappings, $0004(A0) ; loc_206BA
		move.w  #$2400, $0002(A0)
		ori.b   #$04, $0001(A0)
		move.b  #$20, $0019(A0)
		move.b  #$03, $0018(A0)
		move.b  #$0F, $0020(A0)
		move.b  #$08, $0021(A0)
		addq.b  #$02, $0024(A0)
		move.w  $0008(A0), $0030(A0)
		move.w  $000C(A0), $0038(A0)
		move.b  $0028(A0), D0
		cmpi.b  #$81, D0
		bne.s   loc_20370
		addi.w  #$0060, $0002(A0)
loc_20370:
		bsr.w     J_Adjust2PArtPointer_23 ; loc_2073A
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.w    loc_20434
		_move.b  #$55, 0(A1)
		move.l  A0, $0034(A1)
		move.l  A1, $0034(A0)
		move.l  #Ghz_Boss_Mappings, $0004(A1) ; loc_206BA
		move.w  #$0400, $0002(A1)
		move.b  #$04, $0001(A1)
		move.b  #$20, $0019(A1)
		move.b  #$03, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addq.b  #$04, $0024(A1)
		move.b  #$01, $001C(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0028(A0), D0
		cmpi.b  #$81, D0
		bne.s   loc_203D8
		addi.w  #$0060, $0002(A1)
loc_203D8:
		bsr.w     J_Adjust2PArtPointer2_06 ; loc_20734
		tst.b   $0028(A0)
		bmi.s   loc_20434
		jsr     SingleObjLoad2      ; (loc_E788)
		bne.s   loc_20434
		_move.b  #$55, 0(A1)
		move.l  A0, $0034(A1)
		move.l  #Ghz_Boss_Mappings_1, $0004(A1) ; loc_20612
		move.w  #$04D0, $0002(A1)
		bsr.w     J_Adjust2PArtPointer2_06 ; loc_20734
		move.b  #$01, $001E(A0)
		move.b  #$04, $0001(A1)
		move.b  #$20, $0019(A1)
		move.b  #$03, $0018(A1)
		move.l  $0008(A0), $0008(A1)
		move.l  $000C(A0), $000C(A1)
		addq.b  #$06, $0024(A1)
		move.b  $0001(A0), $0001(A1)
loc_20434:
		move.b  $0028(A0), D0
		andi.w  #$007F, D0
		add.w   D0, D0
		add.w   D0, D0
		move.l  loc_20446(PC, D0), A1
		jmp     (A1)
loc_20446:
		dc.l    $00000000
		dc.l    loc_20080 
loc_2044E:
		move.b  $0028(A0), D0
		andi.w  #$007F, D0
		add.w   D0, D0
		add.w   D0, D0
		move.l  loc_20484(PC, D0), A1
		jsr     (A1)
		lea     (loc_206AE).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		move.b  $0022(A0), D0
		andi.b  #$03, D0
		andi.b  #$FC, $0001(A0)
		or.b    D0, $0001(A0)
		jmp     DisplaySprite           ; (loc_D3C2)
loc_20484:
		dc.l    $00000000
		dc.l    Obj_0x57  ; loc_1F99C
loc_2048C:
		move.l  $0034(A0), A1
		move.l  $0008(A1), $0008(A0)
		move.l  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		move.l  #loc_206AE, A1
		jsr     AnimateSprite           ; (loc_D412)
		jmp     DisplaySprite           ; (loc_D3C2)		   
loc_204BA:
		dc.b    $00, $FF, $01, $00
loc_204BE:
		btst    #$07, $0022(A0)
		bne.s   loc_20512
		move.l  $0034(A0), A1
		move.l  $0008(A1), $0008(A0)
		move.l  $000C(A1), $000C(A0)
		move.b  $0022(A1), $0022(A0)
		move.b  $0001(A1), $0001(A0)
		subq.b  #$01, $001E(A0)
		bpl.s   loc_20506
		move.b  #$01, $001E(A0)
		move.b  $002A(A0), D0
		addq.b  #$01, D0
		cmpi.b  #$02, D0
		ble.s   loc_204FC
		moveq   #$00, D0
loc_204FC:
		move.b  loc_204BA(PC, D0), $001A(A0)
		move.b  D0, $002A(A0)
loc_20506:
		cmpi.b  #$FF, $001A(A0)
		bne.w    J_DisplaySprite_12      ; loc_20728
		rts
loc_20512:
		move.l  $0034(A0), A1
		btst    #$06, $002E(A1)
		bne.s   loc_20520
		rts
loc_20520:
		addq.b  #$02, $0024(A0)
		move.l  #Ghz_Boss_Mappings_2, $0004(A0) ; loc_2062A
		move.w  #$04D8, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_23 ; loc_2073A
		move.b  #$00, $001A(A0)
		move.b  #$05, $001E(A0)
		move.l  $0034(A0), A1
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		addi.w  #$0004, $000C(A0)
		subi.w  #$0028, $0008(A0)
		rts
loc_20560:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_205A2
		move.b  #$05, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$04, $001A(A0)
		bne.w    loc_205A2
		move.b  #$00, $001A(A0)
		move.l  $0034(A0), A1
		move.b  (A1), D0
		beq.w    J_DeleteObject_28       ; loc_2072E
		move.w  $0008(A1), $0008(A0)
		move.w  $000C(A1), $000C(A0)
		addi.w  #$0004, $000C(A0)
		subi.w  #$0028, $0008(A0)
loc_205A2:
		bra.w     J_DisplaySprite_12      ; loc_20728
;=============================================================================== 
; Object 0x55 - Ghz Boss
; [ End ]		         
;===============================================================================				        
;=============================================================================== 
; Object 0x56 - Ghz Boss
; [ Begin ]		         
;===============================================================================  
Obj_0x56: ; loc_205A6:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_205B4(PC, D0), D1
		jmp     loc_205B4(PC, D1)
loc_205B4:
		dc.w    loc_205B8-loc_205B4
		dc.w    loc_205F4-loc_205B4
loc_205B8:
		addq.b  #$02, $0024(A0)
		move.l  #Obj_0x56_Mappings, $0004(A0) ; loc_2065A
		move.w  #$05A0, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_23 ; loc_2073A
		move.b  #$04, $0001(A0)
		move.b  #$01, $0018(A0)
		move.b  #$00, $0020(A0)
		move.b  #$0C, $0019(A0)
		move.b  #$07, $001E(A0)
		move.b  #$00, $001A(A0)
		rts
loc_205F4:
		subq.b  #$01, $001E(A0)
		bpl.s   loc_2060E
		move.b  #$07, $001E(A0)
		addq.b  #$01, $001A(A0)
		cmpi.b  #$07, $001A(A0)
		beq.w    J_DeleteObject_28       ; loc_2072E
loc_2060E:
		bra.w     J_DisplaySprite_12      ; loc_20728
Ghz_Boss_Mappings_1: 
loc_20612:
		dc.w    loc_20616-loc_20612
		dc.w    loc_20620-loc_20612
loc_20616:
		dc.w    $0001
		dc.l    $00050000, $0000001C
loc_20620:
		dc.w    $0001
		dc.l    $00050004, $0002001C
Ghz_Boss_Mappings_2: 
loc_2062A:
		dc.w    loc_20632-loc_2062A
		dc.w    loc_2063C-loc_2062A
		dc.w    loc_20646-loc_2062A
		dc.w    loc_20650-loc_2062A
loc_20632:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_2063C:
		dc.w    $0001
		dc.l    $F8050004, $0002FFF8
loc_20646:
		dc.w    $0001
		dc.l    $F8050008, $0004FFF8
loc_20650:
		dc.w    $0001
		dc.l    $F805000C, $0006FFF8    
Obj_0x56_Mappings:
loc_2065A:
		dc.w    loc_20668-loc_2065A
		dc.w    loc_20672-loc_2065A
		dc.w    loc_2067C-loc_2065A
		dc.w    loc_20686-loc_2065A
		dc.w    loc_20690-loc_2065A
		dc.w    loc_2069A-loc_2065A
		dc.w    loc_206A4-loc_2065A
loc_20668:
		dc.w    $0001
		dc.l    $F8050000, $0000FFF8
loc_20672:
		dc.w    $0001
		dc.l    $F00F0004, $0002FFF0
loc_2067C:
		dc.w    $0001
		dc.l    $F00F0014, $000AFFF0
loc_20686:
		dc.w    $0001
		dc.l    $F00F0024, $0012FFF0
loc_20690:
		dc.w    $0001
		dc.l    $F00F0034, $001AFFF0
loc_2069A:
		dc.w    $0001
		dc.l    $F00F0044, $0022FFF0
loc_206A4:
		dc.w    $0001
		dc.l    $F00F0054, $002AFFF0		           
loc_206AE:
		dc.w    loc_206B2-loc_206AE
		dc.w    loc_206B5-loc_206AE
loc_206B2:
		dc.b    $0F, $00, $FF
loc_206B5:
		dc.b    $07, $01, $02, $FF, $00 
Ghz_Boss_Mappings:		 
loc_206BA:
		dc.w    loc_206C0-loc_206BA
		dc.w    loc_206E2-loc_206BA
		dc.w    loc_20704-loc_206BA
loc_206C0:
		dc.w    $0004
		dc.l    $F8050000, $0000FFE0, $08050004, $0002FFE0
		dc.l    $F80F0008, $0004FFF0, $F8070018, $000C0010
loc_206E2:
		dc.w    $0004
		dc.l    $E8050028, $0014FFE0, $E80D0030, $0018FFF0
		dc.l    $E8050024, $00120010, $D8050020, $00100002
loc_20704:
		dc.w    $0004
		dc.l    $E8050028, $0014FFE0, $E80D0038, $001CFFF0
		dc.l    $E8050024, $00120010, $D8050020, $00100002		              
;=============================================================================== 
; Object 0x56 - Ghz Boss
; [ End ]		         
;===============================================================================		  
		nop		             ; Filler
J_DisplaySprite_12: ; loc_20728:
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_28: ; loc_2072E:
		jmp     DeleteObject            ; (loc_D3B4)
J_Adjust2PArtPointer2_06: ; loc_20734:
		jmp     Adjust2PArtPointer2   ; (loc_DC4C)
J_Adjust2PArtPointer_23: ; loc_2073A:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
; ===========================================================================
; ---------------------------------------------------------------------------
; Object 8A - "SONIC TEAM PRESENTS"/Credits (leftover from S1)
; ---------------------------------------------------------------------------
; Sprite_20740: Obj_0x8A_Credits:
Obj8A:
		moveq	#0,d0
		move.b	$24(a0),d0
		move.w	Obj8A_Index(pc,d0.w),d1
		jmp	Obj8A_Index(pc,d1.w)
; ===========================================================================
; off_2074E:
Obj8A_Index:	offsetTable
		offsetTableEntry.w Obj8A_Init
		offsetTableEntry.w Obj8A_Display
; ===========================================================================
; loc_20752:
Obj8A_Init:
		addq.b	#2,$24(a0)
		move.w	#$120,8(a0)
		move.w	#$F0,$A(a0)
		move.l	#Obj8A_MapUnc_207C6,4(a0)
		move.w	#$5A0,2(a0)
		bsr.w	J_Adjust2PArtPointer_24
		move.w	(Ending_demo_number).w,d0
		move.b	d0,$1A(a0)
		move.b	#0,1(a0)
		move.b	#0,$18(a0)
		cmpi.b	#GameModeID_TitleScreen,(Game_Mode).w
		bne.s	Obj8A_Display
		move.w	#$300,2(a0)
		bsr.w	J_Adjust2PArtPointer_24
		move.b	#$A,$1A(a0)
		tst.b	(Hidden_credits_flag).w
		beq.s	Obj8A_Display
		cmpi.b	#$72,(Ctrl_1_Held).w
		bne.s	Obj8A_Display
		move.w	#$EEE,(Target_palette_line3).w
		move.w	#$880,(Target_palette_line3+2).w
		jmp	(DeleteObject).l

; loc_207C0:
Obj8A_Display:
		jmp	(DisplaySprite).l
; ===========================================================================
; ---------------------------------------------------------------------------
; Sprite mappings
; ---------------------------------------------------------------------------
Obj8A_MapUnc_207C6:	BINCLUDE	"mappings/sprite/obj8A.bin"
; ===========================================================================
		nop
; loc_20E54:
J_Adjust2PArtPointer_24:
		jmp	(Adjust2PArtPointer).l

		align 4

;=============================================================================== 
; Object 0x3E - Egg Prison / Animals Container
; [ Begin ]		         
;=============================================================================== 
Obj_0x3E_Egg_Prison: ; loc_20E5C:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_20E88(PC, D0), D1
		jsr     loc_20E88(PC, D1)
		move.w  $0008(A0), D0
		andi.w  #$FF80, D0
		sub.w   (Camera_X_pos_coarse).w, D0
		cmpi.w  #$0280, D0
		bhi.s   J_DeleteObject_29       ; loc_20E82
		jmp     DisplaySprite           ; (loc_D3C2)
J_DeleteObject_29: ; loc_20E82:
		jmp     DeleteObject            ; (loc_D3B4)
loc_20E88:
		dc.w    loc_20EA8-loc_20E88
		dc.w    loc_20EF6-loc_20E88
		dc.w    loc_20F32-loc_20E88
		dc.w    loc_20F9A-loc_20E88
		dc.w    loc_20F9A-loc_20E88
		dc.w    loc_20F9A-loc_20E88
		dc.w    loc_21032-loc_20E88
		dc.w    loc_21082-loc_20E88
loc_20E98:
		dc.w    $0220, $0400, $040C, $0501, $0610, $0403, $0810, $0305
loc_20EA8:
		move.l  #loc_210AC, $0004(A0)
		move.w  #$049D, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_25 ; loc_21158
		move.b  #$04, $0001(A0)
		move.w  $000C(A0), $0030(A0)
		moveq   #$00, D0
		move.b  $0028(A0), D0
		lsl.w   #$02, D0
		lea     loc_20E98(PC, D0), A1
		move.b  (A1)+, $0024(A0)
		move.b  (A1)+, $0019(A0)
		move.b  (A1)+, $0018(A0)
		move.b  (A1)+, $001A(A0)
		cmpi.w  #$0008, D0
		bne.s   loc_20EF4
		move.b  #$06, $0020(A0)
		move.b  #$08, $0021(A0)
loc_20EF4:
		rts
loc_20EF6:
		cmpi.b  #$02, (Boss_defeated_flag).w
		beq.s   loc_20F14
		move.w  #$002B, D1
		move.w  #$0018, D2
		move.w  #$0018, D3
		move.w  $0008(A0), D4
		jmp     SolidObject             ; (loc_F4A0)
loc_20F14:
		tst.b   $0025(A0)
		beq.s   loc_20F2A
		clr.b   $0025(A0)
		bclr    #$03, ($FFFFB022).w
		bset    #$01, ($FFFFB022).w
loc_20F2A:
		move.b  #$02, $001A(A0)
		rts
loc_20F32:
		move.w  #$0017, D1
		move.w  #$0008, D2
		move.w  #$0008, D3
		move.w  $0008(A0), D4
		jsr     SolidObject             ; (loc_F4A0)
		lea     (loc_210A4).l, A1
		jsr     AnimateSprite           ; (loc_D412)
		move.w  $0030(A0), $000C(A0)
		move.b  $0022(A0), D0
		andi.b  #$18, D0
		beq.s   loc_20F98
		addq.w  #$08, $000C(A0)
		move.b  #$0A, $0024(A0)
		move.w  #$003C, $001E(A0)
		clr.b   (Update_HUD_timer).w
		clr.b   (Current_Boss_ID).w
		move.b  #$01, (Control_Locked).w
		move.w  #$0800, (Ctrl_1_Logical).w
		clr.b   $0025(A0)
		bclr    #$03, ($FFFFB022).w
		bset    #$01, ($FFFFB022).w
loc_20F98:
		rts
loc_20F9A:
		moveq   #$07, D0
		and.b   (Vint_runcount+3).w, D0
		bne.s   loc_20FD8
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_20FD8
		_move.b  #$3F, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		moveq   #$00, D1
		move.b  D0, D1
		lsr.b   #$02, D1
		subi.w  #$0020, D1
		add.w   D1, $0008(A1)
		lsr.w   #$08, D0
		lsr.b   #$03, D0
		add.w   D0, $000C(A1)
loc_20FD8:
		subq.w  #$01, $001E(A0)
		beq.s   loc_20FE0
		rts
loc_20FE0:
		move.b  #$02, (Boss_defeated_flag).w
		move.b  #$0C, $0024(A0)
		move.b  #$06, $001A(A0)
		move.w  #$0096, $001E(A0)
		addi.w  #$0020, $000C(A0)
		moveq   #$07, D6
		move.w  #$009A, D5
		moveq   #-$1C, D4    
loc_21006:		            
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_21030
		_move.b  #$28, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		add.w   D4, $0008(A1)
		addq.w  #$07, D4
		move.w  D5, $0036(A1)
		subq.w  #$08, D5
		dbf    D6, loc_21006
loc_21030:
		rts
loc_21032:
		moveq   #$07, D0
		and.b   (Vint_runcount+3).w, D0
		bne.s   loc_21070
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_21070
		_move.b  #$28, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		jsr     (PseudoRandomNumber).l      ; loc_31E4
		andi.w  #$001F, D0
		subq.w  #$06, D0
		tst.w   D1
		bpl.s   loc_21066
		neg.w   D0
loc_21066:
		add.w   D0, $0008(A1)
		move.w  #$000C, $0036(A1)
loc_21070:
		subq.w  #$01, $001E(A0)
		bne.s   loc_21080
		addq.b  #$02, $0024(A0)
		move.w  #$00B4, $001E(A0)
loc_21080:
		rts
loc_21082:
		moveq   #$3E, D0
		moveq   #$28, D1
		moveq   #$40, D2
		lea     ($FFFFB040).w, A1
loc_2108C:		
		cmp.b   (A1), D1
		beq.s   loc_210A2
		adda.w  D2, A1
		dbf    D0, loc_2108C
		jsr     (loc_F352)
		jmp     DeleteObject            ; (loc_D3B4)
loc_210A2:
		rts		        
loc_210A4:		
		dc.w    loc_210A8-loc_210A4
		dc.w    loc_210A8-loc_210A4
loc_210A8:
		dc.b    $02, $01, $03, $FF

loc_210AC:
		dc.w    loc_210BA-loc_210AC
		dc.w    loc_210F4-loc_210AC
		dc.w    loc_210FE-loc_210AC
		dc.w    loc_21130-loc_210AC
		dc.w    loc_2113A-loc_210AC
		dc.w    loc_2114C-loc_210AC
		dc.w    loc_21156-loc_210AC
loc_210BA:
		dc.w    $0007
		dc.l    $E00C2000, $2000FFF0, $E80D2004, $2002FFE0
		dc.l    $E80D200C, $20060000, $F80E2014, $200AFFE0
		dc.l    $F80E2020, $20100000, $100D202C, $2016FFE0
		dc.l    $100D2034, $201A0000
loc_210F4:
		dc.w    $0001
		dc.l    $F809003C, $001EFFF4
loc_210FE:
		dc.w    $0006
		dc.l    $00082042, $2021FFE0, $080C2045, $2022FFE0
		dc.l    $00042049, $20240010, $080C204B, $20250000
		dc.l    $100D202C, $2016FFE0, $100D2034, $201A0000
loc_21130:
		dc.w    $0001
		dc.l    $F809004F, $0027FFF4
loc_2113A:
		dc.w    $0002
		dc.l    $E80E2055, $202AFFF0, $000E2061, $2030FFF0
loc_2114C:
		dc.w    $0001
		dc.l    $F007206D, $2036FFF8
loc_21156:
		dc.w    $0000				
;=============================================================================== 
; Object 0x3E - Egg Prison / Animals Container
; [ End ]		         
;=============================================================================== 
J_Adjust2PArtPointer_25: ; loc_21158:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
		dc.w    $0000		   ; Filler
		
;=============================================================================== 
; Sub Routine TouchResponse
; [ Begin ]		         
;===============================================================================  
TouchResponse: ; loc_21160:   
		nop
		bsr.w     loc_21502
		move.w  $0008(A0), D2
		move.w  $000C(A0), D3
		subi.w  #$0008, D2
		moveq   #$00, D5
		move.b  $0016(A0), D5
		subq.b  #$03, D5
		sub.w   D5, D3
		cmpi.b  #$39, $001A(A0)
		bne.s   loc_2118A
		addi.w  #$000C, D3
		moveq   #$0A, D5
loc_2118A:
		move.w  #$0010, D4
		add.w   D5, D5
		lea     ($FFFFB800).w, A1
		move.w  #$005F, D6
loc_21198:
		move.b  $0020(A1), D0
		bne.s   Touch_Height            ; loc_211F8
loc_2119E:		
		lea     $0040(A1), A1
		dbf    D6, loc_21198  
		moveq   #$00, D0
Touch_Sizes: ; loc_211A8:		
		rts  
		dc.b    $14, $14, $0C, $14, $14, $0C, $04, $10, $0C, $12, $10, $10, $06, $06, $18, $0C
		dc.b    $0C, $10, $10, $0C, $08, $08, $14, $10, $14, $08, $0E, $0E, $18, $18, $28, $10
		dc.b    $10, $18, $08, $10, $20, $70, $40, $20, $80, $20, $20, $20, $08, $08, $04, $04
		dc.b    $20, $08, $0C, $0C, $08, $04, $18, $04, $28, $04, $04, $08, $04, $18, $04, $28
		dc.b    $04, $20, $18, $18, $0C, $18, $48, $08, $18, $28, $10, $04, $20, $02
;===============================================================================
Touch_Height: ; loc_211F8:
		andi.w  #$003F, D0
		add.w   D0, D0
		lea     Touch_Sizes(PC, D0), A2 ; loc_211A8
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  $0008(A1), D0
		sub.w   D1, D0
		sub.w   D2, D0
		bcc.s   loc_2121A
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   loc_21220
		bra.w     loc_2119E
loc_2121A:		
		cmp.w   D4, D0
		bhi.w    loc_2119E
loc_21220:		
		moveq   #$00, D1
		move.b  (A2)+, D1
		move.w  $000C(A1), D0
		sub.w   D1, D0
		sub.w   D3, D0
		bcc.s   loc_21238
		add.w   D1, D1
		add.w   D1, D0
		bcs.s   loc_2123E
		bra.w     loc_2119E		
loc_21238:
		cmp.w   D5, D0
		bhi.w    loc_2119E
loc_2123E:
		move.b  $0020(A1), D1
		andi.b  #$C0, D1
		beq.w    loc_212B8
		cmpi.b  #$C0, D1
		beq.w    Touch_Special           ; loc_2147A
		tst.b   D1
		bmi.w    loc_21370
		move.b  $0020(A1), D0
		andi.b  #$3F, D0
		cmpi.b  #$06, D0
		beq.s   loc_21278
		cmpi.w  #$005A, $0030(A0)
		bcc.w    loc_21276
		move.b  #$04, $0024(A1)
loc_21276:		
		rts
loc_21278:		
		tst.w   $0012(A0)
		bpl.s   loc_212A4
		move.w  $000C(A0), D0
		subi.w  #$0010, D0
		cmp.w   $000C(A1), D0  
		bcs.s   loc_212B6
		neg.w   $0012(A0)
		move.w  #$FE80, $0012(A1)
		tst.b   $0025(A1)
		bne.s   loc_212B6
		move.b  #$04, $0025(A1)
		rts
loc_212A4:
		cmpi.b  #$02, $001C(A0)
		bne.s   loc_212B6
		neg.w   $0012(A0)
		move.b  #$04, $0024(A1)
loc_212B6:
		rts
loc_212B8:
		tst.b   (Invincibility).w
		bne.s   loc_212D0
		cmpi.b  #$09, $001C(A0)
		beq.s   loc_212D0
		cmpi.b  #$02, $001C(A0)
		bne.w    loc_21370
loc_212D0:
		tst.b   $0021(A1)
		beq.s   Touch_KillEnemy         ; loc_212FA
		neg.w   $0010(A0)
		neg.w   $0012(A0)
		asr.w   $0010(A0)
		asr.w   $0012(A0)
		move.b  #$00, $0020(A1)
		subq.b  #$01, $0021(A1)
		bne.s   loc_212F8
		bset    #$07, $0022(A1)
loc_212F8:
		rts
;===============================================================================		
Touch_KillEnemy: ; loc_212FA:
		bset    #$07, $0022(A1)
		moveq   #$00, D0
		move.w  (Chain_Bonus_counter).w, D0
		addq.w  #$02, (Chain_Bonus_counter).w
		cmpi.w  #$0006, D0
		bcs.s   loc_21312
		moveq   #$06, D0
loc_21312:
		move.w  D0, $003E(A1)
		move.w  Enemy_Points(PC, D0), D0 ; loc_21362
		cmpi.w  #$0020, (Chain_Bonus_counter).w
		bcs.s   loc_2132C
		move.w  #$03E8, D0
		move.w  #$000A, $003E(A1)
loc_2132C:
		bsr.w     AddPoints               ; loc_22FD0		
		_move.b  #$27, 0(A1)
		move.b  #$00, $0024(A1)
		tst.w   $0012(A0)
		bmi.s   loc_21352
		move.w  $000C(A0), D0
		cmp.w   $000C(A1), D0
		bcc.s   loc_2135A
		neg.w   $0012(A0)
		rts
loc_21352:
		addi.w  #$0100, $0012(A0)
		rts
loc_2135A:
		subi.w  #$0100, $0012(A0)
		rts				
Enemy_Points: ; loc_21362:
		dc.w    $000A, $0014, $0032, $0064
loc_2136A:
		bset    #$07, $0022(A1)				
loc_21370:
		tst.b   (Invincibility).w
		beq.s   Touch_Hurt              ; loc_2137A
loc_21376:		
		moveq   #-1, D0
		rts
;===============================================================================		
Touch_Hurt: ; loc_2137A:
		nop
		tst.w   $0030(A0)
		bne.s   loc_21376
		move.l  A1, A2  

;=============================================================================== 
; Sub Routine HurtSonic
; [ Begin ]		         
;===============================================================================		 
HurtSonic: ; loc_21384:
		tst.b   (Shield).w
		bne.s   HurtShield              ; loc_213AC
		tst.w   (Ring_count).w
		beq.w    Hurt_NoRings            ; loc_2141A
		jsr     SingleObjLoad        ; loc_E772
		bne.s   HurtShield              ; loc_213AC
		_move.b  #$37, 0(A1)
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
HurtShield: ; loc_213AC:
		move.b  #$00, (Shield).w
		move.b  #$04, $0024(A0)
		bsr.w     J_Sonic_ResetOnFloor_00 ; loc_214FC
		bset    #$01, $0022(A0)
		move.w  #$FC00, $0012(A0)
		move.w  #$FE00, $0010(A0)
		btst    #$06, $0022(A0)
		beq.s   Hurt_Reverse            ; loc_213E2
		move.w  #$FE00, $0012(A0)
		move.w  #$FF00, $0010(A0)
Hurt_Reverse: ; loc_213E2:
		move.w  $0008(A0), D0
		cmp.w   $0008(A2), D0
		bcs.s   Hurt_ChkSpikes          ; loc_213F0 
		neg.w   $0010(A0)
Hurt_ChkSpikes: ; loc_213F0:
		move.w  #$0000, $0014(A0)
		move.b  #$1A, $001C(A0)
		move.w  #$0078, $0030(A0)
		move.w  #$00A3, D0
		cmpi.b  #$36, (A2)
		bne.s   loc_21410
		move.w  #$00A6, D0
loc_21410:
		jsr     (PlaySound).l             ; loc_14C6
		moveq   #-1, D0
		rts
Hurt_NoRings: ; loc_2141A:
		tst.w   (Debug_mode_flag).w
		bne.w    HurtShield              ; loc_213AC 
;=============================================================================== 
; Sub Routine HurtSonic
; [ End ]		         
;===============================================================================  
		       
;=============================================================================== 
; Sub Routine KillSonic
; [ Begin ]		         
;===============================================================================		  
KillSonic: ; loc_21422:
		tst.w   (Debug_placement_mode).w
		bne.s   Kill_NoDeath            ; loc_21476
		move.b  #$00, (Invincibility).w
		move.b  #$06, $0024(A0)
		bsr.w     J_Sonic_ResetOnFloor_00 ; loc_214FC
		bset    #1, $0022(A0)
		move.w  #$F900, $0012(A0)
		move.w  #$0000, $0010(A0)
		move.w  #$0000, $0014(A0)
		move.w  $000C(A0), $0038(A0)
		move.b  #$18, $001C(A0)
		bset    #7, $0002(A0)
		move.w  #$00A3, D0
		cmpi.b  #$36, (A2)
		bne.s   loc_21470
		move.w  #$00A6, D0   
loc_21470:
		jsr     (PlaySound).l             ; loc_14C6
Kill_NoDeath ; loc_21476:		
		moveq   #-1, D0
		rts
;=============================================================================== 
; Sub Routine KillSonic
; [ End ]		         
;===============================================================================
		   
Touch_Special: ; loc_2147A:
		move.b  $0020(A1), D1
		andi.b  #$3F, D1
		cmpi.b  #$0B, D1
		beq.s   Touch_Caterkiller       ; loc_214AE
		cmpi.b  #$0C, D1
		beq.s   Touch_Yadrin            ; loc_214B2
		cmpi.b  #$14, D1
		beq.s   Touch_D7		; loc_214E4
		cmpi.b  #$15, D1
		beq.s   Touch_D7		; loc_214E4
		cmpi.b  #$16, D1
		beq.s   Touch_D7		; loc_214E4
		cmpi.b  #$17, D1
		beq.s   Touch_D7		; loc_214E4
		cmpi.b  #$21, D1
		beq.s   Touch_E1		; loc_214F6
		rts
Touch_Caterkiller: ; loc_214AE:
		bra.w     loc_2136A
Touch_Yadrin: ; loc_214B2:
		sub.w   D0, D5
		cmpi.w  #$0008, D5
		bcc.s   loc_214E0
		move.w  $0008(A1), D0
		subq.w  #$04, D0
		btst    #$00, $0022(A1)
		beq.s   loc_214CC
		subi.w  #$0010, D0
loc_214CC:
		sub.w   D2, D0
		bcc.s   loc_214D8
		addi.w  #$0018, D0
		bcs.s   loc_214DC
		bra.s   loc_214E0
loc_214D8:
		cmp.w   D4, D0
		bhi.s   loc_214E0
loc_214DC:
		bra.w     loc_21370
loc_214E0:
		bra.w     loc_212B8
Touch_D7: ; loc_214E4:
		move.w  A0, D1
		subi.w  #$B000, D1
		beq.s   loc_214F0
		addq.b  #$01, $0021(A1)
loc_214F0:
		addq.b  #$01, $0021(A1)
		rts
Touch_E1: ; loc_214F6:		
		addq.b  #$01, $0021(A1)
		rts              
J_Sonic_ResetOnFloor_00: ; loc_214FC:
		jmp     Sonic_ResetOnFloor      ; loc_1090C
loc_21502:
		jmp     TouchRings              ; loc_DF6C 
;=============================================================================== 
; Sub Routine TouchResponse
; [ End ]		         
;=============================================================================== 
		
;===============================================================================
; Special Stage - Sub-routine
; [ Begin ]              
;===============================================================================
S1_SS_Show_Layout: ; loc_21508:
		bsr.w     loc_2164A
		bsr.w     loc_2188A
		move.w  D5, -(A7)
		lea     (Level_Layout).w, A1
		move.b  (SpecialStage_angle).w, D0
		andi.b  #$FC, D0
		jsr    ( CalcSine).l		; loc_320A
		move.w  D0, D4
		move.w  D1, D5
		muls.w  #$0018, D4
		muls.w  #$0018, D5
		moveq   #$00, D2
		move.w  (Camera_X_pos).w, D2
		divu.w  #$0018, D2
		swap  D2
		neg.w   D2
		addi.w  #$FF4C, D2
		moveq   #$00, D3
		move.w  (Camera_Y_pos).w, D3
		divu.w  #$0018, D3
		swap  D3
		neg.w   D3
		addi.w  #$FF4C, D3
		move.w  #$000F, D7
loc_21558:		
		movem.w D0-D2, -(A7)
		movem.w D0/D1, -(A7)
		neg.w   D0
		muls.w  D2, D1
		muls.w  D3, D0
		move.l  D0, D6
		add.l   D1, D6
		movem.w (A7)+, D0/D1
		muls.w  D2, D0
		muls.w  D3, D1
		add.l   D0, D1
		move.l  D6, D2
		move.w  #$000F, D6
loc_2157A:		
		move.l  D2, D0
		asr.l   #$08, D0
		move.w  D0, (A1)+
		move.l  D1, D0
		asr.l   #$08, D0
		move.w  D0, (A1)+
		add.l   D5, D2
		add.l   D4, D1
		dbf    D6, loc_2157A
		movem.w (A7)+, D0-D2
		addi.w  #$0018, D3
		dbf    D7, loc_21558
		move.w  (A7)+, D5
		lea     (Chunk_Table), A0
		moveq   #$00, D0
		move.w  (Camera_Y_pos).w, D0
		divu.w  #$0018, D0
		mulu.w  #$0080, D0
		adda.l  D0, A0
		moveq   #$00, D0
		move.w  (Camera_X_pos).w, D0
		divu.w  #$0018, D0
		adda.w  D0, A0
		lea     (Level_Layout).w, A4
		move.w  #$000F, D7
loc_215C6:		
		move.w  #$000F, D6
loc_215CA:		
		moveq   #$00, D0
		move.b  (A0)+, D0
		beq.s   loc_21622
		cmpi.b  #$4E, D0
		bhi.s   loc_21622
		move.w  (A4), D3
		addi.w  #$0120, D3
		cmpi.w  #$0070, D3
		bcs.s   loc_21622
		cmpi.w  #$01D0, D3
		bcc.s   loc_21622
		move.w  $0002(A4), D2
		addi.w  #$00F0, D2
		cmpi.w  #$0070, D2
		bcs.s   loc_21622
		cmpi.w  #$0170, D2
		bcc.s   loc_21622
		lea     (Chunk_Table+$4000), A5
		lsl.w   #$03, D0
		lea     $00(A5, D0), A5
		move.l  (A5)+, A1
		move.w  (A5)+, D1
		add.w   D1, D1
		adda.w  $00(A1, D1), A1
		move.w  (A5)+, A3
		moveq   #$00, D1
		move.b  (A1)+, D1
		subq.b  #$01, D1
		bmi.s   loc_21622
		jsr     (DrawSprite_Loop)
loc_21622:
		addq.w  #$04, A4
		dbf    D6, loc_215CA
		lea     $0070(A0), A0
		dbf    D7, loc_215C6
		move.b  D5, (Sprite_count).w
		cmpi.b  #$50, D5
		beq.s   loc_21642
		move.l  #$00000000, (A2)
		rts
loc_21642:
		move.b  #$00, -5(A2)
		rts  
loc_2164A:
		lea     (Chunk_Table+$400C), A1
		moveq   #$00, D0
		move.b  (SpecialStage_angle).w, D0
		lsr.b   #$02, D0
		andi.w  #$000F, D0
		moveq   #$23, D1
loc_2165E:		
		move.w  D0, (A1)
		addq.w  #$08, A1
		dbf    D1, loc_2165E
		lea     (Chunk_Table+$4005), A1
		subq.b  #$01, (SpecialStage2_anim_counter).w
		bpl.s   loc_21682
		move.b  #$07, (SpecialStage2_anim_counter).w
		addq.b  #$01, (SpecialStage2_anim_frame).w
		andi.b  #$03, (SpecialStage2_anim_frame).w
loc_21682:
		move.b  (SpecialStage2_anim_frame).w, $01D0(A1)
		subq.b  #$01, (SpecialStage3_anim_counter).w
		bpl.s   loc_2169E
		move.b  #$07, (SpecialStage3_anim_counter).w
		addq.b  #$01, (SpecialStage3_anim_frame).w
		andi.b  #$01, (SpecialStage3_anim_frame).w
loc_2169E:
		move.b  (SpecialStage3_anim_frame).w, D0
		move.b  D0, $0138(A1)
		move.b  D0, $0160(A1)
		move.b  D0, $0148(A1)
		move.b  D0, $0150(A1)
		move.b  D0, $01D8(A1)
		move.b  D0, $01E0(A1)
		move.b  D0, $01E8(A1)
		move.b  D0, $01F0(A1)
		move.b  D0, $01F8(A1)
		move.b  D0, $0200(A1)
		subq.b  #$01, (SpecialStage4_anim_counter).w
		bpl.s   loc_216E0
		move.b  #$04, (SpecialStage4_anim_counter).w
		addq.b  #$01, (SpecialStage4_anim_frame).w
		andi.b  #$03, (SpecialStage4_anim_frame).w
loc_216E0:
		move.b  (SpecialStage4_anim_frame).w, D0
		move.b  D0, $0168(A1)
		move.b  D0, $0170(A1)
		move.b  D0, $0178(A1)
		move.b  D0, $0180(A1)
		subq.b  #$01, (SpecialStage_anim_counter).w
		bpl.s   loc_2170A
		move.b  #$07, (SpecialStage_anim_counter).w
		subq.b  #$01, (SpecialStage_anim_frame).w
		andi.b  #$07, (SpecialStage_anim_frame).w
loc_2170A:
		lea     (Chunk_Table+$4016), A1
		lea     (S1SS_WaRiVramSet).l, A0  ; loc_217F4
		moveq   #$00, D0
		move.b  (SpecialStage_anim_frame).w, D0
		add.w   D0, D0
		lea     $00(A0, D0), A0
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		move.w  (A0), (A1)
		move.w  $0002(A0), $0008(A1)
		move.w  $0004(A0), $0010(A1)
		move.w  $0006(A0), $0018(A1)
		move.w  $0008(A0), $0020(A1)
		move.w  $000A(A0), $0028(A1)
		move.w  $000C(A0), $0030(A1)
		move.w  $000E(A0), $0038(A1)
		adda.w  #$0020, A0
		adda.w  #$0048, A1
		rts   
S1SS_WaRiVramSet: ; loc_217F4:
		dc.w    $0142, $6142, $0142, $0142, $0142, $0142, $0142, $6142
		dc.w    $0142, $6142, $0142, $0142, $0142, $0142, $0142, $6142
		dc.w    $2142, $0142, $2142, $2142, $2142, $2142, $2142, $0142
		dc.w    $2142, $0142, $2142, $2142, $2142, $2142, $2142, $0142
		dc.w    $4142, $2142, $4142, $4142, $4142, $4142, $4142, $2142
		dc.w    $4142, $2142, $4142, $4142, $4142, $4142, $4142, $2142
		dc.w    $6142, $4142, $6142, $6142, $6142, $6142, $6142, $4142
		dc.w    $6142, $4142, $6142, $6142, $6142, $6142, $6142, $4142		
loc_21874:
		lea     (Chunk_Table+$4400), A2
		move.w  #$001F, D0
loc_2187E:		
		tst.b   (A2)
		beq.s   loc_21888
		addq.w  #$08, A2
		dbf    D0, loc_2187E
loc_21888:
		rts
loc_2188A:               
		lea     (Chunk_Table+$4400), A0
		move.w  #$001F, D7
loc_21894:		
		moveq   #$00, D0
		move.b  (A0), D0
		beq.s   loc_218A2
		lsl.w   #$02, D0
		move.l  S1SS_AniIndex-$04(PC, D0), A1 ; loc_218AA
		jsr     (A1)
loc_218A2:
		addq.w  #$08, A0
		dbf    D7, loc_21894
		rts 
;===============================================================================		
S1SS_AniIndex: ; loc_218AA: 
		dc.l    loc_218C2
		dc.l    loc_218F2
		dc.l    loc_21928
		dc.l    loc_21958
		dc.l    loc_2198E
		dc.l    loc_219CE
loc_218C2:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_218EA
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_218EC(PC, D0), D0
		move.b  D0, (A1)
		bne.s   loc_218EA
		clr.l   (A0)
		clr.l   $0004(A0)		
loc_218EA:
		rts
loc_218EC:
		dc.b    $42, $43, $44, $45, $00, $00
loc_218F2:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_21920
		move.b  #$07, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_21922(PC, D0), D0
		bne.s   loc_2191E
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$25, (A1)
		rts
loc_2191E:
		move.b  D0, (A1)
loc_21920:
		rts
loc_21922:
		dc.b    $32, $33, $32, $33, $00, $00
loc_21928:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_21950
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_21952(PC, D0), D0
		move.b  D0, (A1)
		bne.s   loc_21950
		clr.l   (A0)
		clr.l   $0004(A0)
loc_21950:
		rts
loc_21952:
		dc.b    $46, $47, $48, $49, $00, $00
loc_21958:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_21986
		move.b  #$07, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_21988(PC, D0), D0
		bne.s   loc_21984
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$2B, (A1)
		rts
loc_21984:
		move.b  D0, (A1)
loc_21986:
		rts
loc_21988:
		dc.b    $2B, $31, $2B, $31, $00, $00
loc_2198E:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_219C6
		move.b  #$05, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_219C8(PC, D0), D0
		move.b  D0, (A1)
		bne.s   loc_219C6
		clr.l   (A0)
		clr.l   $0004(A0)
		move.b  #$04, ($FFFFB024).w
		move.w  #$00A8, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_219C6:
		rts
loc_219C8:
		dc.b    $46, $47, $48, $49, $00, $00
loc_219CE:
		subq.b  #$01, $0002(A0)
		bpl.s   loc_219FA
		move.b  #$01, $0002(A0)
		moveq   #$00, D0
		move.b  $0003(A0), D0
		addq.b  #$01, $0003(A0)
		move.l  $0004(A0), A1
		move.b  loc_219FC(PC, D0), D0
		move.b  D0, (A1)
		bne.s   loc_219FA
		move.b  $0004(A0), (A1)
		clr.l   (A0)
		clr.l   $0004(A0)
loc_219FA:
		rts    
loc_219FC:		           
		dc.b    $4B, $4C, $4D, $4E, $4B, $4C, $4D, $4E, $00, $00		
S1SS_LayoutIndex: ; loc_21A06:		
		dc.l    Special_Stage_1   ; loc_31CEA		             
		dc.l    Special_Stage_2   ; loc_31F64
		dc.l    Special_Stage_3   ; loc_32376        
		dc.l    Special_Stage_4   ; loc_326D2
		dc.l    Special_Stage_5   ; loc_32BAC
		dc.l    Special_Stage_6   ; loc_3305C
S1SS_StartLoc: ; loc_21A1E:
		dc.l    $03D002E0   ; Sonic Start Position in Special Stage 1
		dc.l    $03280574   ; Sonic Start Position in Special Stage 2
		dc.l    $04E402E0   ; Sonic Start Position in Special Stage 3
		dc.l    $03AD02E0   ; Sonic Start Position in Special Stage 4
		dc.l    $034006B8   ; Sonic Start Position in Special Stage 5
		dc.l    $049B0358   ; Sonic Start Position in Special Stage 6
S1_Special_Stage_Load: ; loc_21A36:
		moveq   #$00, D0
		move.b  (Current_Special_Stage).w, D0
		addq.b  #$01, (Current_Special_Stage).w
		cmpi.b  #$06, (Current_Special_Stage).w
		bcs.s   loc_21A4E
		move.b  #$00, (Current_Special_Stage).w
loc_21A4E:
		cmpi.b  #$06, (Emerald_count).w
		beq.s   loc_21A70
		moveq   #$00, D1
		move.b  (Emerald_count).w, D1
		subq.b  #$01, D1
		bcs.s   loc_21A70
		lea     (Got_Emeralds_array).w, A3
loc_21A64:		
		cmp.b   $00(A3, D1), D0
		bne.s   loc_21A6C
		bra.s   S1_Special_Stage_Load   ; loc_21A36
loc_21A6C:
		dbf    D1, loc_21A64
loc_21A70:
		lsl.w   #$02, D0
		lea     S1SS_StartLoc(PC, D0), A1 ; loc_21A1E
		move.w  (A1)+, ($FFFFB008).w
		move.w  (A1)+, ($FFFFB00C).w
		move.l  S1SS_LayoutIndex(PC, D0), A0 ; loc_21A06
		lea     (Chunk_Table+$4000), A1
		move.w  #$0000, D0
		jsr     (EniDec).l               ; loc_18DA
		lea     (Chunk_Table), A1
		move.w  #$0FFF, D0
loc_21A9C:		
		clr.l   (A1)+
		dbf    D0, loc_21A9C
		lea     (Chunk_Table+$1020), A1
		lea     (Chunk_Table+$4000), A0
		moveq   #$3F, D1
loc_21AB0:		
		moveq   #$3F, D2
loc_21AB2:		
		move.b  (A0)+, (A1)+
		dbf    D2, loc_21AB2
		lea     $0040(A1), A1
		dbf    D1, loc_21AB0
		lea     (Chunk_Table+$4008), A1
		lea     (loc_21AF2).l, A0
		moveq   #$4D, D1
loc_21ACE:		
		move.l  (A0)+, (A1)+
		move.w  #$0000, (A1)+
		move.b  -4(A0), -1(A1)
		move.w  (A0)+, (A1)+
		dbf    D1, loc_21ACE
		lea     (Chunk_Table+$4400), A1
		move.w  #$003F, D1
loc_21AEA:		
		clr.l   (A1)+
		dbf    D1, loc_21AEA
		rts
loc_21AF2:
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6		 
		dc.w    $0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $2142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142		      
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $4142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142   
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142  
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $6142  
		dc.l    S1_Obj_0x47_Mappings ; loc_1401E
		dc.w    $023B
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0570
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0251
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0370
		dc.l    SS_Up_Mappings          ; loc_21CFA
		dc.w    $0263
		dc.l    SS_Down_Mappings        ; loc_21D0A
		dc.w    $0263
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6		
		dc.w    $22F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $0470
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $05F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $65F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $25F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $45F0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $02F0
		dc.l    (($01<<$18)|S1_Obj_0x47_Mappings) ; loc_1401E
		dc.w    $023B
		dc.l    (($02<<$18)|S1_Obj_0x47_Mappings) ; loc_1401E
		dc.w    $023B 
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0797
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $07A0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $07A9
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $0797
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $07A0
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $07A9
		dc.l    Obj25_MapUnc_B036          ; loc_B036
		dc.w    $27B2
		dc.l    SS_Emerald_Mappings     ; loc_21D22
		dc.w    $0770
		dc.l    SS_Emerald_Mappings     ; loc_21D22
		dc.w    $2770
		dc.l    SS_Emerald_Mappings     ; loc_21D22
		dc.w    $4770
		dc.l    SS_Emerald_Mappings     ; loc_21D22		   
		dc.w    $6770
		dc.l    SS_Red_Emerald_Mappings ; loc_21D1A
		dc.w    $0770
		dc.l    SS_Gray_Emerald_Mappings ; loc_21D1E
		dc.w    $0770
		dc.l    SS_Reverse_Goal_Mappings ; loc_21CC6
		dc.w    $04F0
		dc.l    (($04<<$18)|Obj25_MapUnc_B036) ; loc_B036
		dc.w    $27B2
		dc.l    (($05<<$18)|Obj25_MapUnc_B036) ; loc_B036		   
		dc.w    $27B2
		dc.l    (($06<<$18)|Obj25_MapUnc_B036) ; loc_B036  
		dc.w    $27B2
		dc.l    (($07<<$18)|Obj25_MapUnc_B036) ; loc_B036 
		dc.w    $27B2
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA
		dc.w    $23F0
		dc.l    (($01<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w    $23F0
		dc.l    (($02<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w    $23F0
		dc.l    (($03<<$18)|SS_Red_White_Ball_Mappings) ; loc_21CDA
		dc.w    $23F0  
		dc.l    (($02<<$18)|SS_Reverse_Goal_Mappings) ; loc_21CC6
		dc.w    $04F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA		  
		dc.w    $05F0		   
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w    $65F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w    $25F0
		dc.l    SS_Red_White_Ball_Mappings ; loc_21CDA 
		dc.w    $45F0     
SS_Reverse_Goal_Mappings: ; loc_21CC6:   
		dc.w    loc_21CCC-SS_Reverse_Goal_Mappings
		dc.w    loc_21CD2-SS_Reverse_Goal_Mappings
		dc.w    loc_21CD8-SS_Reverse_Goal_Mappings
loc_21CCC:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4        ; Sonic 1 Mappings Format
loc_21CD2:
		dc.b    $01
		dc.b    $F4, $0A, $00, $09, $F4        ; Sonic 1 Mappings Format
loc_21CD8:
		dc.b    $00
		dc.b    $00		     ; Filler     
SS_Red_White_Ball_Mappings: ; loc_21CDA:
		dc.w    loc_21CE2-SS_Red_White_Ball_Mappings
		dc.w    loc_21CE8-SS_Red_White_Ball_Mappings
		dc.w    loc_21CEE-SS_Red_White_Ball_Mappings
		dc.w    loc_21CF4-SS_Red_White_Ball_Mappings
loc_21CE2:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4        ; Sonic 1 Mappings Format
loc_21CE8:
		dc.b    $01
		dc.b    $F4, $0A, $08, $00, $F4        ; Sonic 1 Mappings Format
loc_21CEE:
		dc.b    $01
		dc.b    $F4, $0A, $18, $00, $F4        ; Sonic 1 Mappings Format
loc_21CF4:
		dc.b    $01
		dc.b    $F4, $0A, $10, $00, $F4        ; Sonic 1 Mappings Format   
SS_Up_Mappings: ; loc_21CFA:
		dc.w    loc_21CFE-SS_Up_Mappings
		dc.w    loc_21D04-SS_Up_Mappings
loc_21CFE:
		dc.b    $01
		dc.b    $F4, $0A, $00, $00, $F4        ; Sonic 1 Mappings Format
loc_21D04:
		dc.b    $01
		dc.b    $F4, $0A, $00, $12, $F4        ; Sonic 1 Mappings Format 
SS_Down_Mappings: ; loc_21D0A:
		dc.w    loc_21D0E-SS_Down_Mappings
		dc.w    loc_21D14-SS_Down_Mappings
loc_21D0E:
		dc.b    $01
		dc.b    $F4, $0A, $00, $09, $F4        ; Sonic 1 Mappings Format 
loc_21D14:
		dc.b    $01
		dc.b    $F4, $0A, $00, $12, $F4        ; Sonic 1 Mappings Format
SS_Red_Emerald_Mappings: ; loc_21D1A:
		dc.w    loc_21D26-SS_Red_Emerald_Mappings
		dc.w    loc_21D38-SS_Red_Emerald_Mappings
SS_Gray_Emerald_Mappings: ; loc_21D1E:
		dc.w    loc_21D2C-SS_Gray_Emerald_Mappings
		dc.w    loc_21D38-SS_Gray_Emerald_Mappings		
SS_Emerald_Mappings: ; loc_21D22:  {Blue / Yellow / Purple / Green}  
		dc.w    loc_21D32-SS_Emerald_Mappings
		dc.w    loc_21D38-SS_Emerald_Mappings
loc_21D26:
		dc.b    $01
		dc.b    $F8, $05, $00, $00, $F8        ; Sonic 1 Mappings Format   
loc_21D2C:
		dc.b    $01
		dc.b    $F8, $05, $00, $04, $F8        ; Sonic 1 Mappings Format		
loc_21D32:
		dc.b    $01
		dc.b    $F8, $05, $00, $08, $F8        ; Sonic 1 Mappings Format
loc_21D38:
		dc.b    $01
		dc.b    $F8, $05, $00, $0C, $F8        ; Sonic 1 Mappings Format						       
;===============================================================================
; Special Stage - Sub-routine
; [ End ]              
;===============================================================================  
		nop		             ; Filler		        
;=============================================================================== 
; Object 0x09 - Sonic In Special Stage
; [ Begin ]		         
;===============================================================================		 
Obj_0x09_Sonic_In_Special_Stage: ; loc_21D40:
		tst.w   (Debug_placement_mode).w
		beq.s   Sonic_In_SS_Normal      ; loc_21D4E
		bsr.w     S1SS_FixCamera          ; loc_21F76
		bra.w     DebugMode              ; loc_23B70
Sonic_In_SS_Normal: ; loc_21D4E:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_21D5C(PC, D0), D1
		jmp     loc_21D5C(PC, D1)
loc_21D5C:		
		dc.w    loc_21D64-loc_21D5C
		dc.w    loc_21DA4-loc_21D5C
		dc.w    loc_21FA0-loc_21D5C
		dc.w    loc_21FF4-loc_21D5C
loc_21D64:
		addq.b  #$02, $0024(A0)    
		move.b  #$0E, $0016(A0)
		move.b  #$07, $0017(A0)
		move.l  #MapUnc_Sonic, $0004(A0) ; loc_614C0
		move.w  #$0780, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_26 ; loc_223E4
		move.b  #$04, $0001(A0)
		move.b  #$00, $0018(A0)
		move.b  #$02, $001C(A0)
		bset    #$02, $0022(A0)
		bset    #$01, $0022(A0)
loc_21DA4:
		tst.w   (Debug_mode_flag).w
		beq.s   loc_21DB8
		btst    #$04, (Ctrl_1_Press).w
		beq.s   loc_21DB8
		move.w  #$0001, (Debug_placement_mode).w
loc_21DB8:
		move.b  #$00, $0030(A0)
		moveq   #$00, D0
		move.b  $0022(A0), D0
		andi.w  #$0002, D0
		move.w  SonicInSS_Modes(PC, D0), D1 ; loc_21DDC
		jsr     SonicInSS_Modes(PC, D1)     ; loc_21DDC
		jsr     LoadSonicDynPLC  ; (loc_10DDC)
		jmp     DisplaySprite           ; (loc_D3C2)
SonicInSS_Modes: ; loc_21DDC:
		dc.w    SonicInSS_OnWall-SonicInSS_Modes ; loc_21DE0
		dc.w    SonicInSS_InAir-SonicInSS_Modes  ; loc_21DEE
SonicInSS_OnWall: ; loc_21DE0:
		bsr.w     SonicInSS_Jump          ; loc_21F16
		bsr.w     SonicInSS_Move          ; loc_21E20
		bsr.w     SonicInSS_Fall          ; loc_22016
		bra.s   SonicInSS_Display       ; loc_21DFA
SonicInSS_InAir: ; loc_21DEE:
		bsr.w     SonicInSS_Null          ; loc_21F5A
		bsr.w     SonicInSS_Move          ; loc_21E20
		bsr.w     SonicInSS_Fall          ; loc_22016
SonicInSS_Display: ; loc_21DFA:
		bsr.w     SonicInSS_ChkItems      ; loc_22112
		bsr.w     SonicInSS_ChkItems2     ; loc_2224E
		jsr     SpeedToPos              ; (loc_D27A)
		bsr.w     S1SS_FixCamera          ; loc_21F76
		move.w  (SpecialStage_angle).w, D0
		add.w   (SpecialStage_speed).w, D0
		move.w  D0, (SpecialStage_angle).w
		jsr     Sonic_Animate           ; (loc_10AB2)
		rts
SonicInSS_Move: ; loc_21E20:
		btst    #$02, (Ctrl_1_Held_Logical).w
		beq.s   loc_21E2C
		bsr.w     SonicInSS_MoveLeft          ; loc_21EB8
loc_21E2C:
		btst    #$03, (Ctrl_1_Held_Logical).w
		beq.s   loc_21E38
		bsr.w     SonicInSS_MoveRight     ; loc_21EE8
loc_21E38:
		move.b  (Ctrl_1_Held_Logical).w, D0
		andi.b  #$0C, D0
		bne.s   loc_21E68
		move.w  $0014(A0), D0
		beq.s   loc_21E68
		bmi.s   loc_21E5A
		subi.w  #$000C, D0
		bcc.s   loc_21E54
		move.w  #$0000, D0
loc_21E54:
		move.w  D0, $0014(A0)
		bra.s   loc_21E68
loc_21E5A:
		addi.w  #$000C, D0
		bcc.s   loc_21E64
		move.w  #$0000, D0
loc_21E64:
		move.w  D0, $0014(A0)
loc_21E68:
		move.b  (SpecialStage_angle).w, D0
		addi.b  #$20, D0
		andi.b  #$C0, D0
		neg.b   D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  $0014(A0), D1
		add.l   D1, $0008(A0)
		muls.w  $0014(A0), D0
		add.l   D0, $000C(A0)
		movem.l D0/D1, -(A7)
		move.l  $000C(A0), D2
		move.l  $0008(A0), D3
		bsr.w     loc_220A8
		beq.s   loc_21EB2
		movem.l (A7)+, D0/D1
		sub.l   D1, $0008(A0)
		sub.l   D0, $000C(A0)
		move.w  #$0000, $0014(A0)
		rts
loc_21EB2:
		movem.l (A7)+, D0/D1
		rts
		
;=============================================================================== 
; Sub Routine SonicInSS_MoveLeft
; [ Begin ]		         
;===============================================================================		 
SonicInSS_MoveLeft: ; loc_21EB8:
		bset    #$00, $0022(A0)
		move.w  $0014(A0), D0
		beq.s   loc_21EC6
		bpl.s   loc_21EDA
loc_21EC6:
		subi.w  #$000C, D0
		cmpi.w  #$F800, D0
		bgt.s   loc_21ED4
		move.w  #$F800, D0
loc_21ED4:
		move.w  D0, $0014(A0)
		rts
loc_21EDA:
		subi.w  #$0040, D0
		bcc.s   loc_21EE2
		nop
loc_21EE2:
		move.w  D0, $0014(A0)
		rts
;=============================================================================== 
; Sub Routine SonicInSS_MoveLeft
; [ End ]		         
;===============================================================================		 

;=============================================================================== 
; Sub Routine SonicInSS_MoveRight
; [ Begin ]		         
;===============================================================================		 
SonicInSS_MoveRight: ; loc_21EE8:
		bclr    #$00, $0022(A0)
		move.w  $0014(A0), D0
		bmi.s   loc_21F08
		addi.w  #$000C, D0
		cmpi.w  #$0800, D0
		blt.s   loc_21F02
		move.w  #$0800, D0
loc_21F02:
		move.w  D0, $0014(A0)
		bra.s   loc_21F14
loc_21F08:
		addi.w  #$0040, D0
		bcc.s   loc_21F10
		nop
loc_21F10:
		move.w  D0, $0014(A0)
loc_21F14:
		rts
;=============================================================================== 
; Sub Routine SonicInSS_MoveRight
; [ End ]		         
;===============================================================================
		 
;=============================================================================== 
; Sub Routine SonicInSS_Jump
; [ Begin ]		         
;===============================================================================		 
SonicInSS_Jump: ; loc_21F16:
		move.b  (Ctrl_1_Press_Logical).w, D0
		andi.b  #$70, D0
		beq.s   loc_21F58
		move.b  (SpecialStage_angle).w, D0
		andi.b  #$FC, D0
		neg.b   D0
		subi.b  #$40, D0
		jsr    ( CalcSine).l		; loc_320A
		muls.w  #$0680, D1
		asr.l   #$08, D1
		move.w  D1, $0010(A0)
		muls.w  #$0680, D0
		asr.l   #$08, D0
		move.w  D0, $0012(A0)
		bset    #$01, $0022(A0)
		move.w  #$00A0, D0
		jsr     (PlaySound).l             ; loc_14C6
loc_21F58:
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Jump
; [ End ]		         
;===============================================================================		 

;=============================================================================== 
; Sub Routine SonicInSS_Null
; [ Begin ]		         
;===============================================================================		 
SonicInSS_Null: ; loc_21F5A:   
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Null
; [ End ]		         
;===============================================================================		 

		move.w  #$FC00, D1
		cmp.w   $0012(A0), D1
		ble.s   loc_21F74
		move.b  (Ctrl_1_Held_Logical).w, D0
		andi.b  #$70, D0
		bne.s   loc_21F74
		move.w  D1, $0012(A0)
loc_21F74:
		rts
		
;=============================================================================== 
; Sub Routine S1SS_FixCamera
; [ Begin ]		         
;===============================================================================  
S1SS_FixCamera: ; loc_21F76:
		move.w  $000C(A0), D2
		move.w  $0008(A0), D3
		move.w  (Camera_X_pos).w, D0
		subi.w  #$00A0, D3
		bcs.s   loc_21F8E
		sub.w   D3, D0
		sub.w   D0, (Camera_X_pos).w
loc_21F8E:
		move.w  (Camera_Y_pos).w, D0
		subi.w  #$0070, D2
		bcs.s   loc_21F9E
		sub.w   D2, D0
		sub.w   D0, (Camera_Y_pos).w
loc_21F9E:
		rts
;=============================================================================== 
; Sub Routine S1SS_FixCamera
; [ End ]		         
;===============================================================================		  
loc_21FA0:
		addi.w  #$0040, (SpecialStage_speed).w
		cmpi.w  #$1800, (SpecialStage_speed).w
		bne.s   loc_21FB4
		move.b  #GameModeID_Level, (Game_Mode).w
loc_21FB4:
		cmpi.w  #$3000, (SpecialStage_speed).w
		blt.s   loc_21FD2
		move.w  #$0000, (SpecialStage_speed).w
		move.w  #$4000, (SpecialStage_angle).w
		addq.b  #$02, $0024(A0)
		move.w  #$003C, $0038(A0)
loc_21FD2:
		move.w  (SpecialStage_angle).w, D0
		add.w   (SpecialStage_speed).w, D0
		move.w  D0, (SpecialStage_angle).w
		jsr     Sonic_Animate           ; (loc_10AB2)
		jsr     LoadSonicDynPLC  ; (loc_10DDC)
		bsr.w     S1SS_FixCamera          ; loc_21F76
		jmp     DisplaySprite           ; (loc_D3C2)
loc_21FF4:
		subq.w  #$01, $0038(A0)
		bne.s   loc_22000
		move.b  #GameModeID_Level, (Game_Mode).w
loc_22000:
		jsr     Sonic_Animate           ; (loc_10AB2)
		jsr     LoadSonicDynPLC  ; (loc_10DDC)
		bsr.w     S1SS_FixCamera          ; loc_21F76
		jmp     DisplaySprite           ; (loc_D3C2)
		
;=============================================================================== 
; Sub Routine SonicInSS_Fall
; [ Begin ]		         
;===============================================================================		  
SonicInSS_Fall: ; loc_22016:
		move.l  $000C(A0), D2
		move.l  $0008(A0), D3
		move.b  (SpecialStage_angle).w, D0
		andi.b  #$FC, D0
		jsr    ( CalcSine).l		; loc_320A
		move.w  $0010(A0), D4
		ext.l   D4
		asl.l   #$08, D4
		muls.w  #$002A, D0
		add.l   D4, D0
		move.w  $0012(A0), D4
		ext.l   D4
		asl.l   #$08, D4
		muls.w  #$002A, D1
		add.l   D4, D1
		add.l   D0, D3
		bsr.w     loc_220A8
		beq.s   loc_22070
		sub.l   D0, D3
		moveq   #$00, D0
		move.w  D0, $0010(A0)
		bclr    #$01, $0022(A0)
		add.l   D1, D2
		bsr.w     loc_220A8
		beq.s   loc_22086
		sub.l   D1, D2
		moveq   #$00, D1
		move.w  D1, $0012(A0)
		rts
loc_22070:
		add.l   D1, D2
		bsr.w     loc_220A8
		beq.s   loc_22094
		sub.l   D1, D2
		moveq   #$00, D1
		move.w  D1, $0012(A0)
		bclr    #$01, $0022(A0)
loc_22086:
		asr.l   #$08, D0
		asr.l   #$08, D1
		move.w  D0, $0010(A0)
		move.w  D1, $0012(A0)
		rts
loc_22094:
		asr.l   #$08, D0
		asr.l   #$08, D1
		move.w  D0, $0010(A0)
		move.w  D1, $0012(A0)
		bset    #$01, $0022(A0)
		rts
;=============================================================================== 
; Sub Routine SonicInSS_Fall
; [ End ]		         
;===============================================================================  
		
loc_220A8:
		lea     (Chunk_Table), A1
		moveq   #$00, D4
		swap  D2
		move.w  D2, D4
		swap  D2
		addi.w  #$0044, D4
		divu.w  #$0018, D4
		mulu.w  #$0080, D4
		adda.l  D4, A1
		moveq   #$00, D4
		swap  D3
		move.w  D3, D4
		swap  D3
		addi.w  #$0014, D4
		divu.w  #$0018, D4
		adda.w  D4, A1
		moveq   #$00, D5
		move.b  (A1)+, D4
		bsr.s   loc_220F0
		move.b  (A1)+, D4
		bsr.s   loc_220F0
		adda.w  #$007E, A1
		move.b  (A1)+, D4
		bsr.s   loc_220F0
		move.b  (A1)+, D4
		bsr.s   loc_220F0
		tst.b   D5
		rts
loc_220F0:
		beq.s   loc_22104
		cmpi.b  #$28, D4
		beq.s   loc_22104
		cmpi.b  #$3A, D4
		bcs.s   loc_22106
		cmpi.b  #$4B, D4
		bcc.s   loc_22106
loc_22104:
		rts
loc_22106:
		move.b  D4, $0030(A0)
		move.l  A1, $0032(A0)		
		moveq   #-1, D5
		rts
		
;=============================================================================== 
; Sub Routine SonicInSS_ChkItems
; [ Begin ]		         
;===============================================================================		  
SonicInSS_ChkItems: ; loc_22112:
		lea     (Chunk_Table), A1
		moveq   #$00, D4
		move.w  $000C(A0), D4
		addi.w  #$0050, D4
		divu.w  #$0018, D4
		mulu.w  #$0080, D4
		adda.l  D4, A1
		moveq   #$00, D4
		move.w  $0008(A0), D4
		addi.w  #$0020, D4
		divu.w  #$0018, D4
		adda.w  D4, A1
		move.b  (A1), D4
		bne.s   loc_2214C
		tst.b   $003A(A0)
		bne.w    loc_2221C
		moveq   #$00, D4
		rts
loc_2214C:
		cmpi.b  #$3A, D4
		bne.s   loc_22188
		bsr.w     loc_21874
		bne.s   loc_22160
		move.b  #$01, (A2)
		move.l  A1, $0004(A2)
loc_22160:
		jsr     (CollectRing)
		cmpi.w  #$0032, (Ring_count).w
		bcs.s   loc_22184
		bset    #$00, (Extra_life_flags).w
		bne.s   loc_22184
		addq.b  #$01, (Continue_count).w
		move.w  #$00BF, D0
		jsr     (PlayMusic).l            ; loc_14C0
loc_22184:
		moveq   #$00, D4
		rts
loc_22188:
		cmpi.b  #$28, D4
		bne.s   loc_221B2
		bsr.w     loc_21874
		bne.s   loc_2219C
		move.b  #$03, (A2)
		move.l  A1, $0004(A2)
loc_2219C:
		addq.b  #$01, (Life_count).w
		addq.b  #$01, (Update_HUD_lives).w
		move.w  #S1MusID_ExtraLife, D0
		jsr     (PlayMusic).l            ; loc_14C0
		moveq   #$00, D4
		rts
loc_221B2:
		cmpi.b  #$3B, D4
		bcs.s   loc_221F8
		cmpi.b  #$40, D4
		bhi.s   loc_221F8
		bsr.w     loc_21874
		bne.s   loc_221CC
		move.b  #$05, (A2)
		move.l  A1, $0004(A2)
loc_221CC:
		cmpi.b  #$06, (Emerald_count).w
		beq.s   loc_221EA
		subi.b  #$3B, D4
		moveq   #$00, D0
		move.b  (Emerald_count).w, D0
		lea     (Got_Emeralds_array).w, A2
		move.b  D4, $00(A2, D0)
		addq.b  #$01, (Emerald_count).w
loc_221EA:
		move.w  #S1MusID_Emerald, D0
		jsr     (PlaySound).l             ; loc_14C6
		moveq   #$00, D4
		rts
loc_221F8:
		cmpi.b  #$41, D4
		bne.s   loc_22204
		move.b  #$01, $003A(A0)
loc_22204:
		cmpi.b  #$4A, D4
		bne.s   loc_22218
		cmpi.b  #$01, $003A(A0)
		bne.s   loc_22218
		move.b  #$02, $003A(A0)
loc_22218:		  
		moveq   #-1, D4
		rts
loc_2221C:
		cmpi.b  #$02, $003A(A0)
		bne.s   loc_22246
		lea     (Chunk_Table+$1020), A1
		moveq   #$3F, D1
loc_2222C:		
		moveq   #$3F, D2
loc_2222E:		
		cmpi.b  #$41, (A1)
		bne.s   loc_22238
		move.b  #$2C, (A1)
loc_22238:
		addq.w  #$01, A1
		dbf    D2, loc_2222E
		lea     $0040(A1), A1
		dbf    D1, loc_2222C
loc_22246:
		clr.b   $003A(A0)
		moveq   #$00, D4
		rts
;=============================================================================== 
; Sub Routine SonicInSS_ChkItems
; [ End ]		         
;===============================================================================		  

;=============================================================================== 
; Sub Routine SonicInSS_ChkItems2
; [ Begin ]		         
;===============================================================================		  
SonicInSS_ChkItems2: ; loc_2224E:
		move.b  $0030(A0), D0
		bne.s   loc_2226E
		subq.b  #$01, $0036(A0)
		bpl.s   loc_22260
		move.b  #$00, $0036(A0)
loc_22260:
		subq.b  #$01, $0037(A0)
		bpl.s   loc_2226C
		move.b  #$00, $0037(A0)
loc_2226C:
		rts
loc_2226E:
		cmpi.b  #$25, D0
		bne.s   loc_222E6
		move.l  $0032(A0), D1
		subi.l  #$FFFF0001, D1
		move.w  D1, D2
		andi.w  #$007F, D1
		mulu.w  #$0018, D1
		subi.w  #$0014, D1
		lsr.w   #$07, D2
		andi.w  #$007F, D2
		mulu.w  #$0018, D2
		subi.w  #$0044, D2
		sub.w   $0008(A0), D1
		sub.w   $000C(A0), D2
		jsr    ( CalcAngle).l              ; loc_34A2
		jsr    ( CalcSine).l		; loc_320A
		muls.w  #$F900, D1
		asr.l   #$08, D1
		move.w  D1, $0010(A0)
		muls.w  #$F900, D0
		asr.l   #$08, D0
		move.w  D0, $0012(A0)
		bset    #$01, $0022(A0)
		bsr.w     loc_21874
		bne.s   loc_222DC
		move.b  #$02, (A2)
		move.l  $0032(A0), D0
		subq.l  #$01, D0
		move.l  D0, $0004(A2)
loc_222DC:
		move.w  #$00B4, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_222E6:
		cmpi.b  #$27, D0
		bne.s   loc_222FC
		addq.b  #$02, $0024(A0)
		move.w  #$00A8, D0
		jsr     (PlaySound).l             ; loc_14C6
		rts
loc_222FC:
		cmpi.b  #$29, D0
		bne.s   loc_22330
		tst.b   $0036(A0)
		bne.w    loc_223E0
		move.b  #$1E, $0036(A0)
		btst    #$06, (SpecialStage_direction).w
		beq.s   loc_22326
		asl.w   (SpecialStage_speed).w
		move.l  $0032(A0), A1
		subq.l  #$01, A1
		move.b  #$2A, (A1)
loc_22326:
		move.w  #$00A9, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_22330:
		cmpi.b  #$2A, D0
		bne.s   loc_22364
		tst.b   $0036(A0)
		bne.w    loc_223E0
		move.b  #$1E, $0036(A0)
		btst    #$06, (SpecialStage_direction).w
		bne.s   loc_2235A
		asr.w   (SpecialStage_speed).w
		move.l  $0032(A0), A1
		subq.l  #$01, A1
		move.b  #$29, (A1)
loc_2235A:
		move.w  #$00A9, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_22364:
		cmpi.b  #$2B, D0
		bne.s   loc_2239A
		tst.b   $0037(A0)
		bne.w    loc_223E0
		move.b  #$1E, $0037(A0)
		bsr.w     loc_21874
		bne.s   loc_2238C
		move.b  #$04, (A2)
		move.l  $0032(A0), D0
		subq.l  #$01, D0
		move.l  D0, $0004(A2)
loc_2238C:
		neg.w   (SpecialStage_speed).w
		move.w  #$00A9, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_2239A:
		cmpi.b  #$2D, D0
		beq.s   loc_223B2
		cmpi.b  #$2E, D0
		beq.s   loc_223B2
		cmpi.b  #$2F, D0
		beq.s   loc_223B2
		cmpi.b  #$30, D0
		bne.s   loc_223E0
loc_223B2:
		bsr.w     loc_21874
		bne.s   loc_223D6
		move.b  #$06, (A2)
		move.l  $0032(A0), A1
		subq.l  #$01, A1
		move.l  A1, $0004(A2)
		move.b  (A1), D0
		addq.b  #$01, D0
		cmpi.b  #$30, D0
		bls.s   loc_223D2
		clr.b   D0
loc_223D2:
		move.b  D0, $0004(A2)
loc_223D6:
		move.w  #$00BA, D0
		jmp     (PlaySound).l             ; loc_14C6
loc_223E0:
		rts
;=============================================================================== 
; Sub Routine SonicInSS_ChkItems2
; [ Begin ]		         
;===============================================================================		  
		
;=============================================================================== 
; Object 0x09 - Sonic In Special Stage
; [ End ]		         
;===============================================================================  
		
;=============================================================================== 
; Object 0x10
; [ Begin ]		         
;===============================================================================				 
Obj_0x10: 
loc_223E2:
		rts   
;=============================================================================== 
; Object 0x10
; [ End ]		         
;===============================================================================		 
J_Adjust2PArtPointer_26: ; loc_223E4:				
		jmp     Adjust2PArtPointer     ; (loc_DC30)
		dc.w    $0000		   ; Filler
		
		
Dynamic_Art_Cues: ; loc_223EC: ; Dynamic reload sprites routine
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		add.w   D0, D0
		move.w  off_22408+2(PC, D0), D1
		lea     off_22408(PC, D1), A2
		move.w  off_22408(PC, D0), D0
		jmp     off_22408(PC, D0)
		rts 
; ---------------------------------------------------------------------------
; ZONE ANIMATION PROCEDURES AND SCRIPTS
;
; Each zone gets two entries in this jump table. The first entry points to the
; zone's animation procedure (usually Dynamic_Normal, but some zones have special
; procedures for complicated animations). The second points to the zone's animation
; script.
;
; Note that Animated_Null is not a valid animation script, so don't pair it up
; with anything except Dynamic_Null, or bad things will happen (for example, a bus error exception).
; ---------------------------------------------------------------------------

off_22408: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_22698

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_226FC

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_226FC

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w loc_2244E
	zoneOffsetTableEntry.w loc_22754

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_227B8

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_227E4

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w CPz_Animate

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866

	zoneOffsetTableEntry.w Dynamic_Normal
	zoneOffsetTableEntry.w loc_2283C

	zoneOffsetTableEntry.w loc_2244C
	zoneOffsetTableEntry.w loc_22866
    zoneTableEnd
; ===========================================================================

loc_2244C:
		rts       
loc_2244E:
		tst.w   (Two_player_mode).w
		bne.w    Dynamic_Normal          ; loc_22630
		lea     (Anim_Counters).w, A3
		moveq   #$00, D0
		move.w  (Camera_X_pos).w, D1
		neg.w   D1
		asr.w   #$03, D1
		move.w  (Camera_X_pos).w, D0
		lsr.w   #$04, D0
		add.w   D1, D0
		subi.w  #$0010, D0
		divu.w  #$0030, D0
		swap  D0
		cmp.b   $0001(A3), D0
		beq.s   loc_224C0
		move.b  D0, $0001(A3)
		move.w  D0, D2
		andi.w  #$0007, D0
		add.w   D0, D0
		add.w   D0, D0
		add.w   D0, D0
		move.w  D0, D1
		add.w   D0, D0
		add.w   D1, D0
		andi.w  #$0038, D2
		lsr.w   #$02, D2
		add.w   D2, D0
		lea     loc_224C4(PC, D0), A4
		moveq   #$05, D5
		move.w  #$A000, D4
loc_224A4:
		moveq   #-1, D1
		move.w  (A4)+, D1
		andi.l  #$00FFFFFF, D1
		move.w  D4, D2
		moveq   #$40, D3
		jsr     (QueueDMATransfer).l           ; loc_156C
		addi.w  #$0080, D4
		dbf    D5, loc_224A4
loc_224C0:
		bra.w     loc_22584		 
loc_224C4:
		dc.w    $0080, $0280, $0380, $0580, $0600, $0880, $0080, $0280
		dc.w    $0380, $0580, $0600, $0880, $0980, $0A80, $0B80, $0C80
		dc.w    $0E80, $0F00, $0980, $0A80, $0B80, $0C80, $0E80, $0F00
		dc.w    $1080, $1180, $1200, $1280, $1300, $1380, $1080, $1180
		dc.w    $1200, $1280, $1300, $1380, $1400, $1480, $1500, $1600
		dc.w    $1900, $1D00, $1400, $1480, $1500, $1600, $1900, $1D00
		dc.w    $1D80, $1E00, $2280, $2400, $2580, $2600, $1D80, $1E00
		dc.w    $2280, $2400, $2580, $2600, $2680, $2780, $2B00, $3280
		dc.w    $3600, $3680, $2680, $2780, $2B00, $3280, $3600, $3680
		dc.w    $3C80, $3D00, $3F00, $3F80, $4080, $4480, $3C80, $3D00
		dc.w    $3F00, $3F80, $4080, $4480, $4580, $4880, $4900, $4B80
		dc.w    $4C80, $4D80, $4580, $4880, $4900, $4B80, $4C80, $4D80		 
loc_22584:
		lea     (TempArray_LayerDef).w, A1
		move.w  (Camera_X_pos).w, D2
		neg.w   D2
		asr.w   #$03, D2
		move.l  A2, -(A7)
		lea     (Hill_Top_Background_Unc).l, A0 ; loc_28C2A
		lea     (Chunk_Table+$7C00), A2
		moveq   #$0F, D1
loc_225A0:
		move.w  (A1)+, D0
		neg.w   D0
		add.w   D2, D0
		andi.w  #$001F, D0
		lsr.w   #$01, D0
		bcc.s   loc_225B2
		addi.w  #$0200, D0
loc_225B2:
		lea     $00(A0, D0), A4
		lsr.w   #$01, D0
		bcs.s   loc_225DC
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.l  (A4)+, (A2)+
		suba.w  #$00C0, A2
		adda.w  #$0020, A0
		dbf    D1, loc_225A0  
		bra.s   loc_22614
loc_225DC:
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		adda.w  #$003C, A2
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		move.b  (A4)+, (A2)+
		suba.w  #$00C0, A2
		adda.w  #$0020, A0
		dbf    D1, loc_225A0
loc_22614:
		move.l  #$00FF7C00, D1
		move.w  #$A300, D2
		move.w  #$0080, D3
		jsr     (QueueDMATransfer).l           ; loc_156C
		move.l  (A7)+, A2
		addq.w  #$02, A3
		bra.w     loc_22634		            
Dynamic_Normal: ; loc_22630:
		lea     (Anim_Counters).w, A3
loc_22634:		
		move.w  (A2)+, D6
loc_22636:
		subq.b  #$01, (A3)
		bpl.s   loc_2267C
		moveq   #$00, D0
		move.b  $0001(A3), D0
		cmp.b   $0006(A2), D0
		bcs.s   loc_2264C
		moveq   #$00, D0
		move.b  D0, $0001(A3)
loc_2264C:
		addq.b  #$01, $0001(A3)
		move.b  (A2), (A3)
		bpl.s   loc_2265A
		add.w   D0, D0
		move.b  $09(A2, D0), (A3)
loc_2265A:
		move.b  $08(A2, D0), D0
		lsl.w   #$05, D0
		move.w  $0004(A2), D2
		move.l  (A2), D1
		andi.l  #$00FFFFFF, D1
		add.l   D0, D1
		moveq   #$00, D3
		move.b  $0007(A2), D3
		lsl.w   #$04, D3
		jsr     (QueueDMATransfer).l           ; loc_156C
loc_2267C:
		move.b  $0006(A2), D0
		tst.b   (A2)
		bpl.s   loc_22686
		add.b   D0, D0
loc_22686:		
		addq.b  #$01, D0
		andi.w  #$00FE, D0
		lea     $08(A2, D0), A2
		addq.w  #$02, A3
		dbf    D6, loc_22636
		rts   
loc_22698: ; Green Hill Dynamic Reload Sprites		  
		dc.w    $0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_Flowers1 ; loc_28000
		dc.w    $7280		   ; VRam 
		dc.w    $0602		   ; Frames/Tiles
		dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers2 ; loc_28080		  
		dc.w    $72C0		   ; VRam
		dc.w    $0802		   ; Frames/Tiles
		dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Frame Load/Frame Time
		dc.l    ($07<<$18)|ArtUnc_Flowers3 ; loc_28100  
		dc.w    $7300		   ; VRam
		dc.w    $0202		   ; Frames/Tiles
		dc.w    $0002		   ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers4 ; loc_28180    
		dc.w    $7340		   ; VRam
		dc.w    $0802		   ; Frames/Tiles
		dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_GHZPulseBall ; loc_28200  
		dc.w    $7380		   ; VRam
		dc.w    $0602		   ; Frames/Tiles
		dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Frame Load/Frame Time
loc_226FC: ; Metropolis Dynamic Reload Sprites   
		dc.w    $0005		   ; Total of Animations
		dc.l    ArtUnc_MTZCylinder     ; loc_2902A  
		dc.w    $6980		   ; VRam
		dc.w    $0810		   ; Frames/Tiles
		dc.w    $0010, $2030, $4050, $6070 ; Frame Load/Frame Time
		dc.l    ($0D<<$18)|ArtUnc_Lava      ; loc_2A02A:
		dc.w    $6800		   ; VRam
		dc.w    $060C		   ; Frames/Tiles
		dc.w    $000C, $1824, $180C     ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_MTZAnimBack   ; loc_2A06A:
		dc.w    $6B80		   ; VRam
		dc.w    $0406		   ; Frames/Tiles
		dc.w    $0013, $0607, $0C13, $0607 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_MTZAnimBack   ; loc_2A06A:
		dc.w    $6C40		   ; VRam
		dc.w    $0406		   ; Frames/Tiles
		dc.w    $0C13, $0607, $0013, $0607 ; Frame Load/Frame Time
		dc.l    ($05<<$18)|Mz_Drills    ; loc_2A86A:
		dc.w    $6D00		   ; VRam
		dc.w    $0408		   ; Frames/Tiles
		dc.w    $0008, $1018            ; Frame Load/Frame Time
		dc.l    ($05<<$18)|Mz_Drills    ; loc_2A86A:
		dc.w    $6E00		   ; VRam
		dc.w    $0408		   ; Frames/Tiles
		dc.w    $0008, $1018            ; Frame Load/Frame Time
loc_22754: ; Hill Top Dynamic Reload Sprites  
		dc.w    $0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_Flowers1 ; loc_28000
		dc.w    $7280		   ; VRam 
		dc.w    $0602		   ; Frames/Tiles
		dc.w    $007F, $0213, $0007, $0207, $0007, $0207 ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers2 ; loc_28080		  
		dc.w    $72C0		   ; VRam
		dc.w    $0802		   ; Frames/Tiles
		dc.w    $027F, $000B, $020B, $000B, $0205, $0005, $0205, $0005 ; Frame Load/Frame Time
		dc.l    ($07<<$18)|ArtUnc_Flowers3 ; loc_28100  
		dc.w    $7300		   ; VRam
		dc.w    $0202		   ; Frames/Tiles
		dc.w    $0002		   ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_Flowers4 ; loc_28180    
		dc.w    $7340		   ; VRam
		dc.w    $0802		   ; Frames/Tiles
		dc.w    $007F, $0207, $0007, $0207, $0007, $020B, $000B, $020B ; Frame Load/Frame Time
		dc.l    ($FF<<$18)|ArtUnc_GHZPulseBall ; loc_28200  
		dc.w    $7380		   ; VRam
		dc.w    $0602		   ; Frames/Tiles
		dc.w    $0017, $0209, $040B, $0617, $040B, $0209 ; Frame Load/Frame Time
loc_227B8: ; Hidden Palace Dynamic Reload Sprites  
		dc.w    $0002		   ; Total of Animations
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w    $5D00		   ; VRam
		dc.w    $0608		   ; Frames/Tiles
		dc.w    $0000, $0810, $1008     ; Frame Load/Frame Time		 
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w    $5E00		   ; VRam
		dc.w    $0608		   ; Frames/Tiles
		dc.w    $0810, $1008, $0000     ; Frame Load/Frame Time
		dc.l    ($08<<$18)|ArtUnc_HPZPulseOrb     ; loc_2B46A
		dc.w    $5F00		   ; VRam
		dc.w    $0608		   ; Frames/Tiles
		dc.w    $1008, $0000, $0810     ; Frame Load/Frame Time    
loc_227E4: ; Oil Ocean Dynamic Reload Sprites              
		dc.w    $0004		   ; Total of Animations
		dc.l    ($FF<<$18)|ArtUnc_OOZPulseBall ; loc_2B76A
		dc.w    $5A00		   ; VRam
		dc.w    $0404		   ; Frames/Tiles
		dc.w    $000B, $0405, $0809, $0403 ; Frame Load/Frame Time 
		dc.l    ($06<<$18)|ArtUnc_OOZSquareBall1 ; loc_2B8EA
		dc.w    $5A80		   ; VRam
		dc.w    $0404		   ; Frames/Tiles
		dc.w    $0004, $080C            ; Frame Load/Frame Time
		dc.l    ($06<<$18)|ArtUnc_OOZSquareBall2 ; loc_2BAEA
		dc.w    $5B00		   ; VRam
		dc.w    $0404		   ; Frames/Tiles
		dc.w    $0004, $080C            ; Frame Load/Frame Time
		dc.l    ($11<<$18)|ArtUnc_Oil1    ; loc_2BCEA
		dc.w    $5B80		   ; VRam
		dc.w    $0610		   ; Frames/Tiles
		dc.w    $0010, $2030, $2010     ; Frame Load/Frame Time
		dc.l    ($11<<$18)|ArtUnc_Oil2 ; loc_2C4EA
		dc.w    $5D80		   ; VRam
		dc.w    $0610		   ; Frames/Tiles
		dc.w    $0010, $2030, $2010     ; Frame Load/Frame Time
CPz_Animate: ; loc_2282A: ; Chemical Plant Dynamic Reload Sprites              
		dc.w    $0000		   ; Total of Animations
		dc.l    ($04<<$18)|CPz_Dyn_Background ; loc_2CCEA:
		dc.w    $6E00		   ; VRam
		dc.w    $0802		   ; Frames/Tiles
		dc.w    $0002, $0406, $080A, $0C0E ; Frame Load/Frame Time
loc_2283C: ; Neo Green Hill Dynamic Reload Sprites 
		dc.w    $0003		   ; Total of Animations
		dc.l    ($05<<$18)|NGHz_Water_Falls_1 ; loc_2CEEA
		dc.w    $7F80		   ; VRam
		dc.w    $0204		   ; Frames/Tiles    
		dc.w    $0004		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_1 ; loc_2CEEA
		dc.w    $7F00		   ; VRam
		dc.w    $0204		   ; Frames/Tiles    
		dc.w    $0400		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_2 ; loc_2CFEA
		dc.w    $7E80		   ; VRam
		dc.w    $0204		   ; Frames/Tiles 
		dc.w    $0004		   ; Frame Load/Frame Time
		dc.l    ($05<<$18)|NGHz_Water_Falls_3 ; loc_2D0EA
		dc.w    $7E00		   ; VRam
		dc.w    $0204		   ; Frames/Tiles 
		dc.w    $0004		   ; Frame Load/Frame Time               
loc_22866:
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		beq.s   loc_22870
loc_2286E:
		rts
loc_22870:
		move.w  (Camera_X_pos).w, D0
		cmpi.w  #$1940, D0
		bcs.s   loc_2286E  
		cmpi.w  #$1F80, D0
		bcc.s   loc_2286E
		subq.b  #$01, (CPZ_UnkScroll_Timer).w
		bpl.s   loc_2286E
		move.b  #$07, (CPZ_UnkScroll_Timer).w
		move.b  #$01, (Screen_redraw_flag).w
		lea     (Chunk_Table+$7500), A1
		bsr.s   loc_228A0
		lea     (Chunk_Table+$7D00), A1
loc_228A0:
		move.w  #$0007, D1
loc_228A4:
		move.w  (A1), D0
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0072(A1), (A1)+
		adda.w  #$0070, A1
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  $0002(A1), (A1)+
		move.w  D0, (A1)+
		suba.w  #$0180, A1
		dbf    D1, loc_228A4
		rts    
Load_16x16_Mappings_For_Dyn_Sprites: ; loc_2293A: ; Load 16x16 mappings used by dynamic reload sprites...
		cmpi.b  #hill_top_zone, (Current_Zone).w
		bne.s   loc_22952
		bsr.w     loc_22D62
		move.b  #$FF, (Anim_Counters+1).w
		move.w  #$FFFF, (TempArray_LayerDef+$20).w
loc_22952:
		cmpi.b  #chemical_plant_zone, (Current_Zone).w
		bne.s   loc_22960
		move.b  #$FF, (Anim_Counters+1).w
loc_22960:
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
		add.w   D0, D0
		move.w  Map16Delta_Index(PC, D0), D0 ; loc_229A2
		lea     Map16Delta_Index(PC, D0), A0 ; loc_229A2
		tst.w   (A0)
		beq.s   loc_22988
		lea     ($FFFF9000).w, A1
		adda.w  (A0)+, A1
		move.w  (A0)+, D1
		tst.w   (Two_player_mode).w
		bne.s   loc_2298A
loc_22982:
		move.w  (A0)+, (A1)+
		dbf    D1, loc_22982
loc_22988:
		rts
loc_2298A:
		move.w  (A0)+, D0
		move.w  D0, D1
		andi.w  #$F800, D0
		andi.w  #$07FF, D1
		lsr.w   #$01, D1
		or.w    D1, D0
		move.w  D0, (A1)+
		dbf    D1, loc_2298A
		rts
; off_229A2:
Map16Delta_Index: zoneOrderedOffsetTable 2,1    
	zoneOffsetTableEntry.w Map16Delta_GHz  ; loc_229C4 - Green Hill 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Null
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Wood (Null)
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Null
	zoneOffsetTableEntry.w Map16Delta_Mz   ; loc_22A40 - Metropolis 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Mz   ; loc_22A40 - Metropolis 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Null
	zoneOffsetTableEntry.w Map16Delta_GHz  ; loc_229C4 - Hill Top 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_HPz  ; loc_22B14 - Hidden Palace 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Null
	zoneOffsetTableEntry.w Map16Delta_OOz  ; loc_22C08 - Oil Ocean 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Dust Hill (Null)
	zoneOffsetTableEntry.w Map16Delta_CNz  ; loc_22C6C - Casino Night 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_CPz  ; loc_22D10 - Chemical Plant 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Genocide City (Null)
	zoneOffsetTableEntry.w Map16Delta_NGHz ; loc_22D1C - Neo Green Hill 16x16 mappings
	zoneOffsetTableEntry.w Map16Delta_Null ; loc_22D60 - Death Egg (Null)	
    zoneTableEnd	  
;===============================================================================
; Green Hill Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================
Map16Delta_GHz: ; loc_229C4: ; Green Hill / Hill Top 16x16 mappings used by dynamic reload sprites...		
		dc.w    $1788 ; Ram Address to start loading ($1788+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $003B ; Number of words to load in Ram Array ($0000..$003B) -> move.w  (A0)+, D1
		dc.w    $4500, $4504, $4501, $4505, $4508, $450C, $4509, $450D
		dc.w    $4510, $4514, $4511, $4515, $4502, $4506, $4503, $4507
		dc.w    $450A, $450E, $450B, $450F, $4512, $4516, $4513, $4517
		dc.w    $6518, $651A, $6519, $651B, $651C, $651E, $651D, $651F
		dc.w    $439C, $4B9C, $439D, $4B9D, $4158, $439C, $4159, $439D
		dc.w    $4B9C, $4958, $4B9D, $4959, $6394, $6B94, $6395, $6B95
		dc.w    $E396, $EB96, $E397, $EB97, $6398, $6B98, $6399, $6B99
		dc.w    $E39A, $EB9A, $E39B, $EB9B
;===============================================================================
; Green Hill Mappings 16x16 Delta  
; [ End ]
;===============================================================================  

;===============================================================================
; Metropolis Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================              
Map16Delta_Mz: ; loc_22A40: ; Metropolis 16x16 mappings used by dynamic reload sprites...  
		dc.w    $1730 ; Ram Address to start loading ($1730+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $0067 ; Number of words to load in Ram Array ($0000..$0067) -> move.w  (A0)+, D1
		dc.w    $235C, $2B5C, $235D, $2B5D, $235E, $2B5E, $235F, $2B5F
		dc.w    $635A, $635A, $635B, $635B, $6358, $6358, $6359, $6359
		dc.w    $6356, $6356, $6357, $6357, $6354, $6354, $6355, $6355
		dc.w    $6352, $6352, $6353, $6353, $6350, $6350, $6351, $6351
		dc.w    $634E, $634E, $634F, $634F, $634C, $634C, $634D, $634D
		dc.w    $2360, $2B60, $2361, $2B61, $2362, $2B62, $2363, $2B63
		dc.w    $2364, $2B64, $2365, $2B65, $2366, $2B66, $2367, $2B67
		dc.w    $0000, $0000, $4340, $4341, $0000, $0000, $4342, $4343
		dc.w    $4344, $4345, $4348, $4349, $4346, $4347, $434A, $434B
		dc.w    $E35A, $E35A, $E35B, $E35B, $E358, $E358, $E359, $E359
		dc.w    $E356, $E356, $E357, $E357, $E354, $E354, $E355, $E355
		dc.w    $E352, $E352, $E353, $E353, $E350, $E350, $E351, $E351
		dc.w    $E34E, $E34E, $E34F, $E34F, $E34C, $E34C, $E34D, $E34D
;===============================================================================
; Metropolis Mappings 16x16 Delta  
; [ End ]
;=============================================================================== 

;===============================================================================
; Hidden Palace Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================		   
Map16Delta_HPz: ; loc_22B14: ; Hidden Palace 16x16 mappings used by dynamic reload sprites...  
		dc.w    $1710 ; Ram Address to start loading ($1710+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $0077 ; Number of words to load in Ram Array ($0000..$0077) -> move.w  (A0)+, D1
		dc.w    $62E8, $62E9, $62EA, $62EB, $62EC, $62ED, $62EE, $62EF
		dc.w    $62F0, $62F1, $62F2, $62F3, $62F4, $62F5, $62F6, $62F7
		dc.w    $62F8, $62F9, $62FA, $62FB, $62FC, $62FD, $62FE, $62FF
		dc.w    $42E8, $42E9, $42EA, $42EB, $42EC, $42ED, $42EE, $42EF
		dc.w    $42F0, $42F1, $42F2, $42F3, $42F4, $42F5, $42F6, $42F7
		dc.w    $42F8, $42F9, $42FA, $42FB, $42FC, $42FD, $42FE, $42FF
		dc.w    $0000, $62E8, $0000, $62EA, $62E9, $62EC, $62EB, $62EE
		dc.w    $62ED, $0000, $62EF, $0000, $0000, $62F0, $0000, $62F2
		dc.w    $62F1, $62F4, $62F3, $62F6, $62F5, $0000, $62F7, $0000
		dc.w    $0000, $62F8, $0000, $62FA, $62F9, $62FC, $62FB, $62FE
		dc.w    $62FD, $0000, $62FF, $0000, $0000, $42E8, $0000, $42EA
		dc.w    $42E9, $42EC, $42EB, $42EE, $42ED, $0000, $42EF, $0000
		dc.w    $0000, $42F0, $0000, $42F2, $42F1, $42F4, $42F3, $42F6
		dc.w    $42F5, $0000, $42F7, $0000, $0000, $42F8, $0000, $42FA
		dc.w    $42F9, $42FC, $42FB, $42FE, $42FD, $0000, $42FF, $0000
;===============================================================================
; Hidden Palace Mappings 16x16 Delta  
; [ End ]
;===============================================================================  

;===============================================================================
; Oil Ocean Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================		  
Map16Delta_OOz: ; loc_22C08: ; Oil Ocean 16x16 mappings used by dynamic reload sprites...		
		dc.w    $17A0 ; Ram Address to start loading ($17A0+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $002F ; Number of words to load in Ram Array ($0000..$002F) -> move.w  (A0)+, D1
		dc.w    $82D0, $82D2, $82D1, $82D3, $E2D4, $E2D5, $E2D6, $E2D7
		dc.w    $0000, $62D8, $0000, $62DA, $62D9, $0000, $62DB, $0000
		dc.w    $C2DC, $C2DD, $C2E4, $C2E5, $C2DE, $C2DF, $C2E6, $C2E7
		dc.w    $C2E0, $C2E1, $C2E8, $C2E9, $C2E2, $C2E3, $C2EA, $C2EB
		dc.w    $C2EC, $C2ED, $C2F4, $C2F5, $C2EE, $C2EF, $C2F6, $C2F7
		dc.w    $C2F0, $C2F1, $C2F8, $C2F9, $C2F2, $C2F3, $C2FA, $C2FB
;===============================================================================
; Oil Ocean Mappings 16x16 Delta  
; [ End ]
;===============================================================================   

;===============================================================================
; Casino Night Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================		   
Map16Delta_CNz: ; loc_22C6C: ; Casino Night 16x16 mappings used by dynamic reload sprites...  
		dc.w    $1760 ; Ram Address to start loading ($1760+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $004F ; Number of words to load in Ram Array ($0000..$004F) -> move.w  (A0)+, D1
		dc.w    $43D2, $43D4, $43D3, $43D5, $4BD4, $43D6, $4BD5, $43D7
		dc.w    $53D3, $53D5, $53D2, $53D4, $5BD5, $5BD3, $5BD4, $5BD2
		dc.w    $43D8, $43DA, $43D9, $43DB, $4BDA, $4BD8, $4BDB, $4BD9
		dc.w    $43DC, $43DE, $43DD, $43DF, $4BDE, $4BDC, $4BDF, $4BDD
		dc.w    $43E0, $43E2, $43E1, $43E3, $4BE2, $4BE0, $4BE3, $4BE1
		dc.w    $43E4, $43E6, $43E5, $43E7, $4BE6, $4BE4, $4BE7, $4BE5
		dc.w    $63E8, $63EA, $63E9, $63EB, $63EC, $63EE, $63ED, $63EF
		dc.w    $63F0, $63F2, $63F1, $63F3, $63F4, $63F6, $63F5, $63F7
		dc.w    $7BF7, $7BF5, $7BF6, $7BF4, $63F8, $63FA, $63F9, $63FB
		dc.w    $6BF6, $6BF4, $6BF7, $6BF5, $7BEB, $7BE9, $7BEA, $7BE8
;===============================================================================
; Casino Night Mappings 16x16 Delta  
; [ End ]
;===============================================================================   

;===============================================================================
; Chemical Plant Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================		 
Map16Delta_CPz: ; loc_22D10: ; Chemical Plant 16x16 mappings used by dynamic reload sprites...
		dc.w    $17F8 ; Ram Address to start loading ($17F8+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $0003 ; Number of words to load in Ram Array ($0000..$0003) -> move.w  (A0)+, D1
		dc.w    $4370, $4371, $4370, $4371
;===============================================================================
; Chemical Plant Mappings 16x16 Delta  
; [ End ]
;===============================================================================  

;===============================================================================
; Neo Green Hill Mappings 16x16 Delta  
; [ Begin ]
;===============================================================================  
Map16Delta_NGHz: ; loc_22D1C: ; Neo Green Hill 16x16 mappings used by dynamic reload sprites...               
		dc.w    $17C0 ; Ram Address to start loading ($17C0+$FFFF9000)      -> adda.w  (A0)+, A1
		dc.w    $001F ; Number of words to load in Ram Array ($0000..$001F) -> move.w  (A0)+, D1
		dc.w    $C3F0, $C3F1, $C3F2, $C3F3, $C3F4, $C3F5, $C3F6, $C3F7
		dc.w    $C3F8, $C3F9, $C3FA, $C3FB, $C3FC, $C3FD, $C3FE, $C3FF
		dc.w    $43F0, $43F1, $43F2, $43F3, $43F4, $43F5, $43F6, $43F7
		dc.w    $43F8, $43F9, $43FA, $43FB, $43FC, $43FD, $43FE, $43FF
;===============================================================================
; Neo Green Hill Mappings 16x16 Delta  
; [ End ]
;===============================================================================
		  
;===============================================================================
; Null Mappings 16x16 Delta  
; [ Begin ]
;=============================================================================== 
Map16Delta_Null: ; loc_22D60:
		dc.w    $0000 ; Null
;===============================================================================
; Null Mappings 16x16 Delta  
; [ End ]
;===============================================================================		 
		
loc_22D62: ; Load Hill Top 8x8 Extra Background Tiles In To Ram               
		lea     (Hill_Top_Background).l, A0 ; loc_28300
		lea     ($FFFFB800).w, A4
		bsr.w     loc_22DF4
		lea     ($FFFFB800).w, A1
		lea     (loc_22D94).l, A4
		moveq   #$00, D2
		moveq   #$2F, D3
loc_22D7E:
		moveq   #-1, D0
		move.w  (A4)+, D0
		move.l  D0, A2
		moveq   #$1F, D1
loc_22D86:
		move.l  (A1), (A2)+
		move.l  D2, (A1)+
		dbf    D1, loc_22D86
		dbf    D3, loc_22D7E
		rts  
loc_22D94:
		dc.w    $0080, $0280, $0380, $0580, $0600, $0880, $0980, $0A80
		dc.w    $0B80, $0C80, $0E80, $0F00, $1080, $1180, $1200, $1280
		dc.w    $1300, $1380, $1400, $1480, $1500, $1600, $1900, $1D00
		dc.w    $1D80, $1E00, $2280, $2400, $2580, $2600, $2680, $2780
		dc.w    $2B00, $3280, $3600, $3680, $3C80, $3D00, $3F00, $3F80
		dc.w    $4080, $4480, $4580, $4880, $4900, $4B80, $4C80, $4D80
loc_22DF4:
		jmp     (NemDecToRAM).l        ; loc_160E 
		dc.w    $0000 ; Filler    
Obj_0x21_Head_Up_Display: ; loc_22DFC:
		moveq   #$00, D0
		move.b  $0024(A0), D0
		move.w  loc_22E0A(PC, D0), D1
		jmp     loc_22E0A(PC, D1)
loc_22E0A:
		dc.w    loc_22E0E-loc_22E0A
		dc.w    loc_22E3C-loc_22E0A
loc_22E0E:
		addq.b  #$02, $0024(A0)
		move.w  #$0090, $0008(A0)
		move.w  #$0108, $000A(A0)
		move.l  #Head_Up_Display_Mappings, $0004(A0) ; loc_22E80
		move.w  #$06CA, $0002(A0)
		bsr.w     J_Adjust2PArtPointer_27 ; loc_23B68
		move.b  #$00, $0001(A0)
		move.b  #$00, $0018(A0)
loc_22E3C:
		tst.w   (Ring_count).w
		beq.s   loc_22E60
		moveq   #$00, D0
		btst    #$03, (Timer_frames+1).w
		bne.s   loc_22E56
		cmpi.b  #$09, (Timer_minute).w
		bne.s   loc_22E56
		addq.w  #$02, D0
loc_22E56:
		move.b  D0, $001A(A0)
		jmp     DisplaySprite           ; loc_D3C2
loc_22E60:
		moveq   #$00, D0
		btst    #$03, (Timer_frames+1).w
		bne.s   loc_22E76
		addq.w  #$01, D0
		cmpi.b  #$09, (Timer_minute).w
		bne.s   loc_22E76
		addq.w  #$02, D0
loc_22E76:
		move.b  D0, $001A(A0)
		jmp     DisplaySprite           ; loc_D3C2  
Head_Up_Display_Mappings: ; loc_22E80:
		dc.w    HUD_Map_01-Head_Up_Display_Mappings
		dc.w    HUD_Map_02-Head_Up_Display_Mappings
		dc.w    HUD_Map_03-Head_Up_Display_Mappings 
		dc.w    HUD_Map_04-Head_Up_Display_Mappings
HUD_Map_01: ; loc_22E88:
		dc.w    $000A
		dc.l    $800DA000, $A0000000, $800DA018, $A00C0020
		dc.l    $800DA020, $A0100040, $900DA010, $A0080000
		dc.l    $900DA028, $A0140028, $A00DA008, $A0040000
		dc.l    $A001A000, $A0000020, $A009A030, $A0180030
		dc.l    $4005810A, $80850000, $400DA10E, $A0870010
HUD_Map_02: ; loc_22EDA:		
		dc.w    $000A
		dc.l    $800DA000, $A0000000, $800DA018, $A00C0020
		dc.l    $800DA020, $A0100040, $900DA010, $A0080000
		dc.l    $900DA028, $A0140028, $A00D8008, $80040000
		dc.l    $A0018000, $80000020, $A009A030, $A0180030
		dc.l    $4005810A, $80850000, $400DA10E, $A0870010
HUD_Map_03: ; loc_22F2C:
		dc.w    $000A   
		dc.l    $800DA000, $A0000000, $800DA018, $A00C0020
		dc.l    $800DA020, $A0100040, $900D8010, $80080000
		dc.l    $900DA028, $A0140028, $A00DA008, $A0040000
		dc.l    $A001A000, $A0000020, $A009A030, $A0180030
		dc.l    $4005810A, $80850000, $400DA10E, $A0870010  
HUD_Map_04: ; loc_22F7E:		       
		dc.w    $000A             
		dc.l    $800DA000, $A0000000, $800DA018, $A00C0020
		dc.l    $800DA020, $A0100040, $900D8010, $80080000
		dc.l    $900DA028, $A0140028, $A00D8008, $80040000
		dc.l    $A0018000, $80000020, $A009A030, $A0180030
		dc.l    $4005810A, $80850000, $400DA10E, $A0870010
;===============================================================================
; AddPoints - Sub-routine
; [ Begin ]              
;===============================================================================		
AddPoints: ; loc_22FD0:
		move.b  #$01, (Update_HUD_score).w
		lea     (Score).w, A3
		add.l   D0, (A3)
		move.l  #$000F423F, D1
		cmp.l   (A3), D1  
		bhi.s   loc_22FE8
		move.l  D1, (A3)
loc_22FE8:
		move.l  (A3), D0
		cmp.l   (Next_Extra_life_score).w, D0
		bcs.s   loc_23010
		addi.l  #$00001388, (Next_Extra_life_score).w
		tst.b   (Graphics_Flags).w
		bmi.s   loc_23010
		addq.b  #$01, (Life_count).w
		addq.b  #$01, (Update_HUD_lives).w
		move.w  #S1MusID_ExtraLife, D0
		jmp     (PlayMusic).l            ; loc_14C0
loc_23010:
		rts
HudUpdate: ; loc_23012:
		nop
		lea     (VDP_data_port), A6
		tst.w   (Debug_mode_flag).w
		bne.w    loc_23104
		tst.b   (Update_HUD_score).w
		beq.s   loc_2303A
		clr.b   (Update_HUD_score).w
		move.l  #$5C800003, D0
		move.l  (Score).w, D1
		bsr.w     loc_23250
loc_2303A:
		tst.b   (Update_HUD_rings).w
		beq.s   loc_2305A
		bpl.s   loc_23046
		bsr.w     loc_23170
loc_23046:
		clr.b   (Update_HUD_rings).w
		move.l  #$5F400003, D0
loc_23050:		
		moveq   #$00, D1
		move.w  (Ring_count).w, D1
		bsr.w     loc_23246
loc_2305A:
		tst.b   (Update_HUD_timer).w
		beq.s   loc_230B6 
		tst.w   (Game_paused).w
		bne.s   loc_230B6
		lea     (Timer).w, A1
		cmpi.l  #$00093B3B, (A1)+
		nop
		addq.b  #1, -(A1)
		cmpi.b  #$3C, (A1)
		bcs.s   loc_230B6
		move.b  #$00, (A1)
		addq.b  #1, -(A1)
		cmpi.b  #$3C, (A1)
		bcs.s   loc_23096
		move.b  #$00, (A1)
		addq.b  #1, -(A1)
		cmpi.b  #$09, (A1)
		bcs.s   loc_23096
		move.b  #$09, (A1)
loc_23096:
		move.l  #$5E400003, D0
		moveq   #$00, D1
		move.b  (Timer_minute).w, D1
		bsr.w     loc_2331E
		move.l  #$5EC00003, D0
		moveq   #$00, D1
		move.b  (Timer_second).w, D1
		bsr.w     loc_23326
loc_230B6:		
		tst.b   (Update_HUD_lives).w
		beq.s   loc_230C4
		clr.b   (Update_HUD_lives).w
		bsr.w     loc_233DE
loc_230C4:
		tst.b   (Update_Bonus_score).w
		beq.s   loc_230EC
		clr.b   (Update_Bonus_score).w
		move.l  #$6E000002, (VDP_control_port)
		moveq   #$00, D1
		move.w  (Bonus_Countdown_1).w, D1
		bsr.w     loc_2337E
		moveq   #$00, D1
		move.w  (Bonus_Countdown_2).w, D1
		bsr.w     loc_2337E
loc_230EC:              
		rts  
Sub_Time_Over: ; loc_230EE:
		clr.b   (Update_HUD_timer).w
		lea     ($FFFFB000).w, A0
		move.l  A0, A2
		bsr.w     KillSonic               ; loc_21422
		move.b  #$01, (Time_Over_flag).w
		rts		
loc_23104:
		bsr.w     loc_231DC
		tst.b   (Update_HUD_rings).w
		beq.s   loc_23128
		bpl.s   loc_23114
		bsr.w     loc_23170
loc_23114:
		clr.b   (Update_HUD_rings).w
		move.l  #$5F400003, D0
		moveq   #$00, D1
		move.w  (Ring_count).w, D1
		bsr.w     loc_23246
loc_23128:
		move.l  #$5EC00003, D0
		moveq   #$00, D1
		move.b  (Sprite_count).w, D1
		bsr.w     loc_23326
		tst.b   (Update_HUD_lives).w
		beq.s   loc_23146
		clr.b   (Update_HUD_lives).w
		bsr.w     loc_233DE
loc_23146:
		tst.b   (Update_Bonus_score).w
		beq.s   loc_2316E
		clr.b   (Update_Bonus_score).w   
		move.l  #$6E000002, (VDP_control_port)
		moveq   #$00, D1
		move.w  (Bonus_Countdown_1).w, D1
		bsr.w     loc_2337E
		moveq   #$00, D1
		move.w  (Bonus_Countdown_2).w, D1
		bsr.w     loc_2337E
loc_2316E:		
		rts
loc_23170:
		move.l  #$5F400003, (VDP_control_port)
		lea     loc_231D8(PC), A2
		move.w  #$0002, D2
		bra.s   loc_231A0
Head_Up_Display_Base: ; loc_23184: ; HUD routine               
		lea     (VDP_data_port), A6
		bsr.w     loc_233DE
		move.l  #$5C400003, (VDP_control_port)
		lea     loc_231CC(PC), A2
		move.w  #$000E, D2
loc_231A0:
		lea     loc_23448(PC), A1
loc_231A4:		
		move.w  #$000F, D1
		move.b  (A2)+, D0
		bmi.s   loc_231C0  
		ext.w   D0
		lsl.w   #5, D0
		lea     $00(A1, D0), A3		   
loc_231B4:
		move.l  (A3)+, (A6)
		dbf    D1, loc_231B4
loc_231BA:		
		dbf    D2, loc_231A4
		rts 
loc_231C0:
		move.l  #$00000000, (A6)
		dbf    D1, loc_231C0
		bra.s   loc_231BA            
loc_231CC:
		dc.l    $16FFFFFF, $FFFFFF00, $00140000
loc_231D8:
		dc.l    $FFFF0000
loc_231DC:
		move.l  #$5C400003, (VDP_control_port)
		move.w  (Camera_X_pos).w, D1
		lsr.w   #7, D1
		move.w  (Timer_frames).w, D1
		lsr.w   #6, D1
		swap  D1
		move.w  ($FFFFB008).w, D1 
		bsr.s   loc_2320E
		move.w  (Camera_Y_pos).w, D1
		move.w  (Camera_BG_X_pos).w, D1
		lsr.w   #7, D1
		move.b  (Oscillating_Data+$18).w, D1
		swap  D1
		move.w  ($FFFFB00C).w, D1
loc_2320E:
		moveq   #$07, D6
		lea     (loc_23888).l, A1
loc_23216:		
		rol.w   #4, D1
		move.w  D1, D2
		andi.w  #$000F, D2
		cmpi.w  #$000A, D2
		bcs.s   loc_23228
		addi.w  #$0007, D2
loc_23228:
		lsl.w   #5, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		swap  D1
		dbf    D6, loc_23216
		rts
loc_23246:
		lea     (loc_23312).l, A2
		moveq   #$02, D6
		bra.s   loc_23258
loc_23250:
		lea     (loc_23306).l, A2
		moveq   #$05, D6
loc_23258:
		moveq   #$00, D4
		lea     loc_23448(PC), A1
loc_2325E:		
		moveq   #$00, D2
		move.l  (A2)+, D3
loc_23262:		
		sub.l   D3, D1
		bcs.s   loc_2326A
		addq.w  #1, D2
		bra.s   loc_23262
loc_2326A:
		add.l   D3, D1
		tst.w   D2
		beq.s   loc_23274
		move.w  #$0001, D4
loc_23274:
		tst.w   D4
		beq.s   loc_232A2
		lsl.w   #6, D2
		move.l  D0, $0004(A6)
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
loc_232A2:		
		addi.l  #$00400000, D0
		dbf    D6, loc_2325E
		rts 
; loc_232AE:
		move.l  #$5F800003, (VDP_control_port)
		lea     (VDP_data_port), A6
		lea     (loc_23316).l, A2
		moveq   #$01, D6
		moveq   #$00, D4
		lea     loc_23448(PC), A1
loc_232CC:		
		moveq   #$00, D2
		move.l  (A2)+, D3
loc_232D0:		
		sub.l   D3, D1
		bcs.s   loc_232D8
		addq.w  #$01, D2
		bra.s   loc_232D0
loc_232D8:
		add.l   D3, D1
		lsl.w   #$06, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		dbf    D6, loc_232CC
		rts		   
loc_23306:
		dc.l    $000186A0
;loc_2330A:		
		dc.l    $00002710
loc_2330E:		
		dc.l    $000003E8
loc_23312:		 
		dc.l    $00000064
loc_23316:
		dc.l    $0000000A 
loc_2331A:
		dc.l    $00000001				  
loc_2331E: 
		lea     loc_2331A(PC), A2 
		moveq   #$00, D6
		bra.s   loc_2332C
loc_23326:		
		lea     loc_23316(PC), A2  
		moveq   #$01, D6
loc_2332C:		
		moveq   #$00, D4 
		lea     loc_23448(PC), A1
loc_23332:		
		moveq   #$00, D2
		move.l  (A2)+, D3
loc_23336:		
		sub.l   D3, D1
		bcs.s   loc_2333E
		addq.w  #1, D2
		bra.s   loc_23336
loc_2333E:		      
		add.l   D3, D1
		tst.w   D2
		beq.s   loc_23348
		move.w  #$0001, D4
loc_23348:
		lsl.w   #6, D2
		move.l  D0, $0004(A6)
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		addi.l  #$00400000, D0
		dbf    D6, loc_23332
		rts   
loc_2337E:		   
		lea     loc_2330E(PC), A2 
		moveq   #$03, D6
		moveq   #$00, D4
		lea     loc_23448(PC), A1
loc_2338A:		
		moveq   #$00, D2
		move.l  (A2)+, D3
loc_2338E:		
		sub.l   D3, D1
		bcs.s   loc_23396
		addq.w  #1, D2
		bra.s   loc_2338E 
loc_23396:
		add.l   D3, D1
		tst.w   D2
		beq.s   loc_233A0
		move.w  #$0001, D4		  
loc_233A0:
		tst.w   D4
		beq.s   loc_233D0
		lsl.w   #6, D2
		lea     $00(A1, D2), A3		
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
loc_233CA:		
		dbf    D6, loc_2338A
		rts   
loc_233D0:
		moveq   #$0F, D5
loc_233D2:		
		move.l  #$00000000, (A6)
		dbf    D5, loc_233D2
		bra.s   loc_233CA              
loc_233DE:
		move.l  #$7BA00003, D0
		moveq   #$00, D1
		move.b  (Life_count).w, D1
		lea     loc_23316(PC), A2               
		moveq   #$01, D6
		moveq   #$00, D4
		lea     loc_23748(PC), A1
loc_233F6:		
		move.l  D0, $0004(A6)
		moveq   #$00, D2
		move.l  (A2)+, D3
loc_233FE:		
		sub.l   D3, D1
		bcs.s   loc_23406
		addq.w  #$01, D2
		bra.s   loc_233FE
loc_23406:
		add.l   D3, D1
		tst.w   D2
		beq.s   loc_23410
		move.w  #$0001, D4
loc_23410:
		tst.w   D4
		beq.s   loc_23436
loc_23414:		
		lsl.w   #$05, D2
		lea     $00(A1, D2), A3
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
		move.l  (A3)+, (A6)
loc_2342A:
		addi.l  #$00400000, D0
		dbf    D6, loc_233F6
		rts
loc_23436:
		tst.w   D6
		beq.s   loc_23414
		moveq   #$07, D5
loc_2343C:		
		move.l  #$00000000, (A6)
		dbf    D5, loc_2343C
		bra.s   loc_2342A				     
loc_23448:  
		BINCLUDE  "data\sprites\bignumbr.dat" 
loc_23748:		
		BINCLUDE  "data\sprites\smallnum.dat"             
loc_23888:
		BINCLUDE  "data\sprites\debugnum.dat"
J_Adjust2PArtPointer_27: ; loc_23B68:
		jmp     Adjust2PArtPointer     ; loc_DC30
		dc.w    $0000		   ; Filler
DebugMode: ; loc_23B70: ; Debug Mode Routine		 
		moveq   #$00, D0
		move.b  (Debug_placement_mode).w, D0
		move.w  loc_23B7E(PC, D0), D1
		jmp     loc_23B7E(PC, D1)
loc_23B7E:
		dc.w    loc_23B82-loc_23B7E
		dc.w    loc_23BEC-loc_23B7E
loc_23B82:
		addq.b  #$02, (Debug_placement_mode).w
		move.w  (Camera_Min_Y_pos).w, (Camera_Min_Y_pos_Debug_Copy).w
		move.w  (Camera_Max_Y_pos).w, (Camera_Max_Y_pos_Debug_Copy).w
		andi.w  #$07FF, ($FFFFB00C).w
		andi.w  #$07FF, (Camera_Y_pos).w
		andi.w  #$07FF, (Camera_BG_Y_pos).w
		move.b  #$00, $001A(A0)
		move.b  #$00, $001C(A0)
		cmpi.b  #GameModeID_SpecialStage, (Game_Mode).w
		bne.s   loc_23BBC
		moveq   #$06, D0
		bra.s   loc_23BC2
loc_23BBC:
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
loc_23BC2:
		lea     (Debug_Index).l, A2   ;loc_23DBE 
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D6
		cmp.b   (Debug_object).w, D6
		bhi.s   loc_23BDC
		move.b  #$00, (Debug_object).w
loc_23BDC:
		bsr.w     loc_23D9E
		move.b  #$0C, (Debug_Accel_Timer).w
		move.b  #$01, (Debug_Speed).w
loc_23BEC:
		moveq   #$06, D0
		cmpi.b  #GameModeID_SpecialStage, (Game_Mode).w
		beq.s   loc_23BFC
		moveq   #$00, D0
		move.b  (Current_Zone).w, D0
loc_23BFC:
		lea     (Debug_Index).l, A2 ; loc_23DBE
		add.w   D0, D0
		adda.w  $00(A2, D0), A2
		move.w  (A2)+, D6
		bsr.w     loc_23C14
		jmp     DisplaySprite           ; (loc_D3C2)
loc_23C14:
		moveq   #$00, D4
		move.w  #$0001, D1
		move.b  (Ctrl_1_Press).w, D4
		andi.w  #$000F, D4
		bne.s   loc_23C56
		move.b  (Ctrl_1_Held).w, D0
		andi.w  #$000F, D0
		bne.s   loc_23C3E
		move.b  #$0C, (Debug_Accel_Timer).w
		move.b  #$0F, (Debug_Speed).w
		bra.w     loc_23CBA
loc_23C3E:
		subq.b  #$01, (Debug_Accel_Timer).w
		bne.s   loc_23C5A
		move.b  #$01, (Debug_Accel_Timer).w
		addq.b  #$01, (Debug_Speed).w
		bne.s   loc_23C56
		move.b  #$FF, (Debug_Speed).w
loc_23C56:
		move.b  (Ctrl_1_Held).w, D4
loc_23C5A:
		moveq   #$00, D1
		move.b  (Debug_Speed).w, D1
		addq.w  #$01, D1
		swap  D1
		asr.l   #$04, D1
		move.l  $000C(A0), D2
		move.l  $0008(A0), D3
		btst    #$00, D4
		beq.s   loc_23C84
		sub.l   D1, D2
		moveq   #$00, D0
		move.w  (Camera_Min_Y_pos).w, D0
		swap  D0
		cmp.l   D0, D2
		bge.s   loc_23C84
		move.l  D0, D2
loc_23C84:
		btst    #$01, D4
		beq.s   loc_23C9E
		add.l   D1, D2
		moveq   #$00, D0
		move.w  (Camera_Max_Y_pos).w, D0
		addi.w  #$00DF, D0
		swap  D0
		cmp.l   D0, D2
		blt.s   loc_23C9E
		move.l  D0, D2
loc_23C9E:
		btst    #$02, D4
		beq.s   loc_23CAA
		sub.l   D1, D3
		bcc.s   loc_23CAA
		moveq   #$00, D3
loc_23CAA:
		btst    #$03, D4
		beq.s   loc_23CB2
		add.l   D1, D3
loc_23CB2:
		move.l  D2, $000C(A0)
		move.l  D3, $0008(A0)
loc_23CBA:
		btst    #$06, (Ctrl_1_Held).w
		beq.s   loc_23CF2
		btst    #$05, (Ctrl_1_Press).w
		beq.s   loc_23CD6
		subq.b  #$01, (Debug_object).w
		bcc.s   loc_23CEE
		add.b   D6, (Debug_object).w
		bra.s   loc_23CEE
loc_23CD6:
		btst    #$06, (Ctrl_1_Press).w
		beq.s   loc_23CF2
		addq.b  #$01, (Debug_object).w
		cmp.b   (Debug_object).w, D6
		bhi.s   loc_23CEE
		move.b  #$00, (Debug_object).w
loc_23CEE:
		bra.w     loc_23D9E
loc_23CF2:
		btst    #$05, (Ctrl_1_Press).w
		beq.s   loc_23D36
		jsr     SingleObjLoad        ; (loc_E772)
		bne.s   loc_23D36
		move.w  $0008(A0), $0008(A1)
		move.w  $000C(A0), $000C(A1)
		_move.b  $0004(A0), 0(A1)
		move.b  $0001(A0), $0001(A1)
		move.b  $0001(A0), $0022(A1)
		andi.b  #$7F, $0022(A1)
		moveq   #$00, D0
		move.b  (Debug_object).w, D0
		lsl.w   #$03, D0
		move.b  $04(A2, D0), $0028(A1)
		rts
loc_23D36:
		btst    #$04, (Ctrl_1_Press).w
		beq.s   loc_23D9C
		moveq   #$00, D0
		move.w  D0, (Debug_placement_mode).w
		move.l  #MapUnc_Sonic, ($FFFFB004).w ; loc_614C0
		move.w  #$0780, ($FFFFB002).w
		tst.w   (Two_player_mode).w
		beq.s   loc_23D5E
		move.w  #$03C0, ($FFFFB002).w
loc_23D5E:
		move.b  D0, ($FFFFB01C).w
		move.w  D0, $000A(A0)
		move.w  D0, $000E(A0)
		move.w  $0008(A0), ($FFFFB048).w
		move.w  $000C(A0), ($FFFFB04C).w
		move.w  (Camera_Min_Y_pos_Debug_Copy).w, (Camera_Min_Y_pos).w
		move.w  (Camera_Max_Y_pos_Debug_Copy).w, (Camera_Max_Y_pos).w
		cmpi.b  #GameModeID_SpecialStage, (Game_Mode).w
		bne.s   loc_23D9C
		move.b  #$02, ($FFFFB01C).w
		bset    #$02, ($FFFFB022).w
		bset    #$01, ($FFFFB022).w
loc_23D9C:
		rts
loc_23D9E:
		moveq   #$00, D0
		move.b  (Debug_object).w, D0
		lsl.w   #$03, D0
		move.l  $00(A2, D0), $0004(A0)
		move.w  $06(A2, D0), $0002(A0)
		move.b  $05(A2, D0), $001A(A0)
		bsr.w     J_Adjust2PArtPointer_28 ; loc_2434C
		rts
; off_23DBE:
Debug_Index: zoneOrderedOffsetTable 2,1
	zoneOffsetTableEntry.w Debug_GHz   ; Green Hill
	zoneOffsetTableEntry.w Debug_Null  ; Null
	zoneOffsetTableEntry.w Debug_Null  ; Wood
	zoneOffsetTableEntry.w Debug_Null  ; Null
	zoneOffsetTableEntry.w Debug_Mz    ; Metropolis
	zoneOffsetTableEntry.w Debug_Mz    ; Metropolis
	zoneOffsetTableEntry.w Debug_Null  ; Null
	zoneOffsetTableEntry.w Debug_HTz   ; Hill Top
	zoneOffsetTableEntry.w Debug_HPz   ; Hidden Palace
	zoneOffsetTableEntry.w Debug_Null  ; Null
	zoneOffsetTableEntry.w Debug_OOz   ; Oil Ocean
	zoneOffsetTableEntry.w Debug_DHz   ; Dust Hill
	zoneOffsetTableEntry.w Debug_CNz   ; Casino Night
	zoneOffsetTableEntry.w Debug_CPz   ; Chemical Plant
	zoneOffsetTableEntry.w Debug_Null  ; Genocide City
	zoneOffsetTableEntry.w Debug_NGHz  ; Neo Green Hill
	zoneOffsetTableEntry.w Debug_Null  ; Death Egg
    zoneTableEnd

Debug_Null: ; loc_23DE0:  ; Null
		dc.w    $0002
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $00, $00, $06, $80
Debug_GHz: ; loc_23DF2:  ; Green Hill
		dc.w    $0012		          
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($79<<$18)|Obj79_MapUnc_13D8E          ; loc_13D8E
		dc.b    $01, $00, $04, $7C
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($49<<$18)|Obj49_MapUnc_15404          ; loc_15404
		dc.b    $00, $00, $23, $AE
		dc.l    ($49<<$18)|Obj49_MapUnc_15404          ; loc_15404		
		dc.b    $02, $03, $23, $AE
		dc.l    ($49<<$18)|Obj49_MapUnc_15404          ; loc_15404 
		dc.b    $04, $05, $23, $AE
		dc.l    ($18<<$18)|Obj18_MapUnc_9078       ; loc_9078
		dc.b    $01, $00, $40, $00
		dc.l    ($18<<$18)|Obj18_MapUnc_9078       ; loc_9078
		dc.b    $9A, $01, $40, $00
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $00, $00, $24, $34
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $81, $00, $04, $5C
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $90, $03, $04, $70
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $A0, $06, $04, $5C
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $30, $07, $04, $3C
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $40, $0A, $04, $3C
		dc.l    ($4B<<$18)|Obj4B_MapUnc_1EB0E        ; Obj4B_MapUnc_1EB0E
		dc.b    $00, $00, $03, $E6
		dc.l    ($54<<$18)|Obj54_MapUnc_1F938            ; loc_1F938
		dc.b    $00, $00, $04, $02
		dc.l    ($53<<$18)|Obj53_MapUnc_1F696            ; loc_1F696		
		dc.b    $00, $00, $04, $1C
		dc.l    ($4F<<$18)|Obj4F_MapUnc_1DFCA            ; loc_1DFCA  ; Out of Pointers
		dc.b    $00, $00, $05, $00
		dc.l    ($52<<$18)|Piranha_Mappings            ; loc_1DE66  ; Out of Pointers
		dc.b    $00, $00, $25, $30
		dc.l    ($50<<$18)|Aquis_Mappings              ; loc_1E4E0  ; Out of Pointers
		dc.b    $00, $00, $25, $70
		dc.l    ($51<<$18)|Aquis_Mappings              ; loc_1E4E0  ; Out of Pointers
		dc.b    $00, $00, $25, $70
		dc.l    ($4D<<$18)|Rhinobot_Mappings           ; loc_1DAEE  ; Out of Pointers
		dc.b    $00, $00, $23, $C4
		dc.l    ($4B<<$18)|Obj4B_MapUnc_1EB0E        ; Obj4B_MapUnc_1EB0E  ; Out of Pointers
		dc.b    $00, $00, $03, $2C
		dc.l    ($4E<<$18)|Crocobot_Mappings           ; loc_1F420  ; Out of Pointers
		dc.b    $00, $00, $23, $00
		dc.l    ($4C<<$18)|Obj4C_MapUnc_1F106             ; loc_1F106  ; Out of Pointers
		dc.b    $00, $00, $23, $50
		dc.l    ($4A<<$18)|Octus_Mappings              ; loc_1EDBC  ; Out of Pointers
		dc.b    $00, $00, $23, $8A
Debug_Mz: ; loc_23ECC:  ; Metropolis
		dc.w    $001C
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($79<<$18)|Obj79_MapUnc_13D8E          ; loc_13D8E
		dc.b    $01, $00, $04, $7C
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($42<<$18)|Obj42_MapUnc_1A7FE         ; loc_1A7FE		 
		dc.b    $01, $07, $60, $00
		dc.l    ($64<<$18)|Obj64_MapUnc_1A9F0             ; loc_1A9F0
		dc.b    $01, $00, $20, $00
		dc.l    ($64<<$18)|Obj64_MapUnc_1A9F0             ; loc_1A9F0
		dc.b    $11, $01, $20, $00
		dc.l    ($65<<$18)|Obj65_MapUnc_1AE2C        ; loc_1AE2C
		dc.b    $80, $00, $60, $00
		dc.l    ($65<<$18)|Obj65_MapUnc_1AE2C        ; loc_1AE2C
		dc.b    $13, $01, $60, $00
		dc.l    ($47<<$18)|Obj47_MapUnc_18E3E             ; loc_18E3E
		dc.b    $00, $02, $04, $24
		dc.l    ($2D<<$18)|Obj2D_MapUnc_9E1E     ; loc_9E1E
		dc.b    $01, $01, $60, $00
		dc.l    ($66<<$18)|Obj66_MapUnc_1B084        ; loc_1B084
		dc.b    $01, $00, $86, $80
		dc.l    ($66<<$18)|Obj66_MapUnc_1B084        ; loc_1B084
		dc.b    $11, $01, $86, $80
		dc.l    ($68<<$18)|Obj68_MapUnc_1B6DC        ; loc_1B6DC
		dc.b    $00, $04, $64, $14
		dc.l    ($69<<$18)|Obj69_MapUnc_1B9A6          ; loc_1B9A6
		dc.b    $04, $00, $25, $00
		dc.l    ($6A<<$18)|Obj65_MapUnc_1AE2C        ; loc_1AE2C
		dc.b    $00, $01, $60, $00
		dc.l    ($6B<<$18)|Obj65_MapUnc_1AE2C        ; loc_1AE2C
		dc.b    $01, $01, $60, $00
		dc.l    ($6D<<$18)|Obj68_MapUnc_1B6DC        ; loc_1B6DC
		dc.b    $00, $00, $24, $1C
		dc.l    ($6E<<$18)|Obj6E_MapUnc_1C464            ; loc_1C464
		dc.b    $00, $00, $60, $00
		dc.l    ($6E<<$18)|Obj6E_MapUnc_1C464            ; loc_1C464
		dc.b    $10, $01, $60, $00
		dc.l    ($6E<<$18)|Obj6E_MapUnc_1C464            ; loc_1C464
		dc.b    $20, $02, $60, $00
		dc.l    ($6F<<$18)|Obj6F_MapUnc_1C7BE ; loc_1C7BE
		dc.b    $00, $00, $65, $3F
		dc.l    ($70<<$18)|Obj70_MapUnc_1CA16     ; loc_1CA16
		dc.b    $10, $00, $E3, $78
		dc.l    ($71<<$18)|Obj71_MapUnc_9BBE        ; loc_9BBE
		dc.b    $22, $05, $45, $36
		dc.l    ($1C<<$18)|Obj1C_MapUnc_9B9A
		dc.b    $00, $00, $43, $FD
		dc.l    ($1C<<$18)|Obj1C_MapUnc_9B9A
		dc.b    $01, $01, $43, $FD
		dc.l    ($1C<<$18)|Obj1C_MapUnc_9B9A
		dc.b    $03, $02, $23, $FD
		dc.l    ($65<<$18)|Obj65_MapUnc_1AE2C        ; loc_1AE2C
		dc.b    $B0, $00, $60, $00
Debug_HTz: ; loc_23FAE:  ; Hill Top
		dc.w    $0019
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($79<<$18)|Obj79_MapUnc_13D8E          ; loc_13D8E
		dc.b    $01, $00, $04, $7C
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($18<<$18)|Obj18_MapUnc_9078       ; loc_9078		    
		dc.b    $01, $00, $40, $00
		dc.l    ($18<<$18)|Obj18_MapUnc_9078       ; loc_9078  
		dc.b    $9A, $01, $40, $00
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $00, $00, $24, $34
		dc.l    ($14<<$18)|Obj14_MapUnc_15F54            ; loc_15F54
		dc.b    $00, $00, $03, $C6
		dc.l    ($2D<<$18)|Obj2D_MapUnc_9E1E     ; loc_9E1E
		dc.b    $00, $00, $24, $26
		dc.l    ($2F<<$18)|Obj2F_MapUnc_1786A    ; loc_1786A
		dc.b    $00, $00, $C0, $00
		dc.l    ($20<<$18)|Fireball_Mappings           ; loc_173D0
		dc.b    $44, $02, $84, $16		   
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $81, $00, $04, $5C		  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $90, $03, $04, $70		  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $A0, $06, $04, $5C		     
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $30, $07, $04, $3C		    
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $40, $0A, $04, $3C
		dc.l    ($16<<$18)|Obj16_MapUnc_1611E         ; loc_1611E
		dc.b    $00, $00, $43, $E6
		dc.l    ($1C<<$18)|Obj16_MapUnc_1611E         ; loc_1611E
		dc.b    $04, $03, $43, $E6
		dc.l    ($1C<<$18)|Obj16_MapUnc_1611E         ; loc_1611E
		dc.b    $05, $04, $43, $E6
		dc.l    ($1C<<$18)|Obj1C_MapUnc_9B3A
		dc.b    $07, $00, $40, $00
		dc.l    ($1C<<$18)|Obj1C_MapUnc_9B3A
		dc.b    $08, $01, $40, $00
		dc.l    ($32<<$18)|Obj32_MapUnc_179C2               ; loc_179C2
		dc.b    $00, $00, $43, $B2
		dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $00, $00, $86, $80
		dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $01, $01, $86, $80
		dc.l    ($31<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $02, $02, $86, $80
Debug_HPz: ; loc_24078:  ; Hidden Palace
		dc.w    $0008
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($71<<$18)|Obj71_MapUnc_9AFA           ; loc_9AFA
		dc.b    $11, $03, $E3, $5A
		dc.l    ($13<<$18)|Obj13_MapUnc_14CF4     ; loc_14CF4
		dc.b    $04, $04, $E3, $15
		dc.l    ($1A<<$18)|Obj1A_MapUnc_9858 ; loc_9858
		dc.b    $00, $00, $43, $4A
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($4F<<$18)|Obj4F_MapUnc_1DFCA            ; loc_1DFCA  
		dc.b    $00, $00, $05, $00
		dc.l    ($4C<<$18)|Obj4C_MapUnc_1F106             ; loc_1F106  
		dc.b    $00, $00, $25, $30
		dc.l    ($52<<$18)|Piranha_Mappings            ; loc_1DE66  ; Out of Pointers
		dc.b    $00, $00, $25, $30
		dc.l    ($50<<$18)|Aquis_Mappings              ; loc_1E4E0  ; Out of Pointers
		dc.b    $00, $00, $25, $70
		dc.l    ($51<<$18)|Aquis_Mappings              ; loc_1E4E0  ; Out of Pointers
		dc.b    $00, $00, $25, $70		 
		dc.l    ($4D<<$18)|Rhinobot_Mappings           ; loc_1DAEE  ; Out of Pointers
		dc.b    $00, $00, $23, $C4		   
		dc.l    ($4B<<$18)|Obj4B_MapUnc_1EB0E        ; Obj4B_MapUnc_1EB0E  ; Out of Pointers
		dc.b    $00, $00, $03, $2C		  
		dc.l    ($4E<<$18)|Crocobot_Mappings           ; loc_1F420  ; Out of Pointers
		dc.b    $00, $00, $23, $00		  
		dc.l    ($4A<<$18)|Octus_Mappings              ; loc_1EDBC  ; Out of Pointers
		dc.b    $00, $00, $23, $8A
Debug_OOz: ; loc_240F2:  ; Oil Ocean
		dc.w    $0010
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($33<<$18)|Obj33_MapUnc_17EE2      ; loc_17EE2
		dc.b    $01, $00, $63, $2C
		dc.l    ($43<<$18)|Giant_Spikeball_Mappings    ; loc_1808E
		dc.b    $00, $00, $C3, $0C
		dc.l    ($19<<$18)|Obj19_MapUnc_16412           ; loc_16412
		dc.b    $23, $02, $63, $00
		dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; loc_185C2
		dc.b    $02, $00, $43, $C5
		dc.l    ($45<<$18)|Spring_Push_Boost_Mappings  ; loc_185C2
		dc.b    $12, $0A, $43, $C5
		dc.l    ($46<<$18)|Obj46_MapUnc_18CFA        ; loc_18CFA
		dc.b    $00, $01, $63, $54 
		dc.l    ($47<<$18)|Obj47_MapUnc_18E3E             ; loc_18E3E
		dc.b    $00, $02, $04, $24
		dc.l    ($15<<$18)|Swing_Platforms_Mappings    ; loc_8AD8
		dc.b    $88, $01, $43, $E3
		dc.l    ($3D<<$18)|Break_Boost_Mappings        ; loc_1916E
		dc.b    $00, $00, $63, $32
		dc.l    ($48<<$18)|Cannon_Mappings             ; loc_194CA
		dc.b    $80, $00, $63, $68
		dc.l    ($48<<$18)|Cannon_Mappings             ; loc_194CA
		dc.b    $81, $01, $63, $68
		dc.l    ($48<<$18)|Cannon_Mappings             ; loc_194CA
		dc.b    $82, $02, $63, $68
		dc.l    ($48<<$18)|Cannon_Mappings             ; loc_194CA
		dc.b    $83, $03, $63, $68
		dc.l    ($1F<<$18)|Obj1A_MapUnc_9902 ; loc_9902
		dc.b    $00, $00, $63, $9D
		dc.l    ($1C<<$18)|loc_9B6A		              ; Out of Pointers
		dc.b    $0A, $00, $43, $46
		dc.l    ($1C<<$18)|loc_9B6A		              ; Out of Pointers
		dc.b    $0B, $01, $43, $46
		dc.l    ($1C<<$18)|loc_9B6A		              ; Out of Pointers
		dc.b    $0C, $02, $43, $46
		dc.l    ($1C<<$18)|loc_9B6A		              ; Out of Pointers
		dc.b    $0D, $03, $43, $46
Debug_DHz: ; loc_24194:  ; Dust Hill
		dc.w    $0010
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $00, $00, $06, $80
		dc.l    ($15<<$18)|Dhz_Swing_Platforms_Mappings ; loc_8B46
		dc.b    $48, $02, $00, $00
		dc.l    ($1F<<$18)|Obj1A_MapUnc_9942 ; loc_9942
		dc.b    $00, $00, $63, $F4
		dc.l    ($73<<$18)|MapUnc_Obj73_1CE1C     ; loc_1CE1C
		dc.b    $F5, $00, $26, $BC
		dc.l    ($6A<<$18)|Obj6A_MapUnc_1BCB0     ; loc_1BCB0
		dc.b    $18, $00, $63, $D4
		dc.l    ($2A<<$18)|Obj2A_MapUnc_9CAE     ; loc_9CAE
		dc.b    $00, $00, $40, $00
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $00, $00, $24, $34
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $40, $04, $24, $34
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $81, $00, $04, $5C
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $90, $03, $04, $70
		dc.l    ($40<<$18)|Obj40_MapUnc_1A58A    ; loc_1A58A
		dc.b    $01, $00, $04, $40
		dc.l    ($74<<$18)|Obj74_MapUnc_156B2    ; loc_156B2
		dc.b    $11, $00, $86, $80
		dc.l    ($75<<$18)|Obj75_MapUnc_1D00A    ; loc_1D00A
		dc.b    $18, $02, $20, $00
		dc.l    ($76<<$18)|Obj76_MapUnc_1D1BA    ; loc_1D1BA
		dc.b    $00, $00, $00, $00
		dc.l    ($77<<$18)|Obj77_MapUnc_1D2E0         ; loc_1D2E0
		dc.b    $01, $00, $64, $3C
Debug_CNz: ; loc_24216:  ; Casino Night
		dc.w    $0002
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $00, $00, $06, $80
Debug_CPz: ; loc_24228:  ; Chemical Plant
		dc.w    $0013
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $07, $00, $06, $80
		dc.l    ($0B<<$18)|Obj0B_MapUnc_14996 ; loc_14996
		dc.b    $70, $00, $E3, $B0
		dc.l    ($1B<<$18)|Obj1B_MapUnc_1658A      ; loc_1658A
		dc.b    $00, $00, $E3, $9C
		dc.l    ($1D<<$18)|Obj1D_MapUnc_16702              ; loc_16702
		dc.b    $15, $00, $E4, $3C
		dc.l    ($19<<$18)|Obj19_MapUnc_16412           ; loc_16412
		dc.b    $06, $00, $63, $A0
		dc.l    ($2D<<$18)|Obj2D_MapUnc_9E1E     ; loc_9E1E
		dc.b    $02, $02, $23, $94
		dc.l    ($32<<$18)|Obj32_MapUnc_179F6    ; loc_179F6
		dc.b    $00, $00, $64, $30
		dc.l    ($6B<<$18)|Obj6B_MapUnc_1BF4A              ; loc_1BF4A
		dc.b    $10, $00, $64, $18
		dc.l    ($78<<$18)|Obj6B_MapUnc_1BF4A              ; loc_1BF4A
		dc.b    $00, $00, $64, $18        
		dc.l    ($7A<<$18)|Obj7A_MapUnc_1D72C ; loc_1D72C
		dc.b    $00, $00, $E4, $18
		dc.l    ($7B<<$18)|Obj7B_MapUnc_1D920       ; loc_1D920
		dc.b    $02, $00, $03, $E0
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $0D, $05, $26, $BC
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $00, $00, $24, $34
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $81, $00, $04, $5C  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $90, $03, $04, $70				  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70
		dc.b    $A0, $06, $04, $5C       
		dc.l    ($40<<$18)|Obj40_MapUnc_1A58A    ; loc_1A58A
		dc.b    $01, $00, $04, $40
Debug_NGHz: ; loc_242C2:  ; Neo Green Hill
		dc.w    $0011
		dc.l    ($25<<$18)|Obj25_MapUnc_B036              ; loc_B036
		dc.b    $00, $00, $26, $BC
		dc.l    ($26<<$18)|Obj26_MapUnc_B6D2           ; loc_B6D2
		dc.b    $00, $00, $06, $80
		dc.l    ($15<<$18)|Obj15_MapUnc_8B0E ; loc_8B0E
		dc.b    $88, $02, $00, $00
		dc.l    ($18<<$18)|Obj18_MapUnc_90D0      ; loc_90D0
		dc.b    $01, $00, $40, $00
		dc.l    ($18<<$18)|Obj18_MapUnc_90D0      ; loc_90D0
		dc.b    $9A, $01, $40, $00
		dc.l    ($22<<$18)|Obj22_MapUnc_197C6     ; loc_197C6
		dc.b    $00, $01, $04, $17
		dc.l    ($23<<$18)|Pillar_Mappings             ; loc_199AA
		dc.b    $00, $00, $20, $00
		dc.l    ($2B<<$18)|Breakable_Pillar_Mappings   ; loc_19C30
		dc.b    $00, $00, $20, $00
		dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $00, $00, $86, $80
		dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $01, $01, $86, $80
		dc.l    ($2C<<$18)|Lava_Attributes_Mappings    ; loc_15612
		dc.b    $02, $02, $86, $80
		dc.l    ($40<<$18)|Obj40_MapUnc_1A58A    ; loc_1A58A
		dc.b    $01, $00, $04, $40		  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70		  
		dc.b    $81, $00, $04, $5C		  
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70		  
		dc.b    $90, $03, $04, $70    
		dc.l    ($41<<$18)|Spring_Mappings             ; loc_EF70BM16_GHZ
		dc.b    $A0, $06, $04, $5C    
		dc.l    ($03<<$18)|Obj03_MapUnc_147D0       ; loc_147D0
		dc.b    $09, $01, $26, $BC
		dc.l    ($36<<$18)|Obj36_MapUnc_CAB0              ; loc_CBA0
		dc.b    $00, $00, $24, $34
J_Adjust2PArtPointer_28: ; loc_2434C:
		jmp     Adjust2PArtPointer     ; (loc_DC30)
		dc.w    $0000		   ; Filler

; ---------------------------------------------------------------------------
; "MAIN LEVEL LOAD BLOCK" (after Nemesis)
;
; This struct array tells the engine where to find all the art associated with
; a particular zone. Each zone gets three longwords, in which it stores three
; pointers (in the lower 24 bits) and three jump table indeces (in the upper eight
; bits). The assembled data looks something like this:
;
; aaBBBBBB
; ccDDDDDD
; eeFFFFFF
;
; aa = index for primary pattern load request list
; BBBBBB = pointer to level art
; cc = index for secondary pattern load request list
; DDDDDD = pointer to 16x16 block mappings
; ee = index for palette
; FFFFFF = pointer to 128x128 block mappings
;
; Nemesis refers to this as the "main level load block". However, that name implies
; that this is code (obviously, it isn't), or at least that it points to the level's
; collision, object and ring placement arrays (it only points to art...
; although the 128x128 mappings do affect the actual level layout and collision)
; ---------------------------------------------------------------------------

; declare some global variables to be used by the levartptrs macro
cur_zone_id := 0
cur_zone_str := "0"

; macro for declaring a "main level load block" (MLLB)
levartptrs macro plc1,plc2,palette,art,map16x16,map128x128
	!org LevelArtPointers+zone_id_{cur_zone_str}*12
	dc.l (plc1<<24)|art
	dc.l (plc2<<24)|map16x16
	dc.l (palette<<24)|map128x128
cur_zone_id := cur_zone_id+1
cur_zone_str := "\{cur_zone_id}"
    endm

; dword_24354: MainLoadBlocks: saArtPtrs: TilesMainTable:
LevelArtPointers:
	levartptrs $04,		$05, PalID_GHZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   0 ; GHZ  ; GREEN HILL ZONE
	levartptrs $06,		$07, PalID_OWZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   1 ; OWZ  ; OCEAN WIND ZONE (UNUSED)
	levartptrs $08,		$09, PalID_WZ,   ArtNem_WZ,  BM16_WZ,  BM128_WZ		;   2 ; WZ   ; WOOD ZONE
	levartptrs $0A,		$0B, PalID_SSZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   3 ; SSZ  ; SAND SHOWER ZONE (UNUSED)
	levartptrs $0C,		$0D, PalID_MTZ,  ArtNem_MTZ, BM16_MTZ, BM128_MTZ	;   4 ; MTZ  ; METROPOLIS ZONE
	levartptrs $0C,		$0D, PalID_MTZ2, ArtNem_MTZ, BM16_MTZ, BM128_MTZ	;   5 ; MTZ  ; METROPOLIS ZONE 2
	levartptrs $10,		$11, PalID_BLZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   6 ; BLZ  ; BLUE LAKE ZONE (UNUSED, LATER REPLACED WITH WING FORTRESS)
	levartptrs $12,		$13, PalID_HTZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   7 ; HTZ  ; HILL TOP ZONE
	levartptrs $14,		$15, PalID_HPZ,  ArtNem_HPZ, BM16_HPZ, BM128_HPZ	;   8 ; HPZ  ; HIDDEN PALACE ZONE
	levartptrs $16,		$17, PalID_RWZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   9 ; RWZ  ; ROCK WORLD ZONE (UNUSED)
	levartptrs $18,		$19, PalID_OOZ,  ArtNem_OOZ, BM16_OOZ, BM128_OOZ	;   A ; OOZ  ; OIL OCEAN ZONE
	levartptrs $1A,		$1B, PalID_DHZ,  ArtNem_DHZ, BM16_DHZ, BM128_DHZ	;   B ; DHZ  ; DUST HILL ZONE
	levartptrs $1C,		$1D, PalID_CNZ,  ArtNem_CNZ, BM16_CNZ, BM128_CNZ	;   C ; CNZ  ; CASINO NIGHT ZONE
	levartptrs $1E,		$1F, PalID_CPZ,  ArtNem_CPZ, BM16_CPZ, BM128_CPZ	;   D ; CPZ  ; CHEMICAL PLANT ZONE
	levartptrs $20,		$21, PalID_GCZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;   E ; GCZ  ; GENOCIDE CITY ZONE (BLANK, LATER REPLACED WITH DEATH EGG)
	levartptrs $22,		$23, PalID_NGHZ, ArtNem_NGHZ,BM16_NGHZ,BM128_NGHZ	;   F ; NGHZ ; NEO GREEN HILL ZONE
	levartptrs $24,		$25, PalID_DEZ,  ArtNem_GHZ, BM16_GHZ, BM128_GHZ	;  10 ; DEZ  ; DEATH EGG ZONE (BLANK, LATER REPLACED WITH SKY CHASE)

    if (cur_zone_id<>no_of_zones)&&(MOMPASS=1)
	message "Warning: Table LevelArtPointers has \{cur_zone_id/1.0} entries, but it should have \{no_of_zones/1.0} entries"
    endif
	!org LevelArtPointers+cur_zone_id*12

; ===========================================================================
; off_24420:
ArtLoadCues:	offsetTable
PLCptr_Std1:	offsetTableEntry.w PlrList_Std1
PLCptr_Std2:	offsetTableEntry.w PlrList_Std2
		offsetTableEntry.w Standard_Sprites_3
		offsetTableEntry.w Standard_Sprites_4
		offsetTableEntry.w Green_Hill_Sprites_1
		offsetTableEntry.w Green_Hill_Sprites_2
		offsetTableEntry.w Wood_Sprites_1
		offsetTableEntry.w Wood_Sprites_1
		offsetTableEntry.w Wood_Sprites_1
		offsetTableEntry.w Wood_Sprites_2
		offsetTableEntry.w Metropolis_Sprites_1
		offsetTableEntry.w Metropolis_Sprites_1
		offsetTableEntry.w Metropolis_Sprites_1
		offsetTableEntry.w Metropolis_Sprites_2
		offsetTableEntry.w Hill_Top_Sprites_1
		offsetTableEntry.w Hill_Top_Sprites_1
		offsetTableEntry.w Hill_Top_Sprites_1
		offsetTableEntry.w Hill_Top_Sprites_1
		offsetTableEntry.w Hill_Top_Sprites_1
		offsetTableEntry.w Hill_Top_Sprites_2
		offsetTableEntry.w Hidden_Palace_Sprites_1
		offsetTableEntry.w Hidden_Palace_Sprites_2
		offsetTableEntry.w Oil_Ocean_Sprites_1
		offsetTableEntry.w Oil_Ocean_Sprites_1
		offsetTableEntry.w Oil_Ocean_Sprites_1
		offsetTableEntry.w Oil_Ocean_Sprites_2
		offsetTableEntry.w Dust_Hill_Sprites_1
		offsetTableEntry.w Dust_Hill_Sprites_2
		offsetTableEntry.w Casino_Night_Sprites_1
		offsetTableEntry.w Casino_Night_Sprites_2
		offsetTableEntry.w Chemical_Plant_Sprites_1
		offsetTableEntry.w Chemical_Plant_Sprites_2
		offsetTableEntry.w Neo_Green_Hill_Sprites_1
		offsetTableEntry.w Neo_Green_Hill_Sprites_1
		offsetTableEntry.w Neo_Green_Hill_Sprites_1
		offsetTableEntry.w Neo_Green_Hill_Sprites_2
		offsetTableEntry.w End_Level_Results_Sprites
		offsetTableEntry.w End_Level_Results_Sprites
		offsetTableEntry.w End_Level_Results_Sprites
		offsetTableEntry.w End_Level_Sprites
		offsetTableEntry.w Green_Hill_Boss
		offsetTableEntry.w Green_Hill_Boss
		offsetTableEntry.w Green_Hill_Boss
		offsetTableEntry.w Green_Hill_Boss
		offsetTableEntry.w Green_Hill_Boss

; macro for a pattern load request list header
; must be on the same line as a label that has a corresponding _End label later
plrlistheader macro {INTLABEL}
__LABEL__ label *
	dc.w (((__LABEL___End - __LABEL__Plc) / 6) - 1)
__LABEL__Plc:
    endm

; macro for a pattern load request
plreq macro toVRAMaddr,fromROMaddr
	dc.l	fromROMaddr
	dc.w	tiles_to_bytes(toVRAMaddr)
    endm

;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 1 - loaded for every level
;---------------------------------------------------------------------------------------
; PlrList_2447A: Standard_Sprites_1:  
PlrList_Std1:	plrlistheader
		plreq $047C, ArtNem_Checkpoint
		plreq $06CA, Head_up_display_Sprites
		plreq $07D4, Head_up_display_Sonic
		plreq $06BC, ArtNem_Ring
		plreq $04AC, Enemy_Points_Spr
PlrList_Std1_End:
;---------------------------------------------------------------------------------------
; PATTERN LOAD REQUEST LIST
; Standard 2 - loaded for every level
;---------------------------------------------------------------------------------------
; PlrList_2449A: Standard_Sprites_2:
PlrList_Std2:	plrlistheader
		plreq $0680, ArtNem_Powerups
		plreq $04BE, ArtNem_Shield
		plreq $04DE, Invencibility_Stars
PlrList_Std2_End:

loc_244AE:   
Standard_Sprites_3:           
		dc.w    (((loc_244C2-loc_244AE-$02)/$06)-$01)
		dc.l    Explosion               ; loc_7F012
		dc.w    $B400  
		dc.l    Rabbit		  ; loc_80348
		dc.w    $B000 
		dc.l    White_Bird              ; loc_804A0 
		dc.w    $B240
Standard_Sprites_4:  
loc_244C2:
		dc.w    (((loc_244CA-loc_244C2-$02)/$06)-$01)
		dc.l    Game_Time_Over          ; loc_7F678
		dc.w    $ABC0
Green_Hill_Sprites_1:   
loc_244CA:
		dc.w    (((loc_244FC-loc_244CA-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_GHZ    ; loc_81C00
		dc.w    $0000		    
		dc.l    ArtNem_GHZ_Waterfall           ; loc_73B3C
		dc.w    $75C0 
		dc.l    ArtNem_GHZ_Bridge              ; loc_73D90  
		dc.w    $78C0    
		dc.l    FireBall		; loc_739C6  
		dc.w    $79C0 
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00
Green_Hill_Sprites_2:		  
loc_244FC: 
		dc.w    (((loc_24510-loc_244FC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Buzzer       ; loc_7A4BC
		dc.w    $7CC0 
		dc.l    ArtNem_Snail             ; loc_7C514
		dc.w    $8040   
		dc.l    ArtNem_Masher             ; loc_7CA92
		dc.w    $8380    
Wood_Sprites_1:   
loc_24510:
		dc.w    (((loc_24518-loc_24510-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_WZ          ; loc_8AB2E
		dc.w    $0000     
Wood_Sprites_2: 
loc_24518: 
		dc.w    (((loc_24532-loc_24518-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680 
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00		   
Metropolis_Sprites_1:   
loc_24532:
		dc.w    (((loc_2456A-loc_24532-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_MTZ    ; loc_91716
		dc.w    $0000 
		dc.l    Mz_Teleport             ; loc_75382
		dc.w    $6780   
		dc.l    ArtNem_MtzWheel        ; loc_7461C
		dc.w    $6F00 
		dc.l    ArtNem_MtzWheelIndent         ; loc_74A74
		dc.w    $7E00   
		dc.l    ArtNem_LavaCup
		dc.w    $7F20  
		dc.l    ArtNem_BoltEnd_Rope
		dc.w    $7FA0
		dc.l    Mz_Steam		; loc_74BEA  
		dc.w    $80A0
		dc.l    ArtNem_MtzSpikeBlock		; loc_74B1C  
		dc.w    $8280
		dc.l    ArtNem_MtzSpike              ; loc_74CF4
		dc.w    $8380
loc_2456A: 
Metropolis_Sprites_2: 
		dc.w    (((loc_245A2-loc_2456A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Button		  ; loc_78580
		dc.w    $8480     
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680 
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00   
		dc.l    ArtNem_MtzAsstBlocks            ; loc_74DB6
		dc.w    $A000
		dc.l    ArtNem_MtzLavaBubble          ; loc_74E2C
		dc.w    $A6C0 
		dc.l    ArtNem_MTZ_Platform  ; loc_74F52    
		dc.w    $A7E0  
		dc.l    ArtNem_MtzCog            ; loc_752A0
		dc.w    $ABE0       
Hill_Top_Sprites_1:   
loc_245A2:
		dc.w    (((loc_245E0-loc_245A2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_GHZ    ; loc_81C00
		dc.w    $0000 
		dc.l    ArtNem_HTZ      ; loc_85200
		dc.w    $3F80
		dc.l    FireBall		; loc_739C6  
		dc.w    $73C0   
		dc.l    ArtNem_HtzRock		; loc_7447A
		dc.w    $7640   
		dc.l    ArtNem_HtzSeeSaw             ; loc_741D4
		dc.w    $78C0 
		dc.l    Htz_See_saw_badnick     ; loc_745B0 
		dc.w    $7BC0 
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680		
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00 
Hill_Top_Sprites_2:		   
loc_245E0: 
		dc.w    (((loc_245F4-loc_245E0-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HtzZipline           ; loc_73E68 
		dc.w    $7CC0 
		dc.l    Htz_Lava_Bubble         ; loc_73C42
		dc.w    $82C0 
		dc.l    ArtNem_HtzValveBarrier      ; loc_7415C 
		dc.w    $84C0 
Hidden_Palace_Sprites_1:   
loc_245F4:
		dc.w    (((loc_24626-loc_245F4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HPZ ; loc_98B76
		dc.w    $0000 
		dc.l    ArtNem_HPZ_Bridge              ; loc_7538E 
		dc.w    $6000 
		dc.l    ArtNem_HPZ_Waterfall           ; loc_75506
		dc.w    $62A0 
		dc.l    ArtNem_HPZPlatform            ; loc_75ADA
		dc.w    $6940     
		dc.l    ArtNem_HPZOrb           ; loc_75B9A   
		dc.w    $6B40 
		dc.l    Hpz_Unknow_Platform     ; loc_75DD6   
		dc.w    $6F80 
		dc.l    ArtNem_HPZ_Emerald             ; loc_75868
		dc.w    $7240  
		dc.l    Water_Surface           ; loc_777D2  
		dc.w    $8000  
Hidden_Palace_Sprites_2:				        
loc_24626: 
		dc.w   (((loc_2463A-loc_24626-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Redz             ; loc_7B114 
		dc.w    $A000 
		dc.l    ArtNem_Batbot              ; loc_7A6A2
		dc.w    $A600		  
loc_2463A: ; Not all sprites are loaded in to VRam               
		dc.l    Hpz_Crocobot            ; loc_7A11A ; Left Over 
		dc.w    $6000 
		dc.l    ArtNem_Buzzer       ; loc_7A4BC
		dc.w    $6580  
		dc.l    ArtNem_Batbot              ; loc_7A6A2
		dc.w    $6A00  
		dc.l    Hpz_Rhinobot            ; loc_7AD18 ; Left Over
		dc.w    $7880 
		dc.l    ArtNem_Redz             ; loc_7B114 
		dc.w    $A000 
		dc.l    Hpz_Piranha             ; loc_7B4EA ; Left Over
		dc.w    $A600   
Oil_Ocean_Sprites_1:   
loc_24658:
		dc.w    (((loc_24684-loc_24658-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_OOZ     ; loc_9ED58
		dc.w    $0000
		dc.l    ArtNem_OOZElevator            ; loc_75F70
		dc.w    $6000   
		dc.l    OOz_Giant_Spikeball     ; loc_76060
		dc.w    $6180 
		dc.l    ArtNem_BurnerLid      ; loc_76258
		dc.w    $6580  
		dc.l    OOz_Break_Boost         ; loc_762EE
		dc.w    $6640 
		dc.l    OOz_Oil		 ; loc_7635A
		dc.w    $66C0    
		dc.l    OOz_Tube_Oil            ; loc_764D6
		dc.w    $68C0		  
Oil_Ocean_Sprites_2:    
loc_24684: 
		dc.w    (((loc_246C2-loc_24684-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_OOZBall		; loc_76602 
		dc.w    $6A80 
		dc.l    OOz_Cannon              ; loc_76722
		dc.w    $6D00 
		dc.l    ArtNem_OOZPlatform ; loc_76A12
		dc.w    $73A0  
		dc.l    OOz_Spring_Push_Boost   ; loc_76CA6
		dc.w    $78A0       
		dc.l    OOz_Swing_Platform      ; loc_76E68
		dc.w    $7C60 
		dc.l    ArtNem_Button		  ; loc_78580
		dc.w    $8480   
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00 
Dust_Hill_Sprites_1:   
loc_246C2:
		dc.w    (((loc_246E2-loc_246C2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_DHZ     ; loc_A5248
		dc.w    $0000 
		dc.l    ArtNem_Crate		 ; loc_7708A
		dc.w    $7A80  
		dc.l    ArtNem_DHZCollapsePlat ; loc_772C8
		dc.w    $7E80     
		dc.l    Dhz_Vines               ; loc_77472
		dc.w    $81C0   
		dc.l    Dhz_Vines_1             ; loc_7756A
		dc.w    $83C0 
Dust_Hill_Sprites_2:  
loc_246E2:      
		dc.w    (((loc_24708-loc_246E2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_HorizSpike   ; loc_79A44        
		dc.w    $8580 
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_DHZGateLog              ; loc_77614
		dc.w    $8780  
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w    $8800  
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00   
Casino_Night_Sprites_1:   
loc_24708:
		dc.w    (((loc_24716-loc_24708-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CNZ  ; loc_ABF2A
		dc.w    $0000		   
		dc.l    Cnz_Cards               ; loc_AEF3C
		dc.w    $7A00   
Casino_Night_Sprites_2:  
loc_24716: 
		dc.w    (((loc_24730-loc_24716-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780		
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00		 
Chemical_Plant_Sprites_1:   
loc_24730:
		dc.w    (((loc_2476E-loc_24730-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CPZ ; loc_B2506
		dc.w    $0000 
		dc.l    Cpz_Metal_Structure     ; loc_77A1C  
		dc.w    $6E60
		dc.l    ArtNem_ConstructionStripes      ; loc_77C66
		dc.w    $7280 
		dc.l    ArtNem_CPZBooster       ; loc_77942
		dc.w    $7380
		dc.l    ArtNem_CPZElevator            ; loc_77684
		dc.w    $7400  
		dc.l    ArtNem_CPZAnimatedBits ; loc_77CD2 
		dc.w    $7600  
		dc.l    ArtNem_CPZTubeSpring        ; loc_78074
		dc.w    $7C00   
		dc.l    Water_Surface           ; loc_777D2  
		dc.w    $8000
		dc.l    ArtNem_CPZStairBlock           ; loc_77EB4
		dc.w    $8300 
		dc.l    ArtNem_CPZMetalBlock
		dc.w    $8600 
Chemical_Plant_Sprites_2:      
loc_2476E:
		dc.w    (((loc_24794-loc_2476E-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Air_Bubbles_Numbers     ; loc_79AC0
		dc.w    $A000 
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680  
		dc.l    ArtNem_CPZDroplet               ; loc_779AA
		dc.w    $8780  
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w    $8800  
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00      
Neo_Green_Hill_Sprites_1:   
loc_24794:
		dc.w    (((loc_247B4-loc_24794-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_NGHZ ; loc_B9E58
		dc.w    $0000 
		dc.l    Nghz_Water_Surface      ; loc_78270
		dc.w    $8000   
		dc.l    Nghz_Leaves             ; loc_78356
		dc.w    $8200    
		dc.l    ArtNem_ArrowAndShooter      ; loc_783E2
		dc.w    $82E0  
		dc.l    Nghz_Water_Splash       ; loc_78540
		dc.w    $8500  
Neo_Green_Hill_Sprites_2:				       
loc_247B4:
		dc.w    (((loc_247D4-loc_247B4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Air_Bubbles_Numbers     ; loc_79AC0
		dc.w    $A000 
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_LeverSpring       ; loc_798F4
		dc.w    $8800   
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00    
End_Level_Results_Sprites:		 
loc_247D4:  
		dc.w    (((loc_247DC-loc_247D4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards             ; loc_7EA04    
		dc.w    $B000   
End_Level_Sprites:				
loc_247DC:
		dc.w    (((loc_247E4-loc_247DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto		  
		dc.l    ArtNem_Signpost               ; loc_7931E 
		dc.w    $8680
loc_247E4: ; Not all sprites are loaded in to VRam		   
		dc.l    Hidden_Points           ; loc_7FB5C
		dc.w    $96C0
		dc.l    Big_Ring_Flash          ; loc_7F9E8
		dc.w    $8C40
Green_Hill_Boss:
loc_247F0:   
		dc.w    (((loc_24804-loc_247F0-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship           ; loc_7CC9E 
		dc.w    $8C00
		dc.l    Ghz_Boss_Car            ; loc_7E124
		dc.w    $9800
		dc.l    Ghz_Boss_Blades         ; loc_7E910
		dc.w    $A800 
loc_24804: ; Not all sprites are loaded in to VRam  
		dc.l    Robotnik_Ship           ; loc_7CC9E 
		dc.w    $8000
		dc.l    Cpz_Boss		; loc_7D3DA   
		dc.w    $8C00
		dc.l    Ship_Boost              ; loc_7DFC0 
		dc.w    $9A00 
		dc.l    Boss_Smoke              ; loc_7E03E 
		dc.w    $9B00 
		dc.l    Ghz_Boss_Car            ; loc_7E124
		dc.w    $9D00
		dc.l    Ghz_Boss_Blades         ; loc_7E910
		dc.w    $AD00		 
		dc.w    (ArtNem_LeverSpring&$FFFF) ; loc_798F4 ; Left over from previous build
		dc.w    $8800		   
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00  
loc_24838:		
		dc.w    (((loc_24840-loc_24838-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto 
		dc.l    Title_Cards             ; loc_7EA04    
		dc.w    $B000   
loc_24840:  
		dc.w    (((loc_24848-loc_24840-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Signpost               ; loc_7931E 
		dc.w    $8680
loc_24848:     
		dc.l    Hidden_Points           ; loc_7FB5C
		dc.w    $96C0
		dc.l    Big_Ring_Flash          ; loc_7F9E8
		dc.w    $8C40
loc_24854:		   
		dc.w    (((loc_24868-loc_24854-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship           ; loc_7CC9E 
		dc.w    $8C00
		dc.l    Ghz_Boss_Car            ; loc_7E124
		dc.w    $9800
		dc.l    Ghz_Boss_Blades         ; loc_7E910
		dc.w    $A800 
loc_24868:		  
		dc.l    Robotnik_Ship           ; loc_7CC9E 
		dc.w    $8000
		dc.l    Cpz_Boss		; loc_7D3DA   
		dc.w    $8C00
		dc.l    Ship_Boost              ; loc_7DFC0 
		dc.w    $9A00 
		dc.l    Boss_Smoke              ; loc_7E03E 
		dc.w    $9B00 
		dc.l    Ghz_Boss_Car            ; loc_7E124
		dc.w    $9D00
		dc.l    Ghz_Boss_Blades         ; loc_7E910
		dc.w    $AD00
		dc.w    (Boss_Smoke&$FFFF)      ; loc_7E03E ; Left over from previous build
		dc.w    $9B00 
		dc.l    Ghz_Boss_Car            ; loc_7E124
		dc.w    $9D00
		dc.l    Ghz_Boss_Blades         ; loc_7E910
		dc.w    $AD00
		dc.l    ArtNem_DHZGateLog              ; loc_77614
		dc.w    $8780
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C ; Left over from previous build
		dc.w    $8800  
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80 
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00 
Casino_Night_Sprites_Previous_Build_1:		 
loc_248B4:
		dc.w    (((loc_248C2-loc_248B4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto 
		dc.l    ArtNem_CNZ-$07E2 ; loc_AB748 ; Left over from previous build
		dc.w    $0000
		dc.l    Cnz_Cards-$07E2              ; loc_AE75A ; Left over from previous build
		dc.w    $7A00 
Casino_Night_Sprites_Previous_Build_2:		   
loc_248C2:     
		dc.w    (((loc_248DC-loc_248C2-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    ArtNem_DignlSprng         ; loc_7883E
		dc.w    $8780   
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80 
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00 
Chemical_Plant_Sprites_Previous_Build_1:		  
loc_248DC:		 
		dc.w    (((loc_2491A-loc_248DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_CPZ-$07E2 ; loc_B1D24
		dc.w    $0000 
		dc.l    Cpz_Metal_Structure     ; loc_77A1C  
		dc.w    $6E60
		dc.l    ArtNem_ConstructionStripes      ; loc_77C66
		dc.w    $7280 
		dc.l    ArtNem_CPZBooster       ; loc_77942
		dc.w    $7380
		dc.l    ArtNem_CPZElevator            ; loc_77684
		dc.w    $7400  
		dc.l    ArtNem_CPZAnimatedBits ; loc_77CD2 
		dc.w    $7600  
		dc.l    ArtNem_CPZTubeSpring        ; loc_78074
		dc.w    $7C00   
		dc.l    Water_Surface           ; loc_777D2  
		dc.w    $8000
		dc.l    ArtNem_CPZStairBlock           ; loc_77EB4
		dc.w    $8300 
		dc.l    ArtNem_CPZMetalBlock
		dc.w    $8600 
Chemical_Plant_Sprites_Previous_Build_2:				   
loc_2491A: 
		dc.w    (((loc_2493A-loc_2491A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680  
		dc.l    ArtNem_CPZDroplet               ; loc_779AA
		dc.w    $8780		         
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C 
		dc.w    $8800  
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00   
Neo_Green_Hill_Sprites_Previous_Build_1:		    
loc_2493A:      
		dc.w    (((loc_2495A-loc_2493A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_NGHZ-$07D2 ; loc_B9686
		dc.w    $0000
		dc.l    Nghz_Water_Surface      ; loc_78270
		dc.w    $8000   
		dc.l    Nghz_Leaves             ; loc_78356
		dc.w    $8200    
		dc.l    ArtNem_ArrowAndShooter      ; loc_783E2
		dc.w    $82E0  
		dc.l    Nghz_Water_Splash       ; loc_78540
		dc.w    $8500  
Neo_Green_Hill_Sprites_Previous_Build_2:		  
loc_2495A:    
		dc.w    (((loc_24974-loc_2495A-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    ArtNem_Spikes		  ; loc_7914E
		dc.w    $8680   
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C 
		dc.w    $8800   
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80   
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00   
End_Level_Results_Sprites_Previous_Build:		    
loc_24974:  
		dc.w    (((loc_2497C-loc_24974-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards-$07E2       ; loc_7E222    
		dc.w    $B000  
End_Level_Sprites_Previous_Build:				
loc_2497C: 
		dc.w    (((loc_24990-loc_2497C-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto		  
		dc.l    ArtNem_Signpost               ; loc_7931E 
		dc.w    $D000
		dc.l    Hidden_Points-$07E2     ; loc_7F37A
		dc.w    $96C0
		dc.l    Big_Ring_Flash-$07E2    ; loc_7F206
		dc.w    $8C40
Green_Hill_Boss_Previous_Build:
loc_24990: 
		dc.w    (((loc_249A4-loc_24990-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC 
		dc.w    $8C00
		dc.l    Ghz_Boss_Car-$07E2      ; loc_7D942
		dc.w    $9800
		dc.l    Ghz_Boss_Blades-$07E2   ; loc_7E12E
		dc.w    $A800 
loc_249A4:		
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC 
		dc.w    $8000		   
		dc.l    Cpz_Boss-$07E2          ; loc_7CBF8   
		dc.w    $8C00		 
		dc.l    Ship_Boost-$07E2        ; loc_7D7DE 
		dc.w    $9A00		   
		dc.l    Boss_Smoke-$07E2        ; loc_7D85C 
		dc.w    $9B00 
		dc.l    Ghz_Boss_Car-$07E2      ; loc_7D942
		dc.w    $9D00		   
		dc.l    Ghz_Boss_Blades-$07E2   ; loc_7E12E
		dc.w    $AD00   
		dc.w    $8680               
		dc.l    (ArtNem_LeverSpring-$0188) ; loc_7976C 
		dc.w    $8800  
		dc.l    ArtNem_VrtclSprng         ; loc_78658
		dc.w    $8B80 
		dc.l    ArtNem_HrzntlSprng       ; loc_78774
		dc.w    $8E00 
loc_249DC:  
		dc.w    (((loc_249E4-loc_249DC-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Title_Cards-$07E2       ; loc_7E222    
		dc.w    $B000  
loc_249E4: 
		dc.w    (((loc_249F8-loc_249E4-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto		  
		dc.l    ArtNem_Signpost               ; loc_7931E 
		dc.w    $D000
		dc.l    Hidden_Points-$07E2     ; loc_7F37A
		dc.w    $96C0
		dc.l    Big_Ring_Flash-$07E2    ; loc_7F206
		dc.w    $8C40 
loc_249F8: 
		dc.w    (((loc_24A0C-loc_249F8-$02)/$06)-$01) ; Auto Detect Number of Sprites Esrael L. G. Neto
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC 
		dc.w    $8C00
		dc.l    Ghz_Boss_Car-$07E2      ; loc_7D942
		dc.w    $9800
		dc.l    Ghz_Boss_Blades-$07E2   ; loc_7E12E
		dc.w    $A800 
loc_24A0C: 
		dc.l    Robotnik_Ship-$07E2     ; loc_7C4BC 
		dc.w    $8000		   
		dc.l    Cpz_Boss-$07E2          ; loc_7CBF8   
		dc.w    $8C00		 
		dc.l    Ship_Boost-$07E2        ; loc_7D7DE 
		dc.w    $9A00		   
		dc.l    Boss_Smoke-$07E2        ; loc_7D85C 
		dc.w    $9B00 
		dc.l    Ghz_Boss_Car-$07E2      ; loc_7D942
		dc.w    $9D00		   
		dc.l    Ghz_Boss_Blades-$07E2   ; loc_7E12E
		dc.w    $AD00		  
Unknow_Data_0x024A30:
loc_24A30:
		dc.b    $00, $78, $00, $06, $00, $07, $00, $06, $00, $10, $80, $06, $03, $0A, $06, $00
		dc.b    $07, $08, $60, $00, $06, $66, $88, $89, $07, $01, $10, $06, $0A, $01, $07, $00
		dc.b    $01, $10, $00, $11, $10, $00, $70, $02, $06, $77, $00, $11, $11, $66, $77, $03
		dc.b    $01, $07, $03, $01, $17, $03, $02, $9F, $10, $02, $02, $01, $10, $02, $01, $01
		dc.b    $02, $02, $09, $61, $02, $0A, $18, $66, $09, $EF, $87, $00, $97, $10, $6F, $76
		dc.b    $02, $0C, $10, $10, $77, $11, $06, $00, $17, $00, $10, $00, $01, $10, $02, $2D
		dc.b    $01, $01, $01, $61, $11, $06, $10, $77, $86, $17, $78, $88, $F7, $11, $0F, $07
		dc.b    $77, $00, $66, $FF, $17, $61, $01, $06, $07, $70, $67, $71, $16, $10, $76, $11
		dc.b    $10, $01, $10, $61, $06, $00, $61, $77, $E8, $9E, $9E, $E9, $77, $03, $0C, $F0
		dc.b    $07, $10, $00, $7F, $00, $01, $00, $17, $F0, $77, $61, $02, $0E, $77, $07, $67
		dc.b    $87, $11, $67, $F8, $11, $00, $01, $E9, $86, $66, $11, $02, $02, $07, $11, $05
		dc.b    $02, $E0, $71, $05, $01, $0E, $05, $0C, $71, $00, $E0, $77, $70, $00, $77, $77
		dc.b    $70, $16, $00, $70, $02, $01, $10, $02, $08, $07, $00, $07, $07, $00, $01, $00
		dc.b    $70, $04, $0E, $70, $00, $10, $00, $07, $00, $01, $07, $00, $10, $00, $11, $66
		dc.b    $71, $03, $02, $07, $11, $02, $01, $70, $04, $01, $01, $03, $01, $10, $02, $01
		dc.b    $70, $03, $01, $07, $03, $04, $61, $00, $01, $16, $0A, $02, $10, $70, $02, $01
		dc.b    $07, $02, $01, $01, $04, $01, $70, $05, $04, $60, $01, $76, $66, $10, $01, $70
		dc.b    $09, $06, $11, $00, $98, $88, $67, $10, $0B, $03, $01, $00, $0E, $05, $05, $70
		dc.b    $00, $E0, $07, $07, $04, $04, $88, $76, $61, $66, $05, $01, $10, $18, $04, $16
		dc.b    $66, $00, $01, $02, $05, $01, $10, $70, $00, $01, $04, $01, $07, $0B, $01, $07
		dc.b    $02, $08, $66, $00, $66, $76, $00, $70, $01, $10, $02, $01, $10, $02, $02, $07
		dc.b    $01, $07, $02, $71, $01, $03, $01, $11, $03, $04, $10, $66, $66, $61, $08, $01
		dc.b    $11, $03, $01, $10, $10, $05, $01, $66, $88, $89, $17, $03, $02, $77, $70, $02
		dc.b    $03, $70, $00, $E0, $05, $01, $70, $07, $02, $07, $70, $02, $06, $07, $76, $68
		dc.b    $88, $07, $01, $08, $01, $10, $02, $01, $70, $04, $01, $01, $02, $03, $07, $00
		dc.b    $10, $02, $06, $70, $01, $66, $66, $61, $11, $09, $05, $01, $10, $00, $10, $67
		dc.b    $02, $02, $06, $07, $02, $02, $70, $70, $02, $14, $07, $00, $10, $00, $FF, $8F
		dc.b    $FF, $EE, $87, $00, $10, $70, $18, $F7, $76, $F8, $01, $78, $FF, $07, $02, $08
		dc.b    $70, $70, $00, $10, $00, $01, $00, $01, $04, $10, $17, $10, $EE, $9E, $E8, $91
		dc.b    $77, $07, $88, $80, $88, $88, $61, $11, $01, $11, $02, $01, $10, $0F, $01, $10
		dc.b    $03, $01, $10, $1B, $03, $61, $10, $11, $02, $01, $10, $04, $08, $10, $00, $07
		dc.b    $10, $01, $01, $E0, $71, $03, $06, $07, $10, $00, $0E, $00, $71, $02, $07, $E0
		dc.b    $07, $01, $88, $86, $77, $16, $02, $03, $10, $00, $10, $03, $01, $01, $03, $01
		dc.b    $70, $08, $04, $10, $01, $07, $77, $03, $05, $76, $10, $00, $11, $70, $0A, $01
		dc.b    $01, $03, $02, $01, $01, $03, $01, $70, $03, $02, $07, $10, $02, $04, $66, $11
		dc.b    $66, $66, $05, $01, $17, $06, $01, $11, $03, $01, $10, $04, $01, $70, $06, $04
		dc.b    $11, $66, $66, $66, $10, $01, $71, $0B, $01, $61, $1A, $01, $01, $03, $05, $10
		dc.b    $22, $22, $22, $33, $1C, $0B, $23, $23, $44, $44, $10, $00, $70, $00, $11, $01
		dc.b    $07, $03, $02, $10, $70, $02, $02, $01, $07, $03, $01, $10, $07, $04, $01, $66
		dc.b    $66, $61, $03, $01, $71, $06, $01, $07, $02, $03, $07, $70, $71, $02, $03, $11
		dc.b    $77, $10, $04, $01, $01, $02, $05, $01, $60, $00, $16, $10, $1B, $05, $17, $66
		dc.b    $66, $68, $9E, $04, $0B, $07, $70, $0E, $00, $70, $17, $00, $EE, $01, $01, $70
		dc.b    $03, $06, $07, $77, $00, $01, $01, $10, $02, $06, $10, $01, $98, $89, $88, $88
		dc.b    $08, $01, $E0, $03, $02, $0E, $E0, $02, $02, $70, $0E, $02, $01, $07, $07, $08
		dc.b    $97, $00, $99, $EE, $00, $07, $01, $70, $07, $01, $17, $03, $01, $01, $05, $02
		dc.b    $07, $01, $05, $06, $E0, $77, $11, $00, $07, $01, $02, $01, $70, $08, $01, $10
		dc.b    $0E, $04, $99, $86, $61, $11, $11, $01, $0E, $0A, $06, $99, $98, $61, $11, $00
		dc.b    $10, $1A, $08, $99, $86, $66, $10, $00, $0E, $00, $71, $03, $01, $07, $02, $01
		dc.b    $E0, $04, $01, $07, $0A, $0D, $0E, $00, $9E, $E9, $89, $70, $17, $00, $10, $10
		dc.b    $10, $77, $71, $02, $01, $07, $02, $01, $01, $04, $04, $07, $01, $01, $11, $03
		dc.b    $17, $10, $70, $07, $00, $77, $77, $66, $10, $70, $70, $10, $01, $00, $07, $01
		dc.b    $10, $07, $00, $70, $10, $00, $07, $70, $02, $05, $70, $10, $07, $00, $01, $04
		dc.b    $07, $10, $70, $00, $76, $77, $00, $07, $03, $01, $70, $18, $03, $76, $66, $66
		dc.b    $07, $09, $01, $00, $01, $00, $17, $00, $70, $11, $78, $02, $05, $7F, $80, $00
		dc.b    $07, $80, $02, $09, $08, $01, $10, $66, $6E, $FE, $E8, $00, $16, $02, $3C, $11
		dc.b    $78, $FF, $F0, $FF, $00, $11, $18, $00, $80, $10, $01, $11, $00, $01, $10, $01
		dc.b    $00, $01, $11, $10, $01, $00, $01, $FF, $FE, $EF, $FF, $70, $00, $61, $00, $0F
		dc.b    $FF, $87, $11, $81, $11, $00, $FF, $10, $01, $08, $00, $01, $10, $00, $11, $11
		dc.b    $10, $00, $10, $10, $00, $10, $01, $FF, $FE, $FE, $EE, $02, $03, $01, $01, $10
		dc.b    $02, $1A, $10, $71, $00, $10, $77, $87, $11, $07, $07, $08, $F7, $00, $71, $00
		dc.b    $08, $70, $00, $01, $10, $80, $00, $FF, $FE, $87, $00, $10, $02, $01, $10, $02
		dc.b    $08, $01, $00, $10, $01, $70, $00, $71, $07, $02, $01, $77, $03, $02, $10, $17
		dc.b    $02, $01, $07, $03, $04, $01, $11, $10, $16, $02, $02, $11, $77, $02, $02, $10
		dc.b    $07, $02, $02, $01, $70, $07, $01, $17, $08, $06, $10, $01, $00, $01, $01, $01
		dc.b    $07, $01, $10, $02, $01, $70, $0C, $01, $10, $02, $05, $70, $66, $88, $88, $10
		dc.b    $13, $02, $10, $0E, $02, $01, $07, $03, $04, $9E, $0E, $99, $98, $03, $01, $01
		dc.b    $0E, $01, $70, $06, $01, $E0, $02, $04, $89, $86, $61, $11, $05, $01, $10, $02
		dc.b    $01, $10, $13, $04, $99, $98, $61, $11, $02, $01, $07, $19, $04, $99, $98, $66
		dc.b    $11, $1C, $04, $99, $98, $88, $61, $0F, $01, $E7, $0C, $06, $89, $EE, $EE, $96
		dc.b    $00, $70, $03, $04, $70, $00, $71, $07, $03, $06, $07, $70, $00, $07, $11, $07
		dc.b    $03, $01, $17, $02, $02, $71, $07, $02, $06, $70, $11, $67, $00, $10, $01, $03
		dc.b    $01, $70, $07, $01, $77, $02, $03, $10, $00, $10, $02, $05, $70, $10, $70, $00
		dc.b    $07, $02, $04, $77, $07, $67, $70, $1D, $0E, $08, $99, $98, $00, $08, $11, $10
		dc.b    $00, $08, $00, $01, $00, $80, $11, $03, $02, $01, $01, $02, $01, $10, $02, $01
		dc.b    $80, $02, $19, $77, $7F, $F8, $88, $FF, $FE, $E8, $89, $10, $10, $11, $01, $00
		dc.b    $11, $01, $10, $01, $10, $01, $11, $11, $10, $11, $10, $01, $02, $1E, $01, $01
		dc.b    $00, $10, $10, $00, $88, $88, $00, $10, $89, $98, $00, $10, $11, $01, $01, $01
		dc.b    $10, $11, $00, $11, $10, $01, $10, $01, $11, $01, $11, $10, $02, $14, $10, $01
		dc.b    $01, $00, $10, $00, $88, $88, $00, $01, $99, $80, $FE, $01, $11, $80, $00, $10
		dc.b    $00, $80, $02, $09, $11, $08, $00, $10, $10, $00, $01, $00, $01, $04, $0A, $08
		dc.b    $77, $88, $8F, $F7, $77, $66, $00, $01, $11, $06, $01, $10, $07, $02, $01, $11
		dc.b    $02, $04, $10, $11, $10, $07, $02, $08, $71, $00, $70, $11, $61, $66, $61, $10
		dc.b    $17, $01, $10, $02, $06, $01, $00, $61, $00, $01, $11, $07, $01, $01, $0B, $03
		dc.b    $10, $07, $10, $05, $05, $07, $70, $78, $88, $9E, $05, $01, $E0, $02, $01, $70
		dc.b    $07, $01, $0E, $0B, $01, $E0, $02, $01, $EE, $06, $01, $0E, $0F, $01, $E0, $05
		dc.b    $03, $9E, $E9, $77, $02, $07, $70, $10, $70, $00, $01, $01, $07, $08, $01, $07
		dc.b    $02, $02, $10, $70, $07, $05, $01, $10, $00, $01, $01, $07, $02, $07, $10, $06
		dc.b    $02, $70, $01, $07, $01, $70, $02, $04, $16, $61, $11, $61, $03, $01, $07, $02
		dc.b    $01, $10, $04, $01, $70, $06, $01, $01, $08, $01, $07, $03, $02, $11, $10, $0B
		dc.b    $01, $01, $03, $01, $70, $08, $01, $10, $04, $05, $06, $66, $07, $00, $07, $02
		dc.b    $05, $01, $01, $70, $00, $70, $09, $02, $07, $E0, $06, $07, $10, $97, $71, $00
		dc.b    $10, $00, $10, $04, $02, $01, $07, $03, $01, $77, $07, $01, $01, $02, $02, $17
		dc.b    $70, $04, $04, $77, $66, $70, $71, $03, $0B, $70, $77, $70, $77, $01, $00, $77
		dc.b    $11, $00, $10, $01, $02, $06, $17, $70, $00, $10, $00, $10, $06, $07, $06, $01
		dc.b    $16, $66, $10, $01, $07, $03, $01, $10, $04, $01, $07, $06, $01, $17, $04, $01
		dc.b    $71, $04, $05, $66, $11, $07, $06, $07, $02, $0C, $77, $70, $11, $10, $71, $01
		dc.b    $00, $10, $10, $10, $00, $01, $02, $02, $01, $10, $06, $01, $01, $02, $08, $10
		dc.b    $00, $11, $66, $10, $00, $10, $70, $02, $02, $01, $07, $03, $01, $10, $03, $01
		dc.b    $01, $0C, $08, $88, $88, $66, $66, $00, $0E, $00, $70, $05, $01, $E0, $06, $03
		dc.b    $0E, $00, $07, $09, $05, $E7, $77, $61, $17, $07, $06, $01, $10, $09, $01, $70
		dc.b    $04, $02, $01, $07, $04, $04, $70, $00, $11, $16, $08, $03, $70, $07, $01, $07
		dc.b    $02, $70, $10, $08, $04, $66, $66, $61, $11, $1C, $04, $66, $10, $00, $01, $0C
		dc.b    $01, $07, $0F, $00, $0E, $F6, $0A, $00, $10, $00, $5F, $00, $11, $00, $5F, $00
		dc.b    $01, $04, $80, $8C, $60, $C6, $60, $C7, $00, $10, $00, $10, $80, $D6, $80, $D7
		dc.b    $00, $14, $00, $15, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11
		dc.b    $00, $10, $00, $10, $00, $17, $00, $16, $00, $15, $00, $14, $80, $D2, $80, $D2
		dc.b    $00, $10, $00, $10, $08, $93, $00, $92, $00, $10, $00, $10, $00, $B2, $08, $B3
		dc.b    $00, $10, $00, $10, $80, $D4, $80, $D4, $00, $10, $00, $10, $00, $16, $00, $16
		dc.b    $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11
		dc.b    $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16
		dc.b    $00, $10, $00, $10, $80, $D4, $80, $D4, $00, $10, $00, $10, $88, $F7, $88, $B7
		dc.b    $00, $50, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $45, $00, $16
		dc.b    $03, $07, $10, $00, $51, $00, $42, $00, $10, $02, $04, $08, $41, $08, $51, $03
		dc.b    $07, $10, $00, $52, $00, $41, $00, $10, $03, $2D, $16, $00, $55, $00, $10, $00
		dc.b    $10, $00, $12, $E8, $52, $00, $10, $E8, $50, $08, $31, $08, $31, $00, $10, $00
		dc.b    $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $00
		dc.b    $10, $00, $63, $00, $62, $00, $61, $02, $03, $08, $61, $08, $04, $5D, $61, $00
		dc.b    $72, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $08, $F1, $08, $F1, $80, $10, $80, $10, $80
		dc.b    $12, $80, $12, $80, $13, $00, $10, $80, $15, $00, $16, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $88, $13, $00
		dc.b    $12, $88, $11, $88, $10, $80, $10, $00, $91, $08, $31, $03, $38, $A1, $00, $A2
		dc.b    $00, $91, $00, $A2, $00, $22, $00, $91, $00, $16, $00, $25, $00, $10, $00, $12
		dc.b    $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $00, $12
		dc.b    $08, $27, $00, $10, $08, $25, $08, $24, $00, $16, $08, $22, $08, $A2, $00, $12
		dc.b    $08, $00, $08, $A1, $08, $02, $80, $AB, $C6, $00, $C7, $00, $10, $00, $12, $00
		dc.b    $30, $00, $30, $00, $10, $00, $10, $00, $F6, $00, $14, $00, $F0, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $00, $16, $08, $11, $00, $10, $00, $10, $08
		dc.b    $15, $08, $F2, $00, $10, $08, $F0, $00, $14, $00, $16, $00, $10, $00, $10, $00
		dc.b    $32, $00, $30, $00, $12, $00, $10, $08, $DD, $08, $DF, $00, $10, $00, $10, $00
		dc.b    $12, $00, $10, $00, $10, $00, $10, $00, $10, $08, $11, $00, $10, $00, $10, $01
		dc.b    $19, $09, $1E, $00, $43, $00, $47, $00, $50, $00, $51, $00, $52, $00, $53, $09
		dc.b    $4D, $09, $42, $00, $10, $00, $1F, $08, $48, $00, $49, $00, $30, $00, $30, $00
		dc.b    $10, $00, $10, $00, $11, $00, $11, $00, $6E, $08, $6F, $00, $22, $00, $22, $00
		dc.b    $20, $00, $22, $00, $26, $00, $24, $00, $26, $08, $27, $00, $24, $08, $25, $08
		dc.b    $27, $08, $25, $00, $24, $00, $26, $00, $24, $00, $24, $00, $22, $00, $22, $08
		dc.b    $2B, $08, $46, $03, $3F, $6C, $00, $5D, $00, $5E, $00, $1A, $00, $16, $00, $18
		dc.b    $08, $15, $00, $16, $00, $1A, $00, $73, $08, $7C, $00, $70, $00, $70, $00, $76
		dc.b    $00, $76, $00, $70, $00, $70, $00, $72, $00, $72, $00, $70, $00, $70, $08, $73
		dc.b    $08, $73, $00, $70, $00, $70, $00, $76, $00, $76, $00, $70, $00, $70, $00, $0C
		dc.b    $00, $4A, $00, $47, $02, $14, $08, $09, $08, $0A, $00, $24, $00, $24, $08, $27
		dc.b    $08, $27, $08, $25, $00, $24, $00, $2F, $08, $76, $03, $1F, $5B, $00, $5C, $00
		dc.b    $5D, $00, $30, $00, $30, $00, $32, $00, $32, $00, $30, $00, $30, $08, $33, $08
		dc.b    $33, $00, $30, $00, $30, $00, $36, $08, $6C, $08, $5B, $03, $35, $1B, $00, $6A
		dc.b    $00, $1B, $00, $10, $00, $3D, $00, $44, $00, $70, $00, $70, $00, $72, $08, $73
		dc.b    $00, $70, $00, $70, $00, $46, $00, $44, $00, $24, $00, $24, $00, $2D, $08, $50
		dc.b    $08, $00, $08, $7D, $08, $7E, $08, $7F, $00, $26, $00, $26, $08, $25, $00, $59
		dc.b    $08, $7D, $03, $0B, $3D, $08, $3D, $00, $70, $00, $70, $00, $4D, $08, $15, $03
		dc.b    $07, $30, $00, $59, $00, $68, $00, $30, $03, $2B, $75, $00, $1D, $00, $67, $00
		dc.b    $61, $00, $73, $00, $75, $00, $03, $00, $53, $00, $01, $08, $50, $00, $06, $08
		dc.b    $07, $08, $05, $08, $05, $00, $53, $00, $03, $00, $30, $00, $10, $00, $10, $08
		dc.b    $1B, $08, $7A, $00, $0B, $03, $2F, $10, $00, $02, $00, $18, $00, $90, $00, $28
		dc.b    $00, $96, $00, $2E, $00, $28, $00, $28, $00, $8F, $00, $89, $00, $8D, $00, $8B
		dc.b    $08, $2B, $08, $2B, $00, $28, $00, $28, $00, $2E, $00, $2E, $00, $28, $00, $90
		dc.b    $00, $20, $08, $92, $00, $10, $02, $81, $0E, $08, $15, $00, $0F, $00, $10, $00
		dc.b    $10, $00, $66, $00, $66, $00, $F0, $00, $F0, $00, $F0, $00, $F0, $00, $F2, $00
		dc.b    $F2, $00, $10, $00, $10, $00, $43, $00, $41, $08, $42, $08, $40, $00, $41, $00
		dc.b    $43, $08, $F2, $08, $F0, $00, $10, $00, $E1, $00, $A0, $00, $51, $00, $51, $00
		dc.b    $53, $00, $53, $00, $51, $00, $51, $00, $43, $00, $D9, $00, $CB, $00, $03, $00
		dc.b    $0C, $00, $89, $00, $86, $00, $30, $00, $30, $00, $32, $00, $32, $00, $30, $00
		dc.b    $30, $00, $26, $00, $26, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $08, $E7, $08, $E7, $00, $F2, $00, $F2, $00, $F2, $00, $F2, $00, $F0, $00
		dc.b    $F0, $00, $86, $00, $86, $00, $10, $00, $10, $08, $3E, $08, $37, $00, $10, $00
		dc.b    $E1, $00, $89, $00, $71, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $00, $06, $00, $06, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $08, $25, $08, $25, $00, $30, $00, $30, $00, $32, $00, $32, $00, $30, $00
		dc.b    $30, $00, $80, $00, $80, $00, $10, $00, $10, $00, $82, $00, $82, $00, $10, $00
		dc.b    $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $BA, $00, $BA, $00, $0C, $00
		dc.b    $03, $08, $D3, $08, $DC, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $08, $45, $08, $45, $00, $43, $00, $51, $00, $41, $00, $53, $00, $53, $00
		dc.b    $51, $00, $E3, $00, $E8, $00, $E1, $00, $10, $08, $C8, $08, $D9, $00, $B0, $00
		dc.b    $59, $00, $59, $00, $B1, $00, $5B, $03, $23, $72, $00, $C1, $00, $10, $00, $10
		dc.b    $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $C4, $00, $3D
		dc.b    $00, $D4, $00, $A3, $00, $2D, $00, $5B, $00, $F9, $08, $D4, $03, $1D, $2D, $08
		dc.b    $C5, $00, $3D, $00, $3D, $08, $C4, $00, $3B, $08, $C2, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $08, $D1, $00, $39, $03, $2F, $5B, $08, $E8
		dc.b    $08, $B2, $00, $59, $08, $B0, $08, $DA, $08, $10, $00, $8B, $00, $7B, $00, $0A
		dc.b    $00, $30, $00, $10, $00, $10, $00, $16, $00, $16, $00, $EC, $00, $ED, $88, $79
		dc.b    $88, $78, $08, $87, $00, $F0, $80, $EE, $88, $88, $00, $30, $03, $01, $10, $03
		dc.b    $01, $70, $02, $80, $F4, $80, $AF, $80, $FC, $00, $10, $00, $01, $00, $11, $00
		dc.b    $01, $00, $11, $00, $01, $00, $F5, $00, $F4, $00, $10, $00, $10, $81, $1B, $81
		dc.b    $1B, $00, $10, $00, $10, $00, $12, $00, $10, $00, $10, $00, $16, $00, $10, $00
		dc.b    $16, $00, $07, $00, $07, $89, $7D, $89, $7D, $00, $F0, $00, $F0, $89, $8A, $89
		dc.b    $8A, $00, $16, $00, $14, $00, $16, $00, $14, $00, $0B, $00, $0B, $00, $0B, $00
		dc.b    $0B, $00, $09, $00, $09, $00, $09, $08, $0A, $08, $10, $00, $10, $08, $10, $08
		dc.b    $13, $00, $0B, $00, $1A, $01, $08, $00, $3B, $01, $1B, $00, $10, $00, $3F, $00
		dc.b    $16, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $13, $08
		dc.b    $13, $00, $10, $00, $10, $00, $16, $09, $34, $00, $10, $09, $1B, $08, $77, $08
		dc.b    $5E, $00, $0C, $00, $0C, $00, $0E, $00, $0E, $00, $0C, $00, $0C, $00, $0E, $00
		dc.b    $0E, $00, $08, $00, $08, $00, $0A, $00, $57, $00, $08, $00, $55, $89, $D5, $89
		dc.b    $D5, $00, $30, $00, $30, $00, $32, $00, $32, $00, $30, $00, $30, $00, $12, $00
		dc.b    $12, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $80, $00
		dc.b    $80, $00, $10, $00, $10, $88, $33, $08, $31, $00, $10, $00, $10, $08, $09, $88
		dc.b    $0B, $00, $0C, $00, $03, $08, $17, $08, $18, $00, $22, $00, $22, $08, $25, $08
		dc.b    $2A, $00, $10, $00, $1F, $08, $1E, $08, $1F, $04, $2C, $08, $78, $08, $79, $00
		dc.b    $F2, $00, $F2, $00, $F2, $00, $F2, $00, $F0, $00, $F0, $08, $80, $00, $81, $00
		dc.b    $24, $00, $24, $08, $24, $00, $25, $00, $22, $00, $22, $88, $21, $88, $23, $00
		dc.b    $10, $00, $10, $E0, $1A, $E0, $19, $04, $0C, $68, $29, $68, $21, $00, $E1, $00
		dc.b    $10, $68, $C8, $68, $31, $80, $A4, $5C, $E0, $00, $E0, $00, $E0, $00, $E0, $00
		dc.b    $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00
		dc.b    $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00
		dc.b    $E0, $00, $60, $00, $E0, $00, $60, $00, $E0, $00, $60, $00, $E0, $00, $60, $00
		dc.b    $E0, $00, $20, $00, $E0, $00, $20, $00, $60, $0A, $E0, $09, $00, $10, $00, $10
		dc.b    $00, $12, $80, $10, $00, $22, $00, $22, $08, $25, $08, $2A, $00, $10, $00, $1F
		dc.b    $68, $1F, $68, $1E, $04, $1F, $E0, $0A, $E0, $09, $00, $10, $00, $10, $60, $1A
		dc.b    $40, $19, $80, $00, $A0, $00, $40, $00, $40, $00, $40, $00, $40, $00, $A0, $00
		dc.b    $A0, $00, $A0, $00, $A0, $1B, $01, $E0, $03, $43, $E0, $00, $80, $00, $10, $03
		dc.b    $80, $00, $10, $03, $C0, $00, $E0, $00, $C0, $00, $E0, $00, $C0, $00, $E0, $00
		dc.b    $C0, $00, $E0, $00, $C0, $00, $E0, $00, $C0, $00, $E0, $00, $E0, $00, $E0, $00
		dc.b    $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $40, $00
		dc.b    $E0, $00, $E0, $00, $60, $00, $80, $00, $E0, $00, $C0, $00, $20, $03, $01, $60
		dc.b    $03, $07, $60, $00, $40, $00, $60, $00, $40, $03, $27, $C0, $00, $20, $00, $C0
		dc.b    $00, $60, $00, $80, $00, $60, $00, $80, $00, $E0, $00, $20, $00, $E0, $00, $E0
		dc.b    $00, $80, $00, $20, $00, $80, $00, $E0, $00, $C0, $00, $20, $00, $C0, $00, $20
		dc.b    $00, $40, $03, $01, $40, $03, $01, $C0, $03, $01, $C0, $03, $15, $60, $00, $80
		dc.b    $00, $60, $00, $80, $00, $C0, $00, $E0, $00, $C0, $00, $60, $00, $E0, $00, $60
		dc.b    $00, $E0, $03, $01, $E0, $37, $11, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $11
		dc.b    $11, $11, $11, $00, $11, $11, $11, $11, $05, $02, $11, $11, $02, $02, $11, $11
		dc.b    $04, $01, $11, $03, $01, $11, $03, $07, $11, $11, $11, $00, $11, $11, $11, $05
		dc.b    $02, $11, $11, $02, $02, $11, $11, $06, $02, $11, $11, $02, $02, $11, $11, $07
		dc.b    $01, $01, $03, $01, $01, $0E, $08, $11, $11, $11, $00, $11, $11, $11, $11, $07
		dc.b    $01, $11, $06, $19, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $00, $11, $0F, $11
		dc.b    $11, $BB, $F0, $EE, $22, $99, $00, $FF, $CC, $33, $FF, $00, $FF, $19, $03, $FF
		dc.b    $FF, $FF, $02, $04, $FF, $FF, $00, $FF, $80, $D5, $09, $A2, $A8, $A1, $A1, $05
		dc.b    $A8, $A1, $A1, $A7, $24, $0B, $64, $65, $66, $67, $0C, $0C, $0C, $67, $68, $69
		dc.b    $6A, $08, $11, $A0, $A1, $A1, $A1, $04, $03, $03, $03, $06, $07, $04, $07, $04
		dc.b    $07, $04, $07, $04, $02, $02, $07, $04, $02, $02, $07, $04, $02, $0A, $07, $99
		dc.b    $9E, $A2, $24, $B1, $3C, $00, $81, $8A, $25, $0C, $8B, $8C, $00, $48, $C2, $C6
		dc.b    $4B, $04, $49, $4A, $4B, $4C, $0D, $21, $7B, $74, $75, $80, $FA, $F6, $0B, $FF
		dc.b    $F1, $F6, $0B, $0A, $F0, $F4, $F4, $F7, $F0, $F4, $F4, $F7, $F0, $F4, $F4, $F7
		dc.b    $2E, $2F, $81, $06, $24, $AF, $00, $84, $8A, $08, $18, $02, $03, $04, $05, $02
		dc.b    $03, $04, $05, $02, $03, $04, $05, $02, $03, $04, $05, $02, $03, $04, $05, $02
		dc.b    $03, $04, $05, $05, $0C, $8D, $8E, $8F, $90, $DC, $DC, $DC, $C4, $51, $52, $53
		dc.b    $54, $05, $2A, $A9, $AA, $AB, $AC, $04, $AA, $AB, $AC, $D6, $7C, $7D, $83, $FF
		dc.b    $FE, $FB, $04, $F4, $FE, $FB, $FA, $F3, $FF, $F9, $FF, $F3, $FF, $F9, $FF, $F3
		dc.b    $FF, $F9, $FF, $2D, $2C, $84, $FB, $D6, $2A, $00, $79, $78, $85, $06, $1A, $09
		dc.b    $0A, $0B, $0C, $04, $04, $0B, $0C, $04, $04, $0B, $0C, $04, $04, $0B, $0C, $04
		dc.b    $04, $0B, $0C, $04, $04, $0B, $0C, $0D, $0E, $07, $09, $40, $41, $42, $43, $04
		dc.b    $41, $42, $43, $44, $0D, $22, $7B, $71, $72, $88, $F2, $F3, $F4, $0F, $F9, $F3
		dc.b    $F4, $F5, $F8, $F9, $FB, $F0, $F8, $F9, $FB, $F0, $F8, $F9, $FB, $F0, $26, $27
		dc.b    $89, $02, $2F, $25, $00, $80, $81, $8A, $05, $1C, $10, $11, $12, $13, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $14, $15, $16, $17, $06, $09, $48, $49, $4A, $4B, $04, $49, $4A, $4B
		dc.b    $4C, $02, $07, $60, $61, $62, $00, $60, $61, $62, $02, $24, $73, $6C, $79, $7A
		dc.b    $05, $1B, $12, $16, $1B, $0F, $12, $16, $1B, $0F, $12, $16, $1B, $0F, $12, $16
		dc.b    $1B, $0F, $12, $16, $0F, $CD, $C5, $C3, $79, $39, $2A, $25, $00, $83, $84, $8A
		dc.b    $05, $1F, $18, $19, $1A, $1B, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $1B, $1A, $19, $1F, $07, $07
		dc.b    $07, $03, $09, $50, $51, $52, $53, $04, $51, $52, $53, $54, $02, $07, $55, $5F
		dc.b    $63, $00, $55, $5F, $63, $02, $25, $7B, $74, $81, $82, $05, $0B, $F1, $F6, $0B
		dc.b    $FF, $F1, $F6, $0B, $FF, $F1, $F6, $0B, $FF, $F1, $F6, $0B, $FF, $F1, $F6, $FF
		dc.b    $FD, $DE, $DB, $81, $FB, $D7, $D7, $85, $79, $79, $78, $85, $04, $1F, $20, $21
		dc.b    $22, $23, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $44, $44, $44, $27, $60, $61, $62, $04, $0A, $59
		dc.b    $5A, $5B, $00, $CC, $CC, $5B, $00, $95, $96, $09, $25, $7B, $7C, $84, $82, $FD
		dc.b    $FB, $F4, $FE, $FB, $04, $F4, $FE, $FB, $04, $F4, $FE, $FB, $04, $F4, $FE, $FB
		dc.b    $04, $F4, $FE, $02, $05, $DE, $D3, $84, $02, $2E, $2E, $8A, $80, $80, $81, $8A
		dc.b    $04, $1F, $28, $29, $2A, $2B, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $79, $72, $4D, $2F, $55, $5F
		dc.b    $63, $05, $09, $3F, $91, $92, $93, $AB, $91, $92, $93, $94, $09, $25, $7B, $71
		dc.b    $89, $82, $FD, $F6, $F9, $F3, $F4, $0F, $F9, $F3, $F4, $0F, $F9, $F3, $F4, $0F
		dc.b    $F9, $F3, $F4, $0F, $F9, $F3, $0F, $05, $C0, $C0, $89, $01, $33, $35, $8A, $83
		dc.b    $83, $84, $8A, $07, $02, $01, $06, $02, $02, $01, $06, $02, $02, $30, $37, $02
		dc.b    $02, $30, $37, $02, $02, $01, $06, $02, $02, $01, $06, $0A, $3A, $B9, $58, $44
		dc.b    $00, $B9, $58, $44, $40, $4E, $4F, $44, $40, $4E, $4F, $44, $73, $6C, $6D, $78
		dc.b    $0A, $16, $06, $14, $14, $02, $12, $16, $1B, $0F, $12, $16, $1B, $0F, $12, $16
		dc.b    $1B, $0F, $12, $16, $1B, $1B, $F3, $F5, $F7, $CF, $3B, $A4, $9A, $1E, $1E, $80
		dc.b    $BD, $01, $05, $BD, $BD, $BC, $B8, $05, $02, $08, $0F, $02, $02, $08, $0F, $02
		dc.b    $02, $31, $36, $02, $02, $31, $36, $02, $02, $08, $0F, $02, $02, $08, $0F, $04
		dc.b    $40, $40, $58, $44, $40, $18, $1C, $0C, $1C, $14, $44, $48, $5C, $4C, $48, $56
		dc.b    $57, $4C, $48, $56, $57, $4C, $7B, $74, $75, $80, $FA, $F6, $05, $F4, $F4, $02
		dc.b    $F1, $F6, $0B, $FF, $F1, $F6, $0B, $FF, $F1, $F6, $0B, $FF, $F1, $F6, $0B, $0A
		dc.b    $EB, $74, $E8, $C7, $28, $B6, $9D, $C7, $C6, $36, $80, $F4, $FF, $80, $80, $81
		dc.b    $8A, $04, $18, $32, $33, $34, $35, $32, $33, $34, $35, $32, $33, $34, $35, $32
		dc.b    $33, $34, $35, $32, $33, $34, $35, $32, $33, $34, $35, $03, $44, $48, $5C, $4C
		dc.b    $48, $14, $10, $1C, $76, $08, $4C, $50, $3E, $54, $45, $46, $47, $4D, $45, $46
		dc.b    $47, $4D, $7B, $7C, $7D, $83, $FF, $FE, $0D, $FF, $F9, $01, $F4, $FE, $FB, $04
		dc.b    $F4, $FE, $FB, $04, $F4, $FE, $FB, $04, $F4, $FE, $FB, $10, $EC, $7C, $E3, $23
		dc.b    $29, $B6, $9E, $C9, $C8, $35, $83, $F9, $BF, $BB, $BA, $BD, $FB, $01, $00, $F9
		dc.b    $F9, $02, $05, $F9, $F9, $00, $F9, $F9, $02, $02, $F9, $F9, $09, $13, $F9, $F9
		dc.b    $00, $03, $C7, $C7, $3E, $6A, $39, $53, $57, $6E, $6A, $53, $6F, $39, $53, $00
		dc.b    $38, $02, $02, $5A, $59, $02, $06, $5A, $66, $3E, $3E, $3E, $01, $19, $09, $D9
		dc.b    $DD, $A6, $03, $E0, $DD, $A6, $03, $39, $1C, $04, $82, $82, $82, $82, $1C, $04
		dc.b    $BB, $BB, $BB, $BB, $7A, $00, $0C, $D6, $0A, $00, $10, $00, $3D, $00, $11, $00
		dc.b    $3D, $00, $01, $04, $64, $61, $0D, $61, $0E, $00, $10, $00, $10, $00, $12, $08
		dc.b    $13, $00, $10, $00, $10, $00, $12, $08, $10, $00, $11, $08, $11, $00, $11, $08
		dc.b    $35, $00, $35, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $08
		dc.b    $17, $00, $10, $00, $10, $00, $11, $08, $12, $00, $10, $00, $10, $08, $13, $08
		dc.b    $13, $00, $10, $00, $10, $00, $15, $00, $17, $00, $10, $00, $10, $00, $12, $00
		dc.b    $37, $00, $10, $00, $35, $08, $13, $08, $13, $00, $10, $08, $04, $08, $11, $00
		dc.b    $05, $08, $04, $00, $10, $00, $22, $08, $37, $04, $04, $08, $EA, $08, $EA, $04
		dc.b    $02, $08, $EA, $08, $02, $08, $EA, $09, $1F, $5B, $00, $5A, $00, $5B, $00, $5A
		dc.b    $00, $55, $00, $54, $00, $55, $00, $54, $00, $57, $00, $56, $00, $57, $00, $56
		dc.b    $00, $51, $00, $50, $08, $BB, $00, $50, $04, $04, $08, $EA, $00, $5D, $03, $25
		dc.b    $30, $00, $5C, $00, $32, $00, $30, $00, $45, $00, $05, $00, $72, $00, $10, $00
		dc.b    $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $1E, $00, $1E, $00, $10, $00
		dc.b    $10, $00, $6F, $00, $6E, $05, $0D, $7B, $00, $7A, $00, $10, $00, $10, $00, $71
		dc.b    $00, $70, $00, $73, $03, $0D, $2D, $00, $2D, $00, $30, $00, $10, $00, $42, $08
		dc.b    $3D, $00, $10, $03, $2D, $B5, $08, $88, $00, $89, $00, $10, $00, $8B, $00, $12
		dc.b    $00, $10, $00, $10, $00, $1E, $00, $1E, $00, $10, $00, $10, $00, $12, $00, $8E
		dc.b    $00, $10, $00, $8C, $00, $16, $00, $16, $00, $10, $00, $10, $00, $12, $00, $90
		dc.b    $00, $10, $03, $03, $93, $00, $7D, $03, $1F, $F0, $00, $7C, $00, $F2, $00, $F0
		dc.b    $00, $F0, $00, $25, $00, $27, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10
		dc.b    $00, $10, $00, $1E, $00, $A0, $00, $10, $03, $15, $12, $00, $BC, $00, $10, $00
		dc.b    $10, $00, $16, $00, $16, $00, $10, $00, $10, $00, $12, $00, $B0, $00, $10, $03
		dc.b    $0D, $CD, $00, $59, $00, $F0, $08, $43, $00, $D6, $00, $1A, $08, $67, $02, $7E
		dc.b    $08, $F6, $08, $C8, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10
		dc.b    $00, $1E, $00, $1E, $00, $10, $00, $10, $00, $CF, $00, $12, $00, $CD, $00, $10
		dc.b    $00, $16, $00, $16, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10
		dc.b    $00, $FC, $00, $4F, $00, $10, $00, $30, $00, $A3, $00, $B7, $00, $30, $00, $B5
		dc.b    $00, $45, $00, $47, $00, $E9, $00, $10, $00, $EB, $00, $12, $00, $10, $00, $10
		dc.b    $00, $1E, $00, $1E, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $08, $13
		dc.b    $00, $16, $08, $15, $08, $1B, $08, $1B, $08, $19, $08, $19, $08, $1B, $00, $E2
		dc.b    $08, $66, $08, $1A, $00, $30, $00, $D7, $08, $0A, $00, $CD, $00, $10, $02, $04
		dc.b    $08, $B4, $08, $67, $03, $0F, $10, $00, $66, $00, $24, $00, $10, $00, $30, $00
		dc.b    $24, $00, $79, $00, $30, $03, $03, $78, $08, $48, $03, $0F, $30, $08, $49, $00
		dc.b    $04, $00, $30, $00, $10, $00, $04, $08, $76, $00, $10, $02, $14, $08, $D3, $00
		dc.b    $BD, $00, $10, $00, $70, $00, $08, $00, $72, $00, $70, $00, $70, $00, $CC, $00
		dc.b    $32, $03, $27, $0B, $00, $FC, $00, $09, $00, $0D, $00, $0F, $00, $0F, $00, $09
		dc.b    $00, $0D, $00, $0B, $08, $0A, $08, $0C, $00, $0B, $00, $0D, $00, $0D, $00, $0F
		dc.b    $00, $0F, $00, $0D, $00, $0D, $08, $F1, $00, $0B, $02, $0E, $08, $48, $08, $DC
		dc.b    $00, $70, $00, $30, $08, $13, $00, $EC, $00, $30, $02, $04, $08, $ED, $08, $72
		dc.b    $03, $27, $98, $00, $82, $00, $78, $00, $68, $00, $78, $00, $48, $00, $58, $00
		dc.b    $48, $00, $58, $08, $58, $08, $48, $08, $58, $08, $48, $08, $78, $08, $68, $08
		dc.b    $78, $08, $68, $08, $98, $00, $EA, $08, $98, $03, $0B, $37, $00, $DC, $00, $30
		dc.b    $00, $30, $00, $F7, $00, $F6, $04, $04, $08, $00, $08, $C4, $03, $07, $30, $00
		dc.b    $C5, $00, $EE, $00, $30, $02, $04, $68, $E2, $68, $0D, $1C, $05, $01, $00, $01
		dc.b    $00, $01, $03, $01, $01, $07, $03, $09, $00, $09, $1D, $03, $60, $00, $08, $05
		dc.b    $03, $69, $00, $01, $15, $03, $09, $00, $09, $1D, $03, $60, $00, $60, $07, $01
		dc.b    $68, $03, $09, $01, $00, $68, $00, $01, $00, $01, $00, $01, $09, $03, $09, $00
		dc.b    $09, $1D, $03, $60, $00, $60, $07, $01, $68, $05, $03, $68, $00, $01, $05, $01
		dc.b    $01, $07, $03, $69, $00, $69, $2D, $03, $68, $00, $68, $0D, $03, $68, $00, $68
		dc.b    $2D, $03, $68, $00, $68, $0D, $03, $61, $00, $61, $0D, $05, $61, $00, $61, $00
		dc.b    $61, $03, $01, $61, $03, $23, $61, $00, $61, $00, $61, $00, $61, $00, $61, $00
		dc.b    $61, $00, $61, $00, $61, $00, $61, $00, $61, $00, $61, $00, $61, $00, $61, $00
		dc.b    $61, $00, $61, $00, $61, $00, $61, $00, $61, $51, $01, $80, $07, $01, $80, $0F
		dc.b    $03, $80, $00, $80, $15, $03, $80, $00, $80, $15, $03, $60, $00, $60, $05, $03
		dc.b    $60, $00, $60, $19, $01, $60, $03, $01, $60, $2D, $01, $60, $03, $01, $60, $1D
		dc.b    $03, $60, $00, $60, $81, $2D, $49, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0
		dc.b    $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0
		dc.b    $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0
		dc.b    $00, $60, $00, $E0, $00, $60, $00, $E0, $00, $60, $00, $E0, $00, $60, $00, $E0
		dc.b    $00, $20, $00, $E0, $00, $20, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0
		dc.b    $03, $01, $E0, $03, $01, $60, $03, $01, $60, $0D, $01, $40, $03, $19, $40, $00
		dc.b    $80, $00, $A0, $00, $80, $00, $A0, $00, $40, $00, $40, $00, $40, $00, $40, $00
		dc.b    $A0, $00, $A0, $00, $A0, $00, $A0, $1B, $01, $E0, $03, $43, $E0, $00, $80, $00
		dc.b    $E0, $00, $80, $00, $E0, $00, $C0, $00, $E0, $00, $C0, $00, $E0, $00, $C0, $00
		dc.b    $E0, $00, $C0, $00, $E0, $00, $C0, $00, $E0, $00, $C0, $00, $E0, $00, $E0, $00
		dc.b    $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00, $E0, $00
		dc.b    $40, $00, $E0, $00, $E0, $00, $60, $00, $80, $00, $E0, $00, $C0, $00, $20, $03
		dc.b    $01, $60, $03, $07, $60, $00, $40, $00, $60, $00, $40, $03, $27, $C0, $00, $20
		dc.b    $00, $C0, $00, $60, $00, $80, $00, $60, $00, $80, $00, $E0, $00, $20, $00, $E0
		dc.b    $00, $E0, $00, $80, $00, $20, $00, $80, $00, $E0, $00, $C0, $00, $20, $00, $C0
		dc.b    $00, $20, $00, $40, $03, $01, $40, $03, $01, $C0, $03, $01, $C0, $03, $15, $60
		dc.b    $00, $80, $00, $60, $00, $80, $00, $C0, $00, $E0, $00, $C0, $00, $60, $00, $E0
		dc.b    $00, $60, $00, $E0, $03, $01, $E0, $81, $3C, $04, $0D, $0D, $0D, $0D, $28, $04
		dc.b    $0D, $0D, $0D, $0D, $0D, $0A, $0D, $0D, $04, $0B, $01, $07, $09, $06, $01, $07
		dc.b    $02, $0E, $0E, $0C, $0F, $0E, $0E, $0C, $06, $08, $01, $07, $09, $06, $01, $07
		dc.b    $08, $08, $0E, $0C, $0F, $0E, $0E, $0C, $0F, $0E, $02, $04, $0D, $0D, $0D, $0D
		dc.b    $0D, $04, $0D, $0D, $0D, $0D, $06, $0C, $09, $08, $0B, $0A, $0C, $03, $0F, $0D
		dc.b    $05, $0B, $04, $07, $0A, $10, $09, $08, $0B, $0A, $0C, $03, $0F, $0D, $05, $0B
		dc.b    $04, $07, $0D, $0D, $0D, $0D, $0D, $10, $04, $0B, $0C, $0A, $09, $06, $01, $1A
		dc.b    $1C, $1F, $1E, $04, $1C, $1F, $1E, $19, $0A, $08, $09, $06, $01, $07, $09, $06
		dc.b    $01, $07, $04, $0A, $09, $06, $01, $07, $09, $06, $0C, $0A, $0D, $0D, $0D, $04
		dc.b    $0D, $0D, $0D, $0D, $03, $0A, $15, $14, $17, $16, $04, $04, $17, $16, $11, $10
		dc.b    $1B, $04, $0D, $0D, $0D, $0D, $0D, $04, $0D, $0D, $0D, $0D, $03, $0A, $2D, $2C
		dc.b    $2F, $2E, $04, $04, $2F, $2E, $29, $28, $05, $10, $0E, $0C, $0F, $0E, $0E, $0C
		dc.b    $0F, $0E, $09, $06, $01, $07, $09, $06, $01, $07, $06, $04, $0D, $0D, $0D, $0D
		dc.b    $0D, $04, $0D, $0D, $0D, $0D, $03, $0A, $25, $24, $27, $26, $04, $04, $27, $26
		dc.b    $21, $20, $03, $0C, $09, $08, $0B, $0A, $0C, $03, $0F, $0D, $05, $0B, $04, $07
		dc.b    $0C, $04, $0D, $0D, $0D, $0D, $0D, $1A, $03, $01, $02, $03, $0E, $0C, $0F, $33
		dc.b    $3C, $3F, $3E, $04, $04, $3F, $37, $3F, $39, $07, $12, $1C, $12, $15, $1B, $1A
		dc.b    $13, $12, $0C, $0A, $0E, $0C, $0F, $0E, $0E, $0C, $02, $03, $0D, $0D, $0D, $1A
		dc.b    $06, $07, $08, $06, $0F, $0D, $05, $3E, $30, $30, $36, $04, $04, $37, $36, $31
		dc.b    $30, $00, $2B, $2A, $23, $22, $2B, $2A, $23, $22, $0A, $0C, $09, $08, $0B, $0A
		dc.b    $0C, $03, $0F, $0D, $08, $06, $09, $0A, $0D, $04, $0D, $0D, $0D, $0D, $03, $19
		dc.b    $4D, $4C, $4F, $4E, $04, $04, $4F, $4E, $49, $48, $00, $3B, $3A, $33, $32, $3B
		dc.b    $3A, $3A, $34, $01, $07, $09, $06, $01, $07, $0C, $04, $0D, $0D, $0D, $0D, $0D
		dc.b    $04, $0D, $0D, $0D, $0D, $03, $13, $45, $44, $47, $46, $04, $04, $47, $46, $41
		dc.b    $40, $00, $4B, $4A, $43, $42, $4B, $4A, $43, $42, $12, $04, $0D, $0D, $0D, $0D
		dc.b    $0D, $04, $0D, $0D, $0D, $0D, $03, $13, $5D, $5C, $5F, $5E, $04, $04, $5F, $5E
		dc.b    $59, $58, $00, $5B, $5A, $55, $54, $5B, $5A, $55, $54, $12, $04, $0D, $0D, $0D
		dc.b    $0D, $80, $C4, $00, $00, $00, $0A, $20, $06, $66, $08, $88, $0C, $AA, $0E, $CC
		dc.b    $02, $46, $00, $08, $00, $0E, $04, $6A, $06, $8C, $08, $CE, $0E, $22, $0E, $62
		dc.b    $00, $00, $0E, $EE, $00, $00, $06, $22, $06, $44, $08, $66, $0A, $88, $0C, $CC
		dc.b    $02, $26, $04, $6E, $08, $AE, $00, $EE, $00, $0A, $02, $4C, $00, $6E, $00, $AE
		dc.b    $00, $00, $0E, $EE, $00, $00, $00, $26, $02, $48, $0A, $40, $0E, $60, $04, $44
		dc.b    $08, $66, $0A, $88, $00, $4E, $00, $CE, $00, $0A, $02, $82, $02, $C2, $04, $E2
		dc.b    $00, $00, $0E, $EE, $00, $00, $04, $EE, $04, $CE, $04, $8C, $02, $68, $00, $46
		dc.b    $02, $60, $0C, $88, $0C, $CA, $02, $28, $0E, $86, $02, $80, $00, $C0, $02, $E2
		dc.b    $00, $00, $0E, $EE, $20, $00, $00, $20, $05, $33, $33, $33, $33, $10, $02, $05
		dc.b    $01, $01, $07, $00, $10, $02, $01, $70, $05, $02, $01, $70, $02, $01, $10, $02
		dc.b    $0C, $10, $07, $00, $07, $01, $07, $77, $00, $77, $11, $00, $70, $02, $02, $10
		dc.b    $07, $02, $03, $01, $17, $77, $02, $01, $07, $03, $0E, $10, $11, $00, $11, $01
		dc.b    $00, $11, $00, $10, $33, $77, $77, $61, $22, $02, $0B, $70, $01, $00, $07, $01
		dc.b    $10, $00, $70, $10, $00, $70, $03, $08, $07, $01, $00, $03, $10, $00, $03, $30
		dc.b    $02, $09, $30, $00, $10, $01, $25, $55, $11, $10, $07, $02, $03, $01, $10, $70
		dc.b    $02, $01, $01, $05, $01, $33, $02, $03, $07, $00, $30, $04, $06, $01, $01, $55
		dc.b    $56, $67, $76, $0C, $01, $77, $02, $07, $07, $00, $70, $00, $70, $11, $17, $05
		dc.b    $05, $01, $66, $67, $00, $76, $05, $04, $77, $77, $70, $77, $02, $0A, $07, $00
		dc.b    $01, $11, $10, $01, $10, $00, $01, $10, $05, $06, $33, $30, $66, $66, $55, $56
		dc.b    $0C, $01, $77, $02, $07, $07, $00, $70, $00, $70, $11, $07, $03, $01, $10, $02
		dc.b    $03, $66, $67, $07, $02, $06, $07, $70, $11, $00, $70, $11, $02, $03, $01, $00
		dc.b    $03, $03, $03, $30, $70, $01, $07, $10, $70, $10, $30, $07, $70, $01, $12, $11
		dc.b    $11, $11, $11, $03, $33, $33, $33, $30, $13, $06, $22, $22, $22, $22, $11, $10
		dc.b    $02, $08, $30, $01, $11, $00, $03, $33, $30, $11, $02, $01, $03, $04, $01, $30
		dc.b    $08, $05, $25, $55, $55, $56, $07, $04, $03, $77, $00, $07, $02, $07, $70, $70
		dc.b    $10, $00, $07, $00, $01, $02, $01, $01, $08, $0B, $66, $70, $00, $01, $00, $07
		dc.b    $00, $11, $77, $70, $70, $02, $0F, $07, $00, $10, $11, $00, $77, $01, $00, $10
		dc.b    $07, $70, $33, $01, $00, $07, $04, $04, $33, $00, $11, $66, $09, $02, $03, $33
		dc.b    $02, $13, $30, $80, $33, $10, $00, $08, $80, $01, $30, $80, $08, $00, $03, $08
		dc.b    $00, $11, $00, $33, $BB, $04, $01, $03, $04, $01, $33, $02, $15, $03, $00, $33
		dc.b    $33, $30, $33, $00, $03, $03, $00, $33, $31, $80, $30, $00, $10, $A2, $21, $11
		dc.b    $00, $10, $02, $02, $07, $01, $02, $01, $07, $03, $17, $70, $01, $00, $77, $70
		dc.b    $10, $77, $77, $11, $07, $07, $01, $33, $74, $00, $13, $00, $40, $40, $00, $88
		dc.b    $00, $03, $04, $02, $10, $80, $02, $01, $03, $03, $01, $30, $03, $02, $01, $38
		dc.b    $02, $02, $03, $13, $03, $0F, $31, $44, $45, $54, $47, $01, $10, $00, $07, $15
		dc.b    $50, $10, $70, $50, $50, $04, $01, $07, $02, $03, $01, $00, $01, $02, $03, $70
		dc.b    $10, $05, $02, $0B, $03, $46, $66, $12, $30, $70, $10, $30, $00, $01, $03, $06
		dc.b    $02, $10, $30, $02, $01, $03, $03, $01, $30, $06, $07, $03, $33, $23, $00, $03
		dc.b    $30, $10, $06, $03, $03, $00, $30, $07, $03, $03, $00, $03, $02, $09, $33, $30
		dc.b    $00, $03, $33, $33, $30, $02, $33, $06, $01, $01, $02, $01, $30, $06, $01, $33
		dc.b    $06, $09, $01, $33, $00, $01, $10, $33, $00, $17, $01, $06, $01, $07, $02, $03
		dc.b    $01, $00, $01, $04, $05, $01, $01, $11, $00, $11, $02, $02, $11, $10, $04, $03
		dc.b    $03, $33, $33, $09, $01, $03, $02, $01, $10, $05, $0E, $30, $00, $01, $10, $03
		dc.b    $00, $10, $01, $10, $33, $01, $11, $06, $11, $06, $01, $07, $02, $01, $01, $06
		dc.b    $09, $01, $01, $10, $00, $11, $00, $01, $00, $10, $02, $08, $10, $11, $61, $10
		dc.b    $01, $00, $07, $01, $02, $0C, $70, $70, $10, $00, $07, $61, $11, $00, $11, $00
		dc.b    $01, $01, $02, $04, $33, $10, $00, $33, $02, $01, $03, $02, $02, $33, $30, $02
		dc.b    $01, $30, $03, $02, $03, $30, $03, $02, $03, $33, $02, $0A, $01, $00, $33, $33
		dc.b    $01, $11, $11, $00, $33, $11, $03, $02, $30, $10, $02, $02, $03, $01, $06, $01
		dc.b    $03, $02, $04, $33, $30, $00, $33, $02, $06, $11, $11, $11, $11, $00, $70, $03
		dc.b    $08, $77, $77, $77, $77, $16, $77, $77, $77, $04, $01, $01, $03, $01, $10, $02
		dc.b    $01, $70, $02, $0C, $07, $47, $00, $07, $74, $00, $07, $70, $40, $04, $74, $44
		dc.b    $02, $13, $62, $23, $34, $40, $11, $17, $70, $00, $11, $07, $00, $40, $30, $10
		dc.b    $70, $00, $33, $17, $70, $02, $04, $17, $04, $00, $13, $03, $03, $31, $17, $40
		dc.b    $02, $0E, $06, $21, $11, $03, $01, $03, $33, $00, $70, $11, $03, $00, $47, $70
		dc.b    $02, $03, $04, $43, $13, $03, $01, $31, $03, $01, $03, $04, $11, $12, $22, $22
		dc.b    $34, $03, $30, $01, $00, $88, $03, $00, $70, $00, $80, $00, $04, $80, $03, $18
		dc.b    $38, $80, $00, $40, $13, $03, $17, $00, $36, $21, $74, $00, $04, $70, $72, $11
		dc.b    $00, $47, $01, $33, $00, $04, $77, $10, $02, $02, $44, $71, $03, $01, $40, $03
		dc.b    $01, $07, $03, $01, $04, $05, $17, $05, $55, $44, $00, $50, $11, $77, $55, $11
		dc.b    $77, $11, $01, $77, $11, $03, $00, $01, $03, $30, $17, $10, $30, $88, $02, $01
		dc.b    $08, $02, $01, $03, $02, $08, $46, $65, $2B, $B8, $00, $07, $00, $03, $06, $01
		dc.b    $01, $08, $05, $10, $00, $07, $00, $01, $02, $06, $70, $00, $14, $55, $52, $11
		dc.b    $02, $01, $03, $04, $07, $01, $30, $00, $30, $11, $03, $33, $04, $01, $01, $02
		dc.b    $13, $01, $17, $00, $11, $10, $77, $01, $01, $12, $52, $22, $10, $30, $08, $00
		dc.b    $03, $08, $80, $80, $04, $04, $30, $80, $00, $80, $04, $01, $30, $02, $01, $80
		dc.b    $04, $04, $30, $88, $8B, $A2, $02, $02, $03, $10, $03, $01, $31, $07, $01, $03
		dc.b    $0C, $04, $33, $00, $03, $33, $02, $03, $03, $00, $10, $02, $06, $30, $10, $30
		dc.b    $00, $03, $01, $04, $01, $03, $03, $01, $10, $04, $0C, $30, $00, $01, $01, $12
		dc.b    $23, $00, $10, $00, $01, $00, $01, $05, $01, $01, $02, $03, $10, $00, $30, $07
		dc.b    $01, $03, $02, $05, $01, $33, $33, $31, $10, $02, $03, $03, $01, $10, $02, $06
		dc.b    $30, $10, $30, $00, $03, $01, $04, $01, $03, $03, $01, $10, $04, $05, $30, $00
		dc.b    $11, $13, $30, $05, $01, $11, $03, $01, $01, $03, $02, $30, $03, $02, $01, $03
		dc.b    $04, $02, $30, $30, $02, $02, $03, $03, $03, $02, $33, $03, $03, $01, $03, $17
		dc.b    $0B, $03, $22, $55, $54, $12, $10, $70, $01, $50, $01, $07, $02, $04, $30, $10
		dc.b    $00, $10, $02, $02, $70, $05, $04, $01, $30, $04, $12, $10, $70, $10, $66, $77
		dc.b    $11, $55, $77, $77, $11, $50, $11, $10, $70, $15, $33, $01, $07, $02, $03, $30
		dc.b    $10, $01, $03, $07, $70, $00, $30, $01, $00, $33, $33, $02, $18, $22, $14, $77
		dc.b    $70, $00, $50, $11, $77, $05, $11, $77, $11, $51, $77, $11, $03, $00, $01, $03
		dc.b    $30, $17, $10, $30, $88, $02, $01, $08, $02, $01, $03, $02, $14, $07, $65, $5D
		dc.b    $DD, $77, $77, $77, $77, $11, $11, $11, $11, $33, $33, $33, $30, $88, $88, $00
		dc.b    $03, $02, $01, $80, $07, $19, $80, $00, $DC, $C9, $14, $45, $71, $15, $50, $10
		dc.b    $07, $71, $01, $77, $11, $07, $17, $11, $00, $10, $00, $03, $30, $00, $71, $02
		dc.b    $04, $01, $00, $30, $03, $03, $13, $55, $66, $77, $41, $77, $77, $71, $15, $11
		dc.b    $10, $07, $01, $33, $01, $10, $77, $00, $30, $01, $06, $05, $33, $30, $10, $33
		dc.b    $30, $02, $04, $61, $30, $0B, $BA, $05, $01, $03, $04, $01, $08, $02, $01, $10
		dc.b    $02, $48, $17, $00, $30, $80, $00, $01, $03, $08, $00, $70, $10, $33, $54, $17
		dc.b    $76, $61, $00, $01, $00, $07, $00, $50, $10, $07, $00, $50, $17, $71, $05, $01
		dc.b    $70, $10, $00, $10, $01, $03, $50, $07, $10, $30, $01, $00, $03, $08, $67, $77
		dc.b    $65, $2A, $77, $70, $00, $70, $77, $77, $77, $77, $11, $00, $11, $07, $00, $11
		dc.b    $00, $11, $33, $33, $33, $00, $88, $88, $00, $33, $02, $07, $88, $00, $B8, $80
		dc.b    $00, $88, $03, $03, $02, $11, $38, $02, $19, $70, $03, $88, $00, $77, $10, $33
		dc.b    $88, $17, $71, $10, $33, $01, $70, $01, $10, $30, $10, $00, $10, $03, $32, $22
		dc.b    $30, $88, $02, $32, $31, $00, $80, $03, $01, $00, $80, $03, $33, $88, $00, $33
		dc.b    $30, $33, $33, $03, $30, $00, $33, $30, $08, $33, $00, $88, $80, $22, $22, $BB
		dc.b    $88, $11, $00, $10, $30, $00, $10, $01, $03, $30, $01, $00, $10, $03, $00, $07
		dc.b    $01, $00, $30, $17, $70, $88, $02, $01, $07, $04, $05, $88, $30, $10, $07, $03
		dc.b    $03, $15, $30, $01, $07, $07, $00, $10, $70, $00, $11, $07, $07, $77, $00, $07
		dc.b    $70, $11, $70, $11, $01, $03, $71, $02, $1A, $30, $01, $11, $10, $00, $11, $00
		dc.b    $10, $30, $00, $10, $01, $03, $33, $01, $00, $10, $00, $30, $07, $01, $00, $03
		dc.b    $17, $70, $88, $02, $01, $07, $04, $04, $88, $00, $31, $65, $02, $02, $03, $03
		dc.b    $04, $01, $33, $04, $07, $33, $33, $00, $11, $11, $10, $03, $02, $04, $10, $30
		dc.b    $00, $01, $02, $12, $22, $23, $33, $33, $30, $00, $33, $01, $03, $33, $00, $01
		dc.b    $00, $03, $33, $33, $33, $30, $03, $04, $88, $88, $00, $08, $03, $01, $80, $03
		dc.b    $0E, $BA, $AD, $DC, $44, $10, $07, $01, $00, $11, $00, $70, $10, $00, $10, $02
		dc.b    $01, $30, $0B, $01, $30, $03, $07, $03, $32, $26, $71, $30, $00, $30, $03, $01
		dc.b    $01, $02, $17, $03, $00, $70, $00, $30, $10, $01, $33, $01, $07, $00, $11, $10
		dc.b    $70, $15, $00, $77, $01, $00, $70, $65, $5C, $C9, $05, $01, $03, $04, $01, $08
		dc.b    $02, $01, $10, $02, $10, $17, $00, $30, $80, $00, $01, $03, $08, $00, $70, $10
		dc.b    $33, $CD, $D2, $23, $33, $05, $01, $08, $08, $01, $80, $03, $0E, $80, $03, $80
		dc.b    $08, $00, $33, $08, $80, $33, $30, $00, $33, $10, $33, $02, $08, $01, $10, $03
		dc.b    $01, $00, $13, $00, $10, $02, $0C, $30, $11, $10, $03, $03, $33, $01, $11, $30
		dc.b    $00, $30, $10, $02, $07, $03, $01, $30, $00, $33, $01, $30, $04, $01, $03, $03
		dc.b    $04, $30, $00, $10, $33, $02, $01, $07, $02, $2E, $11, $70, $11, $11, $07, $01
		dc.b    $00, $77, $70, $10, $36, $07, $77, $77, $00, $07, $00, $11, $05, $10, $70, $00
		dc.b    $05, $01, $07, $70, $50, $11, $77, $77, $01, $77, $00, $07, $17, $01, $11, $11
		dc.b    $00, $10, $33, $33, $17, $11, $30, $88, $0C, $0C, $01, $70, $13, $80, $50, $07
		dc.b    $01, $38, $05, $10, $70, $13, $02, $0E, $70, $10, $99, $45, $AA, $B3, $00, $80
		dc.b    $88, $88, $00, $08, $03, $38, $02, $02, $83, $03, $04, $06, $80, $00, $08, $30
		dc.b    $38, $80, $02, $03, $30, $08, $88, $02, $05, $32, $22, $33, $00, $01, $07, $0D
		dc.b    $01, $70, $03, $33, $17, $00, $10, $11, $00, $07, $01, $00, $70, $02, $09, $10
		dc.b    $70, $10, $70, $32, $AD, $CD, $DA, $08, $06, $24, $08, $08, $00, $08, $80, $30
		dc.b    $88, $83, $33, $03, $33, $31, $11, $11, $11, $10, $11, $07, $70, $11, $3B, $AD
		dc.b    $51, $01, $5D, $08, $30, $10, $00, $83, $01, $07, $00, $30, $10, $70, $02, $13
		dc.b    $11, $77, $70, $00, $33, $10, $07, $3B, $80, $01, $00, $88, $83, $01, $00, $A3
		dc.b    $30, $01, $22, $04, $01, $01, $02, $10, $30, $70, $10, $01, $13, $07, $01, $10
		dc.b    $01, $00, $77, $00, $11, $00, $07, $01, $03, $08, $10, $00, $DD, $52, $01, $66
		dc.b    $08, $03, $02, $24, $80, $30, $17, $00, $03, $11, $70, $00, $30, $11, $77, $70
		dc.b    $00, $33, $10, $07, $3B, $80, $01, $00, $88, $83, $01, $00, $A2, $20, $01, $22
		dc.b    $70, $01, $00, $30, $07, $00, $10, $03, $02, $06, $10, $00, $07, $01, $00, $03
		dc.b    $02, $05, $03, $30, $00, $10, $30, $02, $01, $03, $02, $18, $DA, $B8, $80, $03
		dc.b    $80, $00, $80, $30, $38, $88, $33, $00, $03, $33, $00, $11, $33, $00, $01, $07
		dc.b    $00, $33, $01, $17, $08, $05, $33, $22, $66, $66, $01, $02, $15, $10, $10, $07
		dc.b    $00, $05, $07, $70, $01, $50, $70, $01, $15, $00, $70, $01, $05, $00, $07, $00
		dc.b    $10, $50, $02, $04, $01, $00, $10, $70, $02, $04, $01, $07, $00, $05, $03, $01
		dc.b    $10, $02, $01, $70, $05, $01, $01, $05, $19, $70, $00, $10, $07, $00, $15, $66
		dc.b    $77, $77, $72, $00, $07, $00, $11, $01, $00, $70, $00, $10, $77, $77, $00, $07
		dc.b    $00, $07, $02, $04, $11, $11, $00, $71, $02, $05, $11, $10, $00, $33, $33, $04
		dc.b    $02, $11, $03, $02, $01, $01, $04, $01, $30, $06, $02, $01, $30, $02, $02, $10
		dc.b    $13, $02, $08, $31, $11, $33, $00, $03, $32, $33, $03, $0B, $01, $30, $06, $01
		dc.b    $03, $02, $0F, $03, $30, $00, $03, $30, $00, $01, $31, $11, $66, $66, $01, $00
		dc.b    $70, $01, $02, $01, $07, $09, $01, $01, $07, $0C, $10, $00, $07, $07, $70, $12
		dc.b    $25, $52, $00, $30, $08, $88, $05, $01, $30, $06, $03, $17, $13, $08, $03, $0A
		dc.b    $30, $80, $01, $71, $03, $08, $50, $00, $10, $30, $03, $01, $38, $04, $04, $05
		dc.b    $17, $00, $08, $02, $0A, $01, $30, $00, $51, $70, $13, $00, $05, $17, $01, $02
		dc.b    $08, $51, $67, $99, $91, $14, $46, $00, $08, $05, $03, $30, $00, $08, $02, $14
		dc.b    $88, $80, $03, $01, $30, $03, $30, $17, $03, $30, $11, $70, $11, $11, $77, $01
		dc.b    $10, $07, $11, $01, $02, $04, $05, $10, $10, $70, $03, $05, $01, $50, $51, $07
		dc.b    $05, $02, $06, $70, $10, $00, $05, $01, $50, $02, $01, $15, $03, $08, $14, $32
		dc.b    $21, $99, $07, $10, $38, $8B, $02, $08, $3B, $33, $00, $11, $03, $B8, $07, $70
		dc.b    $02, $1C, $10, $00, $13, $88, $51, $07, $01, $22, $05, $11, $77, $77, $12, $76
		dc.b    $77, $70, $31, $10, $07, $70, $31, $11, $07, $00, $03, $00, $10, $70, $02, $12
		dc.b    $10, $00, $03, $01, $00, $70, $21, $10, $77, $14, $77, $77, $11, $50, $00, $07
		dc.b    $77, $22, $04, $01, $01, $08, $1D, $17, $10, $01, $15, $00, $01, $10, $50, $51
		dc.b    $70, $07, $00, $05, $17, $70, $12, $22, $67, $00, $30, $11, $77, $00, $30, $10
		dc.b    $70, $00, $03, $01, $02, $24, $03, $01, $70, $07, $31, $17, $07, $71, $17, $70
		dc.b    $70, $13, $70, $07, $01, $30, $07, $61, $23, $00, $07, $10, $33, $33, $00, $01
		dc.b    $01, $11, $77, $11, $01, $10, $12, $33, $30, $01, $02, $03, $03, $30, $30, $02
		dc.b    $23, $03, $08, $88, $80, $00, $08, $BB, $B3, $22, $33, $01, $11, $07, $11, $10
		dc.b    $07, $77, $07, $77, $70, $70, $17, $00, $07, $01, $00, $70, $00, $10, $01, $07
		dc.b    $00, $03, $00, $10, $02, $0F, $16, $67, $07, $71, $77, $70, $00, $15, $70, $07
		dc.b    $70, $00, $11, $11, $07, $03, $03, $10, $00, $33, $05, $01, $10, $05, $0E, $25
		dc.b    $66, $66, $15, $07, $00, $10, $00, $10, $70, $01, $00, $01, $07, $02, $04, $30
		dc.b    $10, $70, $15, $04, $01, $30, $04, $07, $10, $00, $15, $00, $22, $25, $41, $02
		dc.b    $02, $08, $88, $02, $03, $80, $00, $10, $04, $04, $30, $80, $00, $01, $03, $1C
		dc.b    $70, $03, $08, $80, $00, $10, $30, $08, $52, $20, $12, $33, $00, $03, $10, $10
		dc.b    $80, $00, $31, $10, $08, $00, $03, $30, $00, $88, $00, $03, $06, $03, $88, $00
		dc.b    $80, $02, $05, $88, $3B, $BB, $AA, $AA, $02, $07, $11, $11, $00, $33, $33, $00
		dc.b    $03, $02, $17, $33, $00, $08, $88, $00, $33, $38, $80, $88, $03, $33, $38, $80
		dc.b    $80, $03, $03, $38, $A2, $22, $66, $13, $00, $77, $02, $02, $10, $70, $02, $0A
		dc.b    $01, $07, $00, $01, $30, $10, $70, $70, $03, $01, $02, $05, $80, $00, $07, $07
		dc.b    $80, $03, $1A, $44, $76, $00, $66, $00, $10, $77, $11, $01, $00, $77, $00, $10
		dc.b    $77, $11, $11, $07, $01, $00, $33, $00, $10, $33, $00, $70, $03, $02, $13, $01
		dc.b    $30, $00, $08, $32, $11, $11, $19, $00, $54, $44, $45, $05, $17, $77, $71, $51
		dc.b    $70, $11, $02, $05, $01, $30, $77, $00, $03, $08, $16, $30, $00, $01, $75, $66
		dc.b    $06, $11, $76, $66, $71, $76, $13, $33, $17, $10, $38, $80, $01, $03, $80, $08
		dc.b    $30, $0C, $10, $71, $9C, $CD, $56, $15, $41, $17, $77, $01, $00, $70, $11, $70
		dc.b    $07, $01, $33, $02, $02, $13, $08, $03, $02, $80, $07, $07, $15, $66, $07, $65
		dc.b    $DC, $11, $76, $66, $71, $76, $13, $33, $17, $10, $38, $80, $01, $33, $80, $08
		dc.b    $30, $80, $0B, $06, $83, $BA, $AA, $33, $00, $01, $02, $01, $03, $02, $01, $03
		dc.b    $06, $02, $07, $10, $03, $01, $01, $03, $02, $70, $03, $02, $07, $07, $03, $3B
		dc.b    $AD, $DD, $00, $80, $04, $07, $88, $80, $30, $88, $00, $08, $03, $04, $01, $30
		dc.b    $02, $01, $10, $03, $02, $01, $03, $02, $03, $67, $61, $33, $02, $05, $70, $03
		dc.b    $08, $00, $01, $05, $01, $80, $10, $04, $CD, $AB, $B8, $88, $03, $01, $80, $13
		dc.b    $01, $80, $04, $06, $8B, $BA, $AA, $30, $00, $01, $05, $01, $03, $06, $02, $07
		dc.b    $10, $03, $02, $01, $30, $02, $01, $70, $03, $05, $07, $30, $01, $00, $11, $06
		dc.b    $08, $70, $05, $30, $00, $01, $50, $00, $17, $02, $0F, $11, $70, $10, $00, $07
		dc.b    $00, $10, $00, $07, $70, $01, $50, $00, $07, $01, $02, $0E, $77, $01, $05, $00
		dc.b    $77, $77, $10, $11, $11, $00, $71, $33, $30, $10, $02, $02, $03, $01, $07, $19
		dc.b    $01, $00, $55, $22, $11, $15, $00, $70, $01, $03, $07, $70, $00, $11, $70, $01
		dc.b    $11, $11, $01, $10, $03, $33, $10, $03, $30, $02, $01, $30, $02, $01, $03, $02
		dc.b    $19, $08, $30, $08, $88, $80, $30, $08, $80, $00, $13, $33, $08, $88, $11, $11
		dc.b    $33, $00, $01, $11, $00, $33, $33, $33, $33, $33, $04, $02, $88, $80, $04, $06
		dc.b    $03, $23, $00, $08, $83, $11, $02, $06, $80, $00, $88, $88, $03, $11, $03, $01
		dc.b    $13, $02, $05, $30, $30, $00, $03, $33, $02, $01, $03, $02, $06, $33, $32, $22
		dc.b    $25, $11, $10, $02, $02, $11, $11, $02, $07, $03, $30, $10, $07, $30, $03, $01
		dc.b    $04, $01, $01, $06, $06, $01, $10, $23, $00, $32, $BB, $02, $01, $08, $0B, $12
		dc.b    $08, $00, $01, $30, $00, $80, $00, $03, $00, $08, $70, $11, $33, $00, $17, $01
		dc.b    $00, $52, $07, $01, $77, $02, $04, $01, $00, $51, $71, $04, $05, $10, $70, $05
		dc.b    $17, $77, $02, $0E, $51, $10, $01, $21, $9C, $C5, $67, $03, $80, $00, $01, $10
		dc.b    $00, $83, $02, $21, $08, $00, $10, $71, $30, $30, $00, $07, $13, $01, $07, $11
		dc.b    $71, $10, $71, $55, $17, $77, $15, $32, $60, $66, $49, $00, $10, $10, $00, $03
		dc.b    $07, $71, $38, $10, $31, $04, $32, $77, $12, $10, $31, $71, $77, $73, $17, $15
		dc.b    $11, $16, $71, $50, $55, $45, $DC, $91, $22, $03, $80, $00, $01, $30, $00, $83
		dc.b    $00, $10, $08, $00, $10, $71, $30, $30, $00, $07, $13, $01, $07, $11, $71, $10
		dc.b    $71, $55, $17, $77, $15, $12, $77, $00, $14, $03, $04, $77, $30, $00, $07, $02
		dc.b    $12, $10, $70, $11, $01, $00, $01, $00, $10, $00, $10, $03, $00, $01, $00, $30
		dc.b    $00, $10, $03, $03, $01, $30, $02, $02, $10, $30, $02, $12, $01, $03, $30, $11
		dc.b    $00, $10, $03, $00, $10, $01, $10, $33, $01, $00, $01, $00, $30, $10, $02, $07
		dc.b    $03, $01, $00, $45, $22, $03, $AA, $03, $01, $80, $05, $02, $70, $03, $05, $01
		dc.b    $51, $05, $01, $10, $02, $07, $07, $00, $08, $9C, $DD, $AB, $03, $02, $01, $08
		dc.b    $10, $01, $30, $02, $01, $80, $05, $04, $BB, $BA, $55, $61, $02, $02, $07, $70
		dc.b    $03, $05, $01, $00, $10, $70, $10, $02, $01, $01, $04, $05, $03, $01, $00, $10
		dc.b    $30, $04, $04, $10, $00, $66, $41, $02, $03, $70, $15, $11, $04, $03, $10, $07
		dc.b    $01, $04, $04, $30, $01, $00, $70, $04, $03, $03, $00, $10, $02, $03, $30, $00
		dc.b    $71, $02, $0F, $17, $10, $00, $31, $07, $11, $03, $01, $10, $70, $30, $33, $01
		dc.b    $00, $33, $04, $0B, $03, $01, $01, $00, $30, $10, $70, $30, $33, $22, $DC, $02
		dc.b    $01, $08, $05, $01, $03, $05, $12, $08, $00, $10, $30, $00, $80, $01, $03, $00
		dc.b    $08, $70, $10, $33, $00, $DA, $AB, $33, $03, $06, $02, $80, $03, $06, $01, $08
		dc.b    $04, $01, $80, $03, $02, $08, $88, $04, $04, $88, $88, $88, $30, $03, $01, $03
		dc.b    $04, $01, $30, $02, $02, $30, $03, $02, $0F, $03, $00, $33, $33, $00, $30, $00
		dc.b    $03, $80, $03, $00, $03, $80, $03, $01, $03, $01, $01, $02, $09, $30, $03, $00
		dc.b    $03, $00, $30, $01, $30, $33, $02, $03, $33, $00, $03, $07, $19, $30, $10, $11
		dc.b    $44, $76, $77, $05, $11, $17, $76, $51, $07, $61, $23, $00, $71, $33, $08, $17
		dc.b    $13, $08, $80, $01, $00, $80, $09, $10, $06, $65, $DD, $CC, $66, $67, $77, $11
		dc.b    $33, $32, $11, $77, $88, $00, $33, $10, $03, $02, $31, $08, $02, $02, $03, $80
		dc.b    $07, $17, $11, $14, $44, $55, $50, $51, $16, $77, $15, $17, $70, $11, $71, $70
		dc.b    $11, $BB, $00, $01, $3B, $00, $17, $00, $08, $07, $18, $30, $80, $67, $76, $74
		dc.b    $19, $77, $77, $11, $55, $11, $10, $77, $11, $33, $01, $10, $70, $80, $30, $01
		dc.b    $07, $00, $03, $02, $01, $08, $02, $01, $10, $04, $0A, $CC, $45, $11, $02, $10
		dc.b    $00, $70, $00, $01, $01, $02, $0E, $70, $10, $00, $03, $00, $01, $00, $10, $00
		dc.b    $70, $07, $01, $00, $07, $03, $08, $01, $70, $70, $15, $20, $25, $52, $30, $07
		dc.b    $17, $30, $03, $30, $00, $03, $00, $30, $03, $60, $30, $00, $31, $76, $13, $32
		dc.b    $01, $00, $71, $11, $03, $26, $60, $01, $03, $01, $70, $05, $0E, $30, $17, $00
		dc.b    $03, $01, $70, $00, $10, $10, $70, $07, $01, $11, $07, $02, $0C, $30, $10, $00
		dc.b    $70, $17, $67, $76, $62, $00, $07, $00, $03, $06, $01, $01, $08, $05, $10, $00
		dc.b    $07, $00, $01, $02, $06, $70, $00, $50, $11, $16, $77, $02, $12, $11, $77, $00
		dc.b    $11, $77, $11, $01, $77, $11, $03, $00, $01, $03, $30, $17, $10, $30, $88, $02
		dc.b    $01, $08, $02, $01, $03, $02, $17, $06, $74, $4C, $CD, $71, $10, $00, $10, $07
		dc.b    $71, $01, $77, $11, $07, $17, $11, $00, $10, $00, $03, $30, $00, $71, $02, $04
		dc.b    $01, $00, $30, $03, $03, $13, $55, $66, $77, $44, $77, $77, $71, $10, $11, $10
		dc.b    $07, $01, $33, $01, $10, $77, $00, $30, $01, $06, $05, $33, $30, $10, $33, $30
		dc.b    $02, $17, $22, $14, $47, $67, $50, $51, $16, $77, $15, $17, $70, $11, $71, $70
		dc.b    $11, $BB, $00, $01, $3B, $00, $17, $00, $08, $07, $18, $30, $80, $67, $76, $74
		dc.b    $19, $77, $77, $11, $55, $11, $10, $77, $11, $33, $01, $10, $70, $80, $30, $01
		dc.b    $07, $00, $03, $02, $01, $08, $02, $01, $10, $04, $14, $9C, $44, $66, $10, $51
		dc.b    $16, $77, $11, $17, $70, $11, $03, $70, $11, $03, $38, $01, $03, $38, $80, $02
		dc.b    $1A, $80, $00, $10, $30, $00, $08, $00, $08, $00, $80, $66, $5D, $DD, $44, $66
		dc.b    $67, $77, $11, $33, $32, $11, $77, $88, $00, $33, $10, $03, $02, $31, $08, $02
		dc.b    $02, $03, $80, $07, $10, $22, $55, $54, $11, $11, $67, $71, $50, $33, $32, $17
		dc.b    $15, $88, $00, $31, $70, $04, $01, $08, $03, $01, $80, $07, $07, $52, $30, $0B
		dc.b    $AC, $17, $03, $08, $02, $25, $10, $30, $88, $00, $71, $03, $30, $01, $07, $11
		dc.b    $03, $50, $10, $77, $61, $05, $01, $07, $71, $00, $01, $70, $10, $99, $45, $22
		dc.b    $30, $00, $80, $03, $31, $00, $08, $03, $32, $88, $88, $02, $29, $33, $33, $33
		dc.b    $00, $10, $00, $33, $00, $10, $33, $00, $08, $33, $00, $88, $80, $22, $23, $B8
		dc.b    $80, $11, $01, $03, $08, $00, $10, $10, $00, $33, $01, $01, $30, $00, $30, $10
		dc.b    $03, $00, $03, $00, $10, $88, $02, $01, $01, $06, $02, $31, $10, $08, $03, $88
		dc.b    $00, $30, $02, $13, $03, $00, $10, $33, $30, $01, $11, $10, $00, $01, $00, $10
		dc.b    $30, $03, $33, $16, $20, $15, $55, $02, $02, $10, $10, $04, $07, $70, $10, $10
		dc.b    $01, $07, $11, $70, $02, $0F, $77, $01, $55, $07, $01, $15, $00, $41, $15, $50
		dc.b    $00, $41, $14, $32, $19, $07, $11, $08, $00, $10, $71, $30, $01, $51, $07, $13
		dc.b    $15, $05, $10, $71, $50, $00, $51, $17, $02, $06, $05, $01, $11, $23, $34, $11
		dc.b    $03, $01, $10, $02, $08, $70, $00, $03, $10, $00, $01, $31, $07, $02, $14, $10
		dc.b    $70, $01, $05, $77, $01, $15, $50, $41, $15, $50, $00, $41, $62, $21, $99, $77
		dc.b    $10, $38, $8B, $02, $07, $3B, $33, $10, $11, $03, $B8, $01, $03, $10, $30, $10
		dc.b    $13, $88, $03, $01, $01, $22, $00, $30, $00, $77, $33, $30, $11, $66, $09, $02
		dc.b    $03, $33, $02, $13, $30, $80, $33, $10, $00, $08, $80, $01, $30, $80, $08, $00
		dc.b    $03, $08, $00, $11, $00, $33, $BB, $04, $01, $03, $04, $01, $33, $02, $15, $03
		dc.b    $00, $33, $33, $30, $33, $00, $03, $03, $00, $33, $31, $80, $30, $00, $10, $A2
		dc.b    $21, $11, $00, $10, $02, $02, $07, $01, $02, $01, $07, $03, $1C, $70, $01, $00
		dc.b    $77, $70, $10, $77, $77, $11, $07, $07, $01, $33, $71, $00, $13, $00, $01, $00
		dc.b    $12, $22, $00, $07, $00, $11, $77, $70, $70, $02, $0F, $07, $00, $10, $11, $00
		dc.b    $77, $01, $00, $10, $07, $70, $33, $01, $00, $07, $04, $04, $88, $33, $21, $67
		dc.b    $08, $03, $88, $00, $30, $02, $14, $03, $00, $10, $33, $30, $01, $11, $10, $00
		dc.b    $01, $00, $10, $00, $33, $33, $03, $3B, $88, $88, $03, $03, $02, $11, $38, $02
		dc.b    $19, $70, $03, $88, $00, $77, $10, $33, $88, $17, $71, $10, $33, $01, $70, $01
		dc.b    $10, $30, $10, $00, $10, $03, $32, $22, $30, $88, $02, $07, $31, $00, $80, $03
		dc.b    $01, $00, $80, $02, $10, $88, $00, $30, $00, $33, $33, $03, $33, $00, $33, $30
		dc.b    $00, $33, $00, $88, $88, $02, $05, $8B, $AC, $88, $00, $01, $02, $09, $80, $37
		dc.b    $65, $00, $80, $10, $00, $88, $03, $02, $12, $33, $30, $17, $15, $00, $33, $01
		dc.b    $00, $33, $08, $30, $00, $03, $3A, $21, $64, $00, $01, $05, $01, $03, $06, $02
		dc.b    $07, $10, $03, $02, $01, $30, $02, $01, $70, $03, $07, $07, $33, $3B, $AD, $DD
		dc.b    $00, $80, $04, $07, $88, $80, $30, $88, $00, $08, $03, $04, $01, $30, $02, $01
		dc.b    $10, $03, $02, $01, $03, $02, $04, $AA, $33, $32, $23, $02, $01, $01, $02, $02
		dc.b    $80, $30, $05, $05, $80, $08, $03, $11, $08, $04, $01, $80, $03, $01, $08, $02
		dc.b    $01, $30, $02, $02, $32, $30, $04, $01, $08, $02, $06, $30, $00, $80, $00, $03
		dc.b    $08, $03, $09, $30, $08, $00, $10, $00, $80, $88, $01, $03, $02, $06, $21, $01
		dc.b    $2A, $B8, $00, $01, $02, $01, $03, $02, $01, $03, $06, $02, $07, $10, $03, $01
		dc.b    $01, $03, $02, $70, $03, $02, $14, $07, $52, $77, $64, $44, $74, $61, $15, $00
		dc.b    $17, $77, $71, $50, $31, $71, $07, $15, $83, $06, $10, $0D, $09, $C5, $07, $02
		dc.b    $5C, $17, $01, $30, $80, $70, $0B, $01, $10, $05, $09, $30, $80, $00, $01, $03
		dc.b    $08, $BA, $AA, $33, $02, $05, $08, $00, $03, $00, $80, $02, $01, $08, $02, $01
		dc.b    $30, $03, $1C, $01, $80, $00, $03, $00, $80, $00, $30, $10, $80, $03, $01, $00
		dc.b    $42, $20, $02, $22, $06, $01, $03, $33, $00, $70, $11, $03, $50, $17, $70, $02
		dc.b    $03, $01, $16, $13, $03, $01, $61, $03, $01, $06, $02, $13, $11, $10, $17, $77
		dc.b    $66, $71, $03, $30, $01, $00, $88, $03, $00, $70, $00, $80, $00, $01, $80, $03
		dc.b    $2D, $38, $80, $00, $10, $13, $03, $17, $01, $66, $21, $71, $10, $01, $70, $77
		dc.b    $55, $00, $17, $01, $33, $01, $01, $77, $10, $00, $10, $11, $71, $10, $01, $10
		dc.b    $10, $07, $70, $01, $07, $00, $07, $00, $01, $70, $10, $70, $11, $11, $02, $10
		dc.b    $01, $11, $17, $70, $00, $11, $07, $00, $10, $30, $10, $70, $01, $33, $17, $70
		dc.b    $02, $04, $17, $01, $00, $13, $02, $09, $10, $61, $17, $11, $07, $71, $16, $76
		dc.b    $61, $04, $01, $03, $04, $01, $33, $02, $06, $03, $00, $33, $33, $30, $33, $02
		dc.b    $01, $03, $03, $08, $80, $00, $30, $00, $B3, $00, $03, $33, $10, $01, $33, $04
		dc.b    $01, $33, $04, $06, $33, $00, $33, $33, $33, $11, $03, $01, $11, $04, $01, $01
		dc.b    $03, $02, $01, $11, $03, $06, $10, $11, $11, $00, $01, $10, $03, $06, $01, $00
		dc.b    $33, $BB, $30, $06, $08, $02, $30, $88, $02, $01, $03, $04, $01, $30, $02, $01
		dc.b    $10, $03, $02, $01, $03, $02, $04, $11, $01, $56, $71, $03, $01, $77, $02, $01
		dc.b    $07, $02, $03, $10, $70, $11, $02, $01, $01, $03, $0D, $10, $03, $01, $01, $00
		dc.b    $30, $00, $10, $03, $00, $10, $00, $30, $02, $02, $10, $30, $02, $12, $01, $03
		dc.b    $30, $11, $00, $10, $03, $00, $10, $01, $10, $33, $01, $00, $01, $00, $30, $10
		dc.b    $02, $02, $03, $01, $03, $02, $30, $10, $02, $09, $30, $11, $00, $03, $01, $13
		dc.b    $33, $30, $10, $02, $01, $11, $02, $01, $11, $02, $1D, $13, $01, $11, $11, $01
		dc.b    $10, $33, $00, $11, $11, $33, $33, $BB, $11, $10, $30, $88, $30, $11, $03, $30
		dc.b    $03, $01, $10, $03, $00, $30, $01, $10, $02, $04, $10, $01, $30, $03, $02, $02
		dc.b    $13, $33, $02, $04, $20, $01, $67, $77, $03, $04, $77, $30, $00, $07, $02, $18
		dc.b    $10, $70, $11, $01, $00, $01, $00, $10, $00, $10, $03, $00, $01, $00, $30, $00
		dc.b    $10, $03, $00, $A2, $16, $02, $54, $83, $04, $01, $07, $02, $13, $31, $71, $07
		dc.b    $15, $17, $70, $10, $00, $70, $01, $71, $50, $41, $77, $15, $00, $05, $11, $50
		dc.b    $02, $0B, $50, $55, $54, $00, $05, $01, $10, $00, $05, $10, $11, $02, $05, $01
		dc.b    $BB, $00, $51, $1B, $02, $07, $10, $00, $0A, $05, $07, $1A, $A7, $02, $0E, $AA
		dc.b    $07, $41, $16, $EE, $44, $77, $11, $55, $00, $70, $77, $11, $50, $02, $0D, $70
		dc.b    $15, $00, $77, $77, $00, $77, $11, $17, $00, $71, $0B, $B0, $02, $01, $B0, $02
		dc.b    $1C, $16, $DC, $C5, $54, $06, $01, $03, $33, $10, $70, $11, $03, $00, $17, $70
		dc.b    $00, $01, $01, $16, $13, $70, $11, $10, $61, $07, $77, $01, $16, $02, $0E, $77
		dc.b    $01, $76, $66, $77, $77, $71, $11, $77, $01, $07, $77, $00, $10, $02, $0A, $11
		dc.b    $01, $00, $11, $00, $11, $01, $00, $01, $11, $02, $37, $11, $11, $00, $01, $11
		dc.b    $11, $00, $01, $10, $17, $10, $00, $11, $07, $10, $10, $10, $11, $11, $11, $11
		dc.b    $00, $11, $11, $11, $10, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11
		dc.b    $11, $66, $76, $67, $10, $71, $11, $07, $00, $07, $77, $70, $00, $11, $11, $11
		dc.b    $11, $10, $03, $37, $11, $01, $01, $01, $11, $11, $11, $11, $11, $11, $11, $11
		dc.b    $31, $01, $01, $32, $01, $10, $00, $33, $82, $76, $10, $00, $08, $57, $71, $00
		dc.b    $80, $82, $67, $10, $38, $80, $07, $01, $13, $03, $17, $30, $36, $21, $74, $03
		dc.b    $15, $22, $51, $12, $33, $33, $00, $03, $33, $00, $33, $02, $17, $33, $30, $33
		dc.b    $08, $88, $03, $00, $38, $80, $80, $30, $03, $08, $B3, $30, $10, $30, $33, $00
		dc.b    $10, $03, $33, $16, $04, $01, $30, $03, $01, $03, $03, $2A, $33, $00, $01, $00
		dc.b    $01, $00, $10, $74, $01, $11, $07, $00, $11, $07, $70, $40, $00, $16, $56, $35
		dc.b    $00, $10, $31, $70, $00, $01, $10, $00, $11, $00, $07, $15, $00, $10, $01, $50
		dc.b    $33, $01, $01, $50, $00, $30, $04, $0A, $17, $10, $11, $46, $60, $73, $05, $17
		dc.b    $71, $11, $02, $02, $2B, $33, $02, $0A, $38, $88, $05, $10, $13, $88, $00, $53
		dc.b    $71, $33, $02, $02, $43, $61, $03, $06, $43, $34, $44, $44, $44, $17, $02, $07
		dc.b    $07, $01, $70, $00, $70, $00, $07, $03, $02, $10, $70, $02, $1B, $01, $07, $70
		dc.b    $30, $00, $10, $70, $03, $00, $01, $10, $55, $66, $66, $67, $77, $77, $77, $77
		dc.b    $01, $11, $11, $00, $10, $33, $00, $11, $02, $01, $33, $04, $01, $33, $04, $02
		dc.b    $10, $30, $02, $04, $32, $21, $11, $11, $0D, $05, $53, $50, $00, $43, $16, $02
		dc.b    $02, $17, $71, $02, $03, $54, $67, $15, $02, $03, $07, $77, $22, $02, $01, $01
		dc.b    $02, $03, $51, $70, $10, $02, $01, $07, $02, $03, $05, $10, $71, $02, $02, $51
		dc.b    $07, $03, $01, $11, $04, $04, $19, $99, $14, $47, $02, $20, $80, $03, $38, $00
		dc.b    $08, $00, $03, $80, $00, $80, $00, $38, $00, $08, $11, $03, $88, $00, $77, $11
		dc.b    $33, $88, $11, $77, $11, $23, $50, $11, $77, $76, $00, $01, $05, $02, $07, $05
		dc.b    $06, $01, $70, $06, $01, $07, $05, $04, $32, $76, $60, $10, $02, $02, $01, $11
		dc.b    $02, $02, $01, $11, $02, $02, $11, $11, $02, $02, $11, $11, $02, $0E, $11, $11
		dc.b    $00, $01, $11, $11, $00, $01, $11, $11, $32, $22, $32, $66, $1C, $04, $43, $32
		dc.b    $22, $66, $02, $02, $01, $11, $02, $02, $01, $11, $03, $01, $11, $03, $01, $11
		dc.b    $03, $01, $11, $03, $01, $11, $03, $25, $11, $71, $00, $10, $11, $11, $11, $11
		dc.b    $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11
		dc.b    $11, $11, $11, $11, $11, $11, $11, $11, $11, $23, $26, $67, $10, $0D, $01, $50
		dc.b    $03, $01, $01, $04, $01, $07, $05, $2C, $22, $66, $71, $01, $00, $11, $11, $11
		dc.b    $00, $11, $11, $11, $00, $11, $11, $11, $00, $01, $11, $11, $00, $01, $11, $11
		dc.b    $00, $01, $11, $11, $00, $01, $11, $11, $21, $02, $BA, $32, $00, $03, $80, $88
		dc.b    $03, $10, $0B, $88, $02, $02, $03, $33, $03, $05, $30, $00, $30, $08, $03, $03
		dc.b    $0B, $80, $00, $01, $38, $08, $22, $30, $65, $99, $30, $10, $02, $05, $83, $00
		dc.b    $70, $00, $80, $03, $05, $23, $10, $04, $00, $11, $03, $01, $31, $03, $02, $83
		dc.b    $10, $02, $04, $80, $32, $13, $45, $03, $01, $70, $02, $01, $01, $03, $01, $30
		dc.b    $11, $04, $52, $23, $33, $24, $04, $01, $17, $03, $02, $50, $01, $05, $08, $08
		dc.b    $01, $00, $03, $00, $05, $70, $10, $04, $07, $38, $11, $61, $10, $03, $00, $30
		dc.b    $03, $01, $03, $02, $01, $88, $04, $02, $80, $30, $06, $02, $08, $03, $04, $15
		dc.b    $30, $AD, $BB, $00, $03, $17, $10, $33, $00, $01, $01, $10, $33, $00, $10, $01
		dc.b    $10, $00, $01, $00, $01, $02, $01, $11, $04, $01, $10, $03, $05, $01, $33, $30
		dc.b    $01, $16, $05, $05, $30, $10, $00, $33, $01, $02, $14, $11, $10, $00, $70, $70
		dc.b    $00, $07, $01, $77, $77, $70, $15, $07, $01, $01, $50, $33, $45, $40, $54, $03
		dc.b    $01, $17, $02, $01, $05, $04, $01, $10, $03, $01, $57, $03, $01, $04, $08, $20
		dc.b    $33, $44, $44, $33, $11, $67, $70, $77, $03, $31, $17, $70, $03, $8B, $31, $17
		dc.b    $10, $B8, $8B, $31, $71, $03, $B8, $83, $47, $61, $03, $B3, $04, $17, $11, $11
		dc.b    $02, $01, $70, $07, $01, $07, $02, $01, $01, $03, $01, $50, $0E, $24, $22, $27
		dc.b    $76, $01, $00, $01, $11, $11, $00, $01, $11, $11, $00, $01, $11, $11, $00, $11
		dc.b    $11, $11, $00, $11, $11, $11, $00, $11, $11, $11, $00, $11, $11, $11, $22, $23
		dc.b    $23, $26, $1C, $04, $44, $33, $22, $27, $03, $01, $01, $03, $01, $01, $03, $01
		dc.b    $01, $03, $01, $01, $03, $01, $01, $03, $01, $01, $04, $24, $66, $11, $10, $10
		dc.b    $00, $01, $11, $11, $00, $01, $11, $11, $00, $01, $11, $11, $00, $11, $11, $11
		dc.b    $00, $11, $11, $11, $00, $11, $11, $11, $00, $11, $11, $11, $22, $77, $60, $10
		dc.b    $06, $01, $07, $08, $02, $70, $05, $06, $03, $07, $00, $01, $02, $04, $37, $77
		dc.b    $76, $76, $02, $02, $11, $11, $02, $03, $01, $11, $01, $02, $05, $11, $00, $11
		dc.b    $00, $01, $02, $12, $11, $00, $07, $77, $00, $10, $71, $11, $77, $01, $DC, $CC
		dc.b    $DD, $AA, $33, $33, $33, $33, $08, $19, $03, $03, $03, $03, $33, $33, $33, $33
		dc.b    $33, $33, $33, $33, $33, $33, $33, $33, $03, $33, $03, $33, $00, $30, $00, $30
		dc.b    $30, $03, $03, $30, $00, $30, $03, $01, $30, $0D, $05, $88, $88, $8B, $AC, $88
		dc.b    $04, $01, $80, $03, $01, $80, $02, $06, $88, $00, $30, $00, $33, $33, $03, $01
		dc.b    $33, $02, $13, $33, $00, $30, $00, $11, $45, $21, $17, $00, $50, $00, $10, $00
		dc.b    $01, $70, $01, $00, $05, $17, $03, $02, $01, $77, $02, $2A, $01, $77, $00, $05
		dc.b    $17, $01, $00, $01, $70, $10, $19, $9D, $A2, $33, $08, $00, $08, $00, $30, $80
		dc.b    $00, $88, $13, $38, $80, $00, $01, $03, $38, $88, $77, $11, $13, $33, $66, $10
		dc.b    $01, $10, $00, $01, $11, $10, $04, $01, $33, $04, $01, $30, $02, $02, $80, $03
		dc.b    $02, $08, $80, $33, $00, $01, $33, $00, $01, $10, $02, $02, $01, $11, $04, $04
		dc.b    $01, $16, $72, $22, $02, $01, $15, $05, $01, $10, $04, $0E, $70, $15, $00, $77
		dc.b    $00, $50, $00, $77, $70, $40, $00, $11, $07, $04, $02, $03, $11, $67, $34, $02
		dc.b    $20, $01, $17, $30, $01, $00, $01, $03, $01, $11, $00, $80, $30, $10, $61, $08
		dc.b    $03, $31, $77, $00, $88, $00, $17, $88, $88, $00, $01, $55, $41, $12, $22, $70
		dc.b    $15, $02, $01, $07, $07, $02, $07, $15, $02, $01, $71, $03, $01, $01, $03, $01
		dc.b    $70, $03, $04, $34, $50, $54, $43, $1C, $0C, $32, $22, $66, $71, $00, $01, $11
		dc.b    $11, $00, $01, $11, $11, $02, $02, $11, $11, $02, $02, $11, $11, $02, $02, $11
		dc.b    $11, $02, $02, $01, $11, $02, $06, $01, $11, $32, $76, $60, $11, $1C, $04, $54
		dc.b    $17, $71, $10, $1C, $24, $66, $71, $00, $10, $11, $11, $11, $11, $01, $11, $11
		dc.b    $11, $01, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $11, $01, $11, $11
		dc.b    $11, $01, $11, $11, $11, $23, $23, $23, $23, $1C, $04, $32, $22, $22, $32, $02
		dc.b    $02, $01, $11, $02, $02, $11, $11, $02, $02, $11, $11, $02, $21, $11, $11, $00
		dc.b    $01, $11, $11, $00, $01, $11, $11, $00, $01, $11, $11, $32, $26, $76, $67, $00
		dc.b    $51, $16, $77, $05, $17, $70, $11, $00, $70, $11, $BB, $51, $01, $3B, $03, $01
		dc.b    $08, $07, $18, $30, $80, $10, $76, $74, $19, $77, $77, $11, $55, $11, $10, $77
		dc.b    $11, $33, $01, $10, $70, $80, $30, $01, $07, $00, $03, $02, $01, $08, $02, $01
		dc.b    $10, $04, $05, $88, $88, $30, $16, $08, $02, $01, $70, $04, $0E, $08, $00, $01
		dc.b    $00, $30, $88, $30, $00, $03, $33, $17, $15, $11, $11, $02, $10, $07, $70, $17
		dc.b    $15, $34, $17, $10, $67, $00, $07, $01, $03, $00, $10, $00, $38, $0F, $01, $38
		dc.b    $04, $05, $11, $51, $10, $00, $88, $04, $03, $03, $00, $03, $03, $01, $10, $03
		dc.b    $05, $11, $00, $80, $30, $01, $06, $14, $03, $00, $88, $83, $33, $00, $88, $03
		dc.b    $33, $30, $80, $88, $80, $03, $38, $00, $08, $80, $13, $80, $02, $0C, $01, $3B
		dc.b    $88, $83, $10, $11, $33, $31, $01, $10, $11, $10, $02, $02, $07, $33, $09, $02
		dc.b    $10, $70, $03, $13, $01, $00, $01, $07, $05, $00, $10, $70, $10, $00, $77, $11
		dc.b    $50, $00, $66, $77, $22, $23, $11, $02, $11, $10, $77, $61, $11, $07, $70, $06
		dc.b    $67, $70, $17, $71, $01, $11, $01, $07, $10, $55, $02, $0B, $01, $00, $11, $07
		dc.b    $01, $00, $07, $64, $45, $00, $70, $03, $02, $01, $50, $02, $01, $15, $03, $01
		dc.b    $50, $11, $02, $05, $44, $1C, $04, $33, $22, $37, $76, $02, $02, $11, $11, $02
		dc.b    $02, $01, $11, $02, $02, $01, $11, $02, $02, $11, $11, $02, $02, $11, $11, $02
		dc.b    $02, $01, $11, $02, $06, $01, $11, $33, $27, $67, $10, $1C, $04, $05, $41, $77
		dc.b    $11, $1C, $24, $27, $76, $01, $10, $00, $11, $11, $11, $00, $11, $11, $11, $01
		dc.b    $11, $11, $11, $01, $11, $11, $11, $00, $11, $11, $11, $00, $11, $11, $11, $00
		dc.b    $11, $11, $11, $22, $23, $23, $23, $3C, $07, $54, $32, $21, $11, $00, $01, $03
		dc.b    $03, $01, $10, $02, $17, $70, $00, $30, $51, $00, $01, $03, $00, $07, $00, $10
		dc.b    $05, $10, $00, $13, $05, $17, $01, $30, $9C, $52, $20, $32, $08, $0C, $88, $00
		dc.b    $30, $10, $30, $00, $30, $11, $30, $00, $03, $30, $03, $0C, $03, $08, $88, $80
		dc.b    $00, $5D, $AB, $B0, $24, $07, $10, $38, $03, $01, $3B, $02, $05, $11, $03, $00
		dc.b    $07, $70, $02, $0C, $10, $00, $13, $00, $51, $07, $01, $65, $05, $11, $66, $50
		dc.b    $11, $06, $0A, $00, $10, $00, $80, $00, $11, $60, $80, $60, $01, $05, $81, $D3
		dc.b    $2C, $00, $2D, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $80
		dc.b    $33, $80, $93, $00, $10, $00, $10, $00, $B0, $00, $12, $00, $10, $00, $10, $00
		dc.b    $70, $00, $70, $00, $DD, $08, $DE, $80, $90, $88, $91, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $80, $9D, $80, $9F, $00, $10, $00, $10, $80
		dc.b    $53, $80, $51, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00
		dc.b    $1E, $00, $12, $00, $10, $00, $10, $00, $1E, $00, $16, $00, $10, $00, $10, $00
		dc.b    $3F, $00, $39, $00, $10, $00, $10, $00, $12, $00, $16, $00, $10, $00, $10, $00
		dc.b    $F7, $00, $30, $00, $10, $00, $10, $80, $99, $80, $5A, $00, $10, $00, $10, $80
		dc.b    $71, $80, $73, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00
		dc.b    $1E, $00, $12, $00, $10, $00, $10, $00, $1E, $00, $16, $00, $10, $00, $10, $00
		dc.b    $DA, $00, $D4, $00, $10, $00, $10, $00, $97, $00, $70, $00, $10, $00, $10, $00
		dc.b    $70, $00, $30, $00, $10, $00, $10, $80, $52, $80, $FD, $00, $10, $00, $10, $00
		dc.b    $12, $00, $16, $00, $10, $00, $10, $00, $16, $00, $12, $00, $10, $00, $10, $00
		dc.b    $12, $00, $1E, $00, $10, $00, $10, $00, $1E, $00, $12, $00, $10, $00, $10, $00
		dc.b    $12, $00, $16, $00, $10, $00, $10, $80, $7C, $80, $74, $00, $10, $00, $10, $00
		dc.b    $1E, $00, $12, $00, $10, $00, $10, $00, $58, $00, $58, $00, $10, $00, $10, $00
		dc.b    $12, $00, $16, $00, $10, $00, $10, $00, $16, $00, $12, $00, $10, $00, $10, $00
		dc.b    $12, $00, $1E, $00, $10, $00, $10, $00, $1E, $00, $12, $00, $10, $00, $10, $00
		dc.b    $B2, $00, $B6, $00, $BE, $00, $10, $00, $B8, $00, $12, $00, $10, $00, $10, $00
		dc.b    $10, $00, $11, $00, $10, $00, $10, $00, $DC, $00, $DD, $00, $10, $00, $10, $00
		dc.b    $12, $00, $16, $00, $10, $00, $10, $00, $16, $00, $12, $00, $10, $00, $10, $00
		dc.b    $16, $00, $12, $00, $10, $00, $10, $00, $14, $00, $1C, $00, $10, $00, $10, $00
		dc.b    $1E, $00, $12, $00, $10, $00, $10, $00, $3A, $00, $FF, $00, $10, $00, $10, $00
		dc.b    $9E, $00, $5B, $00, $10, $00, $10, $00, $5D, $00, $5F, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $00, $D7, $00, $D5, $00, $10, $00, $10, $00
		dc.b    $D1, $00, $32, $00, $10, $00, $D3, $00, $12, $00, $30, $00, $93, $00, $91, $00
		dc.b    $38, $00, $F7, $00, $DD, $00, $10, $00, $12, $00, $DD, $00, $10, $00, $DF, $00
		dc.b    $16, $00, $16, $00, $10, $00, $10, $00, $34, $00, $34, $00, $10, $00, $10, $00
		dc.b    $12, $00, $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $00, $10, $00
		dc.b    $F4, $00, $35, $03, $03, $C0, $08, $C0, $02, $02, $08, $C0, $03, $01, $C3, $03
		dc.b    $57, $75, $00, $B7, $20, $6B, $20, $6A, $00, $03, $00, $03, $20, $46, $20, $47
		dc.b    $00, $20, $00, $30, $80, $30, $80, $84, $00, $B4, $00, $10, $00, $B5, $00, $B7
		dc.b    $00, $B7, $00, $B5, $80, $A6, $80, $A6, $00, $30, $00, $30, $00, $32, $00, $32
		dc.b    $00, $30, $00, $30, $00, $6C, $00, $12, $00, $10, $00, $6E, $00, $6C, $00, $6C
		dc.b    $00, $70, $00, $71, $00, $2C, $00, $2D, $00, $10, $00, $10, $00, $3E, $00, $3E
		dc.b    $00, $10, $00, $10, $00, $D8, $00, $30, $03, $07, $10, $00, $EA, $00, $33, $00
		dc.b    $10, $03, $03, $FA, $00, $22, $03, $05, $10, $00, $DA, $00, $32, $05, $03, $DA
		dc.b    $00, $32, $03, $05, $10, $00, $DA, $00, $22, $04, $04, $61, $DA, $00, $33, $03
		dc.b    $07, $10, $61, $FA, $00, $23, $00, $10, $03, $1B, $32, $00, $13, $00, $10, $00
		dc.b    $10, $00, $3E, $00, $3E, $00, $10, $00, $1B, $00, $2D, $00, $20, $00, $10, $00
		dc.b    $10, $00, $11, $00, $16, $04, $04, $01, $9D, $01, $9D, $0B, $01, $0F, $03, $03
		dc.b    $0F, $08, $0F, $02, $02, $08, $F8, $03, $80, $A7, $10, $00, $C7, $00, $D3, $00
		dc.b    $F4, $00, $10, $00, $10, $00, $24, $00, $23, $00, $22, $00, $21, $00, $12, $00
		dc.b    $1E, $00, $10, $00, $10, $08, $1F, $08, $1F, $08, $11, $00, $10, $00, $2E, $08
		dc.b    $20, $08, $21, $08, $22, $00, $12, $00, $16, $00, $10, $00, $10, $08, $F7, $08
		dc.b    $F7, $00, $10, $00, $10, $00, $16, $00, $12, $00, $10, $00, $10, $00, $12, $00
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated flowers in GHZ and HTZ ; ArtUnc_28000: ArtUnc_28080: ArtUnc_21800: ArtUnc_28180:
;---------------------------------------------------------------------------------------
ArtUnc_Flowers1:	BINCLUDE	"art/uncompressed/GHZ and HTZ flowers - 1.bin"
ArtUnc_Flowers2:	BINCLUDE	"art/uncompressed/GHZ and HTZ flowers - 2.bin"
ArtUnc_Flowers3:	BINCLUDE	"art/uncompressed/GHZ and HTZ flowers - 3.bin"
ArtUnc_Flowers4:	BINCLUDE	"art/uncompressed/GHZ and HTZ flowers - 4.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing thing against checkered backing from GHZ ; ArtUnc_28200: Ghz_Dyn_Wall:
ArtUnc_GHZPulseBall:	BINCLUDE	"art/uncompressed/Pulsing ball against checkered background (GHZ).bin"



Hill_Top_Background:     ; loc_28300:
		BINCLUDE  "data\htz\backgnd.nem"
Hill_Top_Background_Unc: ; loc_28C2A:		
		BINCLUDE  "data\htz\backgnd.dat"		    
;---------------------------------------------------------------------------------------
; Uncompressed art
; Spinning metal cylinder patterns in MTZ	; ArtUnc_2902A: Mz_Spinnig_Cylinder:
ArtUnc_MTZCylinder:	BINCLUDE	"art/uncompressed/Spinning metal cylinder (MTZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Lava patterns in MTZ and HTZ			; ArtUnc_2A02A: Mz_Lava:
ArtUnc_Lava:	BINCLUDE	"art/uncompressed/Lava.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Animated section of MTZ background		; ArtUnc_2A06A: Mz_Pistons:
ArtUnc_MTZAnimBack:	BINCLUDE	"art/uncompressed/Animated section of MTZ background.bin"

Mz_Drills:               ; loc_2A86A:
		BINCLUDE  "data\mz\drills.dat"				               
HPz_Dyn_Background:      ; loc_2B06A: Unused - Left over from previous build
		BINCLUDE  "data\hpz\backgnd.dat" 
;---------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing orb in HPZ				; ArtUnc_2B46A: HPz_Orbs:
ArtUnc_HPZPulseOrb:	BINCLUDE	"art/uncompressed/Pulsing orb (HPZ).bin"
; --------------------------------------------------------------------------------------
; Uncompressed art
; Pulsing ball in OOZ 				; ArtUnc_2B76A: Ooz_Red_Balls:
ArtUnc_OOZPulseBall:	BINCLUDE	"art/uncompressed/Pulsing ball (OOZ).bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Square rotating around ball in OOZ	 	; ArtUnc_2B8EA: ArtUnc_2BAEA:
ArtUnc_OOZSquareBall1:	BINCLUDE	"art/uncompressed/Square rotating around ball in OOZ - 1.bin"
ArtUnc_OOZSquareBall2:	BINCLUDE	"art/uncompressed/Square rotating around ball in OOZ - 2.bin"
;---------------------------------------------------------------------------------------
; Uncompressed art
; Oil in OOZ    				; ArtUnc_2BCEA: ArtUnc_2C4EA:
ArtUnc_Oil1:	BINCLUDE	"art/uncompressed/Oil - 1.bin"
ArtUnc_Oil2:	BINCLUDE	"art/uncompressed/Oil - 2.bin"

CPz_Dyn_Background:      ; loc_2CCEA:
		BINCLUDE  "data\cpz\backgnd.dat"  
NGHz_Water_Falls_1:      ; loc_2CEEA:
		BINCLUDE  "data\nghz\water_f1.dat"		
NGHz_Water_Falls_2:      ; loc_2CFEA:
		BINCLUDE  "data\nghz\water_f2.dat"		 
NGHz_Water_Falls_3:      ; loc_2D0EA:
		BINCLUDE  "data\nghz\water_f3.dat" 
;=============================================================================== 
; Colision Array
; [ Begin ]
;===============================================================================		 
AngleMap: ; loc_2D1EA:  
		BINCLUDE	"level/collision/Curve and resistance mappings.bin"
Colision_Array_1: ; loc_2D2EA: 
		BINCLUDE	"level/collision/Collision array 1.bin"
Colision_Array_2: ; loc_2E2EA: 
		BINCLUDE	"level/collision/Collision array 2.bin"
;=============================================================================== 
; Colision Array
; [ End ]
;===============================================================================		  
;=============================================================================== 
; 16x16 Colision Index
; [ Begin ]
;===============================================================================				          
Green_Hill_Colision_1:     ; loc_2F2EA:		
		BINCLUDE	"level/collision/GHZ primary 16x16 collision index.bin"
Green_Hill_Colision_2:     ; loc_2F5EA:		
		BINCLUDE	"level/collision/GHZ secondary 16x16 collision index.bin"
Wood_Colision:             ; loc_2F8EA:
		BINCLUDE	"level/collision/WZ 16x16 collision index.bin"
Metropolis_Colision:       ; loc_2FBEA:
		BINCLUDE	"level/collision/MTZ 16x16 collision index.bin"
Hidden_Palace_Colision_1:  ; loc_2FEEA:		
		BINCLUDE	"level/collision/HPZ primary 16x16 collision index.bin"
Hidden_Palace_Colision_2:  ; loc_301EA:		
		BINCLUDE	"level/collision/HPZ secondary 16x16 collision index.bin"
Oil_Ocean_Colision:        ; loc_304EA:		
		BINCLUDE	"level/collision/OOZ 16x16 collision index.bin"
Dust_Hill_Colision:        ; loc_307EA:		
		BINCLUDE	"level/collision/DHZ 16x16 collision index.bin"
Casino_Night_Colision_1:   ; loc_30AEA:		
		BINCLUDE	"level/collision/CNZ primary 16x16 collision index.bin"
Casino_Night_Colision_2:   ; loc_30DEA:		
		BINCLUDE	"level/collision/CNZ secondary 16x16 collision index.bin"
Chemical_Plant_Colision_1: ; loc_310EA:		
		BINCLUDE	"level/collision/CPZ primary 16x16 collision index.bin"
Chemical_Plant_Colision_2: ; loc_313EA:		
		BINCLUDE	"level/collision/CPZ secondary 16x16 collision index.bin"
Neo_Green_Hill_Colision_1: ; loc_316EA:		
		BINCLUDE	"level/collision/NGHZ primary 16x16 collision index.bin"
Neo_Green_Hill_Colision_2: ; loc_319EA:		
		BINCLUDE	"level/collision/NGHZ secondary 16x16 collision index.bin"
;=============================================================================== 
; 16x16 Colision Index
; [ End ]
;===============================================================================		  
;=============================================================================== 
; Special Stage Layout
; [ Begin ]
;===============================================================================        
Special_Stage_1: ; loc_31CEA:
		BINCLUDE  ".\data\ss\stage_1.eni"  
Special_Stage_2: ; loc_31F64:
		BINCLUDE  ".\data\ss\stage_2.eni"  
Special_Stage_3: ; loc_32376:        
		BINCLUDE  ".\data\ss\stage_3.eni"  
Special_Stage_4: ; loc_326D2:
		BINCLUDE  ".\data\ss\stage_4.eni"  
Special_Stage_5: ; loc_32BAC:
		BINCLUDE  ".\data\ss\stage_5.eni"  
Special_Stage_6: ; loc_3305C:
		BINCLUDE  ".\data\ss\stage_6.eni"						               
;=============================================================================== 
; Special Stage Layout
; [ End ]
;===============================================================================  
;=============================================================================== 
; Level Layout
; [ Begin ]
;===============================================================================		  
; off_3334E;
Off_Level: zoneOrderedOffsetTable 2,4
	zoneOffsetTableEntry.w Ghz_1_Foreground
	zoneOffsetTableEntry.w Ghz_Background ; $0000
	zoneOffsetTableEntry.w Ghz_2_Foreground
	zoneOffsetTableEntry.w Ghz_Background ; $0001		
	zoneOffsetTableEntry.w Null_Layout_1
	zoneOffsetTableEntry.w Null_Layout_1 ; $0100
	zoneOffsetTableEntry.w Null_Layout_1
	zoneOffsetTableEntry.w Null_Layout_1 ; $0101		
	zoneOffsetTableEntry.w Wz_1_Foreground
	zoneOffsetTableEntry.w Wz_1_Background ; $0200
	zoneOffsetTableEntry.w Wz_2_Foreground
	zoneOffsetTableEntry.w Wz_2_Background ; $0201
	zoneOffsetTableEntry.w Null_Layout_2
	zoneOffsetTableEntry.w Null_Layout_2 ; $0300
	zoneOffsetTableEntry.w Null_Layout_2
	zoneOffsetTableEntry.w Null_Layout_2 ; $0301
	zoneOffsetTableEntry.w Mz_1_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0400
	zoneOffsetTableEntry.w Mz_2_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0401
	zoneOffsetTableEntry.w Mz_3_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0500
	zoneOffsetTableEntry.w Mz_3_Foreground
	zoneOffsetTableEntry.w Mz_Background ; $0501		  
	zoneOffsetTableEntry.w Null_Layout_3
	zoneOffsetTableEntry.w Null_Layout_3 ; $0600
	zoneOffsetTableEntry.w Null_Layout_3
	zoneOffsetTableEntry.w Null_Layout_3 ; $0601
	zoneOffsetTableEntry.w Htz_1_Foreground
	zoneOffsetTableEntry.w Htz_1_Background ; $0700
	zoneOffsetTableEntry.w Htz_2_Foreground
	zoneOffsetTableEntry.w Htz_2_Background ; $0701
	zoneOffsetTableEntry.w Hpz_Foreground
	zoneOffsetTableEntry.w Hpz_Background ; $0800
	zoneOffsetTableEntry.w Hpz_Foreground
	zoneOffsetTableEntry.w Hpz_Background ; $0801
	zoneOffsetTableEntry.w Null_Layout_4
	zoneOffsetTableEntry.w Null_Layout_4 ; $0900
	zoneOffsetTableEntry.w Null_Layout_4
	zoneOffsetTableEntry.w Null_Layout_4 ; $0901
	zoneOffsetTableEntry.w OOz_1_Foreground
	zoneOffsetTableEntry.w OOz_Background ; $0A00
	zoneOffsetTableEntry.w OOz_2_Foreground
	zoneOffsetTableEntry.w OOz_Background ; $0A01
	zoneOffsetTableEntry.w Dhz_1_Foreground
	zoneOffsetTableEntry.w Dhz_Background ; $0B00
	zoneOffsetTableEntry.w Dhz_2_Foreground
	zoneOffsetTableEntry.w Dhz_Background ; $0B01
	zoneOffsetTableEntry.w Cnz_1_Foreground
	zoneOffsetTableEntry.w Cnz_1_Background ; $0C00
	zoneOffsetTableEntry.w Cnz_2_Foreground
	zoneOffsetTableEntry.w Cnz_2_Background ; $0C01
	zoneOffsetTableEntry.w Cpz_1_Foreground
	zoneOffsetTableEntry.w Cpz_Background ; $0D00
	zoneOffsetTableEntry.w Cpz_2_Foreground
	zoneOffsetTableEntry.w Cpz_Background ; $0D01
	zoneOffsetTableEntry.w Null_Layout_5
	zoneOffsetTableEntry.w Null_Layout_5 ; $0E00
	zoneOffsetTableEntry.w Null_Layout_5
	zoneOffsetTableEntry.w Null_Layout_5 ; $0E01
	zoneOffsetTableEntry.w Nghz_1_Foreground
	zoneOffsetTableEntry.w Nghz_1_Background ; $0F00
	zoneOffsetTableEntry.w Nghz_2_Foreground
	zoneOffsetTableEntry.w Nghz_2_Background ; $0F01
	zoneOffsetTableEntry.w Null_Layout_6
	zoneOffsetTableEntry.w Null_Layout_6 ; $1000
	zoneOffsetTableEntry.w Null_Layout_6
	zoneOffsetTableEntry.w Null_Layout_6 ; $1001
    zoneTableEnd

Ghz_1_Foreground:  ; loc_333D6:               
		BINCLUDE	"level/layout/GHZ_1.bin"
Ghz_2_Foreground:  ; loc_33BD8:		
		BINCLUDE	"level/layout/GHZ_2.bin"

Ghz_Background:    ; loc_343DA:            
		BINCLUDE	"level/layout/GHZ_BG.bin"
Null_Layout_1:     ; loc_343E4:             
		dc.b    $00, $00, $00, $00		  
Wz_1_Foreground:   ; loc_343E8:           
		BINCLUDE	"level/layout/WZ_1.bin"
Wz_2_Foreground:   ; loc_34BEA: 
		BINCLUDE	"level/layout/WZ_2.bin"
Wz_1_Background:   ; loc_353EC: 
		BINCLUDE	"level/layout/WZ_1_BG.bin"
Wz_2_Background:   ; loc_35BEE:  
		BINCLUDE	"level/layout/WZ_2_BG.bin"
Null_Layout_2:     ; loc_363F0:             
		dc.b    $00, $00, $00, $00		  
Mz_1_Foreground:   ; loc_363F4: 
		BINCLUDE	"level/layout/MTZ_1.bin"
Mz_2_Foreground:   ; loc_36BF6: 
		BINCLUDE	"level/layout/MTZ_2.bin"
Mz_Background:     ; loc_373F8:            
		BINCLUDE	"level/layout/MTZ_BG.bin"          
Mz_3_Foreground:   ; loc_3741E:  
		BINCLUDE	"level/layout/MTZ_3.bin"
Null_Layout_3:     ; loc_37C20:            
		dc.b    $00, $00, $00, $00						
Htz_1_Foreground:  ; loc_37C24: 
		BINCLUDE	"level/layout/HTZ_1.bin"
Htz_2_Foreground:  ; loc_38426:  
		BINCLUDE	"level/layout/HTZ_2.bin"
Htz_1_Background:  ; loc_38C28:              
		BINCLUDE	"level/layout/HTZ_1_BG.bin"
Htz_2_Background:  ; loc_3942A:               
		BINCLUDE	"level/layout/HTZ_2_BG.bin"
Hpz_Foreground:    ; loc_39C2C:  
		BINCLUDE	"level/layout/HPZ_1.bin"
Hpz_Background:    ; loc_3942E:		             
		BINCLUDE	"level/layout/HPZ_BG.bin"
Null_Layout_4:     ; loc_3A478:            
		dc.b    $00, $00, $00, $00				          
OOz_1_Foreground:  ; loc_3A47C:  
		BINCLUDE	"level/layout/OOZ_1.bin"
OOz_2_Foreground:  ; loc_3AC7E:   
		BINCLUDE	"level/layout/OOZ_2.bin"
OOz_Background:    ; loc_3B480:             
		BINCLUDE	"level/layout/OOZ_BG.bin"
Dhz_1_Foreground:  ; loc_3B49A:  
		BINCLUDE	"level/layout/DHZ_1.bin"
Dhz_2_Foreground:  ; loc_3BC9C:               
		BINCLUDE	"level/layout/DHZ_2.bin"
Dhz_Background:    ; loc_3C49E:              
		BINCLUDE	"level/layout/DHZ_BG.bin"
Cnz_1_Foreground:  ; loc_3C4B0:  
		BINCLUDE	"level/layout/CNZ_1.bin"
Cnz_2_Foreground:  ; loc_3CCB2:          
		BINCLUDE	"level/layout/CNZ_2.bin"
Cnz_1_Background:  ; loc_3D4B4:
		BINCLUDE	"level/layout/CNZ_1_BG.bin"
Cnz_2_Background:  ; loc_3DCB6: 
		BINCLUDE	"level/layout/CNZ_2_BG.bin"
Cpz_1_Foreground:  ; loc_3DCC0:  
		BINCLUDE	"level/layout/CPZ_1.bin"
Cpz_2_Foreground:  ; loc_3E4C2: 
		BINCLUDE	"level/layout/CPZ_2.bin"
Cpz_Background:    ; loc_3ECC4: 
		BINCLUDE	"level/layout/CPZ_BG.bin"
Null_Layout_5:     ; loc_3ECF0:            
		dc.b    $00, $00, $00, $00      
Nghz_1_Foreground: ; loc_3ECF4:    
		BINCLUDE	"level/layout/NGHZ_1.bin"
Nghz_2_Foreground: ; loc_3F4F6: 
		BINCLUDE	"level/layout/NGHZ_2.bin"
Nghz_1_Background: ; loc_3ECF8:  
		BINCLUDE	"level/layout/NGHZ_1_BG.bin"
Nghz_2_Background: ; loc_404FA:  
		BINCLUDE	"level/layout/NGHZ_2_BG.bin"
Null_Layout_6:     ; loc_40CFC:             
		dc.b    $00, $00, $00, $00    
;=============================================================================== 
; Level Object Layout
; [ End ]
;===============================================================================		    
loc_40D00: ; Big Ring - Left Over from Sonic 1		
		BINCLUDE  "data\sprites\bigring.dat"
loc_41940: ; Neo Green Hill Foreground Act 2 overwrite by Big Ring- Left Over from previous build ???		 
		BINCLUDE  "data\nghz\fgunused.dat"  
loc_41B72: ; Neo Green Hill Background Act 1 - Left Over from previous build ???		 
		BINCLUDE  "data\nghz\backact1.dat"				
loc_42374: ; Neo Green Hill Background Act 2 - Left Over from previous build ???		 
		BINCLUDE  "data\nghz\bgunused.dat"  
loc_42B76: ; Filler for Null Level Layout - Left Over from previous build ???				
		dc.b    $00, $00, $00, $00				    
loc_42B7A: ; Another Big Ring - Left Over from Sonic 1  
		BINCLUDE  "data\sprites\bigring.dat"       
Unknow_Pallete_0x0437BA: ; loc_437BA:
		dc.w    $0000, $0262, $02A4, $04E8, $0000, $0EEE		
Unknow_Data_0x0437C6: ; loc_437C6:
		dc.b    $20, $00, $00, $2D, $01, $20, $02, $02, $02, $12, $03, $02, $C6, $20, $02, $03
		dc.b    $0B, $72, $20, $02, $06, $AD, $62, $02, $FF, $DC, $61, $02, $02, $01, $66, $02
		dc.b    $06, $07, $B1, $00, $02, $6A, $A0, $02, $01, $10, $02, $01, $21, $06, $09, $20
		dc.b    $00, $1A, $00, $12, $66, $1A, $AB, $16, $03, $01, $10, $03, $02, $10, $01, $03
		dc.b    $01, $01, $02, $52, $07, $01, $6D, $DD, $10, $67, $77, $DD, $01, $66, $BA, $00
		dc.b    $76, $06, $CD, $DD, $BB, $BC, $CD, $DD, $DD, $CB, $BA, $AA, $66, $06, $67, $77
		dc.b    $BB, $66, $66, $61, $00, $A1, $00, $70, $00, $B1, $07, $07, $0A, $01, $16, $60
		dc.b    $C1, $B0, $67, $76, $CB, $B6, $11, $67, $BC, $61, $17, $BA, $61, $16, $71, $00
		dc.b    $11, $00, $67, $DD, $00, $06, $66, $D6, $70, $16, $1B, $0B, $01, $11, $A0, $00
		dc.b    $60, $35, $FF, $FF, $76, $32, $02, $03, $AB, $66, $20, $02, $09, $A1, $10, $00
		dc.b    $B0, $A0, $02, $00, $6D, $77, $02, $06, $06, $76, $11, $20, $66, $AB, $02, $04
		dc.b    $42, $FF, $23, $02, $02, $06, $22, $16, $00, $02, $16, $6B, $02, $05, $7B, $A0
		dc.b    $00, $21, $10, $02, $05, $07, $A0, $00, $02, $11, $06, $16, $20, $16, $A0, $BC
		dc.b    $66, $11, $6B, $BC, $BB, $76, $16, $CB, $00, $B0, $61, $16, $00, $01, $17, $11
		dc.b    $00, $0A, $05, $01, $70, $02, $26, $01, $00, $DD, $DC, $61, $07, $DD, $DC, $CB
		dc.b    $BB, $BA, $AB, $BC, $DD, $67, $76, $60, $66, $11, $66, $66, $BB, $70, $70, $1A
		dc.b    $00, $77, $07, $1B, $00, $70, $76, $10, $A0, $44, $45, $56, $7D, $02, $02, $02
		dc.b    $20, $03, $01, $02, $16, $0A, $22, $33, $00, $02, $16, $66, $00, $21, $70, $10
		dc.b    $03, $05, $10, $02, $17, $00, $10, $03, $05, $11, $21, $70, $00, $11, $03, $0B
		dc.b    $11, $67, $00, $11, $0B, $BB, $BB, $AA, $A0, $A0, $A0, $02, $02, $0A, $AA, $03
		dc.b    $01, $AA, $03, $01, $AA, $03, $01, $AA, $03, $01, $AA, $02, $05, $01, $A0, $A0
		dc.b    $00, $11, $03, $01, $11, $03, $01, $11, $03, $01, $11, $03, $01, $11, $03, $01
		dc.b    $11, $03, $01, $11, $03, $0E, $FE, $FC, $F5, $54, $11, $31, $30, $01, $03, $00
		dc.b    $03, $01, $00, $10, $06, $06, $01, $00, $10, $00, $10, $F0, $02, $14, $01, $00
		dc.b    $01, $00, $03, $FF, $F0, $20, $B1, $2E, $F0, $10, $0B, $A2, $33, $20, $00, $0B
		dc.b    $BB, $BB, $10, $04, $22, $22, $22, $22, $04, $01, $20, $03, $01, $02, $04, $01
		dc.b    $20, $05, $05, $01, $00, $02, $00, $11, $03, $05, $11, $02, $FF, $DD, $DC, $02
		dc.b    $01, $A0, $02, $3D, $A0, $AA, $A0, $00, $10, $00, $0A, $00, $70, $00, $11, $02
		dc.b    $0A, $00, $07, $00, $11, $00, $70, $00, $27, $0A, $01, $32, $20, $CB, $71, $C6
		dc.b    $01, $07, $71, $0B, $70, $10, $16, $A0, $A1, $01, $11, $1A, $07, $10, $60, $66
		dc.b    $B0, $01, $10, $01, $70, $71, $71, $01, $17, $00, $16, $17, $7C, $BD, $DD, $71
		dc.b    $A0, $02, $01, $1A, $03, $03, $A0, $0A, $AA, $02, $73, $0A, $07, $A0, $A0, $00
		dc.b    $A6, $70, $1B, $BA, $01, $0A, $66, $67, $C1, $06, $DD, $D0, $16, $76, $00, $D1
		dc.b    $DD, $71, $00, $0C, $00, $76, $00, $0A, $0B, $70, $00, $06, $A6, $D6, $00, $D1
		dc.b    $10, $AB, $00, $07, $61, $7B, $00, $0A, $61, $16, $CD, $B0, $B0, $C7, $11, $00
		dc.b    $A0, $B1, $00, $0A, $10, $07, $10, $01, $00, $61, $17, $70, $70, $D6, $11, $77
		dc.b    $00, $A7, $1A, $B7, $01, $11, $60, $01, $10, $61, $0D, $0A, $01, $03, $76, $0A
		dc.b    $01, $10, $1B, $A1, $07, $72, $0B, $17, $0B, $10, $06, $61, $70, $00, $0D, $60
		dc.b    $AA, $10, $0A, $70, $B1, $70, $01, $11, $67, $12, $26, $66, $DC, $DF, $05, $02
		dc.b    $01, $A0, $06, $02, $01, $0A, $02, $07, $10, $A0, $BA, $21, $0A, $0A, $11, $03
		dc.b    $08, $01, $DC, $A0, $AA, $16, $00, $0A, $01, $04, $01, $77, $02, $01, $10, $02
		dc.b    $15, $A1, $07, $00, $AB, $10, $61, $10, $10, $06, $67, $16, $00, $66, $BA, $10
		dc.b    $01, $71, $00, $DD, $00, $0A, $0E, $02, $07, $7D, $02, $06, $67, $61, $D0, $00
		dc.b    $7A, $B7, $02, $04, $5F, $F4, $2F, $FD, $03, $01, $21, $02, $1E, $02, $17, $02
		dc.b    $22, $30, $16, $20, $11, $16, $67, $06, $70, $60, $10, $06, $77, $06, $77, $00
		dc.b    $10, $61, $16, $16, $60, $66, $71, $70, $00, $01, $10, $02, $1A, $10, $10, $66
		dc.b    $00, $11, $77, $76, $77, $07, $06, $01, $11, $61, $6B, $71, $60, $06, $AB, $66
		dc.b    $10, $0A, $B6, $17, $0D, $D0, $BD, $02, $01, $A0, $02, $1B, $AA, $A0, $00, $77
		dc.b    $D7, $DC, $00, $DD, $DD, $77, $D0, $AA, $AA, $AB, $1D, $77, $77, $BA, $60, $7D
		dc.b    $77, $61, $A0, $0A, $00, $60, $B7, $02, $03, $11, $10, $10, $03, $0C, $10, $11
		dc.b    $11, $10, $01, $75, $57, $71, $17, $20, $02, $27, $04, $0C, $10, $20, $00, $20
		dc.b    $12, $05, $44, $67, $00, $01, $01, $67, $02, $06, $67, $02, $10, $01, $02, $20
		dc.b    $02, $04, $20, $00, $02, $20, $06, $0F, $17, $07, $52, $22, $00, $46, $13, $33
		dc.b    $70, $11, $15, $00, $25, $77, $71, $02, $03, $22, $07, $50, $02, $01, $22, $07
		dc.b    $01, $02, $02, $07, $02, $56, $50, $11, $13, $66, $33, $02, $01, $01, $03, $01
		dc.b    $01, $04, $01, $07, $03, $01, $07, $03, $01, $07, $07, $09, $70, $00, $02, $7C
		dc.b    $16, $00, $02, $7A, $A6, $02, $02, $27, $A1, $03, $01, $6A, $02, $02, $02, $1B
		dc.b    $03, $01, $26, $03, $01, $02, $04, $05, $33, $32, $32, $24, $17, $04, $3B, $70
		dc.b    $11, $06, $66, $00, $17, $66, $B6, $10, $71, $B1, $CB, $A1, $0A, $0A, $1D, $C7
		dc.b    $BA, $DC, $22, $1B, $A7, $17, $5F, $DB, $70, $06, $A0, $01, $10, $10, $B0, $01
		dc.b    $10, $17, $6D, $D6, $01, $7A, $66, $11, $17, $B0, $B1, $71, $01, $00, $C1, $11
		dc.b    $17, $BA, $66, $67, $61, $67, $AD, $CB, $11, $6D, $02, $02, $A0, $7A, $02, $02
		dc.b    $01, $11, $02, $02, $07, $07, $02, $02, $01, $11, $03, $01, $71, $02, $02, $A0
		dc.b    $07, $05, $03, $0A, $17, $07, $03, $07, $07, $00, $01, $70, $01, $AA, $A7, $02
		dc.b    $08, $66, $60, $11, $01, $11, $11, $10, $76, $02, $14, $11, $12, $10, $00, $22
		dc.b    $20, $10, $17, $42, $00, $10, $61, $62, $00, $70, $76, $20, $00, $01, $02, $02
		dc.b    $02, $71, $20, $02, $01, $12, $03, $01, $20, $07, $04, $24, $FF, $FF, $55, $02
		dc.b    $10, $0A, $16, $00, $0A, $B6, $77, $00, $B1, $06, $61, $07, $01, $BA, $AA, $00
		dc.b    $1A, $02, $01, $07, $04, $01, $A0, $02, $0E, $60, $DA, $0B, $DB, $76, $6A, $00
		dc.b    $61, $16, $10, $0B, $BA, $10, $A0, $02, $01, $70, $03, $1A, $10, $A0, $00, $AB
		dc.b    $00, $1A, $AA, $10, $00, $01, $11, $00, $0B, $B0, $66, $BB, $A0, $A0, $06, $D0
		dc.b    $00, $16, $D1, $00, $0B, $6D, $02, $14, $B0, $D0, $A1, $00, $0B, $00, $16, $7D
		dc.b    $0A, $00, $6D, $A0, $01, $AB, $D0, $A0, $67, $70, $DC, $16, $03, $01, $01, $03
		dc.b    $01, $01, $03, $01, $01, $03, $01, $01, $03, $01, $01, $03, $01, $01, $03, $06
		dc.b    $01, $71, $76, $0C, $60, $10, $03, $01, $10, $03, $01, $10, $03, $01, $10, $03
		dc.b    $01, $10, $03, $01, $10, $03, $01, $10, $03, $04, $1D, $0D, $DD, $D7, $1C, $0D
		dc.b    $0B, $6C, $C1, $C6, $01, $77, $77, $71, $10, $11, $11, $10, $51, $03, $18, $25
		dc.b    $10, $00, $01, $62, $51, $00, $17, $07, $47, $46, $12, $57, $66, $22, $62, $57
		dc.b    $24, $75, $77, $01, $20, $01, $10, $03, $01, $01, $04, $02, $10, $70, $02, $16
		dc.b    $70, $00, $11, $16, $20, $00, $05, $52, $20, $00, $02, $22, $06, $75, $03, $33
		dc.b    $77, $71, $50, $00, $11, $10, $04, $16, $50, $00, $01, $11, $15, $00, $67, $77
		dc.b    $71, $00, $22, $20, $71, $00, $22, $56, $15, $00, $33, $45, $73, $34, $03, $01
		dc.b    $70, $03, $01, $70, $03, $01, $70, $03, $01, $70, $03, $01, $70, $03, $01, $70
		dc.b    $03, $05, $70, $22, $22, $01, $66, $06, $0F, $01, $01, $00, $10, $11, $11, $11
		dc.b    $11, $11, $11, $10, $10, $10, $10, $10, $02, $11, $70, $00, $07, $07, $77, $33
		dc.b    $01, $06, $6B, $02, $60, $10, $A0, $00, $A1, $00, $A0, $03, $01, $10, $03, $1C
		dc.b    $7A, $00, $A1, $10, $11, $02, $6A, $70, $06, $00, $1A, $B1, $00, $42, $06, $C7
		dc.b    $66, $70, $07, $C6, $77, $10, $07, $00, $11, $00, $01, $A0, $03, $01, $10, $03
		dc.b    $01, $60, $02, $01, $07, $03, $01, $0A, $02, $10, $DD, $DA, $76, $61, $BB, $B1
		dc.b    $17, $70, $BB, $BB, $B6, $67, $B0, $BB, $06, $61, $03, $13, $01, $B0, $BB, $A6
		dc.b    $61, $BB, $BB, $16, $66, $BB, $11, $17, $77, $CC, $67, $54, $44, $11, $10, $02
		dc.b    $02, $76, $60, $02, $01, $67, $07, $01, $77, $03, $02, $66, $60, $02, $02, $66
		dc.b    $10, $02, $06, $77, $71, $44, $44, $70, $07, $02, $07, $77, $00, $01, $11, $70
		dc.b    $01, $10, $02, $01, $10, $02, $01, $01, $02, $06, $AA, $11, $00, $0A, $00, $11
		dc.b    $03, $17, $61, $AA, $A0, $0A, $07, $A0, $0A, $A0, $21, $1A, $A0, $11, $00, $71
		dc.b    $11, $00, $02, $17, $00, $77, $00, $21, $77, $02, $02, $02, $11, $03, $08, $22
		dc.b    $11, $44, $34, $44, $66, $00, $17, $02, $08, $07, $00, $77, $00, $70, $11, $10
		dc.b    $77, $02, $02, $01, $11, $04, $02, $01, $10, $02, $08, $12, $22, $01, $16, $64
		dc.b    $44, $76, $76, $02, $1E, $16, $76, $00, $07, $71, $1B, $77, $70, $10, $1B, $11
		dc.b    $11, $01, $60, $00, $01, $17, $AB, $11, $10, $07, $CB, $77, $76, $66, $CB, $67
		dc.b    $61, $76, $BB, $03, $01, $01, $03, $02, $01, $01, $02, $16, $70, $00, $10, $61
		dc.b    $16, $16, $77, $66, $67, $17, $71, $06, $01, $21, $10, $10, $66, $50, $70, $1D
		dc.b    $07, $10, $03, $01, $10, $02, $02, $01, $10, $02, $15, $66, $66, $10, $0A, $B6
		dc.b    $71, $70, $01, $AB, $16, $11, $16, $6B, $61, $01, $10, $16, $7D, $7D, $D0, $D0
		dc.b    $06, $01, $A0, $02, $0B, $0A, $76, $00, $7D, $77, $61, $A0, $DD, $DD, $BA, $60
		dc.b    $02, $16, $BC, $11, $DD, $DD, $61, $01, $27, $31, $71, $37, $00, $22, $16, $26
		dc.b    $05, $65, $71, $62, $00, $54, $61, $02, $02, $02, $55, $56, $03, $01, $05, $08
		dc.b    $04, $55, $31, $54, $33, $03, $0E, $66, $61, $20, $01, $05, $20, $00, $05, $50
		dc.b    $07, $02, $50, $00, $42, $04, $01, $50, $02, $02, $04, $07, $02, $02, $60, $14
		dc.b    $02, $02, $65, $50, $02, $01, $50, $17, $0A, $0B, $BA, $88, $89, $B1, $32, $FF
		dc.b    $01, $02, $0F, $02, $04, $10, $F0, $00, $F0, $04, $01, $3F, $07, $01, $10, $02
		dc.b    $0B, $0F, $2D, $DE, $F0, $00, $30, $31, $F0, $00, $10, $1F, $06, $02, $03, $0F
		dc.b    $03, $0E, $10, $FF, $FF, $01, $33, $00, $01, $00, $31, $21, $23, $FF, $ED, $30
		dc.b    $02, $06, $FE, $31, $DD, $0F, $00, $30, $03, $0F, $01, $F0, $F0, $11, $10, $1F
		dc.b    $00, $1F, $F1, $01, $1F, $F0, $0F, $E0, $E0, $02, $0D, $0E, $FF, $FE, $DD, $77
		dc.b    $FF, $01, $22, $9A, $00, $FF, $00, $13, $02, $02, $F0, $01, $04, $03, $F0, $00
		dc.b    $0F, $05, $01, $1F, $03, $07, $93, $DD, $EE, $22, $0B, $11, $23, $02, $03, $BB
		dc.b    $01, $11, $02, $02, $BB, $BB, $10, $04, $AA, $AA, $AA, $AA, $04, $0C, $11, $10
		dc.b    $01, $11, $00, $01, $11, $23, $BB, $B0, $13, $10, $02, $01, $31, $03, $01, $10
		dc.b    $05, $0A, $AA, $B0, $23, $33, $11, $01, $01, $10, $01, $23, $02, $07, $32, $00
		dc.b    $30, $01, $0F, $10, $03, $04, $02, $30, $F0, $07, $04, $CC, $32, $22, $21, $02
		dc.b    $08, $12, $22, $01, $23, $21, $10, $03, $10, $02, $01, $01, $06, $03, $01, $00
		dc.b    $0F, $02, $16, $01, $00, $F0, $00, $02, $3D, $E1, $12, $11, $01, $23, $30, $33
		dc.b    $11, $01, $11, $00, $30, $11, $11, $00, $03, $04, $01, $33, $04, $02, $33, $10
		dc.b    $03, $04, $23, $33, $33, $32, $03, $04, $10, $11, $11, $11, $04, $02, $01, $11
		dc.b    $02, $01, $10, $03, $04, $03, $30, $00, $01, $04, $0B, $30, $21, $00, $01, $22
		dc.b    $00, $01, $11, $11, $01, $10, $02, $09, $10, $33, $33, $33, $33, $11, $11, $11
		dc.b    $01, $02, $01, $01, $03, $08, $12, $01, $00, $01, $20, $22, $33, $32, $05, $01
		dc.b    $11, $04, $01, $10, $02, $15, $30, $10, $00, $11, $21, $00, $11, $03, $00, $11
		dc.b    $33, $30, $11, $33, $01, $10, $10, $11, $11, $10, $03, $03, $01, $11, $03, $05
		dc.b    $3F, $00, $01, $00, $10, $03, $01, $10, $02, $01, $10, $03, $01, $01, $04, $06
		dc.b    $EF, $11, $00, $01, $00, $11, $02, $01, $0F, $04       
;=============================================================================== 
; Level Object Layout
; [ Begin ]
;===============================================================================		            

; Macro for marking the boundaries of an object layout file
ObjectLayoutBoundary macro
	dc.w	$FFFF, $0000, $0000
    endm

; off_44000:
Objects_Layout: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w  Ghz_1_Objects_Layout
	zoneOffsetTableEntry.w  Ghz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Mz_1_Objects_Layout
	zoneOffsetTableEntry.w  Mz_2_Objects_Layout
	zoneOffsetTableEntry.w  Mz_3_Objects_Layout
	zoneOffsetTableEntry.w  Mz_3_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Htz_1_Objects_Layout
	zoneOffsetTableEntry.w  Htz_2_Objects_Layout
	zoneOffsetTableEntry.w  Hpz_1_Objects_Layout
	zoneOffsetTableEntry.w  Hpz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  OOz_1_Objects_Layout
	zoneOffsetTableEntry.w  OOz_2_Objects_Layout
	zoneOffsetTableEntry.w  Dhz_1_Objects_Layout
	zoneOffsetTableEntry.w  Dhz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Cpz_1_Objects_Layout
	zoneOffsetTableEntry.w  Cpz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Nghz_1_Objects_Layout
	zoneOffsetTableEntry.w  Nghz_2_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
	zoneOffsetTableEntry.w  Null_Objects_Layout
    zoneTableEnd

	; These things act as boundaries for the object layout parser, so it doesn't read past the end/beginning of the file
	ObjectLayoutBoundary
Ghz_1_Objects_Layout:	BINCLUDE	"level/objects/GHZ_1.bin"
	ObjectLayoutBoundary
Ghz_2_Objects_Layout:	BINCLUDE	"level/objects/GHZ_2.bin"
	ObjectLayoutBoundary
Mz_1_Objects_Layout:	BINCLUDE	"level/objects/MTZ_1.bin"
	ObjectLayoutBoundary
Mz_2_Objects_Layout:	BINCLUDE	"level/objects/MTZ_2.bin"
	ObjectLayoutBoundary
Mz_3_Objects_Layout:	BINCLUDE	"level/objects/MTZ_3.bin"
	ObjectLayoutBoundary
Htz_1_Objects_Layout:	BINCLUDE	"level/objects/HTZ_1.bin"
	ObjectLayoutBoundary
Htz_2_Objects_Layout:	BINCLUDE	"level/objects/HTZ_2.bin"
	ObjectLayoutBoundary
Hpz_1_Objects_Layout:	BINCLUDE	"level/objects/HPZ_1.bin"
	ObjectLayoutBoundary
Hpz_2_Objects_Layout:
	ObjectLayoutBoundary
	ObjectLayoutBoundary		; yes, there are two here for some reason
OOz_1_Objects_Layout:	BINCLUDE	"level/objects/OOZ_1.bin"
	ObjectLayoutBoundary
OOz_2_Objects_Layout:	BINCLUDE	"level/objects/OOZ_2.bin"
	ObjectLayoutBoundary
Dhz_1_Objects_Layout:	BINCLUDE	"level/objects/DHZ_1.bin"
	ObjectLayoutBoundary
Dhz_2_Objects_Layout:
	ObjectLayoutBoundary
Cpz_1_Objects_Layout:	BINCLUDE	"level/objects/CPZ_1.bin"
	ObjectLayoutBoundary
Cpz_2_Objects_Layout:	BINCLUDE	"level/objects/CPZ_2.bin"
	ObjectLayoutBoundary
Nghz_1_Objects_Layout:	BINCLUDE	"level/objects/NGHZ_1.bin"
	ObjectLayoutBoundary
Nghz_2_Objects_Layout:	BINCLUDE	"level/objects/NGHZ_2.bin"
	ObjectLayoutBoundary
Null_Objects_Layout:
	ObjectLayoutBoundary
;=============================================================================== 
; Level Object Layout
; [ End ]
;===============================================================================		            
Unknow_Data_0x04634E: ; loc_4634E:
		dc.b    $00, $00, $77, $07, $70, $01, $11, $17, $07, $70, $70, $11, $00, $07, $07, $11
		dc.b    $11, $01, $11, $01, $01, $10, $11, $00, $01, $16, $77, $00, $16, $61, $11, $77
		dc.b    $61, $01, $16, $01, $11, $17, $70, $10, $77, $71, $11, $76, $11, $11, $11, $11
		dc.b    $11, $10, $00, $67, $70, $70, $02, $21, $07, $07, $00, $10, $00, $07, $00, $60
		dc.b    $07, $71, $07, $07, $70, $11, $71, $11, $11, $17, $00, $11, $10, $70, $10, $00
		dc.b    $11, $01, $0A, $01, $17, $10, $A0, $00, $70, $02, $07, $11, $00, $0A, $00, $7C
		dc.b    $BB, $A0, $05, $01, $A0, $13, $01, $0A, $03, $01, $0A, $02, $01, $AA, $12, $01
		dc.b    $0A, $08, $05, $01, $AB, $BB, $C6, $66, $08, $01, $10, $04, $03, $07, $00, $10
		dc.b    $0C, $24, $66, $70, $77, $76, $00, $07, $70, $11, $00, $17, $77, $10, $00, $11
		dc.b    $07, $01, $00, $01, $70, $11, $00, $10, $77, $01, $00, $10, $70, $77, $00, $11
		dc.b    $11, $11, $DD, $DD, $76, $11, $0A, $01, $01, $03, $02, $A0, $70, $04, $01, $A0
		dc.b    $03, $01, $A0, $03, $03, $DD, $CC, $C1, $02, $02, $10, $77, $02, $02, $10, $07
		dc.b    $03, $0A, $70, $01, $00, $01, $07, $00, $10, $11, $07, $70, $02, $35, $17, $10
		dc.b    $00, $01, $01, $00, $06, $76, $77, $7D, $01, $11, $00, $0A, $01, $10, $00, $1A
		dc.b    $01, $00, $A0, $BA, $01, $0A, $AA, $AA, $17, $1A, $0B, $0A, $00, $76, $67, $66
		dc.b    $01, $11, $11, $11, $DD, $DD, $71, $6D, $00, $0A, $00, $7A, $00, $0A, $07, $0A
		dc.b    $00, $0A, $01, $02, $01, $A0, $02, $08, $AA, $A0, $00, $70, $00, $A0, $01, $0A
		dc.b    $02, $06, $01, $00, $66, $66, $10, $BA, $02, $03, $70, $00, $70, $03, $01, $07
		dc.b    $04, $01, $70, $06, $02, $01, $07, $02, $01, $10, $03, $04, $AA, $BB, $77, $DD
		dc.b    $07, $02, $01, $0A, $02, $02, $01, $0A, $02, $04, $01, $00, $0A, $70, $04, $09
		dc.b    $01, $A0, $00, $10, $01, $5D, $C1, $77, $7C, $03, $01, $A0, $03, $01, $AA, $03
		dc.b    $02, $0A, $20, $02, $02, $0A, $01, $09, $06, $10, $00, $DC, $CB, $BA, $AA, $03
		dc.b    $01, $0A, $02, $01, $0A, $03, $01, $0A, $04, $09, $A1, $A0, $00, $0A, $17, $0A
		dc.b    $AA, $A1, $71, $02, $06, $17, $11, $01, $66, $61, $01, $03, $13, $16, $10, $01
		dc.b    $01, $71, $07, $10, $17, $1A, $71, $16, $6B, $AA, $11, $71, $A0, $0A, $17, $1A
		dc.b    $02, $02, $71, $AA, $02, $0D, $71, $A0, $00, $0A, $61, $AA, $A0, $0A, $AA, $00
		dc.b    $A0, $00, $A0, $03, $01, $A0, $0F, $06, $AA, $AB, $BB, $CD, $00, $01, $02, $04
		dc.b    $A0, $01, $07, $11, $04, $04, $0A, $01, $01, $17, $02, $01, $70, $02, $03, $01
		dc.b    $00, $70, $02, $06, $10, $00, $CB, $11, $7D, $BB, $04, $05, $70, $10, $A0, $00
		dc.b    $01, $11, $05, $A0, $00, $BA, $AA, $A0, $05, $01, $A0, $03, $01, $A0, $05, $01
		dc.b    $0A, $03, $01, $01, $03, $01, $0B, $07, $02, $AA, $AB, $05, $01, $AA, $03, $03
		dc.b    $A0, $00, $10, $04, $02, $A0, $A0, $02, $05, $A0, $00, $01, $00, $0A, $03, $06
		dc.b    $B1, $16, $67, $66, $00, $70, $0C, $03, $01, $00, $07, $0B, $07, $61, $10, $06
		dc.b    $67, $00, $10, $77, $02, $02, $10, $77, $02, $02, $10, $77, $02, $02, $01, $77
		dc.b    $02, $03, $11, $70, $11, $02, $0A, $70, $11, $00, $10, $77, $00, $DD, $CC, $B6
		dc.b    $06, $11, $01, $0A, $03, $01, $0A, $06, $04, $CD, $DC, $C1, $77, $02, $06, $17
		dc.b    $70, $00, $01, $10, $07, $02, $02, $10, $77, $02, $03, $10, $00, $01, $02, $01
		dc.b    $70, $02, $02, $10, $70, $02, $26, $10, $70, $76, $77, $66, $11, $11, $00, $A0
		dc.b    $00, $11, $0A, $AA, $00, $01, $0A, $AA, $00, $01, $00, $AA, $00, $01, $00, $AA
		dc.b    $A0, $00, $10, $AA, $A0, $00, $10, $0A, $00, $11, $00, $10, $11, $02, $0D, $11
		dc.b    $00, $11, $01, $11, $00, $01, $11, $11, $00, $01, $01, $10, $05, $01, $70, $02
		dc.b    $01, $07, $04, $04, $61, $10, $01, $BC, $09, $09, $10, $0A, $A0, $00, $10, $10
		dc.b    $A0, $10, $10, $02, $01, $10, $03, $01, $01, $02, $05, $0A, $AB, $B0, $7D, $D7
		dc.b    $05, $03, $07, $00, $01, $05, $03, $A1, $00, $01, $03, $1A, $01, $00, $10, $00
		dc.b    $11, $00, $70, $00, $12, $DC, $06, $76, $75, $00, $07, $10, $10, $00, $07, $00
		dc.b    $11, $00, $07, $00, $10, $01, $03, $04, $20, $00, $70, $07, $02, $1C, $07, $71
		dc.b    $00, $10, $00, $11, $57, $77, $01, $17, $00, $17, $11, $71, $01, $71, $17, $1A
		dc.b    $17, $11, $71, $00, $71, $17, $10, $A0, $11, $71, $02, $02, $17, $10, $02, $09
		dc.b    $71, $00, $10, $A0, $1A, $AA, $BA, $A0, $A0, $1F, $01, $A0, $03, $01, $A0, $16
		dc.b    $09, $0A, $00, $AB, $DC, $B1, $00, $07, $00, $70, $03, $02, $70, $0A, $02, $03
		dc.b    $70, $00, $10, $02, $01, $A0, $06, $01, $07, $04, $04, $10, $16, $7C, $CC, $02
		dc.b    $01, $0A, $04, $01, $AA, $04, $01, $01, $04, $01, $01, $03, $01, $11, $03, $07
		dc.b    $01, $10, $00, $BB, $BB, $BA, $AA, $03, $01, $0A, $02, $05, $0A, $A0, $AA, $AA
		dc.b    $A0, $0C, $08, $10, $00, $01, $01, $01, $00, $01, $10, $06, $01, $01, $05, $09
		dc.b    $77, $00, $10, $00, $70, $11, $00, $07, $70, $02, $01, $07, $03, $07, $77, $00
		dc.b    $07, $77, $01, $11, $70, $05, $01, $10, $0E, $01, $01, $06, $24, $11, $11, $16
		dc.b    $66, $00, $10, $07, $01, $00, $10, $07, $01, $00, $11, $77, $01, $00, $01, $77
		dc.b    $71, $00, $10, $07, $77, $00, $11, $00, $70, $00, $10, $11, $11, $DD, $DD, $D7
		dc.b    $61, $12, $01, $A0, $03, $01, $01, $04, $05, $70, $CC, $DD, $77, $07, $03, $01
		dc.b    $77, $03, $01, $77, $07, $01, $77, $03, $02, $77, $01, $02, $01, $07, $02, $09
		dc.b    $01, $11, $77, $67, $7D, $77, $01, $10, $AA, $02, $02, $10, $AA, $02, $17, $10
		dc.b    $0A, $00, $01, $10, $01, $01, $01, $01, $10, $10, $77, $77, $77, $77, $11, $11
		dc.b    $11, $11, $16, $66, $66, $61, $0C, $01, $10, $02, $01, $77, $04, $01, $07, $02
		dc.b    $01, $01, $02, $0A, $70, $00, $23, $66, $10, $6A, $00, $01, $06, $1A, $02, $06
		dc.b    $61, $66, $02, $17, $17, $11, $02, $06, $01, $71, $00, $01, $0A, $B7, $03, $07
		dc.b    $0B, $00, $70, $A0, $00, $FD, $BA, $06, $01, $A0, $03, $01, $6A, $03, $14, $16
		dc.b    $A0, $0A, $00, $11, $6A, $0A, $00, $71, $16, $A0, $0A, $B7, $11, $1A, $0A, $F4
		dc.b    $10, $67, $CB, $02, $06, $01, $70, $00, $20, $17, $06, $02, $1C, $70, $66, $00
		dc.b    $21, $06, $61, $02, $17, $66, $10, $00, $77, $11, $0A, $21, $01, $70, $0A, $67
		dc.b    $77, $BA, $A0, $70, $6A, $00, $0A, $71, $A0, $02, $01, $1A, $03, $01, $A0, $04
		dc.b    $01, $A0, $03, $01, $A0, $04, $01, $0A, $03, $01, $0A, $05, $01, $A0, $03, $01
		dc.b    $A0, $02, $01, $AA, $02, $01, $AA, $02, $14, $0A, $00, $11, $00, $A0, $11, $07
		dc.b    $0A, $01, $07, $71, $0A, $AB, $B6, $67, $00, $AA, $A0, $00, $AA, $02, $12, $10
		dc.b    $00, $10, $11, $01, $11, $01, $00, $07, $07, $77, $77, $61, $70, $11, $11, $00
		dc.b    $11, $03, $09, $77, $61, $01, $11, $01, $00, $01, $00, $10, $04, $01, $70, $02
		dc.b    $05, $77, $11, $00, $10, $11, $05, $01, $11, $02, $09, $16, $77, $01, $16, $70
		dc.b    $00, $66, $00, $70, $02, $02, $07, $70, $03, $01, $77, $03, $01, $07, $03, $03
		dc.b    $07, $70, $70, $02, $02, $07, $77, $03, $06, $70, $67, $77, $77, $77, $10, $0D
		dc.b    $0B, $70, $77, $77, $07, $77, $70, $70, $70, $70, $70, $70, $03, $01, $77, $04
		dc.b    $01, $70, $02, $02, $07, $70, $02, $01, $77, $03, $01, $07, $02, $01, $01, $03
		dc.b    $01, $01, $09, $05, $01, $11, $11, $00, $10, $0A, $01, $01, $07, $01, $10, $06
		dc.b    $1B, $01, $01, $01, $11, $60, $01, $11, $01, $70, $00, $11, $10, $11, $01, $01
		dc.b    $01, $67, $11, $01, $6C, $BA, $10, $66, $B0, $00, $16, $BA, $02, $01, $6B, $03
		dc.b    $06, $AA, $00, $AB, $CC, $0A, $0A, $04, $01, $10, $03, $01, $07, $0A, $01, $A0
		dc.b    $03, $07, $01, $00, $01, $CD, $76, $70, $01, $02, $02, $10, $70, $02, $02, $10
		dc.b    $70, $04, $04, $10, $00, $10, $70, $02, $06, $10, $70, $00, $01, $10, $70, $02
		dc.b    $0A, $10, $70, $16, $66, $6C, $6C, $00, $10, $0A, $AA, $02, $1C, $0A, $AA, $00
		dc.b    $10, $0A, $AA, $00, $10, $0A, $AA, $00, $10, $0A, $AA, $00, $10, $0A, $AA, $01
		dc.b    $10, $0A, $AA, $16, $71, $66, $BA, $00, $07, $05, $01, $10, $02, $02, $07, $A0
		dc.b    $02, $01, $01, $03, $01, $7A, $03, $01, $10, $02, $0A, $07, $A0, $0A, $00, $71
		dc.b    $0A, $0A, $00, $10, $0A, $06, $01, $0A, $05, $01, $A0, $03, $01, $A0, $03, $03
		dc.b    $0A, $00, $10, $02, $08, $D6, $0D, $CB, $0A, $00, $01, $17, $A0, $02, $03, $01
		dc.b    $10, $01, $02, $0A, $7B, $A0, $70, $02, $17, $00, $01, $20, $00, $07, $02, $0F
		dc.b    $21, $10, $12, $00, $02, $67, $13, $45, $5F, $10, $17, $00, $0A, $77, $10, $02
		dc.b    $02, $71, $70, $04, $03, $01, $00, $11, $02, $01, $11, $05, $01, $70, $02, $05
		dc.b    $DC, $CB, $BB, $B1, $A0, $02, $09, $A0, $AA, $00, $AA, $01, $A0, $AA, $00, $17
		dc.b    $02, $20, $11, $71, $10, $11, $07, $11, $01, $00, $71, $17, $00, $07, $11, $71
		dc.b    $11, $00, $01, $67, $16, $61, $01, $10, $71, $01, $10, $01, $11, $10, $77, $77
		dc.b    $10, $77, $02, $02, $76, $11, $02, $03, $10, $00, $11, $04, $06, $10, $77, $77
		dc.b    $77, $76, $10, $03, $10, $01, $01, $00, $01, $70, $11, $00, $17, $07, $01, $01
		dc.b    $71, $00, $01, $07, $10, $02, $02, $11, $0A, $02, $0F, $70, $00, $67, $76, $10
		dc.b    $1D, $17, $1B, $AA, $10, $61, $A0, $00, $A6, $0A, $02, $02, $01, $A0, $02, $01
		dc.b    $0A, $07, $01, $A0, $03, $06, $A0, $CC, $CC, $CC, $CC, $10, $03, $01, $01, $03
		dc.b    $02, $60, $10, $02, $13, $16, $01, $00, $10, $AB, $71, $11, $11, $00, $A6, $11
		dc.b    $10, $00, $0A, $C6, $11, $CC, $CC, $C6, $11, $09, $10, $10, $01, $00, $01, $01
		dc.b    $10, $11, $11, $04, $03, $11, $11, $10, $03, $0B, $10, $00, $01, $01, $00, $01
		dc.b    $01, $10, $00, $01, $11, $02, $01, $11, $0A, $01, $01, $03, $01, $66, $02, $02
		dc.b    $06, $1A, $02, $05, $61, $A0, $00, $06, $1A, $02, $13, $61, $A0, $00, $01, $1A
		dc.b    $00, $0B, $16, $AA, $0A, $B6, $7A, $0A, $A1, $60, $B0, $00, $AB, $DD, $05, $14
		dc.b    $0A, $AB, $BB, $0A, $B1, $67, $77, $A1, $77, $11, $11, $66, $11, $01, $11, $10
		dc.b    $11, $10, $00, $11, $03, $06, $C6, $67, $00, $01, $00, $10, $02, $05, $A0, $07
		dc.b    $00, $10, $01, $04, $04, $70, $01, $00, $10, $03, $03, $07, $00, $10, $05, $06
		dc.b    $61, $11, $11, $11, $00, $01, $03, $3D, $11, $00, $70, $00, $11, $07, $71, $00
		dc.b    $10, $07, $70, $01, $10, $70, $70, $01, $10, $70, $10, $00, $11, $11, $00, $16
		dc.b    $77, $7D, $7D, $01, $00, $AA, $AA, $01, $00, $AA, $BA, $01, $00, $AA, $BA, $01
		dc.b    $0A, $AA, $AA, $17, $1A, $0B, $0A, $00, $76, $67, $66, $01, $11, $11, $11, $01
		dc.b    $17, $DD, $DD, $10, $7A, $02, $02, $07, $10, $02, $02, $01, $A0, $02, $01, $7A
		dc.b    $03, $02, $10, $0A, $02, $02, $A0, $0A, $06, $08, $DC, $B0, $00, $0A, $21, $0A
		dc.b    $00, $A0, $03, $03, $01, $00, $70, $05, $01, $07, $02, $10, $A0, $10, $02, $11
		dc.b    $00, $01, $00, $07, $00, $70, $43, $03, $5F, $32, $71, $20, $06, $01, $12, $0B
		dc.b    $01, $20, $07, $0F, $23, $33, $34, $44, $01, $00, $07, $77, $00, $10, $00, $11
		dc.b    $00, $01, $11, $03, $02, $01, $16, $02, $02, $10, $70, $02, $17, $10, $70, $10
		dc.b    $00, $10, $70, $71, $10, $07, $11, $71, $11, $71, $AA, $10, $17, $1A, $00, $16
		dc.b    $61, $A0, $00, $71, $03, $02, $10, $0A, $02, $01, $10, $03, $02, $10, $0A, $02
		dc.b    $08, $AA, $00, $AA, $AB, $00, $AA, $00, $01, $02, $01, $A0, $07, $01, $0A, $06
		dc.b    $01, $A0, $03, $09, $A0, $0A, $01, $BB, $DC, $B0, $AB, $00, $07, $06, $0D, $17
		dc.b    $00, $0A, $00, $01, $10, $0A, $00, $10, $70, $1A, $00, $70, $03, $01, $11, $03
		dc.b    $03, $21, $71, $A0, $06, $06, $01, $A0, $00, $02, $17, $1A, $02, $07, $21, $66
		dc.b    $BA, $00, $02, $21, $66, $02, $02, $02, $21, $03, $05, $02, $FF, $FF, $FF, $FF
		dc.b    $04, $07, $A0, $00, $0A, $00, $A0, $00, $0A, $05, $01, $BA, $03, $02, $66, $BA
		dc.b    $02, $17, $21, $66, $BA, $00, $41, $10, $76, $DD, $B6, $77, $70, $11, $0A, $11
		dc.b    $07, $70, $00, $A0, $10, $07, $00, $0A, $01, $03, $02, $A0, $10, $02, $02, $0A
		dc.b    $01, $03, $06, $A0, $DD, $DD, $DD, $D1, $10, $02, $02, $11, $01, $02, $08, $6A
		dc.b    $00, $10, $01, $A0, $70, $00, $07, $03, $05, $11, $00, $07, $00, $7A, $03, $1B
		dc.b    $10, $0A, $BB, $C7, $6D, $D6, $00, $A1, $10, $10, $0A, $16, $01, $00, $01, $60
		dc.b    $10, $77, $A7, $00, $07, $00, $01, $01, $70, $01, $10, $02, $0E, $10, $70, $17
		dc.b    $10, $11, $01, $07, $67, $77, $00, $77, $77, $70, $77, $02, $01, $07, $04, $05
		dc.b    $01, $11, $11, $01, $11, $02, $02, $10, $01, $03, $01, $10, $03, $06, $76, $67
		dc.b    $77, $77, $00, $10, $02, $01, $01, $02, $02, $01, $10, $02, $01, $01, $02, $02
		dc.b    $01, $01, $02, $02, $01, $10, $02, $01, $01, $02, $0D, $01, $00, $07, $10, $10
		dc.b    $60, $70, $11, $70, $77, $01, $00, $77, $02, $16, $10, $77, $70, $10, $00, $77
		dc.b    $01, $00, $07, $00, $01, $00, $07, $70, $01, $00, $07, $01, $10, $00, $61, $10
		dc.b    $03, $02, $A0, $A0, $02, $25, $AA, $AA, $00, $0A, $0A, $AA, $00, $0A, $0A, $AA
		dc.b    $00, $0A, $AA, $AA, $A0, $AA, $AA, $AA, $A0, $A0, $AA, $AA, $00, $AA, $0A, $00
		dc.b    $AA, $0A, $00, $AA, $00, $0A, $0A, $A0, $00, $0A, $A0, $02, $02, $A0, $0A, $03
		dc.b    $01, $A0, $02, $01, $1A, $02, $02, $A0, $B0, $02, $08, $A0, $FF, $DC, $B0, $CD
		dc.b    $00, $21, $0A, $03, $01, $70, $02, $03, $02, $11, $12, $02, $01, $07, $03, $02
		dc.b    $21, $20, $02, $01, $02, $08, $01, $20, $02, $01, $02, $03, $01, $27, $02, $02
		dc.b    $02, $6A, $03, $01, $10, $02, $05, $26, $A0, $72, $00, $01, $02, $08, $02, $1A
		dc.b    $00, $A0, $02, $3F, $FF, $F2, $0F, $01, $02, $07, $01, $20, $03, $25, $01, $45
		dc.b    $5F, $5F, $DC, $10, $0A, $A0, $00, $10, $10, $AA, $00, $01, $10, $00, $AA, $70
		dc.b    $10, $10, $00, $16, $71, $01, $16, $60, $16, $66, $61, $17, $76, $66, $66, $AA
		dc.b    $AB, $B1, $07, $02, $1F, $A1, $71, $00, $0A, $17, $16, $AA, $A1, $71, $10, $01
		dc.b    $66, $11, $70, $76, $11, $17, $00, $11, $67, $70, $01, $77, $00, $11, $10, $60
		dc.b    $01, $0A, $AA, $60, $02, $05, $0A, $00, $10, $A0, $0A, $04, $02, $01, $0A, $02
		dc.b    $02, $10, $A0, $03, $01, $A0, $02, $02, $AA, $A0, $02, $1C, $0A, $DD, $DD, $DF
		dc.b    $01, $00, $01, $02, $07, $00, $01, $10, $A1, $00, $01, $00, $10, $00, $01, $00
		dc.b    $70, $00, $01, $00, $10, $00, $10, $10, $02, $05, $10, $10, $00, $01, $10, $02
		dc.b    $1F, $01, $00, $12, $00, $01, $01, $12, $00, $11, $01, $10, $00, $11, $10, $02
		dc.b    $00, $10, $01, $20, $01, $11, $02, $00, $01, $02, $20, $00, $22, $20, $00, $02
		dc.b    $13, $01, $02, $08, $0C, $44, $23, $5F, $F4, $10, $07, $A0, $A0, $00, $01, $A0
		dc.b    $17, $02, $04, $A0, $01, $01, $1A, $04, $0D, $0A, $70, $00, $70, $00, $10, $A0
		dc.b    $10, $01, $00, $D7, $1A, $C6, $02, $02, $77, $10, $02, $01, $10, $05, $01, $11
		dc.b    $02, $01, $11, $02, $01, $01, $03, $0D, $10, $00, $07, $01, $00, $07, $70, $00
		dc.b    $76, $61, $11, $01, $71, $03, $06, $16, $10, $00, $11, $10, $61, $02, $03, $01
		dc.b    $06, $10, $02, $08, $10, $70, $77, $00, $01, $01, $00, $77, $02, $10, $66, $66
		dc.b    $00, $07, $00, $10, $00, $70, $01, $11, $07, $77, $01, $10, $07, $70, $02, $06
		dc.b    $07, $70, $01, $00, $77, $77, $02, $35, $70, $70, $01, $11, $11, $11, $66, $76
		dc.b    $77, $77, $00, $11, $00, $0A, $00, $11, $00, $0A, $01, $11, $00, $0A, $01, $10
		dc.b    $00, $0A, $00, $11, $11, $11, $77, $77, $77, $77, $11, $11, $11, $11, $DD, $7D
		dc.b    $7D, $77, $A0, $AA, $AA, $00, $AA, $AA, $AA, $00, $A0, $AA, $0A, $02, $13, $A0
		dc.b    $01, $01, $11, $11, $10, $10, $77, $77, $77, $77, $11, $11, $11, $11, $DD, $DD
		dc.b    $DD, $DD, $0D, $07, $0A, $00, $0A, $00, $0A, $00, $A0, $02, $02, $0A, $01, $02
		dc.b    $01, $A0, $03, $02, $A0, $67, $02, $03, $0A, $70, $A0, $02, $02, $10, $A0, $02
		dc.b    $01, $A7, $02, $02, $0A, $01, $02, $02, $0A, $0A, $08, $02, $CD, $B0, $02, $02
		dc.b    $71, $7B, $02, $03, $77, $77, $A0, $02, $10, $07, $6A, $A0, $77, $00, $76, $1A
		dc.b    $10, $07, $07, $71, $00, $77, $00, $70, $A6, $03, $04, $0A, $CB, $BB, $BB, $10
		dc.b    $01, $AA, $03, $02, $61, $A0, $02, $02, $70, $0A, $02, $05, $46, $77, $DD, $DC
		dc.b    $02, $02, $03, $01, $00, $20, $03, $01, $02, $04, $01, $20, $03, $02, $02, $20
		dc.b    $03, $01, $02, $04, $05, $23, $33, $44, $45, $10, $02, $01, $01, $02, $07, $70
		dc.b    $00, $10, $00, $07, $00, $01, $02, $16, $70, $00, $11, $00, $07, $22, $00, $11
		dc.b    $10, $00, $22, $22, $01, $45, $55, $FF, $DD, $10, $00, $A0, $00, $10, $04, $05
		dc.b    $10, $0A, $00, $01, $01, $02, $16, $70, $00, $10, $A0, $07, $70, $01, $0A, $11
		dc.b    $16, $66, $66, $DD, $DD, $DD, $C6, $00, $0A, $00, $0A, $00, $0A, $0E, $01, $A0
		dc.b    $03, $08, $6C, $CB, $BB, $BB, $C6, $CB, $BB, $BB, $04, $01, $0A, $09, $01, $A0
		dc.b    $03, $01, $A0, $05, $08, $BB, $BB, $BB, $BB, $BB, $BB, $BB, $BB, $02, $01, $0A
		dc.b    $03, $01, $0A, $02, $01, $A0, $03, $03, $A0, $00, $0A, $02, $0E, $0A, $A0, $00
		dc.b    $AA, $A0, $11, $BC, $66, $77, $66, $43, $33, $22, $20, $0B, $01, $21, $06, $02
		dc.b    $02, $17, $03, $01, $01, $02, $11, $21, $6A, $23, $4F, $DC, $A0, $21, $70, $00
		dc.b    $A0, $00, $0B, $00, $A0, $02, $17, $A0, $02, $07, $01, $1A, $0A, $00, $20, $70
		dc.b    $AA, $02, $0A, $11, $0A, $00, $02, $07, $10, $FF, $FF, $DC, $BA, $04, $01, $A0
		dc.b    $02, $02, $A0, $A0, $02, $05, $10, $A0, $00, $0A, $0A, $0C, $14, $5D, $BA, $A0
		dc.b    $BA, $00, $71, $10, $AA, $02, $17, $71, $10, $00, $21, $17, $76, $00, $02, $21
		dc.b    $11, $02, $02, $02, $20, $03, $01, $02, $04, $04, $FF, $FF, $FF, $FF, $04, $02
		dc.b    $AA, $A0, $02, $0C, $11, $1B, $AA, $AA, $66, $77, $66, $66, $00, $11, $11, $11
		dc.b    $03, $02, $01, $20, $03, $04, $FD, $DD, $DD, $DC, $09, $01, $0A, $03, $01, $0A
		dc.b    $05, $01, $0A, $03, $01, $A0, $02, $06, $0A, $01, $00, $0A, $A0, $10, $02, $01
		dc.b    $01, $02, $1B, $A0, $10, $07, $0A, $01, $00, $70, $A0, $10, $07, $01, $01, $00
		dc.b    $70, $10, $10, $77, $01, $00, $07, $00, $10, $00, $BC, $CC, $DD, $DD, $04, $01
		dc.b    $0A, $03, $01, $0A, $03, $09, $A0, $00, $0A, $00, $10, $00, $0A, $00, $7B, $03
		dc.b    $01, $17, $03, $12, $D6, $CC, $BA, $BA, $00, $70, $01, $11, $0A, $10, $01, $11
		dc.b    $00, $07, $71, $10, $00, $A1, $04, $01, $07, $02, $02, $0A, $70, $04, $0D, $10
		dc.b    $AB, $BB, $06, $BA, $01, $01, $01, $BA, $00, $10, $11, $01, $03, $0F, $11, $00
		dc.b    $A0, $00, $0A, $0A, $AA, $0A, $AA, $0A, $AA, $A0, $0A, $A0, $AA, $02, $02, $0A
		dc.b    $A0, $06, $01, $AA, $03, $02, $11, $A0, $02, $03, $BB, $0B, $A0, $02, $02, $AB
		dc.b    $A0, $09, $06, $CC, $CD, $DD, $DD, $00, $01, $02, $02, $10, $01, $02, $02, $10
		dc.b    $11, $03, $02, $11, $10, $02, $05, $11, $10, $00, $11, $11, $03, $07, $10, $02
		dc.b    $02, $DD, $DD, $74, $DF, $02, $01, $01, $06, $02, $0A, $0A, $07, $01, $A0, $02
		dc.b    $01, $A0, $03, $01, $0A, $02, $04, $FF, $5F, $FF, $FF, $09, $0F, $02, $22, $20
		dc.b    $00, $21, $11, $12, $02, $17, $66, $61, $00, $71, $AA, $A6, $03, $05, $0A, $00
		dc.b    $0A, $00, $0B, $03, $01, $01, $03, $04, $A0, $00, $0A, $A0, $02, $13, $71, $0A
		dc.b    $01, $20, $17, $11, $17, $61, $01, $66, $61, $BC, $77, $77, $77, $DF, $55, $55
		dc.b    $55, $04, $01, $12, $03, $02, $71, $20, $03, $12, $12, $02, $22, $61, $10, $21
		dc.b    $66, $11, $17, $7C, $BB, $6C, $CA, $A0, $00, $5F, $FF, $DA, $02, $02, $02, $6A
		dc.b    $02, $09, $26, $10, $00, $22, $61, $A0, $00, $16, $BA, $02, $01, $6B, $02, $02
		dc.b    $0A, $A0, $02, $01, $A1, $02, $05, $AB, $11, $FF, $FF, $76, $04, $01, $71, $02
		dc.b    $01, $20, $04, $01, $17, $06, $01, $02, $04, $01, $01, $04, $04, $5F, $FF, $F5
		dc.b    $67, $07, $01, $0A, $02, $04, $01, $10, $00, $0A, $02, $02, $A0, $0A, $04, $02
		dc.b    $A0, $A0, $06, $01, $A1, $03, $13, $0A, $0A, $00, $0A, $AB, $B6, $AB, $B6, $66
		dc.b    $60, $67, $61, $11, $17, $11, $11, $67, $70, $11, $02, $1D, $01, $00, $07, $00
		dc.b    $01, $CC, $60, $70, $1B, $BC, $67, $71, $A0, $70, $07, $1A, $00, $07, $61, $00
		dc.b    $0A, $71, $00, $A0, $0A, $10, $00, $A0, $A0, $02, $02, $A0, $A0, $02, $1C, $A0
		dc.b    $00, $AA, $AA, $0A, $BB, $00, $0A, $01, $07, $00, $A0, $10, $70, $0A, $01, $07
		dc.b    $01, $A0, $17, $70, $10, $11, $70, $11, $00, $77, $01, $02, $02, $11, $10, $02
		dc.b    $02, $11, $10, $03, $01, $10, $02, $01, $11, $0D, $01, $01, $02, $0C, $01, $01
		dc.b    $10, $00, $01, $00, $10, $D0, $17, $DD, $DD, $A0, $03, $14, $10, $01, $A0, $00
		dc.b    $06, $17, $1A, $00, $77, $11, $66, $BA, $00, $01, $11, $66, $11, $11, $10, $01
		dc.b    $04, $04, $DD, $DD, $DD, $DD, $04, $07, $A0, $00, $0A, $00, $A0, $00, $0A, $05
		dc.b    $01, $BA, $03, $02, $66, $BA, $02, $03, $01, $66, $BA, $02, $03, $0A, $DF, $55
		dc.b    $02, $04, $03, $33, $11, $1B, $03, $12, $01, $AB, $BB, $77, $77, $10, $16, $00
		dc.b    $06, $16, $6B, $11, $61, $71, $A0, $AA, $07, $1A, $02, $0A, $DB, $A0, $00, $02
		dc.b    $22, $22, $20, $00, $11, $11, $02, $02, $0D, $D0, $06, $02, $0D, $D0, $02, $07
		dc.b    $11, $11, $00, $02, $22, $22, $20, $04, $07, $02, $22, $22, $20, $00, $11, $11
		dc.b    $02, $02, $0D, $D0, $06, $02, $0D, $D0, $02, $07, $11, $11, $00, $02, $22, $22
		dc.b    $20, $04, $07, $02, $22, $22, $20, $00, $11, $11, $02, $02, $0D, $D0, $06, $02
		dc.b    $0D, $D0, $02, $17, $11, $11, $00, $02, $22, $22, $20, $DD, $DD, $DD, $DD, $06
		dc.b    $11, $11, $11, $07, $C7, $77, $77, $00, $B1, $11, $11, $02, $02, $0A, $AA, $02
		dc.b    $02, $AA, $AA, $08, $38, $01, $67, $D7, $77, $11, $11, $11, $11, $77, $77, $77
		dc.b    $77, $11, $11, $11, $11, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $04, $44, $40
		dc.b    $00, $40, $00, $04, $00, $33, $33, $33, $77, $11, $11, $11, $11, $77, $77, $77
		dc.b    $77, $11, $11, $11, $11, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA, $03, $01, $44
		dc.b    $02, $0B, $04, $00, $77, $77, $73, $33, $01, $11, $11, $11, $10, $03, $05, $07
		dc.b    $77, $77, $77, $70, $03, $04, $01, $11, $11, $11, $04, $0C, $0A, $AA, $AA, $AA
		dc.b    $6D, $DD, $DD, $DD, $11, $11, $11, $11, $04, $04, $77, $77, $77, $77, $04, $04
		dc.b    $11, $11, $11, $11, $04, $04, $AA, $AA, $AA, $AA, $04, $07, $02, $22, $22, $20
		dc.b    $00, $11, $11, $02, $02, $0D, $D0, $06, $02, $0D, $D0, $02, $07, $11, $11, $00
		dc.b    $02, $22, $22, $20, $07, $01, $A0, $03, $01, $A0, $03, $01, $A0, $03, $01, $A0
		dc.b    $0E, $01, $A0, $03, $01, $A0, $13, $01, $A0, $03, $39, $A0, $00, $AB, $AB, $CD
		dc.b    $DF, $01, $10, $71, $12, $01, $10, $77, $10, $11, $10, $76, $10, $11, $10, $71
		dc.b    $10, $01, $10, $01, $00, $01, $07, $71, $02, $10, $00, $70, $02, $66, $61, $13
		dc.b    $22, $11, $10, $12, $00, $70, $71, $10, $20, $67, $77, $01, $00, $70, $77, $11
		dc.b    $00, $10, $00, $11, $02, $0B, $71, $11, $12, $07, $71, $11, $10, $43, $43, $23
		dc.b    $22, $07, $01, $02, $02, $02, $02, $2B, $02, $23, $2B, $B3, $00, $02, $B3, $35
		dc.b    $00, $0B, $30, $55, $00, $20, $00, $50, $00, $2B, $88, $89, $02, $2B, $BB, $00
		dc.b    $2B, $B3, $33, $B1, $B6, $65, $50, $3B, $60, $55, $50, $03, $05, $03, $24, $50
		dc.b    $00, $33, $30, $00, $03, $0B, $B3, $99, $8B, $A1, $1D, $07, $00, $10, $70, $07
		dc.b    $10, $00, $70, $10, $76, $01, $07, $B1, $70, $60, $11, $3B, $17, $06, $60, $03
		dc.b    $B1, $70, $17, $02, $06, $17, $11, $AA, $BB, $B9, $EE, $02, $04, $03, $33, $00
		dc.b    $2B, $03, $03, $02, $BB, $BB, $03, $13, $16, $00, $02, $16, $6B, $00, $21, $71
		dc.b    $A0, $00, $07, $1A, $00, $A9, $BD, $7D, $D6, $30, $0B, $02, $10, $0B, $B0, $00
		dc.b    $B0, $B1, $66, $11, $B0, $7C, $BB, $67, $1B, $A0, $00, $AB, $C7, $03, $01, $0A
		dc.b    $04, $05, $56, $6D, $DD, $CA, $30, $02, $15, $17, $00, $B0, $10, $11, $0B, $01
		dc.b    $71, $10, $B0, $17, $07, $11, $11, $71, $10, $71, $CC, $BA, $01, $07, $02, $06
		dc.b    $AA, $B1, $DC, $BA, $0A, $A0, $0A, $01, $A0, $06, $0F, $B1, $11, $11, $00, $C7
		dc.b    $77, $77, $01, $11, $11, $11, $33, $33, $33, $77, $04, $07, $40, $00, $04, $00
		dc.b    $04, $44, $40, $05, $10, $11, $11, $11, $11, $77, $77, $77, $77, $11, $11, $11
		dc.b    $11, $77, $77, $73, $33, $06, $01, $04, $04, $01, $44, $04, $14, $11, $11, $11
		dc.b    $11, $77, $77, $77, $77, $11, $11, $11, $11, $6D, $DD, $DD, $DD, $0A, $AA, $AA
		dc.b    $AA, $04, $05, $01, $11, $11, $11, $70, $03, $05, $07, $77, $77, $77, $10, $03
		dc.b    $0C, $01, $11, $11, $11, $DD, $DD, $DD, $DD, $AA, $AA, $AA, $AA, $04, $04, $11
		dc.b    $11, $11, $11, $04, $04, $77, $77, $77, $77, $04, $0F, $11, $11, $11, $11, $DD
		dc.b    $DD, $DD, $DD, $02, $22, $22, $20, $00, $11, $11, $02, $02, $0D, $D0, $06, $02
		dc.b    $0D, $D0, $02, $07, $11, $11, $00, $02, $22, $22, $20, $10, $01, $B0, $03, $01
		dc.b    $B0, $18, $01, $0A, $03, $01, $0A, $08, $01, $0A, $03, $41, $0A, $00, $AB, $BB
		dc.b    $CD, $CD, $01, $07, $71, $00, $01, $07, $70, $10, $01, $07, $70, $10, $01, $07
		dc.b    $71, $00, $10, $07, $00, $12, $77, $71, $10, $20, $11, $10, $00, $22, $66, $11
		dc.b    $10, $10, $00, $01, $01, $10, $07, $71, $01, $10, $07, $77, $01, $10, $70, $77
		dc.b    $10, $00, $77, $70, $11, $02, $70, $11, $12, $20, $11, $02, $20, $01
Unknow_Pallete_0x0474AC:
loc_474AC:
		dc.w    $0000, $0A20, $0666, $0888, $0CAA, $0ECC, $0246, $0008
		dc.w    $000E, $046A, $068C, $08CE, $0E22, $0E62, $0000, $0EEE
		dc.w    $0000, $0A42, $0C64, $0E86, $048A, $08CE, $0046, $0068
		dc.w    $008A, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE
		dc.w    $0000, $044C, $066E, $0AAE, $048A, $08CE, $0E46, $0E68
		dc.w    $0E8A, $04CE, $0A24, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0E22, $0E42, $0E62, $0E82, $0C68, $0848, $0628
		dc.w    $0E88, $0E66, $0E44, $0C22, $0A02, $0602, $0000, $0EEE
		dc.w    $0664, $0444, $0666, $0888, $0444, $0666, $0888, $0444
		dc.w    $0888, $0666, $0222, $0262, $02A4, $04E8, $0000, $0EEE
		dc.w    $0664, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE
		dc.w    $0EEE, $0EEE, $0EEE, $0262, $02A4, $04E8, $0000, $0EEE
		dc.w    $0664, $0C4C, $0C8C, $0CCC, $026A, $048C, $04CC, $0A84
		dc.w    $0EA6, $0AAA, $0222, $0262, $02A4, $04E8, $0000, $0EEE
		dc.w    $0664, $0A2C, $0E4E, $0EAE, $006C, $048C, $00CE, $0E62
		dc.w    $0E84, $0888, $0222, $0262, $02A4, $04E8, $0000, $0EEE
		dc.w    $0664, $080A, $0C4C, $0C8E, $004A, $046C, $00AE, $0C40
		dc.w    $0E84, $0666, $0000, $0262, $02A4, $04E8, $0000, $0EEE
		dc.w    $0622, $0262, $02A4, $04E8, $0400, $0620, $0840, $0A40
		dc.w    $0A40, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE
		dc.w    $0622, $0262, $02A4, $04E8, $0600, $0820, $0A60, $0C82
		dc.w    $0EA4, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE 
Unknow_Data_0x04760C:
loc_4760C:
		dc.b    $40, $00, $00, $2D, $01, $20, $02, $02, $02, $12, $03, $02, $C6, $20, $02, $03
		dc.b    $0B, $72, $20, $02, $06, $AD, $62, $02, $FF, $DC, $61, $02, $02, $01, $66, $02
		dc.b    $06, $07, $B1, $00, $02, $6A, $A0, $02, $01, $10, $02, $01, $21, $06, $09, $20
		dc.b    $00, $1A, $00, $12, $66, $1A, $AB, $16, $03, $01, $10, $03, $02, $10, $01, $03
		dc.b    $01, $01, $02, $52, $07, $01, $6D, $DD, $10, $67, $77, $DD, $01, $66, $BA, $00
		dc.b    $76, $06, $CD, $DD, $BB, $BC, $CD, $DD, $DD, $CB, $BA, $AA, $66, $06, $67, $77
		dc.b    $BB, $66, $66, $61, $00, $A1, $00, $70, $00, $B1, $07, $07, $0A, $01, $16, $60
		dc.b    $C1, $B0, $67, $76, $CB, $B6, $11, $67, $BC, $61, $17, $BA, $61, $16, $71, $00
		dc.b    $11, $00, $67, $DD, $00, $06, $66, $D6, $70, $16, $1B, $0B, $01, $11, $A0, $00
		dc.b    $60, $35, $FF, $FF, $76, $32, $02, $03, $AB, $66, $20, $02, $09, $A1, $10, $00
		dc.b    $B0, $A0, $02, $00, $6D, $77, $02, $06, $06, $76, $11, $20, $66, $AB, $02, $04
		dc.b    $42, $FF, $23, $02, $02, $06, $22, $16, $00, $02, $16, $6B, $02, $05, $7B, $A0
		dc.b    $00, $21, $10, $02, $05, $07, $A0, $00, $02, $11, $06, $16, $20, $16, $A0, $BC
		dc.b    $66, $11, $6B, $BC, $BB, $76, $16, $CB, $00, $B0, $61, $16, $00, $01, $17, $11
		dc.b    $00, $0A, $05, $01, $70, $02, $26, $01, $00, $DD, $DC, $61, $07, $DD, $DC, $CB
		dc.b    $BB, $BA, $AB, $BC, $DD, $67, $76, $60, $66, $11, $66, $66, $BB, $70, $70, $1A
		dc.b    $00, $77, $07, $1B, $00, $70, $76, $10, $A0, $44, $45, $56, $7D, $02, $02, $02
		dc.b    $20, $03, $01, $02, $16, $0A, $22, $33, $00, $02, $16, $66, $00, $21, $70, $10
		dc.b    $03, $05, $10, $02, $17, $00, $10, $03, $05, $11, $21, $70, $00, $11, $03, $0B
		dc.b    $11, $67, $00, $11, $0B, $BB, $BB, $AA, $A0, $A0, $A0, $02, $02, $0A, $AA, $03
		dc.b    $01, $AA, $03, $01, $AA, $03, $01, $AA, $03, $01, $AA, $02, $05, $01, $A0, $A0
		dc.b    $00, $11, $03, $01, $11, $03, $01, $11, $03, $01, $11, $03, $01, $11, $03, $01
		dc.b    $11, $03, $01, $11, $03, $0D, $76, $66, $6C, $CC, $0C, $66, $67, $77, $1B, $AA
		dc.b    $AB, $BB, $07, $0A, $01, $0A, $03, $01, $A0, $02, $13, $0A, $00, $10, $CC, $C6
		dc.b    $66, $77, $77, $77, $76, $BB, $BB, $B1, $16, $00, $AA, $A0, $10, $AA, $04, $05
		dc.b    $01, $10, $00, $01, $10, $02, $01, $10, $03, $04, $66, $66, $67, $61, $04, $01
		dc.b    $20, $03, $01, $02, $04, $01, $20, $05, $05, $01, $00, $02, $00, $11, $03, $05
		dc.b    $11, $02, $FF, $DD, $DC, $02, $01, $A0, $02, $3D, $A0, $AA, $A0, $00, $10, $00
		dc.b    $0A, $00, $70, $00, $11, $02, $0A, $00, $07, $00, $11, $00, $70, $00, $27, $0A
		dc.b    $01, $32, $20, $CB, $71, $C6, $01, $07, $71, $0B, $70, $10, $16, $A0, $A1, $01
		dc.b    $11, $1A, $07, $10, $60, $66, $B0, $01, $10, $01, $70, $71, $71, $01, $17, $00
		dc.b    $16, $17, $7C, $BD, $DD, $71, $A0, $02, $01, $1A, $03, $03, $A0, $0A, $AA, $02
		dc.b    $73, $0A, $07, $A0, $A0, $00, $A6, $70, $1B, $BA, $01, $0A, $66, $67, $C1, $06
		dc.b    $DD, $D0, $16, $76, $00, $D1, $DD, $71, $00, $0C, $00, $76, $00, $0A, $0B, $70
		dc.b    $00, $06, $A6, $D6, $00, $D1, $10, $AB, $00, $07, $61, $7B, $00, $0A, $61, $16
		dc.b    $CD, $B0, $B0, $C7, $11, $00, $A0, $B1, $00, $0A, $10, $07, $10, $01, $00, $61
		dc.b    $17, $70, $70, $D6, $11, $77, $00, $A7, $1A, $B7, $01, $11, $60, $01, $10, $61
		dc.b    $0D, $0A, $01, $03, $76, $0A, $01, $10, $1B, $A1, $07, $72, $0B, $17, $0B, $10
		dc.b    $06, $61, $70, $00, $0D, $60, $AA, $10, $0A, $70, $B1, $70, $01, $11, $67, $12
		dc.b    $26, $66, $DC, $DF, $05, $02, $01, $A0, $06, $02, $01, $0A, $02, $07, $10, $A0
		dc.b    $BA, $21, $0A, $0A, $11, $03, $08, $01, $DC, $A0, $AA, $16, $00, $0A, $01, $04
		dc.b    $01, $77, $02, $01, $10, $02, $15, $A1, $07, $00, $AB, $10, $61, $10, $10, $06
		dc.b    $67, $16, $00, $66, $BA, $10, $01, $71, $00, $DD, $00, $0A, $0E, $02, $07, $7D
		dc.b    $02, $06, $67, $61, $D0, $00, $7A, $B7, $02, $04, $5F, $F4, $2F, $FD, $03, $01
		dc.b    $21, $02, $1E, $02, $17, $02, $22, $30, $16, $20, $11, $16, $67, $06, $70, $60
		dc.b    $10, $06, $77, $06, $77, $00, $10, $61, $16, $16, $60, $66, $71, $70, $00, $01
		dc.b    $10, $02, $1A, $10, $10, $66, $00, $11, $77, $76, $77, $07, $06, $01, $11, $61
		dc.b    $6B, $71, $60, $06, $AB, $66, $10, $0A, $B6, $17, $0D, $D0, $BD, $02, $01, $A0
		dc.b    $02, $28, $AA, $A0, $00, $77, $D7, $DC, $00, $DD, $DD, $77, $D0, $AA, $AA, $AB
		dc.b    $1D, $77, $77, $BA, $60, $7D, $77, $61, $A0, $6C, $67, $06, $C1, $00, $76, $01
		dc.b    $77, $77, $11, $07, $10, $11, $A0, $01, $01, $AA, $02, $11, $AA, $00, $A1, $01
		dc.b    $A0, $AA, $16, $16, $6A, $77, $61, $01, $17, $01, $DC, $66, $76, $03, $05, $10
		dc.b    $00, $0A, $00, $07, $02, $02, $01, $07, $03, $0B, $07, $07, $B0, $10, $70, $01
		dc.b    $76, $66, $11, $16, $11, $02, $0A, $77, $61, $61, $61, $70, $77, $70, $00, $77
		dc.b    $07, $02, $01, $77, $03, $01, $07, $05, $06, $07, $00, $11, $11, $16, $77, $03
		dc.b    $05, $17, $22, $22, $01, $10, $02, $01, $01, $03, $01, $01, $04, $01, $07, $03
		dc.b    $01, $07, $03, $01, $07, $07, $09, $70, $00, $02, $7C, $16, $00, $02, $7A, $A6
		dc.b    $02, $02, $27, $A1, $03, $01, $6A, $02, $02, $02, $1B, $03, $01, $26, $03, $01
		dc.b    $02, $04, $05, $33, $32, $32, $24, $17, $04, $3B, $70, $11, $06, $66, $00, $17
		dc.b    $66, $B6, $10, $71, $B1, $CB, $A1, $0A, $0A, $1D, $C7, $BA, $DC, $22, $1B, $A7
		dc.b    $17, $5F, $DB, $70, $06, $A0, $01, $10, $10, $B0, $01, $10, $17, $6D, $D6, $01
		dc.b    $7A, $66, $11, $17, $B0, $B1, $71, $01, $00, $C1, $11, $17, $BA, $66, $67, $61
		dc.b    $67, $AD, $CB, $11, $6D, $02, $02, $A0, $7A, $02, $02, $01, $11, $02, $02, $07
		dc.b    $07, $02, $02, $01, $11, $03, $01, $71, $02, $02, $A0, $07, $05, $03, $0A, $17
		dc.b    $07, $03, $07, $07, $00, $01, $70, $01, $AA, $A7, $02, $08, $66, $60, $11, $01
		dc.b    $11, $11, $10, $76, $02, $14, $11, $12, $10, $00, $22, $20, $10, $17, $42, $00
		dc.b    $10, $61, $62, $00, $70, $76, $20, $00, $01, $02, $02, $02, $71, $20, $02, $01
		dc.b    $12, $03, $01, $20, $07, $04, $24, $FF, $FF, $55, $02, $10, $0A, $16, $00, $0A
		dc.b    $B6, $77, $00, $B1, $06, $61, $07, $01, $BA, $AA, $00, $1A, $02, $01, $07, $04
		dc.b    $01, $A0, $02, $0E, $60, $DA, $0B, $DB, $76, $6A, $00, $61, $16, $10, $0B, $BA
		dc.b    $10, $A0, $02, $01, $70, $03, $1A, $10, $A0, $00, $AB, $00, $1A, $AA, $10, $00
		dc.b    $01, $11, $00, $0B, $B0, $66, $BB, $A0, $A0, $06, $D0, $00, $16, $D1, $00, $0B
		dc.b    $6D, $02, $14, $B0, $D0, $A1, $00, $0B, $00, $16, $7D, $0A, $00, $6D, $A0, $01
		dc.b    $AB, $D0, $A0, $67, $70, $DC, $16, $03, $01, $01, $03, $01, $01, $03, $01, $01
		dc.b    $03, $01, $01, $03, $01, $01, $03, $01, $01, $03, $06, $01, $71, $76, $0C, $60
		dc.b    $10, $03, $01, $10, $03, $01, $10, $03, $01, $10, $03, $01, $10, $03, $01, $10
		dc.b    $03, $01, $10, $03, $04, $1D, $0D, $DD, $D7, $1C, $14, $7C, $1C, $C1, $C1, $07
		dc.b    $B7, $00, $76, $01, $00, $77, $1A, $0A, $01, $11, $00, $0A, $0A, $0A, $A0, $02
		dc.b    $30, $A0, $0A, $17, $A0, $00, $A6, $01, $7B, $BB, $71, $10, $67, $77, $11, $06
		dc.b    $07, $00, $76, $0A, $10, $77, $1A, $0A, $A1, $11, $A0, $01, $0A, $AA, $0A, $07
		dc.b    $AA, $00, $A1, $01, $66, $CC, $76, $01, $77, $66, $77, $07, $77, $61, $66, $01
		dc.b    $70, $02, $1C, $0A, $17, $70, $01, $00, $A1, $11, $00, $0A, $0A, $A0, $11, $01
		dc.b    $A0, $A6, $00, $06, $7C, $60, $00, $61, $01, $11, $10, $43, $22, $01, $07, $03
		dc.b    $01, $70, $03, $01, $70, $03, $01, $70, $03, $01, $70, $03, $01, $70, $03, $01
		dc.b    $70, $03, $05, $70, $22, $22, $01, $66, $06, $0F, $01, $01, $00, $10, $11, $11
		dc.b    $11, $11, $11, $11, $10, $10, $10, $10, $10, $02, $11, $70, $00, $07, $07, $77
		dc.b    $33, $01, $06, $6B, $02, $60, $10, $A0, $00, $A1, $00, $A0, $03, $01, $10, $03
		dc.b    $1C, $7A, $00, $A1, $10, $11, $02, $6A, $70, $06, $00, $1A, $B1, $00, $42, $06
		dc.b    $C7, $66, $70, $07, $C6, $77, $10, $07, $00, $11, $00, $01, $A0, $03, $01, $10
		dc.b    $03, $01, $60, $02, $01, $07, $03, $01, $0A, $02, $10, $DD, $DA, $76, $61, $BB
		dc.b    $B1, $17, $70, $BB, $BB, $B6, $67, $B0, $BB, $06, $61, $03, $13, $01, $B0, $BB
		dc.b    $A6, $61, $BB, $BB, $16, $66, $BB, $11, $17, $77, $CC, $67, $54, $44, $11, $10
		dc.b    $02, $02, $76, $60, $02, $01, $67, $07, $01, $77, $03, $02, $66, $60, $02, $02
		dc.b    $66, $10, $02, $06, $77, $71, $44, $44, $70, $07, $02, $07, $77, $00, $01, $11
		dc.b    $70, $01, $10, $02, $01, $10, $02, $01, $01, $02, $06, $AA, $11, $00, $0A, $00
		dc.b    $11, $03, $17, $61, $AA, $A0, $0A, $07, $A0, $0A, $A0, $21, $1A, $A0, $11, $00
		dc.b    $71, $11, $00, $02, $17, $00, $77, $00, $21, $77, $02, $02, $02, $11, $03, $08
		dc.b    $22, $11, $44, $34, $44, $66, $00, $17, $02, $08, $07, $00, $77, $00, $70, $11
		dc.b    $10, $77, $02, $02, $01, $11, $04, $02, $01, $10, $02, $08, $12, $22, $01, $16
		dc.b    $64, $44, $76, $76, $02, $1E, $16, $76, $00, $07, $71, $1B, $77, $70, $10, $1B
		dc.b    $11, $11, $01, $60, $00, $01, $17, $AB, $11, $10, $07, $CB, $77, $76, $66, $CB
		dc.b    $67, $61, $76, $BB, $03, $01, $01, $03, $02, $01, $01, $02, $16, $70, $00, $10
		dc.b    $61, $16, $16, $77, $66, $67, $17, $71, $06, $01, $21, $10, $10, $66, $50, $70
		dc.b    $1D, $07, $10, $03, $01, $10, $02, $02, $01, $10, $02, $15, $66, $66, $10, $0A
		dc.b    $B6, $71, $70, $01, $AB, $16, $11, $16, $6B, $61, $01, $10, $16, $7D, $7D, $D0
		dc.b    $D0, $06, $01, $A0, $02, $0B, $0A, $76, $00, $7D, $77, $61, $A0, $DD, $DD, $BA
		dc.b    $60, $02, $0E, $BC, $11, $DD, $DD, $61, $01, $61, $10, $10, $01, $07, $00, $10
		dc.b    $67, $02, $06, $06, $1B, $07, $10, $11, $A0, $02, $07, $7A, $00, $70, $01, $10
		dc.b    $00, $01, $02, $0A, $0A, $10, $07, $A0, $A0, $6D, $DB, $00, $AA, $B0, $09, $04
		dc.b    $AA, $AA, $0A, $AA, $02, $01, $A0, $0B, $08, $AA, $01, $67, $76, $00, $AB, $66
		dc.b    $01, $02, $0A, $A1, $60, $AA, $A0, $0A, $11, $00, $0A, $A0, $07, $02, $02, $0A
		dc.b    $A0, $03, $01, $A1, $04, $04, $77, $77, $77, $77, $0F, $01, $01, $03, $01, $10
		dc.b    $02, $01, $01, $03, $01, $10, $03, $02, $11, $11, $02, $08, $01, $11, $00, $01
		dc.b    $10, $00, $01, $10, $02, $01, $10, $05, $08, $07, $77, $00, $07, $70, $00, $07
		dc.b    $70, $02, $04, $16, $66, $66, $44, $02, $01, $01, $03, $02, $07, $20, $02, $01
		dc.b    $11, $03, $02, $7A, $10, $05, $1F, $60, $00, $72, $00, $10, $00, $01, $22, $52
		dc.b    $6D, $61, $00, $02, $11, $60, $00, $21, $76, $72, $02, $17, $B1, $10, $00, $71
		dc.b    $07, $20, $21, $1A, $01, $02, $02, $0A, $A0, $00, $07, $A0, $00, $21, $24, $FF
		dc.b    $52, $23, $02, $1E, $22, $22, $00, $22, $16, $60, $02, $11, $6B, $72, $21, $06
		dc.b    $AA, $10, $10, $6A, $A6, $20, $07, $00, $11, $00, $71, $AA, $02, $00, $45, $F5
		dc.b    $63, $44, $03, $01, $10, $02, $01, $07, $02, $03, $02, $10, $01, $06, $01, $07
		dc.b    $09, $04, $24, $5D, $CC, $AA, $04, $01, $07, $08, $01, $10, $05, $02, $0A, $11
		dc.b    $04, $01, $7A, $02, $04, $67, $61, $CD, $C6, $06, $01, $11, $02, $03, $07, $00
		dc.b    $07, $05, $01, $10, $03, $05, $01, $10, $70, $01, $70, $02, $05, $77, $6D, $CC
		dc.b    $B1, $11, $10, $04, $10, $00, $01, $70, $04, $07, $0A, $00, $A7, $00, $76, $CD
		dc.b    $73, $02, $01, $01, $02, $09, $07, $00, $02, $70, $00, $70, $10, $00, $01, $04
		dc.b    $07, $10, $00, $10, $70, $07, $00, $01, $03, $04, $23, $45, $76, $01, $06, $04
		dc.b    $01, $07, $00, $02, $04, $01, $10, $04, $01, $70, $02, $02, $17, $06, $02, $0B
		dc.b    $07, $60, $24, $46, $10, $16, $00, $B0, $77, $71, $01, $02, $09, $1A, $0A, $01
		dc.b    $11, $00, $0A, $0A, $0A, $A0, $02, $1F, $A0, $0A, $17, $A0, $00, $A7, $01, $7B
		dc.b    $BB, $71, $17, $67, $77, $17, $01, $07, $77, $71, $0A, $10, $00, $1A, $00, $A1
		dc.b    $11, $A0, $00, $0A, $AA, $00, $0A, $02, $15, $0A, $17, $A0, $00, $A7, $01, $7B
		dc.b    $BB, $71, $10, $60, $67, $11, $00, $01, $00, $76, $07, $10, $07, $1B, $03, $36
		dc.b    $1A, $01, $01, $07, $01, $01, $06, $00, $77, $06, $10, $01, $10, $11, $60, $16
		dc.b    $11, $11, $00, $17, $01, $61, $10, $01, $11, $BC, $C7, $77, $77, $A0, $0A, $AA
		dc.b    $AA, $1A, $AA, $00, $0A, $01, $11, $BA, $A0, $77, $77, $01, $11, $11, $00, $77
		dc.b    $77, $11, $11, $11, $13, $11, $02, $0C, $02, $66, $66, $61, $00, $BB, $11, $07
		dc.b    $10, $AA, $00, $07, $02, $13, $11, $70, $00, $11, $77, $00, $10, $77, $00, $11
		dc.b    $02, $11, $10, $11, $14, $00, $10, $07, $70, $02, $04, $70, $00, $01, $07, $05
		dc.b    $05, $01, $00, $70, $01, $10, $02, $04, $10, $00, $07, $01, $02, $04, $60, $01
		dc.b    $11, $11, $03, $01, $01, $02, $04, $11, $10, $01, $11, $02, $01, $10, $0F, $0E
		dc.b    $77, $A7, $6A, $A6, $06, $01, $0A, $00, $01, $00, $10, $01, $00, $06, $04, $06
		dc.b    $01, $A0, $00, $0A, $00, $10, $02, $01, $07, $03, $07, $61, $70, $01, $00, $10
		dc.b    $01, $01, $02, $02, $07, $10, $07, $03, $70, $00, $A0, $03, $05, $06, $17, $01
		dc.b    $A0, $01, $03, $06, $0A, $61, $01, $AA, $CF, $42, $04, $03, $10, $00, $02, $03
		dc.b    $01, $70, $02, $01, $0A, $02, $09, $10, $00, $16, $20, $00, $A0, $A1, $00, $71
		dc.b    $02, $05, $62, $34, $5D, $C6, $07, $06, $01, $10, $02, $03, $02, $00, $71, $02
		dc.b    $02, $01, $07, $06, $02, $20, $10, $03, $05, $01, $42, $35, $FD, $77, $02, $05
		dc.b    $A0, $00, $01, $11, $0A, $04, $1A, $01, $01, $07, $10, $10, $70, $00, $01, $00
		dc.b    $10, $11, $70, $07, $01, $71, $16, $61, $77, $71, $11, $66, $10, $11, $07, $00
		dc.b    $07, $07, $01, $71, $04, $15, $01, $07, $07, $10, $11, $10, $70, $01, $00, $11
		dc.b    $11, $61, $06, $CD, $71, $70, $00, $AA, $10, $00, $01, $03, $17, $10, $11, $00
		dc.b    $10, $07, $00, $71, $01, $00, $77, $00, $10, $11, $00, $10, $00, $01, $11, $01
		dc.b    $10, $76, $76, $11, $02, $01, $10, $03, $01, $07, $02, $07, $01, $70, $10, $01
		dc.b    $77, $00, $02, $02, $0E, $01, $00, $10, $00, $10, $20, $00, $11, $00, $20, $32
		dc.b    $00, $10, $03, $03, $01, $17, $03, $05, $70, $02, $01, $00, $01, $07, $3A, $71
		dc.b    $20, $11, $11, $17, $00, $01, $10, $11, $11, $01, $11, $01, $77, $01, $06, $77
		dc.b    $00, $60, $00, $10, $11, $A7, $01, $A1, $AA, $07, $01, $0A, $00, $B1, $00, $A0
		dc.b    $0B, $61, $16, $1A, $D6, $10, $01, $67, $11, $01, $11, $11, $00, $76, $01, $77
		dc.b    $77, $11, $07, $10		               
;=============================================================================== 
; Level Rings Layout
; [ Begin ]
;===============================================================================
; off_48000:		          
Rings_Layout: zoneOrderedOffsetTable 2,2
	zoneOffsetTableEntry.w  Ghz_1_Rings_Layout
	zoneOffsetTableEntry.w  Ghz_2_Rings_Layout 
	zoneOffsetTableEntry.w  Id_0100_Rings_Layout
	zoneOffsetTableEntry.w  Id_0101_Rings_Layout    
	zoneOffsetTableEntry.w  Wz_1_Rings_Layout
	zoneOffsetTableEntry.w  Wz_2_Rings_Layout 
	zoneOffsetTableEntry.w  Id_0300_Rings_Layout
	zoneOffsetTableEntry.w  Id_0301_Rings_Layout  
	zoneOffsetTableEntry.w  Mz_1_Rings_Layout
	zoneOffsetTableEntry.w  Mz_2_Rings_Layout    
	zoneOffsetTableEntry.w  Mz_3_Rings_Layout
	zoneOffsetTableEntry.w  Mz_4_Rings_Layout    
	zoneOffsetTableEntry.w  Id_0600_Rings_Layout
	zoneOffsetTableEntry.w  Id_0601_Rings_Layout 
	zoneOffsetTableEntry.w  Htz_1_Rings_Layout
	zoneOffsetTableEntry.w  Htz_2_Rings_Layout 
	zoneOffsetTableEntry.w  Hpz_1_Rings_Layout
	zoneOffsetTableEntry.w  Hpz_2_Rings_Layout 
	zoneOffsetTableEntry.w  Id_0900_Rings_Layout
	zoneOffsetTableEntry.w  Id_0901_Rings_Layout 
	zoneOffsetTableEntry.w  OOz_1_Rings_Layout
	zoneOffsetTableEntry.w  OOz_2_Rings_Layout 
	zoneOffsetTableEntry.w  DHz_1_Rings_Layout
	zoneOffsetTableEntry.w  DHz_2_Rings_Layout 
	zoneOffsetTableEntry.w  CNz_1_Rings_Layout
	zoneOffsetTableEntry.w  CNz_2_Rings_Layout
	zoneOffsetTableEntry.w  CPz_1_Rings_Layout
	zoneOffsetTableEntry.w  CPz_2_Rings_Layout 
	zoneOffsetTableEntry.w  GCz_1_Rings_Layout
	zoneOffsetTableEntry.w  GCz_2_Rings_Layout
	zoneOffsetTableEntry.w  NGHz_1_Rings_Layout
	zoneOffsetTableEntry.w  NGHz_2_Rings_Layout 
	zoneOffsetTableEntry.w  DEz_1_Rings_Layout
	zoneOffsetTableEntry.w  DEz_2_Rings_Layout
    zoneTableEnd

Ghz_1_Rings_Layout:	BINCLUDE	"level/rings/GHZ_1.bin"
Ghz_2_Rings_Layout:	BINCLUDE	"level/rings/GHZ_2.bin"
Id_0100_Rings_Layout: ; loc_483DC:				   
		dc.w    $FFFF            
Id_0101_Rings_Layout: ; loc_483DE:				   
		dc.w    $FFFF				 
Wz_1_Rings_Layout:	BINCLUDE	"level/rings/WZ_1.bin"
Wz_2_Rings_Layout:	BINCLUDE	"level/rings/WZ_2.bin"
Id_0300_Rings_Layout: ; loc_483E4:				   
		dc.w    $FFFF              
Id_0301_Rings_Layout: ; loc_483E6:				 
		dc.w    $FFFF		               
Mz_1_Rings_Layout:	BINCLUDE	"level/rings/MTZ_1.bin"
Mz_2_Rings_Layout:	BINCLUDE	"level/rings/MTZ_2.bin"
Mz_3_Rings_Layout:	BINCLUDE	"level/rings/MTZ_3.bin"
Mz_4_Rings_Layout:	BINCLUDE	"level/rings/MTZ_4.bin"
Id_0600_Rings_Layout: ; loc_483F0:				   
		dc.w    $FFFF               
Id_0601_Rings_Layout: ; loc_483F2:				 
		dc.w    $FFFF		
Htz_1_Rings_Layout:	BINCLUDE	"level/rings/HTZ_1.bin"
Htz_2_Rings_Layout:	BINCLUDE	"level/rings/HTZ_2.bin"
Hpz_1_Rings_Layout:	BINCLUDE	"level/rings/HPZ_1.bin"
Hpz_2_Rings_Layout:	BINCLUDE	"level/rings/HPZ_2.bin"
Id_0900_Rings_Layout: ; loc_487C8:				   
		dc.w    $FFFF               
Id_0901_Rings_Layout: ; loc_487CA:				 
		dc.w    $FFFF				            
OOz_1_Rings_Layout:	BINCLUDE	"level/rings/OOZ_1.bin"
OOz_2_Rings_Layout:	BINCLUDE	"level/rings/OOZ_2.bin"
DHz_1_Rings_Layout:	BINCLUDE	"level/rings/DHZ_1.bin"
DHz_2_Rings_Layout:	BINCLUDE	"level/rings/DHZ_2.bin"
CNz_1_Rings_Layout:	BINCLUDE	"level/rings/CNZ_1.bin"
CNz_2_Rings_Layout:	BINCLUDE	"level/rings/CNZ_2.bin"
CPz_1_Rings_Layout:	BINCLUDE	"level/rings/CPZ_1.bin"
CPz_2_Rings_Layout:	BINCLUDE	"level/rings/CPZ_2.bin"
GCz_1_Rings_Layout:   ; loc_48B94:		
		dc.w    $FFFF    
GCz_2_Rings_Layout:   ; loc_48B96:		
		dc.w    $FFFF               
NGHz_1_Rings_Layout:	BINCLUDE	"level/rings/NGHZ_1.bin"
NGHz_2_Rings_Layout:	BINCLUDE	"level/rings/NGHZ_2.bin"
DEz_1_Rings_Layout:   ; loc_48DB0:              
		dc.w    $FFFF    
DEz_2_Rings_Layout:   ; loc_48DB2:               
		dc.w    $FFFF   
;=============================================================================== 
; Level Rings Layout
; [ End ]
;===============================================================================								
Unknow_Data_0x048DB4: ; loc_48DB4:
		dc.b    $71, $90, $76, $61, $89, $00, $AB, $AA, $33, $33, $00, $10, $02, $02, $20, $01
		dc.b    $04, $0C, $10, $00, $02, $00, $01, $10, $00, $20, $00, $01, $00, $02, $04, $06
		dc.b    $22, $00, $33, $33, $32, $17, $03, $01, $70, $0C, $01, $11, $02, $04, $70, $00
		dc.b    $11, $10, $04, $05, $01, $DD, $76, $11, $16, $06, $01, $01, $04, $08, $01, $00
		dc.b    $07, $00, $10, $0A, $10, $10, $02, $05, $70, $01, $00, $01, $01, $02, $04, $D0
		dc.b    $CD, $DC, $CC, $04, $01, $07, $07, $02, $11, $A0, $03, $01, $10, $02, $02, $01
		dc.b    $60, $03, $01, $0B, $02, $04, $CC, $70, $CC, $DD, $06, $01, $01, $02, $03, $07
		dc.b    $00, $01, $03, $04, $10, $0A, $10, $10, $02, $05, $70, $01, $00, $01, $01, $02
		dc.b    $06, $01, $71, $01, $33, $A1, $70, $02, $10, $67, $01, $02, $00, $11, $10, $02
		dc.b    $22, $00, $16, $61, $11, $11, $16, $77, $77, $02, $0A, $17, $77, $11, $11, $11
		dc.b    $10, $22, $33, $32, $23, $04, $03, $22, $22, $22, $02, $2A, $11, $11, $22, $00
		dc.b    $11, $00, $11, $66, $11, $11, $01, $07, $11, $11, $10, $71, $11, $77, $11, $BB
		dc.b    $99, $FB, $9B, $00, $01, $10, $00, $23, $11, $57, $01, $00, $25, $71, $02, $55
		dc.b    $67, $13, $11, $00, $07, $13, $02, $43, $63, $41, $11, $05, $50, $70, $30, $FA
		dc.b    $CC, $11, $03, $00, $A9, $26, $67, $0A, $26, $77, $77, $03, $70, $53, $33, $A1
		dc.b    $00, $22, $11, $37, $07, $71, $33, $10, $71, $77, $11, $00, $13, $10, $00, $07
		dc.b    $12, $17, $00, $77, $77, $77, $77, $77, $77, $77, $77, $33, $33, $33, $33, $11
		dc.b    $11, $11, $11, $22, $22, $22, $22, $77, $77, $77, $77, $04, $03, $75, $04, $57
		dc.b    $02, $3F, $01, $11, $70, $10, $75, $12, $25, $20, $17, $52, $00, $11, $31, $76
		dc.b    $55, $00, $31, $70, $00, $11, $14, $36, $00, $03, $07, $05, $50, $33, $70, $43
		dc.b    $50, $00, $01, $35, $70, $10, $75, $11, $25, $20, $17, $52, $00, $11, $31, $76
		dc.b    $55, $00, $31, $70, $00, $11, $14, $36, $00, $03, $07, $05, $50, $36, $00, $64
		dc.b    $50, $1A, $06, $01, $70, $06, $20, $11, $70, $02, $01, $02, $03, $12, $01, $57
		dc.b    $00, $01, $00, $13, $01, $30, $11, $11, $70, $12, $22, $22, $07, $77, $77, $77
		dc.b    $04, $1C, $77, $77, $77, $77, $77, $77, $77, $77, $77, $77, $77, $77, $33, $33
		dc.b    $33, $33, $11, $11, $11, $10, $22, $22, $22, $01, $77, $77, $70, $23, $02, $3D
		dc.b    $07, $01, $76, $66, $FF, $88, $76, $61, $89, $00, $70, $07, $71, $90, $26, $70
		dc.b    $07, $10, $12, $27, $00, $09, $10, $12, $70, $70, $01, $01, $10, $00, $30, $10
		dc.b    $30, $01, $15, $20, $06, $70, $10, $00, $03, $11, $00, $71, $10, $33, $30, $02
		dc.b    $11, $11, $A6, $07, $22, $11, $03, $60, $76, $55, $0A, $36, $70, $02, $09, $A9
		dc.b    $25, $55, $22, $22, $88, $89, $22, $20, $03, $03, $02, $20, $01, $03, $01, $01
		dc.b    $07, $01, $10, $03, $01, $07, $02, $18, $21, $70, $53, $32, $10, $00, $10, $11
		dc.b    $07, $00, $70, $00, $71, $11, $01, $17, $10, $00, $11, $71, $AA, $A0, $00, $10
		dc.b    $02, $01, $07, $02, $03, $0A, $00, $0A, $02, $02, $67, $6D, $02, $0D, $07, $01
		dc.b    $D0, $0A, $00, $70, $1D, $A0, $10, $07, $01, $77, $01, $06, $01, $01, $02, $04
		dc.b    $01, $10, $00, $10, $04, $06, $76, $01, $11, $10, $07, $11, $02, $04, $71, $10
		dc.b    $77, $77, $04, $01, $10, $04, $07, $10, $00, $01, $00, $01, $11, $10, $02, $08
		dc.b    $11, $66, $66, $10, $07, $01, $B1, $66, $02, $02, $0A, $A1, $02, $2B, $A0, $0A
		dc.b    $07, $01, $1A, $A0, $00, $77, $01, $1B, $10, $00, $77, $70, $01, $11, $11, $16
		dc.b    $01, $11, $67, $D6, $11, $00, $71, $AB, $01, $10, $07, $1A, $70, $01, $00, $71
		dc.b    $17, $10, $10, $07, $00, $01, $01, $00, $10, $02, $40, $10, $66, $11, $00, $01
		dc.b    $AB, $89, $9D, $DA, $13, $10, $10, $01, $31, $00, $20, $00, $10, $02, $70, $73
		dc.b    $12, $36, $00, $1A, $56, $70, $06, $30, $00, $07, $63, $A0, $55, $52, $9A, $00
		dc.b    $25, $30, $9F, $89, $10, $13, $10, $10, $00, $71, $77, $03, $37, $07, $71, $31
		dc.b    $A1, $00, $13, $10, $03, $70, $65, $44, $0A, $26, $70, $02, $13, $A9, $26, $67
		dc.b    $88, $88, $21, $10, $11, $11, $11, $11, $33, $33, $33, $33, $11, $11, $11, $11
		dc.b    $04, $04, $44, $44, $44, $44, $04, $33, $77, $77, $77, $77, $30, $07, $24, $47
		dc.b    $01, $00, $53, $30, $03, $05, $43, $33, $01, $12, $17, $00, $10, $21, $23, $33
		dc.b    $22, $12, $32, $66, $06, $30, $01, $22, $00, $10, $11, $11, $37, $04, $06, $65
		dc.b    $01, $00, $53, $30, $03, $05, $43, $33, $01, $12, $17, $02, $2A, $21, $23, $33
		dc.b    $42, $12, $32, $66, $06, $22, $11, $22, $77, $01, $23, $33, $07, $02, $31, $10
		dc.b    $10, $73, $03, $01, $00, $01, $11, $33, $07, $07, $21, $11, $90, $00, $72, $21
		dc.b    $01, $70, $07, $65, $09, $17, $70, $02, $13, $98, $16, $67, $88, $88, $11, $10
		dc.b    $11, $11, $11, $11, $33, $33, $33, $33, $11, $11, $11, $11, $04, $04, $44, $44
		dc.b    $44, $44, $04, $0A, $77, $77, $77, $77, $00, $77, $77, $70, $10, $77, $02, $06
		dc.b    $31, $10, $70, $07, $13, $31, $02, $0A, $01, $13, $07, $00, $41, $01, $20, $00
		dc.b    $05, $10, $03, $01, $20, $02, $05, $66, $20, $17, $07, $10, $1B, $04, $34, $77
		dc.b    $74, $43, $02, $02, $70, $07, $02, $02, $07, $70, $02, $02, $77, $70, $03, $01
		dc.b    $76, $02, $02, $77, $63, $02, $02, $76, $31, $02, $30, $63, $10, $06, $67, $12
		dc.b    $45, $77, $07, $70, $64, $07, $70, $62, $21, $71, $60, $31, $01, $22, $36, $50
		dc.b    $13, $10, $00, $01, $00, $01, $00, $65, $00, $10, $30, $07, $30, $33, $32, $23
		dc.b    $31, $22, $10, $01, $01, $01, $12, $23, $30, $23, $30, $0B, $15, $01, $67, $77
		dc.b    $17, $76, $10, $00, $05, $55, $54, $47, $70, $01, $10, $03, $00, $10, $33, $33
		dc.b    $00, $03, $02, $01, $01, $03, $02, $03, $30, $02, $03, $17, $77, $10, $03, $12
		dc.b    $67, $61, $76, $01, $16, $70, $32, $77, $77, $77, $33, $32, $17, $70, $00, $33
		dc.b    $01, $71, $02, $02, $06, $64, $02, $02, $65, $20, $02, $1C, $01, $10, $00, $06
		dc.b    $50, $03, $11, $17, $23, $56, $77, $07, $70, $00, $07, $70, $77, $00, $07, $00
		dc.b    $77, $00, $71, $77, $07, $00, $27, $67, $03, $01, $71, $02, $0B, $33, $07, $11
		dc.b    $11, $01, $22, $44, $76, $00, $12, $33, $19, $0C, $64, $56, $66, $67, $06, $44
		dc.b    $45, $56, $00, $01, $23, $30, $14, $36, $11, $32, $11, $66, $00, $77, $70, $70
		dc.b    $00, $70, $70, $70, $00, $77, $77, $07, $00, $07, $77, $77, $00, $07, $07, $70
		dc.b    $07, $07, $70, $00, $01, $11, $11, $11, $61, $11, $66, $61, $77, $70, $77, $70
		dc.b    $07, $77, $70, $70, $77, $07, $07, $70, $77, $00, $77, $00, $07, $77, $02, $02
		dc.b    $07, $77, $02, $0C, $11, $11, $11, $11, $FF, $EE, $EE, $EE, $01, $00, $77, $77
		dc.b    $02, $01, $70, $0A, $03, $01, $06, $06, $08, $0F, $DC, $CD, $CD, $BD, $06, $77
		dc.b    $77, $60, $01, $21, $12, $10, $00, $32, $53, $02, $02, $06, $20, $02, $1F, $34
		dc.b    $73, $00, $01, $21, $12, $10, $06, $77, $77, $60, $DD, $DD, $DD, $DD, $01, $66
		dc.b    $66, $66, $07, $07, $77, $77, $00, $70, $77, $77, $00, $07, $66, $66, $02, $02
		dc.b    $0B, $88, $02, $02, $03, $33, $02, $2E, $03, $00, $06, $16, $0B, $BB, $66, $66
		dc.b    $66, $66, $77, $77, $77, $77, $77, $77, $77, $70, $66, $66, $66, $67, $BB, $89
		dc.b    $99, $80, $00, $31, $00, $10, $00, $31, $00, $10, $BB, $89, $99, $86, $66, $66
		dc.b    $66, $66, $77, $77, $77, $77, $08, $04, $10, $01, $11, $11, $02, $02, $10, $10
		dc.b    $04, $0C, $01, $10, $10, $10, $66, $66, $66, $10, $77, $77, $70, $70, $02, $01
		dc.b    $07, $04, $03, $70, $11, $11, $02, $02, $10, $10, $06, $16, $8F, $E9, $AB, $BB
		dc.b    $00, $02, $10, $10, $00, $71, $01, $03, $06, $30, $10, $30, $17, $30, $03, $00
		dc.b    $05, $62, $02, $13, $31, $41, $50, $01, $00, $02, $76, $06, $02, $23, $17, $60
		dc.b    $30, $00, $66, $10, $00, $06, $10, $02, $0E, $71, $00, $11, $07, $00, $01, $00
		dc.b    $60, $00, $60, $00, $10, $00, $70, $03, $02, $11, $11, $02, $10, $01, $66, $00
		dc.b    $11, $10, $77, $11, $00, $77, $77, $77, $70, $77, $77, $77, $70, $04, $01, $77
		dc.b    $02, $0B, $76, $22, $44, $06, $22, $11, $11, $76, $43, $33, $25, $02, $03, $70
		dc.b    $77, $70, $02, $01, $70, $02, $02, $70, $77, $02, $02, $70, $77, $03, $10, $07
		dc.b    $55, $41, $77, $61, $33, $30, $16, $61, $16, $06, $23, $16, $77, $17, $20, $02
		dc.b    $1F, $07, $13, $00, $77, $07, $01, $00, $77, $07, $77, $60, $07, $70, $07, $76
		dc.b    $17, $70, $07, $70, $06, $61, $11, $11, $77, $47, $71, $06, $00, $30, $06, $17
		dc.b    $03, $01, $71, $03, $01, $10, $03, $01, $06, $03, $02, $01, $10, $02, $02, $06
		dc.b    $61, $02, $05, $65, $73, $30, $00, $62, $1C, $04, $62, $13, $00, $01, $1C, $16
		dc.b    $16, $32, $11, $11, $07, $77, $00, $07, $00, $77, $77, $70, $00, $77, $77, $70
		dc.b    $00, $77, $77, $70, $00, $77, $02, $01, $07, $03, $13, $01, $11, $11, $11, $66
		dc.b    $66, $66, $11, $77, $77, $77, $00, $77, $77, $70, $00, $77, $77, $70, $02, $08
		dc.b    $07, $77, $00, $77, $07, $77, $00, $77, $03, $08, $11, $11, $11, $11, $FE, $EF
		dc.b    $EF, $9F, $09, $03, $01, $06, $06, $04, $08, $01, $11, $16, $66, $01, $11, $66
		dc.b    $66, $02, $06, $70, $00, $54, $44, $43, $33, $02, $09, $01, $11, $00, $01, $13
		dc.b    $33, $00, $10, $30, $02, $03, $03, $00, $DD, $02, $01, $0D, $02, $0B, $13, $0D
		dc.b    $00, $11, $11, $23, $ED, $42, $53, $5F, $FC, $03, $01, $33, $02, $02, $03, $11
		dc.b    $02, $02, $01, $01, $03, $01, $13, $02, $02, $01, $30, $02, $01, $03, $05, $10
		dc.b    $8E, $8F, $93, $3D, $11, $01, $13, $30, $11, $13, $30, $00, $33, $30, $00, $30
		dc.b    $02, $01, $03, $02, $0F, $03, $31, $10, $03, $31, $10, $10, $30, $10, $01, $00
		dc.b    $89, $89, $F8, $E6, $16, $02, $70, $70, $02, $06, $10, $10, $61, $70, $11, $10
		dc.b    $14, $02, $70, $70, $02, $02, $10, $10, $02, $04, $AA, $B8, $99, $EF, $02, $05
		dc.b    $01, $00, $01, $00, $06, $02, $02, $30, $10, $03, $03, $60, $01, $10, $03, $3F
		dc.b    $03, $01, $00, $10, $00, $06, $00, $11, $46, $16, $66, $16, $17, $07, $77, $72
		dc.b    $70, $07, $07, $21, $77, $77, $01, $00, $77, $70, $73, $10, $77, $70, $10, $01
		dc.b    $00, $07, $31, $00, $11, $11, $00, $13, $45, $52, $02, $30, $10, $12, $30, $66
		dc.b    $01, $30, $66, $65, $13, $06, $65, $30, $00, $66, $30, $35, $36, $63, $53, $02
		dc.b    $0D, $33, $01, $06, $66, $06, $71, $00, $60, $36, $10, $00, $66, $61, $02, $13
		dc.b    $55, $51, $66, $00, $33, $30, $66, $60, $66, $60, $00, $66, $00, $70, $06, $06
		dc.b    $07, $10, $10, $03, $19, $17, $60, $77, $77, $10, $71, $17, $10, $60, $00, $01
		dc.b    $70, $06, $77, $00, $11, $00, $77, $00, $07, $00, $67, $60, $01, $10, $03, $18
		dc.b    $70, $01, $66, $00, $10, $00, $17, $00, $01, $45, $70, $16, $15, $11, $70, $06
		dc.b    $21, $23, $77, $76, $31, $00, $77, $77, $02, $03, $77, $77, $13, $03, $0A, $70
		dc.b    $00, $11, $11, $10, $00, $75, $47, $70, $01, $14, $02, $02, $30, $02, $08, $66
		dc.b    $66, $66, $67, $06, $45, $66, $66, $19, $01, $23, $02, $04, $F8, $99, $99, $EE
		dc.b    $0B, $01, $07, $03, $01, $70, $0B, $05, $70, $71, $00, $01, $70, $04, $01, $70
		dc.b    $04, $01, $01, $03, $02, $01, $10, $02, $02, $77, $10, $02, $0B, $70, $71, $10
		dc.b    $10, $07, $07, $11, $11, $00, $77, $76, $1B, $0C, $77, $54, $54, $45, $56, $11
		dc.b    $11, $23, $ED, $00, $13, $0D, $03, $01, $0D, $02, $06, $03, $00, $DD, $00, $10
		dc.b    $30, $02, $03, $01, $13, $33, $02, $0A, $01, $11, $53, $45, $33, $33, $00, $01
		dc.b    $76, $66, $02, $02, $01, $11, $14, $0C, $60, $77, $77, $77, $66, $66, $66, $66
		dc.b    $11, $11, $11, $11, $14, $01, $10, $03, $01, $10, $07, $18, $07, $01, $07, $07
		dc.b    $07, $88, $A7, $07, $01, $10, $01, $01, $01, $33, $01, $01, $07, $AB, $A7, $07
		dc.b    $07, $01, $07, $06, $08, $02, $01, $07, $02, $02, $88, $A7, $02, $02, $10, $01
		dc.b    $02, $02, $33, $01, $02, $02, $AB, $A7, $02, $0C, $A8, $99, $EE, $8E, $56, $10
		dc.b    $00, $70, $66, $60, $01, $70, $02, $09, $07, $70, $01, $00, $07, $00, $06, $00
		dc.b    $10, $07, $09, $11, $11, $76, $67, $55, $47, $00, $70, $01, $02, $06, $70, $00
		dc.b    $30, $00, $13, $10, $03, $01, $03, $02, $14, $03, $30, $00, $07, $66, $66, $66
		dc.b    $01, $11, $11, $11, $14, $71, $11, $17, $00, $06, $66, $60, $03, $03, $08, $06
		dc.b    $66, $66, $66, $66, $66, $66, $66, $04, $10, $66, $66, $66, $66, $11, $11, $11
		dc.b    $11, $16, $71, $11, $17, $61, $06, $66, $60, $04, $08, $66, $66, $66, $66, $66
		dc.b    $66, $66, $66, $04, $0B, $66, $66, $66, $66, $11, $11, $11, $11, $71, $77, $70
		dc.b    $03, $01, $01, $03, $07, $07, $00, $60, $00, $01, $00, $66, $07, $0F, $66, $66
		dc.b    $66, $10, $11, $11, $11, $10, $06, $66, $66, $77, $00, $77, $07, $02, $0A, $77
		dc.b    $70, $06, $00, $77, $77, $66, $00, $77, $77, $02, $01, $77, $06, $08, $06, $11
		dc.b    $11, $10, $60, $01, $16, $61, $02, $02, $70, $07, $02, $02, $07, $70, $02, $02
		dc.b    $77, $70, $03, $01, $77, $02, $02, $70, $77, $02, $01, $77, $02, $07, $01, $11
		dc.b    $61, $00, $01, $66, $61, $02, $02, $77, $70, $03, $01, $70, $02, $02, $77, $70
		dc.b    $02, $01, $77, $0A, $07, $01, $11, $11, $8F, $EE, $EE, $99, $1E, $0E, $07, $07
		dc.b    $01, $10, $07, $07, $70, $11, $00, $70, $00, $01, $10, $07, $02, $01, $11, $03
		dc.b    $02, $01, $11, $03, $01, $16, $03, $0D, $70, $61, $00, $77, $07, $10, $07, $00
		dc.b    $07, $01, $10, $00, $07, $03, $0B, $70, $01, $10, $07, $00, $11, $70, $70, $00
		dc.b    $67, $07, $03, $01, $70, $02, $03, $77, $00, $01, $07, $01, $10, $06, $01, $01
		dc.b    $03, $01, $10, $02, $02, $01, $01, $02, $07, $10, $10, $10, $00, $01, $70, $01
		dc.b    $02, $02, $77, $70, $02, $02, $07, $70, $08, $01, $77, $08, $01, $01, $03, $01
		dc.b    $11, $02, $01, $77, $0C, $01, $70, $0D, $06, $01, $11, $70, $00, $01, $11, $0F
		dc.b    $01, $77, $08, $01, $11, $03, $01, $11, $02, $01, $76, $0C, $01, $70, $0D, $0E
		dc.b    $01, $10, $CB, $BB, $BA, $AA, $03, $33, $33, $33, $00, $2B, $2B, $2B, $0F, $01
		dc.b    $0A, $03, $1B, $33, $03, $18, $18, $21, $33, $33, $32, $00, $2B, $21, $22, $33
		dc.b    $00, $33, $13, $2B, $0A, $31, $3B, $00, $33, $13, $20, $00, $31, $3B, $02, $02
		dc.b    $13, $20, $02, $0F, $03, $18, $18, $18, $00, $33, $33, $33, $33, $32, $1B, $2B
		dc.b    $2B, $31, $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $13
		dc.b    $02, $0E, $0B, $31, $18, $18, $18, $30, $33, $33, $33, $33, $2B, $2B, $2B, $2B
		dc.b    $0C, $01, $30, $03, $01, $3A, $03, $0C, $12, $18, $18, $18, $33, $33, $33, $33
		dc.b    $2B, $2B, $2B, $2B, $0F, $01, $0A, $03, $0C, $33, $18, $18, $18, $22, $33, $33
		dc.b    $33, $00, $2B, $2B, $2B, $0D, $01, $30, $03, $01, $3A, $03, $06, $12, $15, $F7
		dc.b    $FC, $00, $0D, $04, $01, $31, $06, $05, $0D, $00, $10, $00, $D0, $02, $01, $DD
		dc.b    $05, $06, $30, $10, $16, $66, $99, $88, $02, $02, $44, $44, $02, $02, $01, $11
		dc.b    $06, $02, $0C, $C0, $03, $01, $F1, $08, $04, $71, $00, $85, $DF, $03, $01, $07
		dc.b    $03, $01, $70, $0D, $0B, $01, $00, $07, $00, $01, $70, $07, $01, $00, $77, $77
		dc.b    $02, $01, $70, $02, $0E, $07, $00, $07, $00, $70, $00, $70, $07, $00, $07, $00
		dc.b    $70, $00, $70, $02, $01, $07, $03, $01, $70, $02, $01, $07, $02, $02, $01, $70
		dc.b    $02, $01, $10, $02, $02, $01, $01, $02, $0C, $10, $10, $00, $01, $01, $07, $00
		dc.b    $10, $10, $10, $01, $01, $02, $02, $10, $10, $02, $05, $01, $00, $01, $17, $10
		dc.b    $07, $01, $70, $07, $02, $60, $10, $0A, $04, $11, $10, $01, $77, $0A, $01, $11
		dc.b    $03, $01, $01, $03, $01, $10, $02, $0B, $11, $11, $66, $01, $11, $66, $66, $70
		dc.b    $00, $76, $77, $08, $01, $61, $03, $01, $01, $03, $01, $67, $03, $0C, $66, $11
		dc.b    $10, $00, $66, $61, $11, $00, $76, $70, $00, $77, $04, $0B, $14, $5A, $AA, $EE
		dc.b    $0F, $C3, $22, $11, $0F, $33, $11, $0D, $04, $65, $AA, $98, $88, $04, $0B, $EA
		dc.b    $AA, $54, $10, $12, $23, $CF, $00, $01, $13, $3F, $0D, $04, $31, $39, $0C, $BB
		dc.b    $02, $14, $33, $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $01, $31, $3B, $00
		dc.b    $03, $13, $20, $00, $01, $3B, $02, $02, $03, $20, $02, $01, $3B, $03, $01, $20
		dc.b    $1E, $01, $0B, $03, $01, $0B, $18, $1A, $18, $18, $18, $18, $33, $33, $32, $03
		dc.b    $2B, $21, $22, $3B, $00, $33, $13, $20, $0A, $31, $3B, $00, $33, $13, $20, $00
		dc.b    $31, $3B, $02, $02, $13, $20, $03, $01, $30, $02, $02, $33, $3A, $02, $07, $23
		dc.b    $13, $30, $00, $0B, $31, $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02
		dc.b    $02, $23, $13, $02, $08, $0B, $31, $19, $30, $00, $33, $31, $3A, $02, $07, $23
		dc.b    $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $13, $02, $02, $0B, $31, $03, $01
		dc.b    $23, $03, $06, $0B, $00, $B3, $A3, $A4, $CF, $1C, $04, $60, $00, $82, $DF, $0A
		dc.b    $02, $1D, $21, $02, $02, $01, $10, $02, $02, $83, $33, $02, $02, $0B, $FF, $02
		dc.b    $06, $10, $44, $71, $00, $06, $61, $02, $02, $07, $07, $18, $01, $01, $02, $02
		dc.b    $76, $77, $02, $05, $10, $07, $00, $01, $01, $03, $01, $10, $10, $05, $61, $00
		dc.b    $01, $17, $10, $0A, $01, $60, $05, $07, $11, $11, $66, $00, $11, $16, $66, $02
		dc.b    $06, $07, $00, $11, $10, $01, $77, $08, $02, $60, $10, $06, $09, $61, $11, $10
		dc.b    $00, $66, $11, $10, $00, $07, $03, $04, $71, $00, $01, $77, $1C, $04, $71, $00
		dc.b    $01, $76, $03, $01, $11, $02, $05, $11, $10, $00, $01, $10, $02, $07, $11, $00
		dc.b    $70, $71, $10, $07, $70, $02, $0B, $77, $01, $11, $00, $70, $11, $05, $AA, $99
		dc.b    $98, $15, $04, $01, $30, $02, $01, $77, $02, $03, $02, $77, $30, $02, $01, $15
		dc.b    $0B, $0E, $9C, $0F, $C3, $9A, $03, $2D, $CF, $00, $22, $02, $30, $00, $20, $10
		dc.b    $02, $02, $01, $3F, $03, $01, $F0, $03, $01, $DC, $03, $01, $13, $02, $06, $31
		dc.b    $09, $06, $B3, $03, $3A, $02, $03, $03, $13, $30, $02, $02, $31, $3A, $02, $07
		dc.b    $23, $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $13, $02, $03, $0B, $31, $1B
		dc.b    $02, $01, $28, $14, $01, $30, $03, $01, $3A, $03, $01, $0A, $1A, $01, $0A, $03
		dc.b    $01, $33, $02, $02, $0A, $21, $02, $14, $33, $13, $00, $0A, $31, $2B, $00, $33
		dc.b    $13, $20, $0A, $31, $3B, $00, $33, $13, $20, $00, $31, $3B, $02, $02, $13, $20
		dc.b    $02, $0F, $03, $18, $18, $18, $30, $13, $33, $33, $23, $12, $1B, $2B, $0B, $31
		dc.b    $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $13, $02, $02
		dc.b    $0B, $31, $02, $02, $0A, $33, $02, $01, $33, $02, $02, $0A, $31, $02, $0D, $33
		dc.b    $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $00, $31, $3B, $02, $02, $13, $20
		dc.b    $02, $04, $8B, $90, $90, $8C, $03, $01, $6E, $03, $01, $10, $02, $01, $06, $03
		dc.b    $02, $01, $F0, $06, $01, $60, $03, $17, $10, $10, $88, $77, $00, $FF, $11, $EF
		dc.b    $F0, $10, $00, $10, $F0, $16, $1E, $FE, $11, $60, $1F, $F1, $10, $00, $01, $05
		dc.b    $01, $16, $05, $0F, $AB, $A4, $53, $44, $14, $BA, $A9, $EE, $4F, $32, $21, $11
		dc.b    $00, $31, $10, $0E, $12, $0C, $C0, $00, $2A, $A5, $49, $88, $E9, $AA, $B4, $10
		dc.b    $11, $22, $2C, $40, $00, $11, $23, $11, $04, $89, $99, $AA, $27, $1C, $02, $89
		dc.b    $88, $03, $01, $11, $02, $02, $11, $03, $06, $01, $CC, $03, $03, $0F, $10, $77
		dc.b    $03, $01, $70, $05, $04, $2A, $8A, $06, $77, $10, $06, $07, $70, $01, $10, $00
		dc.b    $70, $04, $06, $01, $00, $67, $07, $00, $10, $16, $0A, $01, $10, $11, $07, $70
		dc.b    $11, $14, $AA, $E9, $8B, $09, $07, $F0, $33, $10, $14, $5A, $AA, $9A, $03, $01
		dc.b    $77, $04, $01, $10, $03, $04, $98, $9A, $A5, $67, $08, $09, $13, $30, $F0, $00
		dc.b    $9A, $AA, $54, $10, $70, $0B, $04, $C8, $A3, $A2, $A8, $03, $01, $0B, $18, $02
		dc.b    $02, $30, $02, $02, $31, $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02
		dc.b    $07, $23, $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $02, $02, $02, $01, $13
		dc.b    $03, $01, $13, $02, $14, $33, $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $0A
		dc.b    $31, $3B, $00, $33, $13, $20, $00, $20, $3B, $02, $01, $31, $03, $04, $33, $20
		dc.b    $00, $0B, $03, $01, $0B, $10, $0D, $03, $18, $18, $18, $33, $33, $33, $33, $0B
		dc.b    $2B, $2B, $30, $20, $13, $0D, $18, $18, $18, $00, $33, $33, $33, $30, $0B, $2B
		dc.b    $2B, $30, $20, $1B, $04, $90, $96, $E8, $12, $05, $01, $61, $05, $17, $10, $00
		dc.b    $01, $1F, $F1, $06, $11, $EF, $E1, $61, $0F, $01, $00, $01, $0F, $FE, $11, $FF
		dc.b    $00, $77, $88, $01, $01, $03, $01, $06, $06, $02, $0F, $10, $03, $01, $60, $02
		dc.b    $01, $01, $03, $01, $E6, $03, $07, $19, $96, $9B, $BB, $00, $0D, $20, $02, $02
		dc.b    $01, $10, $05, $0C, $4F, $03, $31, $10, $14, $BA, $A9, $9F, $00, $10, $00, $70
		dc.b    $04, $04, $89, $99, $AA, $27, $02, $02, $32, $D8, $02, $02, $32, $D0, $04, $0A
		dc.b    $11, $33, $0F, $40, $99, $AB, $B4, $10, $70, $01, $04, $06, $09, $81, $71, $00
		dc.b    $18, $FE, $18, $02, $99, $8A, $02, $04, $C2, $00, $11, $66, $02, $02, $11, $66
		dc.b    $04, $06, $D2, $10, $07, $00, $11, $30, $02, $02, $33, $0B, $02, $10, $FF, $B0
		dc.b    $16, $66, $44, $01, $11, $66, $00, $01, $11, $67, $61, $11, $10, $10, $04, $06
		dc.b    $07, $70, $01, $10, $00, $70, $04, $19, $01, $00, $66, $11, $10, $00, $61, $11
		dc.b    $10, $10, $01, $00, $06, $00, $01, $10, $07, $77, $00, $11, $00, $77, $00, $01
		dc.b    $11, $03, $02, $10, $11, $03, $01, $11, $08, $05, $71, $00, $01, $77, $01, $0B
		dc.b    $01, $11, $03, $01, $10, $0B, $04, $71, $00, $01, $77, $1C, $04, $C8, $A3, $A2
		dc.b    $A3, $17, $01, $0A, $03, $05, $33, $1B, $00, $0A, $22, $02, $14, $33, $13, $00
		dc.b    $0A, $31, $23, $00, $33, $13, $2B, $0A, $31, $3B, $00, $33, $13, $20, $00, $31
		dc.b    $3B, $02, $02, $13, $20, $02, $02, $33, $20, $02, $02, $31, $0A, $02, $07, $32
		dc.b    $13, $30, $00, $2B, $11, $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02
		dc.b    $02, $23, $13, $02, $11, $0B, $31, $18, $18, $18, $30, $00, $23, $33, $33, $03
		dc.b    $22, $1B, $2B, $00, $31, $3A, $02, $07, $23, $13, $30, $00, $0B, $31, $3A, $02
		dc.b    $02, $23, $13, $02, $0D, $0B, $31, $03, $18, $18, $33, $33, $33, $31, $00, $2B
		dc.b    $21, $21, $02, $0D, $33, $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $00, $31
		dc.b    $3B, $02, $02, $13, $20, $02, $01, $1B, $17, $01, $30, $03, $01, $3A, $03, $06
		dc.b    $ED, $E9, $09, $03, $00, $E0, $03, $10, $10, $11, $0F, $10, $FE, $FF, $F1, $1E
		dc.b    $FF, $01, $11, $F0, $10, $F1, $0F, $10, $02, $09, $10, $10, $10, $F0, $00, $EE
		dc.b    $11, $EE, $F0, $05, $0E, $E1, $11, $0F, $10, $F0, $00, $F1, $FE, $11, $10, $01
		dc.b    $10, $00, $10, $02, $01, $01, $02, $0A, $11, $10, $FF, $00, $EF, $F1, $EE, $FF
		dc.b    $00, $E0, $03, $10, $10, $11, $0F, $60, $FE, $FF, $F1, $7F, $FF, $01, $11, $F1
		dc.b    $10, $F1, $0F, $10, $02, $09, $10, $E0, $10, $F0, $00, $1E, $11, $EE, $F0, $02
		dc.b    $14, $01, $0F, $00, $E1, $10, $01, $10, $F0, $00, $F6, $FE, $11, $10, $06, $10
		dc.b    $00, $10, $01, $00, $01, $02, $09, $11, $10, $FF, $07, $07, $03, $DF, $8F, $70
		dc.b    $03, $01, $77, $03, $02, $33, $30, $02, $0B, $11, $11, $20, $00, $22, $22, $07
		dc.b    $07, $77, $77, $70, $05, $24, $75, $04, $47, $07, $00, $01, $02, $70, $00, $75
		dc.b    $11, $25, $10, $17, $52, $00, $01, $31, $76, $55, $30, $31, $70, $00, $11, $14
		dc.b    $36, $00, $03, $07, $05, $50, $30, $20, $73, $57, $03, $01, $07, $02, $12, $07
		dc.b    $77, $00, $01, $03, $33, $01, $30, $11, $11, $70, $12, $22, $22, $07, $77, $77
		dc.b    $77, $04, $06, $89, $9A, $AA, $AA, $00, $30, $05, $01, $DD, $02, $05, $0D, $00
		dc.b    $01, $00, $D0, $02, $01, $30, $03, $01, $13, $03, $06, $01, $D0, $00, $88, $88
		dc.b    $D0, $03, $01, $77, $04, $01, $70, $03, $01, $70, $02, $0C, $77, $DE, $77, $7A
		dc.b    $EE, $21, $FF, $F2, $11, $00, $11, $10, $02, $03, $EE, $32, $10, $03, $04, $10
		dc.b    $00, $0D, $02, $02, $02, $D3, $20, $02, $07, $21, $00, $01, $11, $00, $01, $10
		dc.b    $02, $0B, $10, $03, $33, $01, $03, $30, $00, $FD, $F5, $CF, $CD, $02, $1F, $33
		dc.b    $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $00, $31, $3B, $00, $02, $13, $20
		dc.b    $00, $01, $03, $18, $18, $33, $33, $33, $33, $0B, $2B, $2B, $2B, $20, $13, $0C
		dc.b    $18, $18, $18, $18, $33, $33, $33, $33, $2B, $2B, $2B, $20, $03, $01, $0B, $10
		dc.b    $0E, $18, $18, $18, $18, $33, $33, $33, $33, $32, $1B, $2B, $2B, $31, $3A, $02
		dc.b    $07, $23, $13, $30, $00, $0B, $31, $3A, $02, $13, $23, $13, $30, $00, $0B, $31
		dc.b    $3A, $18, $18, $30, $12, $33, $33, $33, $33, $2B, $2B, $21, $23, $02, $20, $33
		dc.b    $13, $00, $0A, $31, $3B, $00, $33, $13, $20, $0A, $31, $3B, $00, $33, $13, $20
		dc.b    $00, $21, $03, $18, $18, $33, $33, $33, $33, $32, $1B, $2B, $30, $31, $3A, $02
		dc.b    $07, $23, $13, $30, $00, $0B, $31, $3A, $02, $02, $23, $13, $02, $12, $0B, $31
		dc.b    $00, $18, $18, $30, $00, $33, $33, $33, $30, $C3, $CC, $CD, $CC, $0E, $10, $10
		dc.b    $02, $07, $1F, $FF, $F0, $01, $F1, $00, $0F, $04, $1A, $10, $00, $01, $0F, $01
		dc.b    $F1, $10, $F0, $00, $1F, $FF, $00, $EE, $E0, $00, $11, $FF, $F0, $10, $E1, $01
		dc.b    $10, $FE, $1F, $01, $0F, $03, $1F, $11, $00, $1F, $00, $1E, $11, $F0, $01, $01
		dc.b    $FF, $01, $10, $1E, $EE, $F1, $0E, $0F, $EF, $F0, $6E, $10, $10, $00, $60, $1F
		dc.b    $FF, $F0, $01, $F1, $00, $0F, $06, $42, $01, $0F, $01, $F1, $10, $F0, $60, $1F
		dc.b    $FF, $00, $8E, $E0, $00, $17, $FF, $F0, $10, $E6, $01, $10, $EE, $11, $01, $0F
		dc.b    $10, $0F, $00, $11, $00, $1F, $00, $1E, $11, $F1, $01, $01, $FF, $06, $10, $1E
		dc.b    $EE, $F7, $DE, $F7, $35, $48, $01, $00, $53, $30, $03, $05, $43, $33, $01, $12
		dc.b    $17, $00, $20, $21, $23, $33, $12, $12, $32, $66, $02, $02, $01, $22, $02, $06
		dc.b    $03, $33, $DC, $FE, $ED, $DD, $06, $05, $03, $33, $33, $33, $30, $04, $05, $11
		dc.b    $11, $11, $11, $01, $03, $01, $2E, $02, $02, $1F, $D0, $02, $0A, $1D, $00, $11
		dc.b    $10, $02, $D0, $33, $32, $11, $2D, $02, $09, $33, $12, $DD, $D0, $00, $32, $00
		dc.b    $0D, $DD, $04, $01, $DD, $04, $04, $77, $77, $77, $77, $04, $01, $70, $03, $02
		dc.b    $FA, $70, $02, $0A, $12, $F9, $A7, $77, $32, $11, $2F, $FF, $00, $31, $02, $06
		dc.b    $D0, $03, $10, $00, $E3, $33, $02, $03, $33, $30, $01, $02, $04, $03, $30, $00
		dc.b    $DD, $02, $04, $10, $00, $DD, $03, $03, $01, $D0, $07, $07, $D3, $10, $EE, $DD
		dc.b    $03, $22, $03, $02, $01, $DD, $02, $04, $DD, $00, $13, $0D, $06, $02, $01, $3D
		dc.b    $03, $02, $13, $D0, $02, $07, $01, $2E, $ED, $33, $33, $32, $24, $07, $01, $50
		dc.b    $06, $04, $55, $00, $55, $55, $06, $01, $30, $07, $05, $33, $33, $33, $33, $03
		dc.b    $05, $01, $11, $04, $01, $11, $02, $01, $10, $03, $01, $01, $05, $03, $33, $00
		dc.b    $01, $0F, $04, $10, $00, $11, $11, $0A, $01, $77, $02, $05, $07, $70, $77, $77
		dc.b    $70, $05, $01, $05, $03, $02, $05, $55, $04, $01, $55, $02, $03, $50, $33, $70
		dc.b    $02, $01, $30, $02, $02, $01, $12, $02, $02, $04, $41, $03, $01, $50, $06, $04
		dc.b    $55, $00, $55, $55, $06, $01, $30, $03, $0C, $21, $11, $21, $11, $12, $20, $30
		dc.b    $01, $03, $02, $22, $01, $02, $02, $11, $22, $03, $01, $11, $02, $01, $10, $03
		dc.b    $01, $01, $05, $04, $11, $22, $22, $33, $03, $07, $04, $00, $02, $00, $04, $22
		dc.b    $02, $03, $07, $22, $30, $00, $11, $11, $03, $33, $08, $04, $33, $33, $33, $33
		dc.b    $0C, $24, $01, $00, $20, $00, $31, $00, $20, $00, $04, $44, $00, $01, $70, $00
		dc.b    $41, $11, $64, $44, $41, $00, $02, $20, $00, $10, $30, $12, $20, $02, $03, $11
		dc.b    $02, $22, $00, $01, $11, $02, $03, $01, $11, $02, $03, $10, $70, $03, $02, $05
		dc.b    $77, $12, $22, $23, $34, $02, $01, $01, $03, $01, $01, $02, $01, $31, $02, $0C
		dc.b    $20, $31, $10, $00, $02, $20, $10, $10, $11, $13, $00, $10, $02, $0C, $33, $00
		dc.b    $33, $33, $23, $00, $40, $00, $10, $00, $04, $02, $03, $01, $42, $03, $07, $04
		dc.b    $00, $02, $55, $55, $11, $02, $03, $02, $10, $30, $02, $08, $01, $31, $11, $01
		dc.b    $11, $32, $00, $10, $02, $02, $20, $13, $03, $06, $13, $10, $00, $02, $00, $10
		dc.b    $02, $06, $20, $00, $11, $11, $13, $01, $03, $06, $31, $32, $33, $33, $30, $41
		dc.b    $03, $2C, $04, $04, $00, $01, $00, $04, $20, $01, $00, $40, $20, $00, $55, $50
		dc.b    $00, $10, $00, $01, $00, $10, $30, $00, $10, $10, $03, $30, $00, $10, $00, $03
		dc.b    $30, $00, $30, $10, $02, $00, $03, $11, $00, $03, $00, $01, $11, $23, $03, $01
		dc.b    $10, $02, $03, $10, $74, $03, $02, $07, $70, $52, $32, $23, $34, $74, $10, $04
		dc.b    $01, $01, $02, $02, $40, $01, $06, $01, $04, $06, $03, $70, $00, $03, $03, $01
		dc.b    $43, $07, $01, $51, $06, $04, $55, $00, $01, $55, $02, $01, $01, $03, $02, $10
		dc.b    $30, $02, $03, $01, $03, $30, $03, $05, $03, $33, $33, $30, $10, $02, $02, $03
		dc.b    $11, $03, $02, $01, $11, $04, $01, $11, $02, $03, $10, $70, $03, $02, $01, $77
		dc.b    $02, $03, $01, $17, $30, $12, $04, $10, $11, $11, $11, $05, $01, $77, $02, $05
		dc.b    $07, $70, $77, $77, $70, $04, $01, $07, $05, $01, $05, $03, $02, $05, $55, $04
		dc.b    $01, $07, $02, $05, $50, $70, $00, $05, $53, $03, $01, $03, $02, $01, $50, $06
		dc.b    $01, $55, $02, $01, $55, $07, $01, $30, $03, $0B, $21, $01, $11, $11, $00, $13
		dc.b    $20, $00, $20, $03, $32, $03, $09, $53, $02, $00, $10, $40, $02, $13, $10, $01
		dc.b    $04, $01, $01, $02, $08, $30, $01, $77, $30, $30, $00, $70, $70, $05, $05, $10
		dc.b    $07, $04, $00, $10, $06, $01, $01, $03, $03, $41, $00, $07, $02, $02, $03, $70
		dc.b    $02, $01, $03, $02, $01, $04, $0B, $06, $55, $03, $55, $55, $00, $13, $04, $01
		dc.b    $30, $03, $04, $21, $11, $11, $10, $02, $01, $01, $02, $02, $10, $01, $02, $06
		dc.b    $12, $30, $00, $20, $02, $20, $03, $03, $10, $20, $10, $02, $03, $20, $00, $10
		dc.b    $02, $02, $70, $10, $02, $01, $74, $04, $01, $02, $03, $01, $42, $0E, $03, $70
		dc.b    $00, $10, $02, $02, $04, $10, $0B, $01, $01, $02, $06, $55, $01, $00, $55, $00
		dc.b    $10, $05, $01, $30, $02, $05, $02, $65, $55, $51, $10, $03, $01, $03, $02, $01
		dc.b    $50, $06, $01, $55, $02, $16, $74, $11, $10, $00, $30, $01, $01, $11, $00, $01
		dc.b    $00, $20, $22, $21, $11, $31, $00, $03, $33, $33, $30, $10, $02, $02, $03, $11
		dc.b    $03, $02, $01, $11, $04, $13, $11, $11, $00, $10, $70, $00, $22, $23, $77, $04
		dc.b    $33, $33, $00, $04, $37, $77, $70, $00, $04, $03, $02, $40, $44, $02, $03, $44
		dc.b    $00, $40, $02, $0E, $20, $34, $00, $04, $20, $30, $00, $01, $00, $01, $44, $45
		dc.b    $44, $40, $07, $01, $50, $06, $04, $55, $00, $55, $55, $02, $01, $10, $03, $01
		dc.b    $01, $04, $01, $10, $02, $07, $10, $01, $33, $33, $10, $20, $20, $02, $02, $20
		dc.b    $02, $03, $0A, $40, $00, $04, $00, $42, $21, $04, $00, $02, $03, $02, $0B, $40
		dc.b    $00, $04, $33, $73, $34, $00, $77, $77, $70, $24, $03, $02, $20, $05, $03, $04
		dc.b    $45, $55, $00, $04, $02, $0C, $55, $04, $04, $50, $33, $00, $20, $00, $30, $00
		dc.b    $20, $40, $04, $04, $03, $00, $40, $01, $02, $01, $41, $03, $01, $01, $04, $02
		dc.b    $03, $10, $02, $01, $03, $03, $07, $04, $01, $22, $22, $27, $33, $20, $03, $01
		dc.b    $30, $03, $01, $32, $05, $04, $10, $00, $40, $11, $02, $02, $40, $30, $02, $01
		dc.b    $02, $03, $01, $02, $02, $07, $07, $00, $07, $77, $70, $00, $14, $03, $01, $10
		dc.b    $04, $09, $05, $00, $04, $00, $05, $55, $04, $04, $40, $02, $03, $04, $00, $50
		dc.b    $06, $01, $04, $02, $06, $04, $00, $50, $00, $04, $20, $03, $02, $20, $10, $0A
		dc.b    $07, $01, $00, $12, $22, $23, $22, $30, $03, $01, $20, $0B, $01, $40, $02, $04
		dc.b    $10, $41, $11, $11, $05, $01, $07, $02, $05, $07, $04, $77, $77, $70, $05, $01
		dc.b    $05, $02, $05, $03, $05, $55, $00, $03, $02, $01, $55, $02, $07, $50, $33, $40
		dc.b    $40, $00, $30, $40, $06, $01, $03, $02, $03, $50, $00, $04, $03, $02, $04, $05
		dc.b    $07, $01, $30, $02, $02, $20, $30, $02, $02, $20, $01, $03, $05, $01, $33, $33
		dc.b    $00, $01, $02, $05, $01, $00, $11, $00, $01, $02, $01, $11, $02, $01, $10, $03
		dc.b    $01, $01, $02, $0A, $01, $20, $00, $20, $01, $00, $10, $20, $00, $30, $03, $01
		dc.b    $30, $02, $01, $20, $02, $02, $04, $20, $02, $01, $04, $02, $07, $10, $00, $01
		dc.b    $01, $00, $10, $01, $02, $09, $31, $11, $13, $33, $33, $33, $32, $00, $03, $05
		dc.b    $01, $11, $04, $01, $01, $02, $02, $10, $31, $02, $01, $01, $05, $01, $03, $02
		dc.b    $02, $10, $30, $0A, $01, $03, $07, $04, $10, $11, $11, $11, $05, $0F, $BB, $B6
		dc.b    $54, $44, $0D, $E2, $11, $11, $F2, $11, $13, $33, $00, $10, $30, $02, $03, $03
		dc.b    $00, $DD, $02, $01, $0D, $02, $0B, $13, $0D, $00, $11, $11, $23, $ED, $11, $10
		dc.b    $01, $F3, $03, $01, $0F, $02, $01, $0E, $02, $0A, $0E, $E0, $FF, $EE, $E0, $FF
		dc.b    $11, $00, $0F, $11, $02, $01, $F1, $06, $02, $33, $C1, $02, $07, $CC, $CC, $10
		dc.b    $00, $11, $0C, $C1, $02, $03, $10, $0C, $D1, $02, $0C, $33, $3F, $00, $1F, $0F
		dc.b    $FF, $11, $FF, $E1, $11, $FF, $F1, $02, $04, $EE, $10, $01, $22, $02, $01, $13
		dc.b    $03, $0D, $03, $00, $21, $10, $11, $33, $DE, $32, $10, $11, $00, $D0, $31, $02
		dc.b    $0A, $D0, $30, $00, $DD, $03, $01, $00, $DD, $DE, $31, $03, $02, $D3, $10, $06
		dc.b    $01, $D0, $02, $04, $DD, $03, $00, $DD, $02, $0F, $10, $00, $03, $30, $00, $33
		dc.b    $30, $01, $00, $10, $03, $32, $22, $00, $30, $05, $01, $DD, $02, $05, $0D, $00
		dc.b    $01, $00, $D0, $02, $01, $30, $03, $01, $13, $04, $01, $D0, $02, $02, $01, $30
		dc.b    $03, $02, $1F, $D0, $03, $05, $2E, $11, $11, $11, $01, $03, $04, $11, $33, $33
		dc.b    $30, $03, $02, $03, $33, $04, $07, $22, $22, $0D, $DD, $00, $01, $D0, $02, $01
		dc.b    $13, $03, $01, $30, $02, $03, $01, $00, $D0, $03, $01, $0D, $04, $03, $DD, $00
		dc.b    $30, $02, $04, $01, $13, $0D, $DD, $02, $01, $D0, $02, $01, $13, $03, $01, $30
		dc.b    $02, $03, $01, $00, $D0, $03, $01, $0D, $04, $03, $DD, $00, $30, $02, $06, $10
		dc.b    $02, $22, $22, $11, $10, $02, $08, $FF, $F2, $11, $00, $77, $7A, $EE, $21, $02
		dc.b    $02, $77, $DE, $03, $01, $70, $03, $01, $70, $02, $09, $77, $00, $89, $9A, $DD
		dc.b    $DD, $01, $03, $30, $02, $0D, $10, $03, $33, $00, $01, $10, $00, $21, $00, $01
		dc.b    $11, $D3, $20, $02, $02, $0D, $02, $04, $0C, $10, $00, $FF, $33, $02, $22, $00
		dc.b    $10, $03, $33, $00, $01, $02, $08, $FF, $F2, $01, $10, $77, $7A, $9F, $21, $02
		dc.b    $02, $07, $AF, $03, $01, $07, $04, $04, $AA, $AA, $AA, $AA, $04, $02, $33, $30
		dc.b    $03, $04, $03, $33, $33, $11, $03, $05, $10, $11, $11, $11, $E2, $03, $02, $0D
		dc.b    $F1, $03, $03, $0E, $FF, $FF, $07, $09, $DD, $00, $0D, $DD, $00, $DD, $D0, $00
		dc.b    $32, $02, $11, $33, $12, $33, $32, $11, $2D, $11, $10, $02, $D0, $F2, $22, $12
		dc.b    $FF, $D0, $03, $10, $02, $01, $31, $02, $0A, $32, $11, $2F, $FF, $12, $F9, $A7
		dc.b    $77, $FA, $70, $02, $01, $70, $0E, $01, $07, $03, $01, $70, $02, $04, $77, $00
		dc.b    $77, $77, $09, $0C, $0D, $DD, $DD, $DD, $D0, $00, $03, $32, $22, $DD, $03, $01
		dc.b    $02, $02, $D0, $30, $02, $0B, $D0, $31, $00, $DE, $32, $10, $11, $21, $10, $11
		dc.b    $33, $02, $01, $03, $03, $08, $13, $00, $EE, $10, $01, $22, $FF, $F1, $02, $08
		dc.b    $11, $FF, $E1, $11, $00, $1F, $0F, $FF, $02, $10, $33, $3F, $00, $10, $0C, $D1
		dc.b    $11, $0C, $C1, $00, $CC, $CC, $10, $00, $33, $C1, $07, $01, $F1, $03, $0B, $0F
		dc.b    $11, $00, $EE, $E0, $FF, $11, $00, $0E, $E0, $FF, $02, $01, $0E, $04, $0C, $0F
		dc.b    $11, $10, $01, $F3, $11, $11, $23, $ED, $00, $13, $0D, $03, $01, $0D, $02, $1D
		dc.b    $03, $00, $DD, $00, $10, $30, $00, $F2, $11, $13, $33, $0D, $E2, $11, $11, $FF
		dc.b    $F2, $11, $12, $00, $01, $2E, $ED, $00, $13, $D0, $00, $01, $3D, $06, $02, $13
		dc.b    $0D, $04, $03, $DD, $00, $03, $02, $05, $DD, $66, $55, $55, $55, $80, $FC, $04
		dc.b    $FF, $FF, $FF, $FF, $07, $01, $07, $02, $0C, $07, $AF, $77, $7A, $9F, $21, $FF
		dc.b    $F2, $01, $10, $00, $01, $03, $09, $10, $03, $33, $FF, $E0, $12, $22, $0D, $F1
		dc.b    $02, $01, $E2, $03, $05, $10, $11, $11, $11, $11, $04, $05, $03, $33, $33, $33
		dc.b    $30, $06, $04, $11, $11, $16, $66, $02, $04, $07, $77, $05, $55, $02, $0A, $50
		dc.b    $00, $50, $00, $03, $30, $05, $55, $30, $03, $02, $10, $11, $00, $33, $33, $00
		dc.b    $11, $10, $01, $77, $70, $01, $17, $00, $07, $00, $70, $02, $0D, $77, $00, $55
		dc.b    $50, $00, $05, $00, $05, $00, $50, $33, $30, $55, $02, $0F, $03, $00, $03, $11
		dc.b    $00, $33, $31, $66, $77, $77, $76, $DD, $DD, $DD, $D0, $03, $01, $0D, $04, $02
		dc.b    $77, $77, $04, $01, $77, $04, $01, $70, $03, $05, $07, $AA, $AA, $99, $88, $02
		dc.b    $03, $30, $10, $DD, $04, $01, $D0, $03, $03, $0D, $00, $10, $06, $01, $31, $02
		dc.b    $01, $0D, $02, $0D, $99, $94, $76, $66, $00, $03, $30, $00, $30, $30, $03, $30
		dc.b    $03, $02, $09, $03, $10, $01, $11, $00, $01, $10, $00, $10, $03, $03, $01, $07
		dc.b    $77, $02, $06, $25, $55, $22, $22, $03, $30, $02, $04, $30, $03, $00, $03, $02
		dc.b    $0D, $33, $30, $00, $11, $00, $01, $01, $00, $10, $10, $10, $00, $01, $05, $04
		dc.b    $33, $33, $33, $33, $06, $02, $08, $80, $02, $02, $87, $78, $02, $02, $70, $07
		dc.b    $02, $01, $70, $03, $1B, $87, $00, $0F, $F0, $08, $00, $0F, $F0, $11, $EE, $00
		dc.b    $01, $33, $33, $01, $01, $0A, $A0, $01, $00, $A7, $7A, $80, $08, $70, $07, $78
		dc.b    $04, $01, $08, $02, $01, $07, $03, $04, $DD, $22, $DC, $CC, $0C, $1F, $A0, $00
		dc.b    $10, $00, $71, $11, $BC, $B0, $00, $0B, $70, $7B, $00, $07, $00, $07, $B7, $0C
		dc.b    $CC, $CB, $70, $BB, $77, $70, $0C, $77, $C0, $00, $07, $00, $70, $03, $01, $0C
		dc.b    $03, $02, $07, $55, $03, $02, $33, $B0, $02, $05, $3A, $CB, $BB, $BB, $59, $06
		dc.b    $02, $0B, $50, $02, $01, $0B, $02, $1A, $CC, $55, $09, $5C, $77, $90, $07, $97
		dc.b    $00, $70, $90, $70, $00, $09, $70, $DE, $77, $E9, $EE, $AE, $77, $93, $33, $70
		dc.b    $00, $70, $03, $02, $71, $0A, $02, $02, $B0, $A7, $02, $02, $1A, $70, $02, $01
		dc.b    $01, $03, $0D, $A7, $00, $DE, $77, $9F, $FF, $AE, $77, $92, $00, $70, $00, $70
		dc.b    $03, $02, $71, $08, $02, $02, $B0, $87, $02, $02, $1A, $70, $02, $01, $01, $03
		dc.b    $0A, $A7, $00, $FF, $70, $8F, $60, $00, $8F, $00, $97, $02, $02, $08, $88, $02
		dc.b    $02, $97, $78, $02, $02, $90, $07, $02, $01, $07, $03, $02, $08, $70, $03, $07
		dc.b    $87, $FF, $80, $FF, $F7, $00, $78, $03, $01, $07, $16, $02, $7B, $70, $02, $02
		dc.b    $B0, $70, $02, $01, $0C, $03, $01, $B7, $03, $01, $70, $12, $01, $E0, $07, $01
		dc.b    $80, $03, $01, $10, $03, $01, $70, $4C, $04, $FF, $FF, $FF, $FF, $1C, $04, $DD
		dc.b    $CC, $CB, $BB, $02, $02, $70, $07, $02, $02, $07, $70, $02, $02, $77, $70, $03
		dc.b    $01, $77, $02, $02, $70, $77, $02, $01, $77, $02, $07, $11, $11, $61, $00, $11
		dc.b    $66, $61, $02, $02, $77, $70, $03, $01, $70, $02, $02, $77, $70, $02, $01, $77
		dc.b    $0A, $03, $11, $11, $11, $00, $15, $69, $0A, $00, $15, $00, $97, $00, $14, $00
		dc.b    $97, $00, $01, $05, $3B, $0E, $00, $0F, $00, $10, $00, $10, $21, $78, $29, $79
		dc.b    $00, $10, $00, $10, $00, $F0, $08, $F1, $00, $10, $00, $10, $00, $1E, $00, $10
		dc.b    $00, $10, $00, $10, $00, $1E, $00, $1E, $00, $10, $00, $10, $21, $86, $21, $A8
		dc.b    $00, $30, $00, $07, $08, $11, $08, $26, $00, $07, $00, $30, $08, $36, $08, $21
		dc.b    $03, $17, $10, $00, $02, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00
		dc.b    $10, $00, $10, $00, $12, $08, $12, $00, $10, $02, $04, $08, $11, $00, $21, $03
		dc.b    $17, $21, $00, $22, $00, $23, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10
		dc.b    $00, $10, $00, $12, $08, $32, $08, $21, $05, $01, $07, $03, $17, $10, $00, $08
		dc.b    $00, $1E, $00, $10, $00, $10, $00, $1C, $00, $1C, $00, $10, $00, $10, $00, $12
		dc.b    $00, $15, $00, $10, $03, $03, $16, $00, $27, $03, $17, $10, $00, $28, $00, $1E
		dc.b    $00, $10, $00, $10, $00, $1C, $00, $1C, $00, $10, $00, $10, $00, $12, $00, $35
		dc.b    $00, $26, $09, $17, $1A, $00, $0B, $00, $16, $00, $10, $00, $10, $08, $17, $08
		dc.b    $17, $00, $10, $00, $10, $08, $1C, $08, $1B, $08, $1A, $02, $04, $08, $1A, $00
		dc.b    $2A, $05, $03, $2B, $00, $06, $04, $04, $08, $07, $08, $07, $05, $03, $06, $08
		dc.b    $2B, $04, $04, $08, $2A, $00, $3A, $03, $17, $30, $00, $3B, $00, $36, $00, $2B
		dc.b    $00, $0D, $08, $2C, $08, $0A, $00, $0D, $00, $2B, $00, $0B, $08, $10, $00, $30
		dc.b    $02, $14, $08, $2A, $00, $36, $00, $10, $00, $3B, $08, $06, $08, $2D, $00, $3B
		dc.b    $00, $10, $08, $3D, $08, $3D, $04, $04, $08, $3D, $08, $3D, $04, $24, $E8, $E5
		dc.b    $E8, $D9, $00, $10, $00, $10, $00, $11, $00, $10, $00, $10, $00, $10, $00, $10
		dc.b    $08, $11, $00, $10, $00, $10, $00, $12, $00, $13, $00, $10, $00, $10, $00, $21
		dc.b    $08, $20, $05, $2F, $30, $00, $3C, $00, $10, $08, $1D, $00, $36, $08, $37, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $32, $00, $32, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $34, $00, $34, $00
		dc.b    $10, $00, $10, $05, $80, $E7, $2A, $00, $2C, $01, $B0, $01, $B6, $00, $10, $00
		dc.b    $10, $00, $12, $00, $12, $00, $10, $00, $32, $00, $16, $00, $30, $00, $36, $00
		dc.b    $10, $00, $30, $00, $14, $00, $10, $00, $10, $00, $32, $00, $34, $00, $10, $00
		dc.b    $10, $00, $12, $00, $F0, $00, $10, $00, $D0, $00, $F0, $00, $30, $00, $D0, $00
		dc.b    $10, $00, $30, $00, $14, $00, $10, $00, $10, $00, $F2, $00, $F4, $00, $10, $00
		dc.b    $10, $00, $12, $00, $F0, $00, $10, $00, $F2, $00, $F0, $00, $12, $00, $F6, $00
		dc.b    $10, $00, $16, $00, $14, $00, $10, $00, $10, $00, $11, $00, $D6, $00, $F3, $00
		dc.b    $32, $00, $34, $00, $F5, $00, $36, $00, $F1, $00, $F2, $00, $F4, $00, $D0, $00
		dc.b    $D0, $00, $D2, $00, $D4, $00, $D0, $00, $D0, $00, $32, $00, $34, $00, $13, $00
		dc.b    $F2, $00, $11, $00, $F6, $00, $F6, $00, $11, $00, $D0, $00, $27, $00, $36, $00
		dc.b    $02, $00, $26, $00, $30, $00, $06, $00, $10, $00, $30, $00, $12, $00, $10, $00
		dc.b    $32, $00, $16, $00, $14, $00, $36, $00, $10, $00, $D8, $00, $DE, $01, $73, $01
		dc.b    $70, $09, $72, $01, $77, $01, $70, $01, $75, $08, $12, $00, $12, $00, $20, $01
		dc.b    $71, $00, $20, $01, $71, $00, $10, $00, $10, $08, $12, $00, $12, $00, $10, $00
		dc.b    $10, $C1, $9C, $C1, $9E, $00, $10, $00, $10, $29, $47, $21, $7A, $04, $04, $08
		dc.b    $3D, $08, $3D, $04, $1E, $E9, $E3, $E9, $DF, $00, $04, $00, $04, $61, $AA, $61
		dc.b    $AA, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $00
		dc.b    $53, $00, $10, $03, $33, $34, $00, $61, $00, $10, $00, $10, $00, $12, $00, $12
		dc.b    $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $08, $11, $00, $12, $08, $13
		dc.b    $08, $15, $00, $16, $08, $1B, $00, $18, $00, $19, $00, $10, $00, $1B, $00, $12
		dc.b    $00, $10, $00, $10, $00, $0A, $00, $0A, $05, $80, $93, $F2, $00, $F2, $00, $10
		dc.b    $00, $F2, $00, $16, $08, $F5, $00, $F5, $08, $11, $08, $F2, $00, $12, $08, $15
		dc.b    $00, $10, $00, $36, $00, $36, $00, $10, $00, $10, $00, $12, $00, $C0, $00, $10
		dc.b    $00, $C2, $00, $C3, $00, $16, $00, $C5, $00, $10, $00, $12, $00, $12, $00, $10
		dc.b    $00, $10, $00, $76, $00, $76, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10
		dc.b    $00, $10, $00, $16, $00, $16, $00, $10, $00, $16, $00, $12, $00, $14, $00, $10
		dc.b    $00, $10, $E1, $74, $E1, $74, $E1, $7A, $00, $19, $E1, $78, $00, $1B, $00, $1B
		dc.b    $00, $03, $E1, $5B, $E1, $43, $00, $E0, $00, $10, $00, $E2, $00, $12, $00, $10
		dc.b    $00, $10, $00, $84, $00, $79, $00, $F0, $00, $33, $00, $2E, $E1, $05, $00, $10
		dc.b    $01, $BC, $E1, $05, $01, $A1, $00, $03, $00, $10, $E1, $BE, $E1, $F4, $03, $15
		dc.b    $10, $00, $46, $00, $12, $00, $10, $00, $10, $00, $1E, $00, $1E, $00, $10, $00
		dc.b    $10, $E0, $58, $E1, $E6, $03, $05, $7F, $E0, $00, $E1, $8A, $03, $15, $10, $00
		dc.b    $4B, $00, $16, $00, $10, $00, $10, $00, $10, $00, $11, $00, $10, $00, $10, $00
		dc.b    $15, $00, $12, $04, $4E, $E1, $8F, $E1, $EC, $00, $03, $00, $10, $E1, $AE, $E1
		dc.b    $DE, $00, $10, $00, $10, $00, $37, $00, $31, $00, $10, $00, $51, $00, $76, $00
		dc.b    $33, $00, $10, $00, $10, $00, $12, $00, $A7, $00, $10, $00, $30, $00, $3F, $00
		dc.b    $F6, $00, $6E, $00, $30, $E1, $AD, $E1, $CE, $01, $C3, $00, $65, $E0, $8B, $E1
		dc.b    $88, $00, $11, $00, $D7, $00, $D1, $00, $D7, $00, $D7, $00, $D1, $00, $1C, $00
		dc.b    $2C, $00, $10, $03, $03, $21, $00, $30, $03, $15, $10, $00, $FF, $00, $DE, $00
		dc.b    $39, $00, $37, $00, $09, $00, $07, $00, $F0, $00, $F0, $E0, $8E, $E1, $4A, $03
		dc.b    $3D, $03, $E0, $9E, $E1, $59, $00, $30, $00, $30, $00, $04, $00, $04, $00, $10
		dc.b    $00, $10, $00, $16, $00, $16, $00, $10, $00, $10, $00, $2F, $00, $29, $00, $30
		dc.b    $00, $30, $00, $2F, $00, $29, $00, $32, $00, $32, $00, $6B, $00, $5A, $00, $21
		dc.b    $00, $10, $00, $12, $00, $80, $00, $10, $00, $F0, $E0, $F6, $E1, $42, $03, $3F
		dc.b    $0F, $01, $A4, $00, $6D, $00, $14, $00, $14, $00, $16, $00, $16, $00, $14, $00
		dc.b    $14, $01, $B2, $01, $B3, $01, $A8, $01, $A9, $00, $08, $00, $08, $00, $10, $00
		dc.b    $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $18, $01, $B3, $00, $1A, $01
		dc.b    $AB, $00, $1A, $01, $AB, $00, $1A, $01, $AB, $00, $1C, $01, $AB, $00, $01, $03
		dc.b    $0D, $0F, $01, $AE, $00, $10, $00, $01, $00, $06, $01, $AF, $00, $01, $03, $01
		dc.b    $03, $03, $41, $06, $01, $B7, $00, $12, $00, $0F, $00, $10, $00, $01, $00, $12
		dc.b    $00, $70, $00, $10, $00, $03, $00, $40, $00, $3B, $00, $07, $00, $09, $00, $05
		dc.b    $00, $0B, $00, $0B, $00, $09, $00, $0D, $00, $0F, $00, $0F, $00, $09, $00, $09
		dc.b    $00, $0F, $00, $0B, $00, $09, $00, $0D, $00, $0C, $00, $0F, $00, $0A, $08, $0B
		dc.b    $01, $FC, $00, $07, $02, $0A, $E9, $7F, $E0, $89, $00, $10, $00, $89, $00, $50
		dc.b    $03, $0F, $10, $00, $5E, $00, $D6, $00, $51, $00, $10, $00, $10, $80, $1E, $80
		dc.b    $1F, $26, $01, $80, $05, $01, $80, $37, $01, $80, $07, $01, $80, $67, $03, $80
		dc.b    $00, $80, $4D, $03, $80, $00, $80, $2D, $03, $80, $00, $80, $0D, $03, $80, $00
		dc.b    $80, $6D, $03, $80, $00, $80, $81, $0E, $04, $FF, $00, $FF, $FF, $02, $03, $FF
		dc.b    $FF, $FF, $1E, $04, $FF, $FF, $FF, $FF, $08, $04, $FF, $FF, $FF, $FF, $15, $02
		dc.b    $FF, $FF, $02, $09, $FF, $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $11, $02, $CC
		dc.b    $CC, $02, $03, $CC, $33, $FF, $04, $03, $FF, $00, $FF, $02, $14, $FF, $00, $FF
		dc.b    $FF, $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
		dc.b    $FF, $13, $01, $FF, $03, $01, $FF, $81, $AF, $05, $2E, $4D, $4E, $4D, $60, $04
		dc.b    $01, $01, $03, $01, $01, $09, $05, $7C, $4F, $4C, $4F, $30, $2A, $07, $52, $55
		dc.b    $54, $01, $53, $54, $55, $06, $0D, $1C, $1D, $1E, $1F, $1C, $01, $03, $01, $1F
		dc.b    $1C, $1D, $1E, $1F, $37, $06, $2D, $34, $35, $36, $18, $02, $02, $06, $02, $1A
		dc.b    $35, $36, $37, $2C, $09, $01, $2D, $03, $01, $2D, $2A, $0A, $56, $57, $58, $59
		dc.b    $0C, $0C, $58, $59, $5A, $5B, $03, $0D, $20, $21, $22, $23, $20, $01, $03, $01
		dc.b    $23, $20, $21, $22, $23, $37, $06, $2C, $38, $39, $3A, $15, $02, $02, $06, $02
		dc.b    $17, $39, $3A, $3B, $2D, $09, $01, $2C, $03, $01, $2C, $2A, $0C, $5C, $5D, $5E
		dc.b    $5F, $FC, $D0, $D0, $D0, $A0, $8D, $8E, $8F, $02, $02, $50, $51, $02, $03, $50
		dc.b    $01, $51, $02, $02, $50, $51, $22, $05, $2E, $4D, $4E, $4D, $60, $0C, $0B, $67
		dc.b    $4E, $4D, $4E, $2A, $2D, $3C, $3D, $3E, $10, $02, $02, $06, $02, $12, $3D, $3E
		dc.b    $3F, $2C, $09, $01, $2D, $03, $01, $2D, $2A, $10, $60, $61, $62, $63, $F0, $F0
		dc.b    $F2, $F2, $02, $91, $90, $91, $92, $00, $50, $51, $02, $03, $50, $01, $51, $02
		dc.b    $02, $50, $51, $22, $01, $2C, $03, $01, $2C, $11, $01, $2C, $03, $02, $2C, $32
		dc.b    $03, $09, $1F, $34, $35, $36, $1A, $06, $35, $36, $37, $04, $02, $32, $2C, $03
		dc.b    $01, $2C, $2A, $1A, $64, $65, $66, $67, $C5, $F5, $F7, $F7, $30, $03, $91, $90
		dc.b    $91, $9B, $09, $0A, $0B, $08, $01, $03, $01, $0B, $08, $09, $0A, $0B, $21, $01
		dc.b    $2D, $03, $01, $2D, $11, $01, $2D, $03, $02, $2D, $2D, $03, $09, $01, $38, $39
		dc.b    $3A, $17, $15, $39, $3A, $3B, $04, $02, $2D, $2D, $03, $01, $2D, $2A, $1A, $6A
		dc.b    $6B, $6B, $6B, $06, $06, $05, $FA, $FC, $FC, $FA, $91, $90, $9D, $99, $0E, $0F
		dc.b    $0C, $01, $03, $01, $0F, $0C, $0D, $0E, $0F, $21, $01, $2C, $03, $01, $2C, $11
		dc.b    $01, $2C, $03, $02, $2C, $2C, $03, $09, $01, $3C, $3D, $3E, $12, $10, $3D, $3E
		dc.b    $3F, $04, $02, $2C, $2C, $03, $01, $2C, $2A, $1A, $6F, $70, $70, $70, $1E, $A1
		dc.b    $02, $E0, $E0, $41, $E7, $90, $91, $80, $84, $12, $13, $10, $01, $03, $01, $13
		dc.b    $10, $11, $12, $13, $21, $01, $2D, $03, $07, $2D, $00, $28, $2B, $29, $2B, $01
		dc.b    $07, $05, $03, $2B, $29, $2B, $19, $03, $02, $33, $2D, $03, $0A, $1D, $4D, $4E
		dc.b    $4D, $7E, $62, $7A, $78, $0F, $02, $02, $07, $77, $1A, $07, $35, $36, $37, $33
		dc.b    $2A, $1A, $73, $74, $74, $75, $05, $74, $74, $02, $E6, $91, $90, $E1, $90, $85
		dc.b    $85, $80, $17, $14, $01, $03, $01, $17, $14, $15, $16, $17, $21, $01, $2C, $03
		dc.b    $01, $2C, $16, $01, $2C, $03, $01, $2C, $03, $0F, $40, $46, $47, $39, $03, $6A
		dc.b    $7F, $00, $79, $64, $71, $39, $3A, $48, $49, $29, $1B, $7C, $78, $79, $7A, $07
		dc.b    $0E, $79, $7A, $06, $E7, $90, $91, $EA, $91, $88, $88, $8D, $1B, $18, $01, $03
		dc.b    $01, $1B, $18, $19, $1A, $1B, $21, $01, $2D, $03, $01, $2D, $16, $01, $2D, $03
		dc.b    $01, $2D, $03, $0F, $42, $3A, $39, $3A, $79, $17, $7B, $00, $02, $17, $79, $3A
		dc.b    $39, $3A, $3B, $29, $1B, $83, $7E, $7F, $80, $02, $FC, $7F, $80, $05, $12, $91
		dc.b    $90, $1C, $90, $8D, $8D, $86, $1F, $1C, $01, $03, $01, $1F, $1C, $1D, $1E, $1F
		dc.b    $21, $01, $2C, $03, $01, $2C, $16, $01, $2C, $03, $01, $2C, $03, $0F, $44, $3E
		dc.b    $3D, $3E, $7B, $12, $79, $00, $02, $12, $7B, $3E, $3D, $3E, $3F, $29, $1B, $85
		dc.b    $86, $87, $88, $0C, $0C, $0C, $88, $13, $11, $17, $9D, $04, $04, $80, $80, $80
		dc.b    $80, $1C, $01, $03, $01, $1F, $1C, $1D, $1E, $1F, $11, $04, $01, $01, $01, $01
		dc.b    $0B, $06, $4C, $4A, $4C, $4F, $00, $05, $16, $01, $07, $03, $01, $07, $08, $01
		dc.b    $05, $03, $06, $05, $64, $4F, $4C, $4F, $28, $2B, $04, $53, $53, $53, $53, $11
		dc.b    $04, $F0, $F0, $F0, $F0, $08, $04, $A2, $A2, $A2, $A2, $84, $24, $00, $15, $69
		dc.b    $0A, $00, $15, $00, $97, $00, $14, $20, $97, $20, $01, $04, $38, $41, $00, $41
		dc.b    $01, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $16, $00
		dc.b    $16, $00, $10, $00, $10, $00, $34, $00, $34, $00, $10, $00, $10, $00, $12, $00
		dc.b    $12, $00, $10, $00, $10, $00, $16, $00, $16, $00, $10, $00, $10, $00, $32, $00
		dc.b    $22, $00, $10, $00, $30, $03, $29, $20, $00, $30, $00, $10, $00, $10, $00, $1E
		dc.b    $00, $01, $00, $11, $00, $2F, $00, $01, $00, $01, $00, $11, $00, $11, $00, $01
		dc.b    $00, $01, $00, $11, $00, $F7, $00, $11, $00, $01, $00, $11, $60, $A3, $60, $67
		dc.b    $05, $33, $50, $00, $72, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $00, $32, $00, $32, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $00, $72, $00, $72, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00
		dc.b    $10, $00, $02, $00, $32, $03, $37, $10, $00, $32, $00, $12, $00, $10, $00, $10
		dc.b    $00, $56, $00, $56, $00, $10, $00, $10, $00, $12, $00, $46, $00, $10, $00, $44
		dc.b    $00, $72, $00, $72, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10
		dc.b    $00, $32, $00, $32, $00, $10, $00, $10, $00, $12, $00, $06, $00, $10, $03, $03
		dc.b    $26, $00, $38, $03, $15, $10, $00, $37, $00, $3B, $00, $10, $00, $10, $00, $71
		dc.b    $08, $76, $00, $10, $00, $10, $00, $4C, $00, $4C, $04, $80, $B4, $60, $9D, $60
		dc.b    $4D, $00, $10, $00, $C0, $00, $17, $00, $17, $00, $10, $00, $10, $00, $11, $00
		dc.b    $11, $00, $10, $00, $10, $00, $13, $00, $13, $00, $10, $00, $E5, $08, $01, $00
		dc.b    $E4, $00, $0A, $00, $1B, $08, $1A, $08, $0B, $00, $1B, $00, $0A, $08, $0D, $08
		dc.b    $0D, $08, $03, $00, $0A, $00, $02, $08, $0B, $00, $0A, $08, $03, $08, $05, $00
		dc.b    $0C, $00, $91, $00, $0C, $08, $90, $08, $0D, $00, $0C, $00, $91, $00, $0C, $08
		dc.b    $DD, $00, $0C, $00, $48, $00, $41, $00, $05, $00, $48, $00, $0C, $00, $03, $00
		dc.b    $36, $00, $01, $00, $04, $00, $3D, $00, $38, $00, $04, $00, $01, $00, $04, $08
		dc.b    $3C, $00, $04, $00, $04, $08, $05, $08, $05, $00, $04, $00, $04, $08, $64, $00
		dc.b    $04, $00, $11, $08, $71, $00, $70, $08, $10, $08, $71, $00, $11, $08, $13, $08
		dc.b    $13, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $51, $00
		dc.b    $50, $00, $E5, $00, $10, $00, $30, $00, $15, $00, $C0, $00, $10, $61, $DB, $69
		dc.b    $DB, $0C, $06, $61, $EC, $01, $56, $00, $04, $02, $0E, $08, $05, $00, $5C, $00
		dc.b    $04, $00, $10, $08, $05, $00, $4C, $08, $71, $03, $0D, $12, $00, $5C, $00, $10
		dc.b    $00, $10, $08, $84, $00, $4C, $00, $C0, $03, $0D, $17, $00, $5C, $00, $10, $00
		dc.b    $10, $00, $11, $00, $4C, $00, $10, $03, $0D, $13, $00, $5C, $00, $10, $00, $10
		dc.b    $00, $11, $00, $4C, $00, $1B, $03, $0D, $0C, $00, $5C, $00, $0A, $00, $10, $00
		dc.b    $04, $00, $4C, $00, $0C, $03, $0B, $41, $00, $5C, $00, $48, $00, $10, $68, $85
		dc.b    $68, $F6, $03, $0D, $04, $00, $5C, $08, $05, $00, $10, $00, $04, $00, $4C, $08
		dc.b    $05, $02, $0E, $08, $71, $00, $5C, $00, $12, $00, $10, $00, $10, $00, $4C, $08
		dc.b    $84, $03, $0D, $C0, $00, $5C, $00, $17, $00, $10, $00, $10, $00, $4C, $00, $11
		dc.b    $03, $0D, $10, $00, $5C, $00, $13, $00, $10, $00, $10, $00, $4C, $00, $11, $03
		dc.b    $0D, $1B, $00, $5C, $00, $0C, $00, $10, $00, $0A, $00, $4C, $00, $04, $03, $0D
		dc.b    $0C, $00, $5C, $00, $41, $00, $10, $00, $48, $09, $1A, $69, $D3, $7C, $03, $20
		dc.b    $00, $20, $05, $03, $20, $00, $20, $80, $F5, $03, $20, $00, $20, $05, $03, $20
		dc.b    $00, $20, $80, $F5, $03, $20, $00, $20, $05, $03, $20, $00, $20, $80, $F5, $03
		dc.b    $20, $00, $20, $05, $03, $20, $00, $20, $80, $F5, $03, $20, $00, $20, $05, $03
		dc.b    $20, $00, $20, $82, $8D, $06, $0E, $0F, $12, $13, $18, $18, $02, $02, $18, $18
		dc.b    $02, $02, $18, $18, $02, $02, $18, $18, $02, $02, $18, $18, $02, $02, $18, $18
		dc.b    $02, $02, $18, $18, $02, $08, $18, $18, $2A, $57, $23, $23, $15, $68, $0E, $2F
		dc.b    $21, $2B, $26, $26, $07, $00, $02, $00, $0C, $0C, $03, $01, $00, $02, $00, $0C
		dc.b    $0C, $03, $01, $00, $02, $00, $0C, $0C, $03, $01, $00, $02, $00, $0C, $0C, $03
		dc.b    $01, $00, $02, $00, $0C, $0C, $03, $01, $00, $02, $00, $0B, $07, $09, $0A, $32
		dc.b    $06, $10, $11, $14, $15, $08, $08, $02, $02, $08, $08, $02, $02, $08, $08, $02
		dc.b    $02, $08, $08, $02, $02, $08, $08, $02, $02, $08, $08, $02, $02, $08, $08, $02
		dc.b    $08, $08, $08, $2D, $50, $3F, $3F, $16, $6B, $0E, $2F, $23, $26, $2E, $2C, $0F
		dc.b    $00, $08, $08, $0B, $09, $0B, $09, $00, $08, $08, $0B, $09, $0B, $09, $00, $08
		dc.b    $08, $0B, $09, $0B, $09, $00, $08, $08, $0B, $09, $0B, $09, $00, $08, $08, $0B
		dc.b    $09, $0B, $09, $00, $08, $08, $03, $08, $09, $0A, $32, $28, $12, $13, $0E, $0F
		dc.b    $08, $08, $18, $18, $08, $08, $18, $18, $08, $08, $18, $18, $08, $08, $18, $18
		dc.b    $08, $08, $18, $18, $08, $08, $18, $18, $08, $08, $18, $18, $08, $08, $2C, $51
		dc.b    $23, $23, $0B, $76, $0E, $2F, $3D, $37, $35, $35, $0A, $00, $0D, $0F, $01, $03
		dc.b    $0C, $0C, $00, $0D, $0F, $01, $03, $0C, $0C, $00, $0D, $0F, $01, $03, $0C, $0C
		dc.b    $00, $0D, $0F, $01, $03, $0C, $0C, $00, $0D, $0F, $01, $03, $0C, $0C, $00, $0D
		dc.b    $0F, $06, $07, $09, $0A, $32, $28, $14, $15, $10, $11, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $23, $5E, $27, $27, $08, $75, $0E
		dc.b    $05, $3F, $3A, $3A, $38, $07, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01
		dc.b    $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04
		dc.b    $03, $01, $03, $01, $03, $04, $0B, $08, $09, $0A, $32, $28, $16, $17, $0D, $0D
		dc.b    $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A
		dc.b    $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $1B, $1A, $2A, $5F
		dc.b    $23, $37, $09, $68, $0E, $05, $39, $27, $3C, $2A, $07, $03, $04, $0C, $0E, $03
		dc.b    $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C
		dc.b    $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0B, $07, $09, $0A, $32
		dc.b    $28, $18, $19, $0E, $0F, $0E, $0E, $16, $16, $0E, $0E, $16, $16, $0E, $0E, $16
		dc.b    $16, $0E, $0E, $16, $16, $0E, $0E, $16, $16, $0E, $0E, $16, $16, $0E, $0E, $16
		dc.b    $16, $0E, $0E, $25, $50, $39, $38, $1C, $68, $0E, $05, $2D, $29, $28, $2B, $07
		dc.b    $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01
		dc.b    $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04
		dc.b    $0B, $08, $09, $0A, $32, $28, $1A, $1B, $10, $11, $02, $02, $1E, $1E, $02, $02
		dc.b    $1E, $1E, $02, $02, $1E, $1E, $02, $02, $1E, $1E, $02, $02, $1E, $1E, $02, $02
		dc.b    $1E, $1E, $02, $02, $1E, $1E, $02, $02, $30, $45, $38, $39, $1C, $68, $0E, $05
		dc.b    $2E, $25, $2B, $28, $07, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03
		dc.b    $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C
		dc.b    $0E, $03, $01, $03, $04, $0B, $07, $09, $0A, $32, $28, $1C, $1D, $12, $13, $0E
		dc.b    $0E, $02, $02, $0E, $0E, $02, $02, $0E, $0E, $02, $02, $0E, $0E, $02, $02, $0E
		dc.b    $0E, $02, $02, $0E, $0E, $02, $02, $0E, $0E, $02, $02, $0E, $0E, $2F, $5A, $3F
		dc.b    $29, $1C, $7F, $0E, $05, $2F, $3C, $2A, $3E, $07, $03, $04, $03, $01, $03, $01
		dc.b    $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01
		dc.b    $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $0B, $08, $09, $0A, $32, $28
		dc.b    $0D, $0D, $14, $15, $19, $18, $06, $06, $19, $18, $06, $06, $19, $18, $06, $06
		dc.b    $19, $18, $06, $06, $19, $18, $06, $06, $19, $18, $06, $06, $19, $18, $06, $06
		dc.b    $19, $18, $52, $5F, $28, $29, $65, $68, $0E, $05, $29, $23, $2C, $2E, $07, $03
		dc.b    $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03
		dc.b    $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0B
		dc.b    $07, $09, $0A, $32, $28, $0E, $0F, $0D, $0D, $14, $14, $19, $18, $14, $14, $19
		dc.b    $18, $14, $14, $19, $18, $14, $14, $19, $18, $14, $14, $19, $18, $14, $14, $19
		dc.b    $18, $14, $14, $19, $18, $14, $14, $55, $58, $29, $29, $66, $6B, $0E, $05, $2B
		dc.b    $2E, $2E, $2C, $07, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01
		dc.b    $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01
		dc.b    $03, $01, $03, $04, $0B, $08, $09, $0A, $32, $28, $10, $11, $1A, $1B, $0C, $0C
		dc.b    $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C
		dc.b    $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $0C, $54, $59, $39, $39
		dc.b    $6B, $66, $0E, $05, $25, $2F, $20, $22, $07, $03, $04, $0C, $0E, $03, $01, $03
		dc.b    $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0C, $0E, $03
		dc.b    $01, $03, $04, $0C, $0E, $03, $01, $03, $04, $0B, $07, $09, $0A, $32, $28, $12
		dc.b    $13, $1C, $1D, $1F, $1E, $04, $04, $1F, $1E, $04, $04, $1F, $1E, $04, $04, $1F
		dc.b    $1E, $04, $04, $1F, $1E, $04, $04, $1F, $1E, $04, $04, $1F, $1E, $04, $04, $1F
		dc.b    $1E, $5B, $56, $39, $39, $68, $65, $0E, $05, $27, $22, $22, $20, $07, $03, $04
		dc.b    $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01
		dc.b    $03, $04, $03, $01, $03, $01, $03, $04, $03, $01, $03, $01, $03, $04, $0B, $08
		dc.b    $09, $0A, $84, $E9, $00, $0D, $00, $00
Rock_Splashing: ; loc_4B76C: 
		BINCLUDE  "data\sprites\rockspsh.dat"				
Unknow_Palett_0x04BAAC: ; loc_4BAAC:
		dc.w    $0000, $0A20, $0666, $0888, $0CAA, $0ECC, $0246, $0008
		dc.w    $000E, $046A, $068C, $08CE, $0E22, $0E62, $0000, $0EEE
		dc.w    $0000, $0242, $0462, $0220, $0244, $0464, $0468, $068A
		dc.w    $08CC, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE
		dc.w    $0000, $0620, $0C20, $0E42, $0E66, $0A0E, $0A0E, $0A0E
		dc.w    $0A0E, $0006, $000E, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $06CE, $02AE, $026C, $0248, $0CCE, $006E, $004E
		dc.w    $088E, $066C, $044A, $0028, $0004, $0060, $0000, $0CEE
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0C00, $0000, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $0000, $0000, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0200, $0422, $0666, $0224, $0226, $0446, $0046
		dc.w    $0048, $0400, $0888, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0200, $0644, $0888, $0428, $0448, $064A, $006A
		dc.w    $008A, $0800, $0AAA, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0422, $0866, $0AAA, $042A, $064C, $0A6C, $006C
		dc.w    $00CC, $0A00, $0CCC, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0644, $0A88, $0CCC, $062C, $084E, $0C8E, $008E
		dc.w    $00EE, $0C00, $0EEE, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0848, $0C8C, $0EAE, $0A0E, $0C2E, $0C6E, $086E
		dc.w    $0A8E, $0404, $0ECE, $0282, $02C2, $04E2, $0000, $0EEE
		dc.w    $0000, $0020, $0242, $0020, $0222, $0242, $0244, $0266
		dc.w    $0488, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE
		dc.w    $0000, $0000, $0000, $0000, $0000, $0000, $0000, $0000
		dc.w    $0000, $00EE, $000A, $024C, $006E, $00AE, $0000, $0EEE
Unknow_Data_0x04BC4C: ; loc_4BC4C:
		dc.b    $20, $00, $00, $20, $14, $CC, $BB, $BB, $BB, $77, $07, $12, $10, $11, $07, $63
		dc.b    $30, $30, $10, $76, $30, $03, $01, $00, $10, $02, $04, $07, $70, $00, $30, $03
		dc.b    $46, $30, $10, $07, $52, $11, $10, $77, $00, $21, $21, $22, $00, $02, $32, $11
		dc.b    $00, $11, $21, $02, $00, $10, $21, $12, $00, $33, $31, $01, $00, $11, $22, $22
		dc.b    $07, $77, $77, $77, $77, $77, $77, $77, $21, $22, $12, $10, $32, $00, $30, $30
		dc.b    $22, $10, $30, $00, $23, $21, $00, $30, $30, $31, $33, $00, $22, $22, $21, $10
		dc.b    $77, $77, $77, $77, $07, $77, $77, $02, $0B, $21, $70, $77, $00, $06, $70, $11
		dc.b    $00, $57, $01, $03, $02, $04, $10, $30, $07, $70, $04, $01, $03, $02, $09, $01
		dc.b    $03, $00, $76, $10, $33, $00, $10, $33, $02, $01, $33, $02, $01, $01, $03, $01
		dc.b    $11, $03, $01, $01, $02, $02, $01, $10, $02, $02, $01, $10, $02, $0A, $01, $10
		dc.b    $00, $11, $10, $10, $11, $00, $0D, $0D, $02, $02, $D0, $D0, $02, $09, $D0, $00
		dc.b    $10, $0D, $DD, $00, $10, $0D, $0D, $06, $02, $0D, $D0, $02, $07, $0D, $0D, $DD
		dc.b    $DD, $DD, $DD, $DD, $18, $13, $99, $96, $77, $77, $0F, $F1, $33, $33, $07, $10
		dc.b    $00, $44, $00, $03, $04, $00, $07, $00, $40, $07, $01, $04, $05, $08, $D2, $30
		dc.b    $40, $44, $44, $44, $40, $33, $02, $02, $04, $30, $02, $26, $04, $00, $04, $40
		dc.b    $03, $DE, $43, $30, $7E, $FE, $30, $74, $EF, $13, $03, $43, $00, $30, $ED, $D8
		dc.b    $69, $88, $06, $63, $22, $11, $03, $21, $0D, $D0, $01, $0D, $D0, $D0, $00, $D0
		dc.b    $0D, $10, $03, $01, $1D, $02, $02, $DD, $0D, $02, $20, $D0, $D0, $40, $DD, $DD
		dc.b    $D0, $0D, $DD, $D0, $01, $D0, $00, $0D, $01, $DD, $00, $0D, $01, $DD, $0D, $D1
		dc.b    $45, $00, $D0, $15, $49, $0D, $01, $54, $D0, $D0, $10, $02, $3E, $44, $53, $62
		dc.b    $CC, $06, $63, $22, $1C, $00, $31, $DD, $DD, $60, $1D, $00, $D0, $66, $20, $0D
		dc.b    $10, $DE, $6C, $00, $1D, $47, $E5, $DD, $0D, $40, $00, $D0, $D0, $9D, $A4, $DD
		dc.b    $D0, $0D, $DD, $D0, $01, $D0, $00, $0D, $01, $DD, $00, $0D, $01, $DD, $0D, $D1
		dc.b    $45, $00, $D0, $15, $49, $0D, $01, $54, $D0, $D0, $10, $02, $0B, $44, $5A, $EA
		dc.b    $77, $0F, $F1, $33, $77, $07, $13, $04, $02, $04, $13, $40, $00, $08, $03, $03
		dc.b    $DE, $F1, $70, $02, $01, $FF, $02, $0C, $30, $00, $04, $00, $33, $2D, $30, $44
		dc.b    $44, $44, $40, $33, $02, $02, $04, $30, $02, $18, $04, $00, $04, $40, $03, $DE
		dc.b    $43, $30, $7E, $FE, $30, $74, $EF, $13, $03, $43, $00, $30, $B9, $47, $96, $44
		dc.b    $00, $0D, $03, $1E, $DD, $D0, $00, $01, $1C, $1C, $CC, $33, $33, $33, $33, $03
		dc.b    $2F, $FF, $6F, $31, $DD, $09, $49, $00, $D4, $94, $D0, $01, $26, $63, $97, $00
		dc.b    $30, $10, $02, $02, $30, $10, $03, $56, $17, $70, $03, $01, $00, $10, $30, $10
		dc.b    $76, $00, $11, $07, $71, $10, $77, $70, $77, $77, $07, $77, $77, $77, $00, $21
		dc.b    $21, $12, $00, $31, $33, $13, $00, $11, $33, $13, $00, $20, $02, $33, $00, $33
		dc.b    $32, $33, $00, $12, $11, $12, $07, $77, $77, $77, $77, $77, $77, $77, $12, $12
		dc.b    $11, $20, $31, $33, $32, $30, $32, $13, $32, $30, $33, $21, $30, $30, $33, $33
		dc.b    $33, $00, $11, $20, $12, $10, $77, $77, $77, $77, $07, $76, $65, $55, $06, $01
		dc.b    $03, $02, $0E, $01, $10, $33, $07, $77, $01, $11, $06, $55, $33, $33, $01, $33
		dc.b    $11, $02, $01, $03, $02, $02, $52, $30, $05, $01, $10, $03, $2F, $11, $33, $33
		dc.b    $00, $10, $11, $11, $22, $23, $22, $02, $23, $32, $10, $00, $01, $00, $D1, $03
		dc.b    $00, $10, $D0, $32, $CC, $CD, $00, $0D, $D0, $D0, $00, $0D, $DD, $D0, $11, $11
		dc.b    $C1, $CC, $33, $33, $33, $33, $22, $FF, $FF, $F0, $00, $DD, $03, $01, $DD, $02
		dc.b    $01, $DD, $02, $01, $0F, $08, $18, $CC, $CC, $CC, $CC, $33, $33, $33, $33, $03
		dc.b    $2F, $FF, $6F, $31, $DD, $09, $49, $00, $C4, $E4, $D0, $5B, $BD, $E9, $49, $02
		dc.b    $02, $04, $40, $03, $01, $04, $02, $36, $40, $04, $00, $03, $04, $00, $07, $10
		dc.b    $00, $44, $08, $76, $53, $33, $00, $88, $8E, $EE, $99, $DD, $0F, $EE, $44, $40
		dc.b    $EF, $10, $33, $74, $7D, $FE, $30, $34, $04, $9E, $47, $40, $44, $07, $40, $04
		dc.b    $44, $04, $37, $77, $77, $73, $EE, $EE, $EE, $EE, $04, $99, $99, $44, $02, $01
		dc.b    $0D, $02, $03, $D0, $00, $12, $02, $80, $82, $0D, $13, $01, $0D, $00, $DC, $03
		dc.b    $10, $DD, $00, $06, $32, $11, $CC, $00, $66, $55, $55, $94, $45, $04, $94, $DD
		dc.b    $01, $54, $C1, $1D, $D0, $15, $55, $1D, $0D, $D1, $55, $D0, $00, $0D, $11, $00
		dc.b    $0D, $DD, $10, $CC, $C1, $11, $01, $55, $55, $55, $55, $EE, $F0, $99, $44, $11
		dc.b    $F5, $0D, $00, $FF, $6C, $00, $12, $66, $20, $0D, $13, $00, $0D, $00, $DC, $60
		dc.b    $10, $DD, $00, $06, $32, $11, $CC, $00, $66, $55, $55, $94, $45, $04, $94, $DD
		dc.b    $01, $54, $C1, $1D, $D0, $15, $55, $1D, $0D, $D1, $55, $D0, $00, $0D, $11, $00
		dc.b    $0D, $DD, $10, $CC, $C1, $11, $01, $55, $55, $55, $55, $EF, $F0, $ED, $99, $10
		dc.b    $FE, $34, $00, $FF, $E3, $40, $04, $0F, $03, $40, $04, $02, $32, $04, $00, $07
		dc.b    $10, $30, $44, $08, $71, $03, $33, $00, $8F, $EE, $EE, $99, $DD, $0F, $EE, $44
		dc.b    $40, $EF, $10, $33, $74, $7D, $FE, $30, $34, $04, $9E, $47, $40, $44, $07, $40
		dc.b    $04, $44, $04, $37, $77, $77, $73, $EE, $EE, $EE, $EE, $07, $76, $65, $55, $06
		dc.b    $01, $03, $02, $0D, $01, $10, $33, $07, $77, $01, $11, $06, $55, $22, $22, $01
		dc.b    $33, $03, $01, $03, $02, $04, $52, $30, $00, $11, $03, $01, $10, $03, $0D, $11
		dc.b    $33, $33, $00, $10, $11, $11, $22, $23, $22, $22, $22, $32, $02, $01, $01, $03
		dc.b    $1C, $10, $00, $11, $11, $DD, $DD, $00, $0D, $D0, $D0, $00, $0D, $DD, $D0, $11
		dc.b    $11, $C1, $CC, $33, $33, $33, $33, $12, $FF, $FF, $FF, $00, $DD, $03, $01, $DD
		dc.b    $02, $01, $ED, $0B, $0C, $CC, $CC, $CC, $CC, $33, $33, $33, $33, $FF, $FF, $FF
		dc.b    $FF, $08, $06, $9E, $FC, $CC, $CC, $00, $03, $07, $01, $03, $07, $01, $03, $07
		dc.b    $01, $03, $02, $07, $52, $31, $01, $11, $00, $01, $10, $03, $02, $11, $11, $02
		dc.b    $0A, $22, $22, $00, $02, $22, $3E, $01, $22, $01, $0D, $02, $2A, $01, $00, $10
		dc.b    $00, $01, $00, $31, $31, $CD, $DD, $00, $0D, $D0, $D0, $00, $1C, $1C, $0D, $02
		dc.b    $22, $33, $10, $3E, $EE, $F3, $31, $0D, $DD, $0C, $33, $00, $DD, $D0, $C0, $00
		dc.b    $0D, $D0, $00, $DD, $0D, $00, $0F, $04, $01, $0D, $03, $01, $DD, $03, $0B, $0D
		dc.b    $00, $D0, $00, $1D, $D0, $D0, $00, $0D, $DD, $0D, $02, $15, $DD, $DD, $00, $23
		dc.b    $3E, $3E, $EE, $21, $22, $12, $10, $32, $00, $30, $37, $22, $10, $30, $54, $23
		dc.b    $21, $02, $3F, $30, $31, $33, $04, $22, $22, $21, $05, $77, $77, $77, $00, $77
		dc.b    $77, $70, $63, $21, $22, $10, $06, $32, $00, $30, $66, $22, $10, $55, $46, $23
		dc.b    $21, $0C, $D5, $30, $31, $0C, $C5, $22, $22, $75, $55, $77, $77, $70, $5C, $00
		dc.b    $0F, $EE, $B7, $08, $F1, $03, $33, $00, $10, $30, $44, $00, $03, $04, $00, $07
		dc.b    $00, $40, $07, $01, $04, $05, $07, $D2, $30, $40, $44, $44, $44, $40, $02, $05
		dc.b    $04, $04, $44, $04, $04, $02, $24, $04, $40, $04, $40, $40, $40, $04, $40, $40
		dc.b    $04, $40, $44, $04, $44, $04, $04, $9D, $BF, $BB, $8C, $06, $03, $22, $11, $03
		dc.b    $21, $0D, $D0, $01, $0D, $D0, $D0, $00, $D0, $0D, $10, $03, $01, $1D, $02, $02
		dc.b    $DD, $0D, $02, $68, $D0, $D0, $40, $DD, $DD, $D0, $0D, $D0, $0D, $D1, $D0, $D0
		dc.b    $0D, $0C, $DD, $DD, $00, $DC, $DD, $0D, $0D, $DC, $00, $D1, $0D, $00, $0D, $11
		dc.b    $1D, $0D, $D0, $0D, $C0, $D1, $99, $84, $44, $98, $44, $00, $04, $44, $40, $44
		dc.b    $04, $44, $34, $40, $44, $00, $30, $44, $40, $40, $44, $00, $44, $04, $04, $40
		dc.b    $44, $40, $40, $40, $00, $40, $99, $D9, $9D, $DD, $DD, $D0, $0D, $DD, $DD, $0D
		dc.b    $DD, $D0, $0D, $00, $0D, $DD, $1D, $0D, $DC, $0D, $1D, $D0, $11, $D0, $DD, $01
		dc.b    $CD, $D0, $D0, $1C, $00, $DC, $44, $95, $55, $89, $77, $BC, $02, $0A, $11, $07
		dc.b    $C0, $00, $30, $10, $7C, $00, $03, $01, $04, $04, $07, $C0, $00, $30, $03, $09
		dc.b    $30, $10, $0C, $25, $10, $6B, $CC, $00, $10, $07, $01, $01, $03, $13, $10, $0C
		dc.b    $CC, $00, $77, $76, $66, $00, $76, $10, $00, $70, $76, $66, $66, $CC, $CC, $CC
		dc.b    $CC, $0C, $08, $CC, $CC, $CC, $CC, $66, $66, $66, $66, $04, $08, $66, $66, $66
		dc.b    $66, $CC, $CC, $CC, $CC, $0C, $08, $CC, $CC, $CC, $CC, $06, $66, $66, $66, $04
		dc.b    $08, $06, $66, $66, $66, $07, $66, $55, $55, $09, $0E, $11, $23, $33, $07, $77
		dc.b    $01, $11, $06, $55, $33, $33, $01, $33, $11, $02, $01, $03, $02, $02, $53, $10
		dc.b    $02, $22, $10, $00, $01, $00, $01, $00, $01, $00, $20, $00, $01, $00, $12, $00
		dc.b    $01, $00, $22, $00, $01, $00, $10, $00, $01, $00, $D1, $03, $00, $10, $D0, $3F
		dc.b    $CC, $C2, $00, $D0, $03, $01, $0D, $02, $02, $0D, $DD, $02, $02, $0D, $0D, $03
		dc.b    $01, $DD, $03, $01, $DD, $03, $01, $DD, $02, $01, $10, $02, $03, $0F, $00, $0D
		dc.b    $03, $11, $DD, $D0, $00, $01, $1C, $1C, $CC, $33, $33, $33, $33, $03, $2F, $FF
		dc.b    $FF, $31, $DD, $03, $47, $DD, $D0, $00, $53, $3E, $3E, $E9, $00, $21, $21, $25
		dc.b    $00, $02, $32, $11, $00, $11, $21, $02, $00, $10, $21, $12, $00, $33, $31, $04
		dc.b    $00, $11, $22, $56, $07, $77, $77, $03, $07, $77, $77, $0C, $00, $21, $21, $0F
		dc.b    $00, $02, $32, $46, $00, $11, $21, $06, $00, $10, $21, $12, $00, $33, $31, $01
		dc.b    $00, $11, $22, $22, $07, $77, $77, $77, $0F, $ED, $9D, $D9, $02, $02, $04, $40
		dc.b    $03, $01, $04, $02, $36, $40, $04, $00, $03, $04, $00, $07, $10, $00, $44, $08
		dc.b    $76, $53, $33, $00, $88, $8E, $EE, $99, $D9, $D9, $99, $40, $44, $30, $44, $04
		dc.b    $04, $74, $03, $00, $44, $04, $43, $44, $40, $44, $04, $40, $04, $44, $04, $37
		dc.b    $77, $77, $73, $EE, $EE, $EE, $EE, $04, $99, $49, $44, $02, $01, $DD, $02, $03
		dc.b    $D0, $00, $12, $02, $3E, $0D, $13, $01, $0D, $00, $DC, $03, $10, $DD, $00, $06
		dc.b    $32, $11, $CC, $00, $66, $55, $55, $94, $45, $99, $99, $DD, $01, $CD, $D0, $1D
		dc.b    $D0, $11, $D0, $1D, $0D, $DC, $0D, $0D, $00, $0D, $DD, $DD, $0D, $DD, $D0, $CC
		dc.b    $C1, $1C, $CC, $55, $55, $55, $55, $99, $99, $99, $9D, $04, $40, $04, $04, $04
		dc.b    $40, $04, $40, $02, $36, $40, $40, $44, $40, $40, $00, $04, $40, $44, $44, $37
		dc.b    $77, $33, $33, $EE, $EE, $EE, $EE, $94, $54, $59, $94, $0D, $11, $1D, $0D, $00
		dc.b    $D1, $0D, $00, $DD, $0D, $0D, $DC, $DD, $DD, $00, $DC, $D0, $D0, $0D, $0C, $1C
		dc.b    $C1, $1C, $C0, $55, $55, $55, $55, $07, $66, $55, $54, $04, $7E, $47, $10, $33
		dc.b    $01, $20, $76, $10, $32, $69, $46, $76, $67, $90, $D3, $06, $54, $D0, $C5, $52
		dc.b    $CD, $0C, $54, $CD, $00, $0C, $72, $CC, $DD, $00, $11, $55, $44, $1F, $67, $65
		dc.b    $99, $56, $65, $FC, $00, $76, $63, $CD, $DD, $33, $66, $31, $12, $DC, $26, $63
		dc.b    $30, $00, $D2, $60, $32, $D0, $DD, $FF, $12, $49, $4F, $DD, $10, $45, $66, $42
		dc.b    $36, $D1, $36, $66, $66, $C1, $30, $60, $06, $35, $62, $99, $94, $65, $9D, $00
		dc.b    $0D, $9C, $0D, $DD, $DD, $CF, $92, $0D, $D4, $36, $63, $D0, $D0, $66, $3C, $00
		dc.b    $10, $63, $10, $0D, $26, $03, $1D, $D1, $70, $66, $31, $13, $03, $94, $65, $36
		dc.b    $60, $0D, $46, $66, $31, $9E, $23, $53, $10, $00, $03, $02, $0C, $01, $33, $11
		dc.b    $00, $06, $55, $33, $33, $07, $76, $11, $11, $03, $01, $33, $02, $01, $03, $05
		dc.b    $18, $93, $00, $30, $01, $D1, $03, $00, $10, $10, $00, $01, $00, $22, $02, $23
		dc.b    $32, $11, $11, $22, $23, $33, $33, $00, $10, $03, $01, $11, $03, $07, $10, $11
		dc.b    $CC, $CC, $D2, $00, $DD, $03, $01, $DD, $02, $17, $22, $FF, $FF, $F0, $33, $33
		dc.b    $33, $33, $11, $11, $C1, $CC, $00, $0D, $DD, $D0, $00, $0D, $D0, $D0, $10, $0D
		dc.b    $D0, $02, $05, $DD, $D0, $00, $31, $DD, $02, $0C, $03, $2F, $FF, $FF, $33, $33
		dc.b    $33, $33, $CC, $CC, $CC, $CC, $08, $46, $9E, $EE, $EE, $EE, $00, $21, $21, $22
		dc.b    $00, $02, $32, $11, $47, $31, $21, $02, $00, $10, $21, $12, $40, $03, $31, $01
		dc.b    $50, $01, $22, $22, $00, $77, $77, $77, $36, $07, $77, $77, $60, $01, $21, $22
		dc.b    $66, $01, $32, $11, $64, $57, $21, $02, $5D, $C0, $21, $12, $5C, $C0, $31, $01
		dc.b    $55, $57, $22, $22, $C5, $00, $77, $77, $92, $77, $0C, $CC, $00, $06, $0F, $01
		dc.b    $01, $03, $01, $07, $02, $02, $07, $77, $02, $04, $CC, $CB, $0C, $BB, $02, $01
		dc.b    $06, $13, $01, $06, $03, $02, $07, $77, $02, $02, $CB, $CC, $18, $08, $66, $66
		dc.b    $66, $00, $66, $66, $AD, $BC, $02, $01, $01, $04, $01, $10, $04, $08, $CC, $CC
		dc.b    $01, $00, $66, $66, $77, $10, $02, $0A, $17, $70, $66, $66, $67, $00, $CC, $CC
		dc.b    $CC, $CC, $03, $01, $06, $03, $01, $69, $03, $01, $05, $03, $01, $03, $03, $01
		dc.b    $06, $02, $02, $06, $95, $02, $02, $6D, $53, $02, $03, $6B, $A9, $60, $03, $02
		dc.b    $D9, $66, $02, $06, $06, $9C, $60, $00, $04, $53, $02, $06, $02, $CF, $60, $00
		dc.b    $D9, $66, $02, $0F, $06, $66, $60, $00, $FA, $F3, $E8, $88, $50, $CC, $24, $44
		dc.b    $06, $C5, $60, $02, $01, $50, $02, $01, $06, $03, $02, $65, $50, $02, $07, $2C
		dc.b    $C5, $67, $00, $0D, $C3, $67, $02, $0F, $1F, $56, $59, $42, $1D, $10, $30, $06
		dc.b    $52, $10, $0C, $00, $06, $36, $63, $02, $02, $60, $06, $02, $13, $07, $66, $00
		dc.b    $07, $61, $01, $07, $61, $00, $07, $93, $30, $66, $66, $C1, $56, $00, $06, $05
		dc.b    $03, $01, $30, $03, $01, $60, $07, $01, $06, $03, $12, $52, $44, $66, $00, $0D
		dc.b    $D1, $60, $44, $5C, $DC, $56, $00, $05, $1D, $00, $10, $00, $52, $03, $1D, $06
		dc.b    $50, $30, $00, $06, $67, $60, $65, $92, $00, $01, $63, $F0, $31, $00, $06, $12
		dc.b    $30, $50, $70, $01, $03, $00, $10, $01, $03, $00, $27, $71, $02, $14, $21, $00
		dc.b    $10, $30, $33, $67, $01, $03, $22, $17, $70, $11, $77, $77, $07, $77, $55, $55
		dc.b    $54, $54, $02, $02, $01, $10, $02, $02, $01, $10, $02, $02, $01, $10, $03, $01
		dc.b    $01, $03, $02, $11, $33, $02, $03, $01, $10, $33, $02, $07, $32, $2F, $1C, $CC
		dc.b    $00, $0D, $D0, $05, $07, $10, $0D, $0D, $00, $10, $0D, $DD, $03, $01, $D0, $03
		dc.b    $0A, $D0, $D0, $11, $00, $0D, $0D, $CC, $DD, $DD, $DD, $18, $48, $DD, $DD, $DD
		dc.b    $DD, $43, $33, $33, $33, $71, $22, $12, $10, $12, $00, $30, $30, $22, $10, $30
		dc.b    $00, $23, $21, $00, $30, $63, $31, $33, $00, $66, $22, $21, $10, $30, $77, $77
		dc.b    $77, $C0, $77, $77, $77, $F0, $12, $12, $10, $67, $30, $30, $30, $61, $10, $30
		dc.b    $00, $03, $21, $00, $30, $30, $31, $33, $00, $22, $22, $21, $10, $77, $77, $77
		dc.b    $77, $CC, $CC, $CC, $CC, $04, $01, $60, $07, $01, $C6, $02, $11, $06, $10, $00
		dc.b    $06, $99, $10, $06, $99, $25, $30, $99, $36, $DC, $96, $9F, $A9, $0F, $02, $22
		dc.b    $06, $F2, $00, $06, $6F, $24, $06, $9F, $03, $40, $99, $3F, $F1, $00, $24, $C0
		dc.b    $30, $40, $DD, $60, $00, $04, $66, $00, $31, $01, $AB, $BD, $33, $DC, $54, $44
		dc.b    $52, $CF, $02, $02, $04, $13, $03, $01, $41, $04, $02, $44, $40, $02, $0D, $12
		dc.b    $14, $00, $40, $3F, $C2, $44, $00, $96, $69, $BB, $BB, $60, $03, $01, $F6, $03
		dc.b    $01, $30, $03, $05, $0F, $60, $00, $06, $13, $02, $01, $6D, $02, $24, $06, $D1
		dc.b    $13, $00, $6D, $1C, $A9, $66, $D1, $C0, $00, $6D, $1C, $FC, $06, $91, $CF, $25
		dc.b    $69, $4C, $F2, $40, $94, $DF, $24, $44, $4D, $03, $46, $DD, $D6, $01, $6F, $00
		dc.b    $60, $01, $02, $16, $9A, $C0, $00, $06, $25, $55, $2C, $F6, $40, $04, $01, $2F
		dc.b    $00, $42, $D2, $02, $00, $0F, $0F, $24, $40, $0F, $02, $34, $D0, $42, $FF, $20
		dc.b    $00, $04, $26, $45, $F3, $33, $27, $41, $55, $49, $CD, $37, $51, $DD, $C9, $40
		dc.b    $00, $C4, $55, $50, $52, $57, $01, $C0, $66, $00, $74, $00, $F4, $07, $07, $90
		dc.b    $0D, $46, $77, $77, $99, $41, $76, $17, $77, $77, $76, $66, $00, $07, $77, $06
		dc.b    $03, $01, $77, $10, $36, $33, $32, $11, $E3, $21, $23, $0F, $0D, $65, $66, $0F
		dc.b    $CD, $04, $50, $66, $52, $74, $10, $05, $56, $00, $D0, $0C, $10, $07, $97, $0D
		dc.b    $47, $00, $70, $04, $70, $27, $71, $66, $72, $C4, $56, $60, $00, $0D, $C4, $66
		dc.b    $00, $CD, $0D, $36, $00, $31, $00, $10, $00, $63, $D0, $03, $0D, $D0, $00, $01
		dc.b    $03, $D0, $16, $60, $02, $2F, $05, $30, $00, $03, $03, $03, $03, $00, $01, $05
		dc.b    $01, $03, $0E, $0B, $4E, $13, $00, $11, $00, $21, $00, $11, $0D, $C2, $23, $02
		dc.b    $27, $DC, $21, $22, $10, $0D, $CE, $EE, $01, $00, $DD, $D0, $01, $10, $10, $0D
		dc.b    $01, $11, $10, $00, $1C, $0C, $DD, $02, $0D, $0D, $0D, $10, $11, $11, $C1, $33
		dc.b    $23, $33, $33, $00, $EF, $FF, $F2, $03, $02, $08, $0D, $20, $D0, $D0, $00, $D0
		dc.b    $0D, $D0, $02, $01, $10, $02, $02, $0F, $1D, $03, $01, $0D, $03, $01, $0D, $03
		dc.b    $02, $10, $D0, $02, $02, $0D, $D0, $0A, $09, $5F, $27, $44, $AA, $03, $04, $30
		dc.b    $00, $08, $04, $01, $31, $02, $07, $07, $80, $40, $E0, $00, $03, $03, $02, $0F
		dc.b    $78, $10, $00, $07, $70, $34, $00, $33, $DD, $61, $63, $00, $03, $40, $3C, $03
		dc.b    $01, $8B, $02, $2B, $13, $00, $0E, $04, $08, $70, $00, $30, $30, $10, $00, $01
		dc.b    $87, $10, $00, $43, $07, $77, $98, $CD, $AA, $CC, $0F, $CF, $06, $00, $CF, $C9
		dc.b    $C6, $66, $33, $35, $59, $99, $FC, $FC, $95, $55, $9C, $F0, $0C, $31, $41, $02
		dc.b    $25, $01, $DD, $F0, $00, $FC, $66, $60, $FF, $CC, $06, $60, $F0, $33, $60, $00
		dc.b    $0F, $FF, $9D, $DD, $CC, $CF, $40, $04, $55, $56, $41, $D9, $99, $99, $40, $C0
		dc.b    $FC, $C0, $DC, $C0, $FC, $3F, $02, $02, $CD, $23, $02, $16, $31, $10, $00, $0F
		dc.b    $03, $33, $F0, $0F, $FF, $FF, $69, $99, $99, $99, $66, $65, $55, $54, $FF, $FC
		dc.b    $CC, $CD, $04, $23, $CF, $00, $DC, $00, $3F, $00, $2C, $DF, $F9, $C0, $FD, $1F
		dc.b    $94, $30, $C1, $30, $01, $F0, $30, $F0, $41, $CF, $F3, $0D, $D2, $3F, $F0, $02
		dc.b    $0F, $F0, $FF, $0F, $66, $0F, $DF, $02, $19, $60, $12, $D9, $00, $0F, $31, $40
		dc.b    $66, $60, $F3, $65, $00, $0D, $FF, $FC, $F0, $C1, $00, $0F, $F0, $C3, $F0, $0F
		dc.b    $00, $0F, $02, $1C, $CC, $D9, $FD, $CC, $53, $D4, $31, $0C, $42, $C1, $33, $CF
		dc.b    $01, $33, $F0, $9F, $13, $6F, $9F, $60, $50, $6F, $90, $09, $9F, $FF, $0F, $04
		dc.b    $02, $80, $88, $0F, $FD, $33, $3E, $CA, $AA, $D0, $00, $65, $56, $2C, $C2, $01
		dc.b    $C2, $62, $56, $5D, $0D, $07, $06, $0D, $00, $07, $06, $52, $CD, $00, $67, $76
		dc.b    $52, $00, $02, $17, $76, $70, $12, $10, $07, $77, $77, $00, $07, $06, $66, $77
		dc.b    $76, $46, $03, $45, $62, $D0, $03, $11, $24, $D4, $66, $34, $40, $21, $56, $05
		dc.b    $56, $65, $56, $65, $56, $77, $77, $77, $00, $77, $77, $77, $49, $65, $05, $50
		dc.b    $00, $25, $4C, $15, $4C, $44, $D0, $D1, $55, $4D, $0D, $D1, $30, $2F, $F2, $45
		dc.b    $67, $66, $66, $76, $61, $00, $55, $16, $32, $96, $53, $67, $00, $D3, $06, $01
		dc.b    $00, $13, $00, $73, $01, $56, $07, $13, $33, $07, $62, $22, $22, $61, $31, $DD
		dc.b    $DD, $33, $1D, $D0, $00, $52, $2C, $1C, $CC, $00, $03, $08, $0A, $30, $00, $07
		dc.b    $66, $12, $22, $06, $55, $32, $33, $02, $04, $10, $11, $01, $30, $02, $0A, $53
		dc.b    $31, $11, $1C, $01, $11, $00, $0D, $00, $11, $03, $18, $01, $11, $11, $22, $22
		dc.b    $22, $22, $33, $3E, $33, $22, $11, $0D, $0D, $10, $01, $10, $0D, $D1, $1D, $1D
		dc.b    $DD, $02, $0D, $02, $1F, $D0, $00, $DD, $0D, $10, $11, $C1, $C1, $33, $22, $33
		dc.b    $33, $31, $11, $33, $22, $1D, $03, $11, $D0, $D0, $00, $0D, $DD, $D0, $3C, $00
		dc.b    $D0, $D0, $0D, $D0, $06, $07, $1D, $D0, $D0, $00, $D0, $D0, $D0, $02, $01, $0D
		dc.b    $03, $01, $0D, $06, $06, $EE, $EE, $92, $7A, $21, $22, $02, $1C, $32, $00, $73
		dc.b    $4E, $22, $10, $18, $10, $23, $21, $06, $33, $30, $31, $30, $84, $22, $22, $21
		dc.b    $71, $77, $77, $77, $7B, $3E, $B0, $77, $77, $02, $28, $11, $22, $E4, $37, $02
		dc.b    $11, $01, $81, $21, $02, $33, $63, $21, $12, $48, $03, $31, $01, $17, $11, $22
		dc.b    $22, $B7, $77, $77, $77, $70, $07, $77, $77, $00, $77, $77, $77, $00, $17, $0C
		dc.b    $CC, $00, $01, $07, $01, $10, $03, $01, $01, $02, $02, $70, $70, $02, $0C, $77
		dc.b    $70, $7B, $BB, $77, $77, $77, $77, $CC, $CC, $CC, $CC, $14, $0C, $CB, $BB, $BB
		dc.b    $BB, $07, $77, $77, $77, $CC, $CC, $CC, $CC, $14, $0B, $BB, $BB, $BC, $CC, $77
		dc.b    $77, $70, $60, $CC, $CC, $06, $0C, $01, $10, $02, $01, $01, $04, $13, $70, $BB
		dc.b    $BB, $77, $CC, $21, $22, $15, $A0, $32, $00, $30, $00, $22, $10, $30, $0C, $23
		dc.b    $21, $02, $10, $30, $31, $33, $00, $22, $22, $21, $10, $77, $77, $77, $7C, $CC
		dc.b    $CC, $CC, $C0, $1C, $0E, $11, $11, $11, $11, $06, $66, $66, $66, $05, $67, $77
		dc.b    $77, $00, $31, $03, $02, $43, $10, $02, $02, $64, $31, $02, $03, $06, $43, $10
		dc.b    $02, $0E, $64, $31, $03, $11, $17, $30, $66, $66, $66, $66, $77, $77, $76, $50
		dc.b    $02, $10, $13, $57, $00, $01, $35, $70, $00, $13, $57, $00, $01, $35, $70, $00
		dc.b    $23, $57, $02, $0E, $33, $61, $11, $11, $66, $66, $66, $66, $15, $67, $77, $77
		dc.b    $64, $31, $02, $03, $06, $43, $10, $02, $02, $64, $31, $02, $03, $06, $43, $10
		dc.b    $02, $0D, $64, $31, $11, $11, $17, $33, $66, $66, $66, $00, $77, $77, $76, $03
		dc.b    $01, $13, $02, $02, $01, $35, $02, $09, $13, $57, $00, $01, $35, $70, $00, $23
		dc.b    $57, $02, $04, $30, $70, $00, $12, $05, $01, $10, $03, $01, $31, $03, $02, $43
		dc.b    $10, $02, $02, $64, $31, $02, $03, $06, $43, $10, $02, $06, $64, $31, $12, $00
		dc.b    $06, $40, $03, $01, $73, $02, $02, $01, $35, $02, $10, $13, $57, $00, $01, $35
		dc.b    $70, $00, $13, $57, $00, $01, $35, $70, $00, $23, $57, $02, $02, $05, $70, $02
		dc.b    $01, $55, $03, $02, $10, $10, $02, $02, $64, $31, $02, $03, $06, $43, $10, $02
		dc.b    $02, $64, $31, $02, $03, $06, $43, $10, $02, $02, $64, $31, $02, $02, $06, $33
		dc.b    $06, $01, $01, $03, $01, $13, $02, $02, $01, $35, $02, $09, $13, $57, $00, $01
		dc.b    $35, $70, $00, $23, $57, $02, $81, $04, $05, $DA, $AA, $B8, $55, $03, $32, $22
		dc.b    $10, $B1, $1D, $D0, $C4, $39, $D0, $D0, $0E, $43, $4D, $DD, $00, $34, $39, $0D
		dc.b    $00, $0E, $43, $4D, $00, $D0, $E4, $34, $02, $22, $2C, $40, $22, $23, $30, $73
		dc.b    $0D, $D1, $1B, $35, $DD, $0D, $93, $5D, $01, $D4, $35, $F0, $DC, $93, $52, $00
		dc.b    $04, $35, $F0, $00, $A3, $5F, $0D, $00, $05, $78, $84, $46, $55, $0C, $C7, $76
		dc.b    $10, $17, $71, $10, $64, $3A, $13, $30, $0A, $43, $B1, $10, $C7, $D4, $39, $23
		dc.b    $00, $1C, $43, $B0, $00, $03, $F4, $38, $00, $12, $2D, $40, $71, $11, $11, $73
		dc.b    $00, $03, $3B, $35, $00, $30, $83, $52, $11, $28, $35, $FD, $32, $A3, $5C, $33
		dc.b    $18, $35, $E1, $01, $A3, $52, $12, $11, $05, $CE, $33, $10, $55, $11, $11, $11
		dc.b    $10, $BF, $F2, $30, $34, $34, $0D, $C0, $DE, $43, $4D, $F0, $33, $D4, $39, $32
		dc.b    $01, $2E, $43, $8D, $13, $1D, $E4, $34, $12, $3E, $3D, $40, $11, $11, $11, $73
		dc.b    $03, $2F, $FB, $35, $0C, $D0, $43, $52, $0F, $D4, $35, $FD, $23, $93, $5C, $33
		dc.b    $D8, $35, $F2, $10, $73, $5F, $D1, $31, $05, $C3, $E3, $26, $55, $11, $11, $17
		dc.b    $10, $B3, $30, $00, $94, $38, $03, $00, $7E, $43, $82, $11, $33, $D4, $3A, $23
		dc.b    $10, $1F, $43, $81, $11, $21, $94, $39, $76, $48, $F6, $40, $67, $7C, $C0, $73
		dc.b    $01, $17, $71, $35, $03, $31, $A3, $57, $01, $1B, $35, $B0, $32, $93, $5C, $7C
		dc.b    $0B, $35, $D1, $00, $B3, $5E, $30, $00, $30, $79, $9A, $DE, $03, $01, $44, $02
		dc.b    $02, $01, $01, $02, $09, $13, $57, $00, $01, $35, $70, $00, $13, $57, $02, $02
		dc.b    $35, $70, $02, $01, $57, $02, $02, $05, $70, $02, $01, $36, $03, $02, $43, $10
		dc.b    $02, $02, $64, $31, $02, $03, $06, $43, $10, $02, $02, $64, $31, $02, $03, $06
		dc.b    $43, $10, $02, $02, $64, $32, $02, $02, $06, $40, $03, $01, $44, $02, $02, $01
		dc.b    $01, $02, $10, $13, $57, $00, $01, $35, $70, $00, $13, $57, $00, $01, $35, $70
		dc.b    $00, $13, $57, $02, $05, $05, $70, $00, $12, $36, $03, $02, $43, $10, $02, $02
		dc.b    $64, $31, $02, $03, $06, $43, $10, $02, $02, $64, $31, $02, $02, $06, $43, $03
		dc.b    $06, $64, $00, $12, $00, $06, $70, $03, $01, $44, $02, $02, $01, $01, $02, $17
		dc.b    $13, $57, $00, $01, $35, $70, $00, $13, $57, $00, $03, $03, $61, $11, $66, $66
		dc.b    $66, $66, $60, $77, $77, $77, $36, $03, $02, $43, $10, $02, $02, $64, $31, $02
		dc.b    $03, $06, $43, $10, $02, $0F, $64, $31, $00, $11, $17, $30, $11, $66, $66, $66
		dc.b    $66, $77, $77, $77, $15, $03, $01, $44, $02, $02, $01, $01, $02, $17, $13, $57
		dc.b    $00, $01, $35, $70, $00, $13, $57, $00, $11, $03, $61, $11, $66, $66, $66, $66
		dc.b    $60, $77, $77, $65, $36, $03, $02, $43, $10, $02, $02, $64, $31, $02, $03, $06
		dc.b    $43, $10, $02, $53, $64, $31, $00, $11, $17, $30, $00, $66, $66, $66, $65, $DF
		dc.b    $2F, $22, $15, $00, $D0, $D0, $44, $00, $0D, $D4, $01, $01, $0D, $43, $52, $00
		dc.b    $09, $35, $20, $63, $93, $5F, $0D, $0B, $35, $D1, $C1, $D3, $5B, $65, $55, $05
		dc.b    $F9, $45, $46, $36, $00, $0C, $00, $43, $9D, $DD, $00, $34, $39, $D0, $10, $D3
		dc.b    $43, $90, $00, $0D, $34, $39, $36, $11, $CC, $43, $B0, $55, $56, $A4, $3E, $07
		dc.b    $65, $5E, $40, $00, $03, $01, $44, $02, $06, $08, $01, $DA, $BB, $80, $36, $04
		dc.b    $1C, $33, $33, $33, $33, $44, $44, $44, $44, $11, $11, $11, $11, $60, $2F, $FE
		dc.b    $EC, $36, $D0, $11, $00, $43, $91, $01, $00, $73, $08, $88, $8A, $04, $1C, $33
		dc.b    $33, $33, $33, $44, $44, $44, $44, $11, $11, $11, $11, $DE, $FF, $22, $15, $00
		dc.b    $0D, $D0, $44, $00, $1C, $14, $01, $B8, $88, $80, $36, $04, $1C, $33, $33, $33
		dc.b    $33, $44, $44, $44, $44, $11, $11, $11, $11, $60, $22, $FF, $ED, $36, $0D, $D0
		dc.b    $00, $43, $41, $C1, $00, $73, $08, $88, $8B, $04, $1C, $33, $33, $33, $33, $44
		dc.b    $44, $44, $44, $11, $11, $11, $11, $CE, $EF, $F8, $15, $00, $11, $07, $44, $00
		dc.b    $10, $19, $01, $A8, $88, $80, $36, $04, $16, $33, $33, $33, $33, $44, $44, $44
		dc.b    $44, $11, $11, $11, $11, $60, $FE, $ED, $CB, $36, $10, $30, $00, $43, $80, $02
		dc.b    $04, $73, $08, $BB, $AD, $04, $10, $33, $33, $33, $33, $44, $44, $44, $44, $11
		dc.b    $11, $11, $11, $65, $77, $77, $15, $03, $01, $44, $02, $06, $01, $01, $03, $11
		dc.b    $10, $36, $04, $11, $33, $33, $33, $33, $44, $44, $44, $44, $11, $11, $11, $11
		dc.b    $60, $77, $77, $77, $36, $03, $02, $43, $10, $02, $04, $73, $01, $11, $11, $04
		dc.b    $10, $33, $33, $33, $33, $44, $44, $44, $44, $11, $11, $11, $11, $77, $77, $77
		dc.b    $15, $03, $01, $44, $02, $06, $01, $01, $11, $11, $10, $36, $04, $11, $33, $33
		dc.b    $33, $33, $44, $44, $44, $44, $11, $11, $11, $11, $60, $77, $77, $65, $36, $03
		dc.b    $02, $43, $10, $02, $03, $73, $01, $11, $05, $11, $33, $33, $33, $30, $44, $44
		dc.b    $44, $44, $11, $11, $11, $11, $60, $77, $77, $77, $36, $03, $02, $43, $10, $02
		dc.b    $02, $64, $31, $02, $03, $06, $43, $10, $02, $02, $64, $31, $02, $03, $06, $43
		dc.b    $11, $02, $02, $64, $33, $02, $02, $06, $40, $03, $01, $44, $02, $02, $01, $01
		dc.b    $02, $10, $13, $57, $00, $01, $35, $70, $00, $13, $57, $00, $11, $35, $70, $00
		dc.b    $03, $57, $02, $80, $84, $D9, $CC, $CB, $BA, $00, $16, $77, $71, $00, $33, $16
		dc.b    $77, $00, $10, $23, $16, $00, $10, $21, $33, $00, $33, $31, $01, $00, $11, $22
		dc.b    $23, $07, $77, $77, $77, $66, $65, $55, $55, $11, $13, $33, $00, $77, $71, $11
		dc.b    $33, $77, $77, $77, $66, $11, $16, $77, $77, $33, $30, $11, $10, $22, $21, $11
		dc.b    $10, $77, $77, $77, $77, $55, $55, $56, $66, $00, $33, $31, $11, $33, $11, $17
		dc.b    $77, $66, $77, $77, $77, $07, $77, $61, $11, $00, $11, $03, $33, $00, $11, $12
		dc.b    $22, $07, $77, $77, $77, $77, $70, $07, $77, $07, $77, $61, $10, $77, $61, $32
		dc.b    $00, $61, $33, $32, $30, $33, $31, $30, $30, $30, $33, $33, $00, $12, $20, $12
		dc.b    $10, $77, $77, $77, $77, $E9, $33, $33, $98, $0D, $01, $A0, $02, $02, $01, $A0
		dc.b    $03, $04, $A0, $00, $A0, $07, $02, $02, $01, $01, $04, $03, $1A, $00, $0A, $02
		dc.b    $01, $A0, $02, $06, $70, $A0, $A0, $01, $11, $A0, $02, $06, $07, $00, $A0, $01
		dc.b    $11, $10, $02, $06, $10, $7A, $00, $01, $16, $6A, $0C, $01, $A0, $03, $04, $A0
		dc.b    $00, $07, $1A, $02, $02, $07, $1A, $12, $01, $01, $03, $01, $01, $2C, $05, $0A
		dc.b    $00, $DC, $CB, $AA, $05, $01, $A0, $07, $03, $0A, $00, $A0, $03, $04, $A0, $00
		dc.b    $10, $A0, $03, $01, $0A, $02, $06, $76, $67, $DD, $DD, $70, $11, $03, $09, $11
		dc.b    $10, $00, $07, $11, $10, $00, $07, $11, $02, $02, $07, $01, $02, $0A, $06, $01
		dc.b    $10, $00, $76, $01, $10, $00, $77, $01, $02, $02, $07, $01, $02, $02, $07, $01
		dc.b    $02, $02, $77, $11, $02, $07, $77, $11, $10, $00, $70, $11, $10, $02, $01, $11
		dc.b    $02, $02, $11, $10, $02, $02, $01, $10, $02, $02, $07, $11, $02, $2B, $07, $11
		dc.b    $10, $00, $07, $01, $10, $00, $07, $71, $10, $00, $07, $71, $10, $00, $06, $71
		dc.b    $10, $00, $06, $71, $10, $00, $07, $71, $10, $00, $07, $71, $10, $00, $07, $71
		dc.b    $10, $00, $07, $61, $10, $00, $07, $11, $10, $02, $05, $01, $10, $00, $01, $01
		dc.b    $03, $01, $10, $02, $06, $11, $16, $11, $11, $00, $07, $02, $07, $07, $00, $70
		dc.b    $00, $07, $00, $70, $02, $02, $70, $70, $02, $11, $70, $77, $00, $70, $00, $77
		dc.b    $00, $70, $00, $70, $70, $70, $70, $00, $70, $70, $70, $03, $02, $70, $70, $02
		dc.b    $02, $70, $70, $03, $08, $70, $00, $70, $70, $70, $00, $70, $70, $02, $1A, $11
		dc.b    $11, $11, $11, $44, $66, $45, $AA, $22, $02, $1F, $00, $02, $01, $FF, $F0, $32
		dc.b    $2F, $F1, $3E, $00, $1F, $12, $02, $30, $0F, $02, $16, $20, $10, $E2, $02, $00
		dc.b    $2F, $01, $31, $EC, $C0, $FF, $F1, $00, $E3, $1F, $01, $00, $20, $21, $0F, $00
		dc.b    $20, $02, $20, $F0, $E3, $3E, $0F, $00, $0F, $F0, $00, $F0, $0F, $00, $F1, $FF
		dc.b    $01, $FF, $02, $30, $F1, $00, $02, $23, $00, $01, $10, $00, $31, $10, $02, $10
		dc.b    $02, $22, $22, $02, $16, $02, $31, $10, $02, $31, $01, $20, $31, $01, $32, $02
		dc.b    $01, $32, $22, $67, $45, $77, $57, $30, $00, $20, $02, $03, $0A, $22, $20, $22
		dc.b    $22, $20, $23, $33, $13, $02, $30, $02, $10, $22, $00, $33, $33, $33, $11, $20
		dc.b    $02, $11, $11, $22, $01, $11, $33, $00, $30, $03, $0A, $30, $33, $22, $20, $56
		dc.b    $50, $66, $66, $11, $05, $03, $07, $11, $00, $01, $11, $11, $11, $10, $02, $16
		dc.b    $55, $77, $56, $66, $02, $22, $30, $30, $02, $22, $33, $03, $20, $00, $20, $00
		dc.b    $23, $11, $20, $22, $33, $33, $02, $01, $30, $03, $28, $22, $20, $22, $00, $12
		dc.b    $22, $21, $11, $30, $00, $33, $03, $00, $20, $30, $30, $02, $00, $22, $22, $22
		dc.b    $22, $02, $00, $22, $22, $20, $20, $20, $22, $00, $20, $00, $22, $22, $00, $22
		dc.b    $00, $77, $76, $02, $14, $11, $00, $22, $00, $10, $01, $00, $07, $06, $77, $76
		dc.b    $61, $16, $77, $11, $01, $11, $77, $11, $10, $02, $1D, $76, $77, $70, $77, $67
		dc.b    $70, $26, $66, $10, $72, $03, $03, $00, $02, $00, $30, $77, $00, $20, $00, $21
		dc.b    $11, $13, $02, $33, $33, $33, $02, $30, $02, $09, $22, $00, $02, $22, $00, $DC
		dc.b    $8C, $AE, $F8, $08, $08, $66, $52, $41, $71, $66, $52, $41, $71, $08, $0C, $66
		dc.b    $52, $41, $71, $8A, $FE, $EF, $8B, $30, $00, $20, $02, $03, $0A, $22, $20, $22
		dc.b    $22, $20, $23, $33, $13, $02, $30, $02, $18, $22, $00, $33, $33, $33, $11, $20
		dc.b    $02, $11, $20, $02, $01, $11, $20, $00, $33, $33, $00, $02, $30, $00, $22, $22
		dc.b    $20, $02, $08, $32, $20, $22, $30, $30, $00, $22, $30, $02, $01, $22, $05, $18
		dc.b    $22, $03, $11, $02, $22, $30, $30, $02, $22, $33, $03, $20, $00, $20, $00, $23
		dc.b    $11, $20, $22, $33, $33, $00, $02, $30, $02, $1F, $02, $22, $20, $22, $00, $12
		dc.b    $22, $21, $11, $30, $00, $33, $03, $00, $20, $30, $30, $02, $00, $22, $22, $22
		dc.b    $22, $22, $00, $20, $00, $22, $00, $02, $22, $02, $01, $20, $03, $04, $22, $02
		dc.b    $21, $11, $02, $05, $33, $33, $00, $02, $30, $02, $0C, $20, $22, $22, $03, $31
		dc.b    $11, $00, $33, $33, $33, $02, $30, $03, $0C, $22, $22, $20, $20, $12, $00, $23
		dc.b    $33, $30, $00, $33, $33, $02, $01, $30, $02, $0C, $22, $02, $22, $03, $33, $31
		dc.b    $00, $33, $33, $33, $00, $30, $03, $1C, $02, $22, $22, $00, $75, $75, $44, $BB
		dc.b    $00, $22, $10, $FF, $22, $20, $23, $11, $33, $32, $00, $22, $10, $12, $00, $02
		dc.b    $23, $20, $00, $2E, $03, $19, $10, $32, $00, $02, $FF, $12, $33, $30, $C3, $13
		dc.b    $01, $12, $00, $13, $32, $20, $00, $22, $3C, $C3, $32, $CE, $F0, $0F, $F1, $03
		dc.b    $01, $0F, $03, $1D, $FF, $EE, $F0, $FF, $11, $22, $3C, $11, $00, $02, $20, $22
		dc.b    $22, $21, $13, $33, $32, $23, $31, $10, $01, $22, $02, $23, $33, $10, $20, $02
		dc.b    $22, $02, $11, $02, $22, $01, $02, $00, $23, $56, $55, $01, $33, $30, $00, $11
		dc.b    $10, $22, $00, $10, $03, $46, $70, $00, $21, $11, $26, $57, $30, $03, $30, $01
		dc.b    $30, $33, $33, $21, $21, $21, $22, $00, $67, $07, $76, $66, $10, $70, $10, $10
		dc.b    $00, $77, $11, $01, $77, $00, $77, $77, $76, $66, $66, $07, $10, $00, $01, $77
		dc.b    $10, $10, $10, $70, $76, $76, $77, $77, $76, $77, $21, $66, $11, $00, $30, $30
		dc.b    $10, $00, $33, $03, $00, $07, $22, $00, $11, $16, $67, $55, $02, $04, $10, $07
		dc.b    $01, $01, $02, $0B, $10, $10, $00, $70, $65, $57, $01, $66, $30, $00, $10, $02
		dc.b    $09, $20, $00, $11, $22, $07, $11, $00, $76, $60, $02, $04, $01, $10, $00, $70
		dc.b    $04, $0A, $77, $77, $77, $07, $67, $77, $66, $66, $10, $71, $03, $10, $01, $00
		dc.b    $11, $77, $00, $11, $00, $76, $61, $11, $00, $11, $11, $11, $00, $10, $02, $29
		dc.b    $77, $70, $07, $77, $00, $61, $70, $21, $11, $01, $00, $30, $30, $10, $00, $33
		dc.b    $03, $55, $00, $22, $22, $03, $11, $11, $00, $30, $03, $03, $00, $33, $00, $30
		dc.b    $00, $22, $12, $22, $00, $33, $33, $33, $33, $1C, $04, $11, $33, $11, $22, $02
		dc.b    $14, $33, $03, $22, $00, $30, $30, $00, $02, $01, $22, $21, $13, $31, $22, $33
		dc.b    $03, $33, $22, $33, $30, $02, $1D, $21, $22, $20, $22, $12, $20, $23, $33, $30
		dc.b    $22, $03, $03, $00, $02, $00, $30, $22, $00, $20, $00, $21, $11, $13, $02, $33
		dc.b    $33, $33, $02, $30, $02, $30, $22, $00, $02, $22, $00, $30, $22, $21, $11, $30
		dc.b    $20, $30, $30, $00, $22, $33, $03, $22, $00, $22, $22, $21, $11, $11, $00, $30
		dc.b    $00, $03, $00, $30, $30, $30, $00, $21, $21, $22, $00, $12, $00, $21, $12, $30
		dc.b    $00, $33, $30, $22, $00, $30, $05, $18, $21, $11, $03, $02, $30, $03, $30, $01
		dc.b    $30, $33, $33, $21, $21, $21, $22, $00, $12, $00, $21, $11, $30, $00, $30, $30
		dc.b    $02, $2F, $33, $03, $02, $00, $22, $22, $01, $11, $11, $00, $30, $03, $03, $00
		dc.b    $33, $00, $30, $00, $22, $12, $22, $00, $12, $20, $21, $11, $30, $00, $33, $33
		dc.b    $00, $20, $30, $00, $22, $02, $02, $22, $02, $20, $02, $00, $22, $22, $22, $00
		dc.b    $20, $07, $0D, $BB, $45, $75, $45, $00, $F1, $22, $02, $00, $F0, $00, $10, $0F
		dc.b    $02, $0E, $22, $F0, $01, $00, $02, $11, $10, $20, $23, $22, $22, $02, $1F, $C2
		dc.b    $03, $07, $C2, $23, $30, $3C, $00, $20, $02, $02, $02, $01, $10, $02, $0B, $02
		dc.b    $20, $00, $23, $CC, $32, $00, $EF, $00, $F1, $22, $02, $02, $0F, $10, $04, $08
		dc.b    $EF, $EE, $CE, $0E, $21, $00, $01, $F0, $04, $2A, $20, $02, $20, $F0, $20, $20
		dc.b    $00, $0F, $02, $00, $23, $33, $20, $02, $33, $32, $22, $31, $FF, $FE, $57, $44
		dc.b    $9A, $AA, $02, $22, $30, $30, $02, $22, $33, $03, $20, $00, $20, $00, $23, $11
		dc.b    $20, $22, $33, $33, $02, $01, $30, $03, $0D, $22, $20, $22, $00, $12, $05, $76
		dc.b    $66, $30, $00, $10, $00, $30, $02, $08, $11, $30, $67, $61, $00, $44, $06, $61
		dc.b    $03, $01, $01, $02, $36, $11, $10, $00, $11, $00, $77, $00, $10, $77, $76, $11
		dc.b    $10, $07, $11, $11, $10, $07, $10, $00, $10, $67, $77, $07, $01, $01, $66, $07
		dc.b    $10, $00, $10, $07, $10, $01, $01, $70, $76, $67, $77, $00, $77, $00, $76, $66
		dc.b    $07, $77, $10, $10, $07, $77, $11, $01, $70, $00, $77, $02, $0A, $77, $70, $77
		dc.b    $00, $77, $70, $20, $07, $00, $22, $02, $32, $07, $22, $20, $67, $77, $21, $11
		dc.b    $10, $02, $33, $33, $10, $02, $30, $00, $67, $70, $22, $02, $21, $11, $11, $02
		dc.b    $30, $00, $30, $02, $30, $03, $03, $20, $21, $12, $22, $00, $20, $00, $21, $11
		dc.b    $20, $00, $33, $33, $00, $02, $30, $00, $22, $22, $20, $02, $08, $32, $20, $22
		dc.b    $30, $30, $00, $22, $30, $02, $01, $22, $04, $04, $11, $11, $11, $33, $1C, $0F
		dc.b    $11, $33, $12, $22, $02, $22, $30, $30, $57, $55, $33, $03, $33, $32, $55, $02
		dc.b    $03, $01, $22, $52, $02, $02, $10, $27, $05, $27, $11, $01, $02, $56, $75, $65
		dc.b    $44, $30, $00, $33, $03, $00, $20, $30, $30, $02, $00, $22, $22, $22, $22, $22
		dc.b    $20, $20, $00, $02, $20, $22, $22, $20, $00, $77, $77, $00, $02, $55, $75, $21
		dc.b    $13, $02, $14, $33, $33, $00, $02, $35, $55, $00, $27, $52, $23, $03, $52, $21
		dc.b    $10, $36, $20, $10, $00, $30, $01, $02, $0D, $52, $00, $11, $10, $20, $23, $01
		dc.b    $01, $22, $00, $21, $00, $22, $02, $09, $02, $10, $20, $20, $00, $01, $02, $20
		dc.b    $20, $02, $01, $02, $04, $11, $02, $01, $02, $02, $31, $30, $02, $02, $56, $01
		dc.b    $11, $22, $60, $20, $00, $10, $25, $02, $23, $01, $20, $01, $00, $13, $02, $22
		dc.b    $33, $20, $00, $23, $33, $20, $00, $EF, $FF, $E3, $22, $CE, $EC, $C3, $20, $02
		dc.b    $22, $33, $32, $02, $3E, $FF, $01, $21, $F0, $00, $F0, $0F, $03, $01, $10, $02
		dc.b    $04, $F0, $0F, $00, $FF, $02, $01, $FF, $03, $09, $13, $11, $00, $10, $12, $20
		dc.b    $00, $21, $F1, $04, $28, $02, $00, $21, $F0, $00, $11, $EF, $01, $00, $02, $FF
		dc.b    $02, $00, $20, $00, $30, $00, $02, $FF, $33, $33, $22, $FE, $13, $31, $22, $00
		dc.b    $22, $22, $01, $12, $21, $00, $2F, $22, $10, $20, $1E, $01, $01, $02, $1C, $30
		dc.b    $12, $00, $0E, $01, $20, $00, $1F, $11, $CC, $CC, $10, $1F, $00, $0F, $13, $FF
		dc.b    $F0, $00, $20, $E3, $3F, $00, $20, $20, $03, $0F, $12, $03, $34, $FE, $20, $03
		dc.b    $00, $0E, $E3, $30, $FC, $01, $A6, $46, $66, $A5, $30, $20, $30, $30, $00, $22
		dc.b    $33, $03, $22, $00, $22, $22, $21, $11, $11, $00, $30, $00, $03, $00, $30, $30
		dc.b    $30, $00, $21, $21, $22, $00, $12, $00, $21, $12, $30, $00, $33, $30, $22, $00
		dc.b    $30, $05, $14, $21, $11, $03, $02, $30, $03, $30, $01, $30, $33, $33, $21, $21
		dc.b    $21, $22, $00, $22, $00, $77, $76, $02, $14, $11, $00, $22, $00, $10, $01, $00
		dc.b    $22, $56, $77, $21, $33, $31, $22, $33, $03, $33, $22, $33, $30, $02, $1D, $21
		dc.b    $22, $20, $22, $67, $00, $05, $54, $10, $00, $71, $10, $00, $07, $10, $11, $77
		dc.b    $00, $11, $00, $76, $61, $11, $00, $11, $11, $11, $00, $10, $02, $0B, $77, $00
		dc.b    $07, $77, $00, $11, $17, $66, $66, $01, $11, $02, $16, $10, $01, $00, $11, $77
		dc.b    $77, $61, $00, $76, $66, $61, $10, $10, $00, $01, $01, $00, $01, $10, $11, $11
		dc.b    $10, $02, $19, $10, $07, $56, $66, $10, $72, $03, $03, $00, $02, $00, $30, $77
		dc.b    $00, $20, $00, $21, $11, $13, $02, $33, $33, $33, $02, $30, $02, $09, $22, $00
		dc.b    $02, $22, $00, $11, $13, $33, $33, $1C, $77, $CB, $BB, $BB, $BB, $00, $21, $21
		dc.b    $12, $00, $31, $3B, $13, $00, $11, $B0, $13, $00, $20, $00, $33, $00, $33, $B0
		dc.b    $33, $00, $12, $10, $12, $07, $77, $7D, $A7, $77, $77, $77, $A7, $12, $12, $11
		dc.b    $20, $31, $33, $32, $3A, $32, $13, $32, $30, $33, $91, $30, $30, $33, $03, $33
		dc.b    $03, $1B, $00, $12, $B0, $A0, $0A, $7A, $30, $DA, $AA, $DA, $99, $00, $21, $8A
		dc.b    $22, $00, $02, $30, $81, $D0, $11, $B0, $02, $00, $10, $00, $82, $00, $38, $00
		dc.b    $01, $00, $10, $0A, $28, $77, $7D, $0A, $A0, $D7, $77, $AA, $AA, $21, $22, $12
		dc.b    $10, $3B, $00, $30, $30, $20, $10, $30, $00, $20, $91, $00, $30, $B0, $01, $33
		dc.b    $02, $1D, $02, $21, $10, $30, $D7, $A7, $77, $9A, $77, $A7, $D7, $21, $22, $12
		dc.b    $00, $32, $00, $38, $00, $22, $10, $30, $0A, $23, $21, $B0, $30, $30, $31, $02
		dc.b    $0B, $22, $22, $00, $03, $77, $77, $D0, $00, $DD, $ED, $70, $02, $06, $40, $20
		dc.b    $04, $D3, $03, $80, $02, $03, $44, $00, $01, $02, $08, $73, $00, $03, $00, $04
		dc.b    $00, $D0, $04, $04, $0C, $01, $40, $70, $99, $D6, $75, $00, $12, $A0, $30, $03
		dc.b    $B3, $03, $07, $03, $03, $00, $04, $3B, $30, $40, $04, $04, $10, $40, $00, $04
		dc.b    $04, $27, $67, $D9, $39, $DD, $0A, $2A, $81, $22, $00, $80, $32, $11, $00, $90
		dc.b    $21, $02, $00, $18, $21, $12, $3A, $33, $31, $01, $00, $11, $22, $22, $00, $A7
		dc.b    $77, $77, $EA, $A7, $7D, $DE, $00, $21, $2B, $02, $0A, $02, $32, $03, $00, $11
		dc.b    $21, $03, $00, $10, $28, $02, $09, $33, $30, $30, $00, $11, $80, $04, $07, $77
		dc.b    $02, $05, $ED, $DE, $76, $40, $03, $02, $06, $10, $40, $30, $01, $01, $04, $03
		dc.b    $03, $01, $44, $01, $03, $01, $10, $02, $01, $10, $03, $01, $01, $02, $0A, $11
		dc.b    $11, $51, $11, $00, $10, $40, $00, $01, $11, $04, $01, $10, $02, $01, $10, $04
		dc.b    $01, $01, $09, $08, $56, $66, $CC, $DD, $43, $00, $12, $10, $02, $05, $30, $30
		dc.b    $00, $08, $30, $02, $33, $01, $00, $30, $03, $01, $33, $00, $40, $A2, $21, $10
		dc.b    $00, $77, $77, $77, $9A, $77, $DD, $EE, $21, $22, $B0, $30, $32, $00, $38, $00
		dc.b    $22, $10, $30, $83, $26, $32, $13, $38, $00, $70, $01, $13, $17, $00, $01, $10
		dc.b    $77, $07, $01, $11, $AA, $BB, $CC, $CC, $04, $02, $40, $10, $02, $02, $04, $01
		dc.b    $02, $14, $BB, $EE, $FF, $FF, $33, $11, $11, $00, $33, $00, $11, $00, $23, $33
		dc.b    $11, $00, $CD, $DD, $EF, $EE, $03, $01, $04, $02, $36, $10, $40, $00, $01, $04
		dc.b    $03, $FF, $FE, $EA, $B8, $00, $11, $11, $33, $00, $11, $00, $33, $00, $11, $33
		dc.b    $32, $A9, $22, $11, $10, $00, $21, $21, $22, $3A, $02, $32, $11, $00, $11, $21
		dc.b    $02, $81, $22, $32, $40, $31, $10, $07, $00, $01, $10, $00, $71, $11, $10, $70
		dc.b    $77, $00, $15, $69, $0D, $00, $15, $00, $97, $00, $14, $00, $97, $00, $01, $60
		dc.b    $00, $60, $02, $35, $02, $00, $03, $00, $01, $00, $01, $00, $11, $00, $11, $00
		dc.b    $11, $00, $11, $00, $01, $00, $01, $00, $01, $00, $11, $00, $01, $00, $11, $00
		dc.b    $11, $00, $01, $00, $11, $00, $7C, $00, $7C, $00, $7E, $00, $7C, $00, $7E, $00
		dc.b    $01, $00, $7C, $00, $03, $00, $02, $00, $7E, $03, $81, $86, $76, $00, $09, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $13, $08, $13, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $17, $08, $17, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $13, $08, $13, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $35, $08, $35, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $17, $08, $17, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08, $13, $00, $12, $00
		dc.b    $10, $00, $10, $00, $11, $00, $11, $00, $10, $00, $10, $88, $18, $80, $19, $00
		dc.b    $37, $00, $10, $08, $36, $08, $11, $00, $10, $00, $37, $00, $32, $00, $15, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00
		dc.b    $10, $00, $10, $00, $12, $08, $17, $00, $10, $08, $15, $08, $71, $08, $71, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $88, $77, $88, $5C, $00
		dc.b    $01, $00, $10, $80, $43, $80, $79, $00, $10, $00, $10, $00, $12, $00, $12, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $00, $12, $00, $12, $00
		dc.b    $10, $00, $10, $88, $19, $88, $53, $00, $10, $00, $01, $80, $5C, $80, $07, $00
		dc.b    $24, $00, $24, $00, $26, $00, $26, $00, $24, $00, $24, $80, $20, $80, $0A, $00
		dc.b    $01, $00, $10, $80, $63, $80, $58, $00, $10, $00, $10, $00, $12, $00, $12, $00
		dc.b    $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $00, $12, $00, $12, $00
		dc.b    $10, $00, $10, $88, $38, $88, $73, $00, $10, $00, $01, $88, $5E, $88, $04, $00
		dc.b    $24, $00, $24, $00, $26, $08, $23, $00, $24, $08, $21, $08, $05, $08, $05, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $71, $08, $71, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00
		dc.b    $10, $00, $10, $00, $12, $00, $12, $00, $10, $08, $55, $68, $55, $60, $11, $00
		dc.b    $4C, $E0, $02, $02, $4C, $E0, $02, $57, $4E, $00, $4F, $00, $14, $00, $14, $00
		dc.b    $30, $00, $30, $00, $36, $00, $36, $00, $30, $00, $30, $00, $32, $00, $32, $00
		dc.b    $30, $00, $30, $68, $6B, $60, $5F, $00, $24, $08, $10, $80, $5F, $88, $23, $00
		dc.b    $7E, $08, $7D, $00, $7E, $08, $7D, $08, $7D, $00, $01, $00, $01, $00, $01, $00
		dc.b    $78, $00, $78, $00, $78, $00, $78, $00, $7E, $00, $7E, $00, $36, $00, $7D, $00
		dc.b    $7B, $00, $32, $00, $31, $00, $79, $00, $33, $00, $06, $00, $33, $00, $4D, $02
		dc.b    $81, $52, $08, $7E, $00, $68, $08, $17, $00, $10, $00, $10, $80, $FE, $80, $FC
		dc.b    $00, $14, $00, $14, $00, $1A, $00, $18, $00, $10, $00, $10, $00, $1C, $00, $1C
		dc.b    $00, $10, $00, $10, $00, $14, $00, $14, $00, $14, $00, $14, $00, $10, $00, $10
		dc.b    $00, $14, $00, $14, $00, $16, $00, $14, $00, $10, $00, $10, $00, $12, $00, $10
		dc.b    $00, $24, $00, $24, $00, $26, $00, $24, $00, $24, $00, $24, $00, $24, $00, $26
		dc.b    $00, $24, $00, $24, $00, $24, $00, $24, $00, $10, $00, $10, $00, $10, $00, $12
		dc.b    $00, $10, $00, $10, $00, $14, $00, $16, $00, $14, $00, $14, $00, $10, $00, $10
		dc.b    $00, $14, $00, $14, $00, $18, $00, $18, $00, $10, $00, $10, $00, $16, $00, $16
		dc.b    $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $00, $D8, $08, $D9
		dc.b    $00, $10, $00, $10, $80, $7A, $80, $7A, $00, $10, $00, $10, $80, $BA, $88, $B9
		dc.b    $80, $23, $00, $14, $80, $23, $00, $14, $00, $14, $80, $21, $80, $62, $00, $55
		dc.b    $00, $04, $00, $04, $00, $06, $00, $06, $00, $04, $00, $04, $00, $0E, $00, $0E
		dc.b    $00, $04, $00, $04, $00, $06, $00, $06, $00, $04, $00, $04, $00, $58, $00, $58
		dc.b    $00, $A5, $00, $A5, $00, $AB, $00, $AB, $00, $AB, $00, $AB, $E9, $0C, $E9, $0C
		dc.b    $00, $10, $00, $10, $00, $12, $00, $12, $00, $10, $00, $10, $08, $18, $09, $AC
		dc.b    $00, $10, $00, $01, $00, $10, $09, $BA, $00, $10, $00, $10, $81, $A1, $09, $A9
		dc.b    $00, $01, $00, $01, $80, $1F, $09, $B1, $00, $01, $00, $10, $09, $AA, $00, $12
		dc.b    $00, $10, $00, $10, $00, $FC, $00, $FC, $00, $10, $00, $10, $00, $DB, $00, $DE
		dc.b    $00, $CA, $00, $10, $00, $CD, $00, $12, $00, $10, $00, $10, $00, $C4, $00, $C4
		dc.b    $00, $19, $00, $15, $00, $0E, $A8, $0B, $00, $02, $00, $10, $E9, $E2, $A8, $D4
		dc.b    $00, $01, $E9, $2C, $E9, $2E, $E9, $2E, $E9, $2E, $00, $10, $E9, $EF, $00, $D1
		dc.b    $00, $10, $00, $10, $03, $67, $3F, $00, $2F, $00, $10, $00, $12, $00, $12, $00
		dc.b    $10, $00, $10, $00, $50, $00, $50, $00, $10, $00, $10, $E9, $93, $09, $3C, $00
		dc.b    $01, $00, $01, $E9, $EE, $09, $41, $00, $10, $00, $10, $00, $10, $00, $01, $00
		dc.b    $10, $00, $36, $00, $A2, $00, $01, $00, $30, $00, $10, $00, $CE, $00, $7A, $09
		dc.b    $A1, $00, $10, $E0, $02, $09, $1D, $00, $01, $00, $03, $E9, $EF, $09, $43, $00
		dc.b    $10, $00, $10, $00, $10, $00, $26, $00, $10, $00, $0E, $00, $83, $00, $6D, $00
		dc.b    $F0, $09, $B8, $00, $62, $09, $EC, $09, $42, $00, $11, $09, $42, $03, $19, $11
		dc.b    $00, $11, $00, $63, $00, $25, $00, $30, $00, $10, $09, $AF, $00, $68, $09, $D8
		dc.b    $00, $66, $01, $D8, $89, $D7, $01, $D6, $02, $36, $08, $D3, $81, $06, $00, $10
		dc.b    $00, $10, $08, $B8, $08, $BA, $00, $10, $00, $10, $00, $72, $00, $72, $00, $10
		dc.b    $00, $10, $00, $32, $00, $22, $00, $25, $00, $3B, $00, $24, $00, $1A, $00, $2A
		dc.b    $00, $18, $00, $1A, $00, $08, $00, $18, $00, $0E, $00, $08, $89, $C3, $01, $CC
		dc.b    $02, $03, $88, $00, $68, $05, $80, $9C, $21, $E6, $49, $E7, $00, $10, $00, $10
		dc.b    $00, $1E, $08, $1F, $00, $10, $00, $10, $08, $1F, $00, $1E, $00, $10, $00, $10
		dc.b    $08, $1E, $00, $1F, $00, $10, $00, $10, $00, $13, $08, $13, $00, $10, $00, $10
		dc.b    $00, $10, $08, $13, $00, $10, $00, $10, $C1, $D4, $C1, $D7, $00, $10, $00, $10
		dc.b    $00, $11, $00, $11, $00, $10, $00, $10, $00, $1B, $08, $1A, $00, $10, $00, $10
		dc.b    $00, $12, $00, $12, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10
		dc.b    $00, $12, $00, $12, $00, $10, $00, $10, $08, $1F, $08, $1F, $00, $10, $00, $10
		dc.b    $08, $11, $08, $11, $00, $10, $00, $10, $08, $17, $08, $17, $00, $10, $00, $10
		dc.b    $08, $11, $08, $11, $00, $10, $00, $10, $88, $79, $88, $79, $00, $10, $00, $10
		dc.b    $00, $12, $08, $13, $00, $10, $00, $10, $08, $13, $00, $12, $00, $10, $08, $55
		dc.b    $68, $55, $60, $11, $12, $01, $68, $03, $01, $68, $0B, $06, $68, $00, $20, $BF
		dc.b    $08, $03, $03, $01, $01, $02, $02, $40, $BD, $04, $02, $40, $BD, $03, $01, $01
		dc.b    $02, $04, $60, $03, $20, $BF, $5E, $01, $68, $07, $01, $68, $37, $01, $68, $07
		dc.b    $01, $68, $37, $01, $68, $07, $01, $68, $3D, $03, $80, $00, $80, $2D, $03, $80
		dc.b    $00, $80, $0D, $03, $80, $00, $80, $6D, $03, $80, $00, $80, $81, $15, $04, $FF
		dc.b    $FF, $FF, $FF, $14, $01, $FF, $03, $02, $FF, $FF, $02, $02, $FF, $FF, $02, $02
		dc.b    $FF, $FF, $03, $01, $FF, $06, $0A, $FF, $FF, $33, $33, $CC, $FF, $CC, $CC, $CC
		dc.b    $FF, $05, $01, $FF, $03, $01, $FF, $07, $09, $FF, $FF, $FF, $FF, $00, $FF, $FF
		dc.b    $FF, $FF, $04, $04, $FF, $FF, $FF, $FF, $08, $04, $FF, $FF, $FF, $FF, $10, $04
		dc.b    $FF, $FF, $FF, $FF, $02, $02, $FF, $FF, $02, $02, $FF, $FF, $0F, $0C, $FF, $FF
		dc.b    $FF, $FF, $00, $0F, $FF, $F0, $00, $0F, $FF, $F0, $81, $89, $62, $41, $04, $40
		dc.b    $41, $40, $44, $01, $40, $00, $41, $71, $16, $17, $32, $31, $15, $17, $32, $00
		dc.b    $42, $40, $05, $41, $01, $40, $44, $01, $40, $41, $01, $43, $41, $01, $40, $32
		dc.b    $57, $57, $32, $31, $57, $57, $37, $41, $01, $42, $44, $01, $40, $43, $01, $40
		dc.b    $41, $01, $40, $41, $01, $40, $00, $70, $56, $17, $32, $31, $16, $56, $72, $00
		dc.b    $41, $01, $40, $41, $01, $43, $11, $51, $51, $16, $01, $03, $03, $06, $04, $01
		dc.b    $03, $03, $07, $00, $02, $04, $01, $03, $03, $05, $02, $10, $11, $10, $11, $35
		dc.b    $4E, $43, $01, $42, $43, $42, $43, $01, $42, $00, $62, $62, $23, $22, $04, $04
		dc.b    $23, $22, $27, $21, $43, $42, $02, $46, $01, $42, $43, $01, $42, $43, $01, $40
		dc.b    $43, $01, $63, $22, $60, $60, $04, $04, $60, $60, $25, $67, $01, $42, $43, $01
		dc.b    $42, $43, $01, $42, $43, $01, $42, $43, $01, $42, $21, $63, $61, $22, $04, $04
		dc.b    $23, $61, $67, $24, $43, $01, $42, $43, $01, $42, $04, $42, $43, $01, $05, $0E
		dc.b    $02, $10, $14, $02, $02, $10, $14, $35, $04, $01, $01, $02, $01, $02, $11, $03
		dc.b    $02, $05, $29, $28, $29, $2F, $04, $04, $29, $2F, $2D, $2C, $02, $05, $00, $03
		dc.b    $03, $03, $03, $02, $05, $02, $0C, $02, $05, $29, $28, $2B, $2A, $04, $04, $2B
		dc.b    $2A, $2D, $2C, $03, $01, $03, $03, $03, $03, $02, $05, $02, $0E, $02, $05, $29
		dc.b    $28, $2B, $2A, $04, $04, $2B, $2A, $2D, $2C, $02, $05, $02, $07, $02, $05, $04
		dc.b    $01, $01, $01, $05, $0F, $01, $3E, $03, $01, $3E, $35, $17, $0C, $0D, $0C, $0D
		dc.b    $02, $04, $08, $0C, $0F, $08, $30, $34, $37, $36, $35, $34, $37, $36, $09, $0E
		dc.b    $0D, $0C, $06, $05, $13, $02, $04, $0C, $0E, $0D, $0D, $36, $34, $35, $33, $35
		dc.b    $34, $37, $36, $09, $0E, $0D, $0C, $06, $05, $1A, $02, $04, $0C, $0E, $0D, $0D
		dc.b    $36, $34, $35, $33, $35, $34, $37, $36, $03, $00, $02, $05, $03, $00, $05, $03
		dc.b    $01, $01, $06, $07, $0F, $01, $44, $03, $01, $44, $35, $0D, $01, $01, $01, $01
		dc.b    $5B, $5A, $00, $41, $1B, $5A, $00, $41, $40, $04, $08, $03, $5B, $5A, $00, $03
		dc.b    $5B, $5A, $03, $03, $15, $58, $5A, $00, $41, $1B, $5A, $00, $41, $40, $03, $00
		dc.b    $41, $40, $03, $5B, $1B, $40, $00, $5B, $5A, $03, $03, $02, $58, $5A, $02, $02
		dc.b    $5B, $5A, $03, $01, $03, $02, $0E, $41, $43, $00, $41, $01, $40, $27, $67, $6F
		dc.b    $3C, $26, $27, $2E, $3D, $0F, $01, $44, $03, $01, $44, $35, $0F, $02, $01, $01
		dc.b    $01, $5E, $5C, $00, $43, $1F, $5C, $03, $43, $42, $02, $06, $02, $08, $02, $58
		dc.b    $5C, $03, $00, $5D, $5C, $03, $03, $15, $5D, $5C, $03, $43, $1F, $5E, $06, $43
		dc.b    $42, $02, $05, $43, $42, $00, $5D, $1F, $41, $00, $5D, $5C, $03, $03, $07, $5D
		dc.b    $5C, $03, $00, $5D, $5E, $06, $02, $11, $02, $05, $00, $43, $42, $00, $43, $01
		dc.b    $42, $31, $73, $71, $32, $30, $31, $32, $33, $0F, $01, $44, $03, $01, $44, $35
		dc.b    $0C, $01, $03, $04, $01, $5F, $5C, $07, $05, $5F, $5E, $02, $05, $05, $03, $02
		dc.b    $5F, $5E, $02, $0C, $5A, $5E, $00, $02, $07, $05, $5F, $5E, $02, $05, $5F, $5E
		dc.b    $03, $02, $02, $05, $03, $02, $5A, $5E, $02, $0C, $5A, $5E, $00, $02, $07, $05
		dc.b    $5F, $5E, $02, $05, $5F, $5E, $03, $02, $02, $05, $03, $0C, $07, $05, $00, $02
		dc.b    $1F, $19, $1F, $1E, $1C, $1D, $1E, $1F, $0E, $02, $44, $02, $02, $02, $44, $02
		dc.b    $35, $04, $01, $01, $01, $01, $02, $05, $09, $0E, $0D, $0C, $06, $05, $13, $02
		dc.b    $04, $0F, $0E, $0F, $08, $19, $18, $1B, $1A, $19, $18, $1B, $1A, $09, $0E, $0D
		dc.b    $0C, $06, $05, $13, $02, $04, $0F, $0E, $0F, $08, $19, $18, $1B, $1A, $19, $18
		dc.b    $1B, $1A, $09, $0E, $0D, $0C, $06, $05, $0E, $02, $04, $0F, $0E, $0F, $08, $31
		dc.b    $16, $33, $32, $30, $17, $32, $33, $0E, $02, $10, $11, $02, $02, $10, $11, $35
		dc.b    $39, $41, $03, $40, $41, $40, $02, $41, $01, $40, $00, $41, $01, $40, $41, $01
		dc.b    $42, $41, $01, $40, $01, $41, $61, $20, $20, $22, $04, $04, $21, $27, $25, $24
		dc.b    $43, $45, $00, $41, $01, $45, $41, $01, $43, $44, $01, $40, $00, $41, $61, $20
		dc.b    $20, $22, $04, $04, $21, $27, $25, $24, $02, $05, $02, $02, $02, $05, $02, $0F
		dc.b    $01, $05, $02, $00, $03, $03, $23, $20, $23, $1C, $3F, $21, $22, $1E, $1F, $0E
		dc.b    $02, $12, $15, $02, $02, $12, $15, $35, $38, $43, $01, $42, $43, $41, $00, $43
		dc.b    $01, $41, $00, $43, $01, $42, $43, $01, $42, $43, $01, $42, $00, $43, $6B, $28
		dc.b    $2B, $2A, $04, $04, $2B, $2A, $2D, $2C, $43, $42, $00, $43, $01, $42, $43, $01
		dc.b    $42, $43, $01, $42, $00, $43, $6B, $28, $2B, $2A, $04, $04, $2B, $2A, $2D, $2C
		dc.b    $03, $03, $01, $03, $09, $1D, $29, $28, $2B, $33, $1B, $29, $12, $0B, $33, $38
		dc.b    $01, $39, $38, $01, $39, $38, $01, $39, $38, $01, $39, $38, $01, $29, $11, $38
		dc.b    $39, $10, $11, $35, $04, $01, $01, $01, $01, $02, $0C, $02, $05, $00, $02, $07
		dc.b    $05, $02, $07, $05, $00, $02, $05, $04, $10, $1D, $1C, $1F, $1E, $1F, $19, $1F
		dc.b    $1C, $07, $05, $02, $07, $05, $00, $02, $05, $08, $10, $1D, $1C, $1F, $1E, $1F
		dc.b    $19, $1F, $1C, $07, $05, $02, $07, $05, $00, $02, $05, $04, $20, $02, $05, $00
		dc.b    $02, $1F, $19, $1F, $1C, $26, $26, $22, $25, $01, $07, $06, $01, $07, $06, $01
		dc.b    $07, $06, $01, $07, $06, $01, $07, $2E, $2F, $3B, $3C, $12, $15, $35, $04, $10
		dc.b    $11, $10, $11, $04, $02, $02, $02, $02, $12, $02, $02, $02, $02, $02, $02, $02
		dc.b    $02, $02, $02, $80, $80, $82, $82, $80, $80, $80, $80, $04, $04, $02, $02, $02
		dc.b    $02, $04, $02, $02, $02, $02, $0C, $80, $80, $82, $82, $82, $82, $82, $82, $02
		dc.b    $02, $02, $02, $02, $04, $02, $02, $02, $02, $02, $02, $02, $02, $02, $1C, $80
		dc.b    $80, $82, $82, $04, $04, $04, $04, $00, $1B, $03, $03, $01, $1A, $00, $02, $1A
		dc.b    $03, $01, $03, $19, $00, $86, $86, $96, $97, $12, $13, $84, $54, $00, $15, $69
		dc.b    $0A, $00, $15, $00, $97, $00, $14, $20, $28, $20, $BE, $05, $33, $06, $00, $05
		dc.b    $00, $70, $00, $70, $00, $72, $00, $76, $00, $70, $00, $70, $00, $76, $00, $72
		dc.b    $00, $70, $00, $70, $00, $14, $00, $14, $00, $30, $00, $30, $00, $32, $00, $36
		dc.b    $00, $30, $00, $30, $00, $36, $00, $32, $00, $30, $00, $30, $20, $ED, $20, $EE
		dc.b    $04, $34, $20, $C0, $20, $C1, $00, $10, $00, $10, $00, $12, $00, $12, $00, $10
		dc.b    $00, $10, $00, $16, $00, $16, $00, $10, $00, $10, $00, $34, $00, $34, $00, $03
		dc.b    $00, $05, $00, $01, $00, $04, $00, $07, $00, $03, $00, $04, $00, $01, $00, $05
		dc.b    $00, $07, $20, $E4, $20, $E5, $0C, $34, $20, $B6, $20, $B7, $00, $70, $00, $70
		dc.b    $00, $7E, $00, $71, $00, $70, $00, $70, $00, $7F, $00, $7E, $00, $70, $00, $70
		dc.b    $00, $11, $00, $1F, $00, $30, $00, $30, $00, $3E, $00, $31, $00, $30, $00, $30
		dc.b    $00, $3F, $00, $3E, $00, $30, $00, $30, $20, $E7, $20, $E8, $4C, $80, $B4, $61
		dc.b    $CB, $69, $1B, $00, $10, $00, $C0, $00, $17, $00, $17, $00, $10, $00, $10, $00
		dc.b    $11, $00, $11, $00, $10, $00, $10, $00, $13, $00, $13, $00, $10, $00, $E5, $08
		dc.b    $01, $00, $E4, $00, $0A, $00, $1B, $08, $1A, $08, $0B, $00, $1B, $00, $0A, $08
		dc.b    $0D, $08, $0D, $08, $03, $00, $0A, $00, $02, $08, $0B, $00, $0A, $08, $03, $08
		dc.b    $05, $00, $0C, $00, $91, $00, $0C, $08, $90, $08, $0D, $00, $0C, $00, $91, $00
		dc.b    $0C, $08, $DD, $00, $0C, $00, $48, $00, $41, $00, $05, $00, $48, $00, $0C, $00
		dc.b    $03, $00, $36, $00, $01, $00, $04, $00, $3D, $00, $38, $00, $04, $00, $01, $00
		dc.b    $04, $08, $3C, $00, $04, $00, $04, $08, $05, $08, $05, $00, $04, $00, $04, $08
		dc.b    $64, $00, $04, $00, $11, $08, $71, $00, $70, $08, $10, $08, $71, $00, $11, $08
		dc.b    $13, $08, $13, $00, $10, $00, $10, $08, $11, $08, $11, $00, $10, $00, $10, $08
		dc.b    $51, $00, $50, $00, $E5, $00, $10, $00, $30, $00, $15, $00, $C0, $00, $10, $61
		dc.b    $DB, $69, $DB, $0C, $06, $61, $EC, $01, $56, $00, $04, $02, $0E, $08, $05, $00
		dc.b    $5C, $00, $04, $00, $10, $08, $05, $00, $4C, $08, $71, $03, $0D, $12, $00, $5C
		dc.b    $00, $10, $00, $10, $08, $84, $00, $4C, $00, $C0, $03, $0D, $17, $00, $5C, $00
		dc.b    $10, $00, $10, $00, $11, $00, $4C, $00, $10, $03, $0D, $13, $00, $5C, $00, $10
		dc.b    $00, $10, $00, $11, $00, $4C, $00, $1B, $03, $0D, $0C, $00, $5C, $00, $0A, $00
		dc.b    $10, $00, $04, $00, $4C, $00, $0C, $03, $0B, $41, $00, $5C, $00, $48, $00, $10
		dc.b    $68, $85, $68, $F6, $03, $0D, $04, $00, $5C, $08, $05, $00, $10, $00, $04, $00
		dc.b    $4C, $08, $05, $02, $0E, $08, $71, $00, $5C, $00, $12, $00, $10, $00, $10, $00
		dc.b    $4C, $08, $84, $03, $0D, $C0, $00, $5C, $00, $17, $00, $10, $00, $10, $00, $4C
		dc.b    $00, $11, $03, $0D, $10, $00, $5C, $00, $13, $00, $10, $00, $10, $00, $4C, $00
		dc.b    $11, $03, $0D, $1B, $00, $5C, $00, $0C, $00, $10, $00, $0A, $00, $4C, $00, $04
		dc.b    $03, $0D, $0C, $00, $5C, $00, $41, $00, $10, $00, $48, $09, $1A, $69, $D3, $7C
		dc.b    $03, $20, $00, $20, $05, $03, $20, $00, $20, $80, $F5, $03, $20, $00, $20, $05
		dc.b    $03, $20, $00, $20, $80, $F5, $03, $20, $00, $20, $05, $03, $20, $00, $20, $80
		dc.b    $F5, $03, $20, $00, $20, $05, $03, $20, $00, $20, $80, $F5, $03, $20, $00, $20
		dc.b    $05, $03, $20, $00, $20, $82, $8D, $47, $01, $02, $03, $01, $03, $01, $02, $03
		dc.b    $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01
		dc.b    $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02
		dc.b    $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03
		dc.b    $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $01, $02, $03, $01, $50
		dc.b    $47, $04, $05, $06, $04, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $04, $05, $06, $04, $50, $47, $02, $03, $01, $02, $01, $02
		dc.b    $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03
		dc.b    $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01
		dc.b    $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02
		dc.b    $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $02, $03, $01
		dc.b    $02, $50, $47, $05, $06, $04, $05, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $05, $06, $04, $05, $50, $47, $01, $02, $03, $01
		dc.b    $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03
		dc.b    $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01
		dc.b    $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02
		dc.b    $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $03, $01, $02, $01
		dc.b    $02, $03, $01, $50, $47, $04, $05, $06, $04, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $04, $05, $06, $04, $50, $47, $08, $09
		dc.b    $0A, $08, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $08, $09, $0A, $08, $50, $47, $08, $09, $0A, $08, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $08, $09, $0A, $08, $50, $47
		dc.b    $08, $09, $0A, $08, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $06, $05, $02, $06, $01, $06, $07, $01, $06, $07, $01, $06
		dc.b    $07, $01, $06, $07, $01, $06, $07, $01, $06, $07, $01, $06, $07, $01, $06, $07
		dc.b    $01, $06, $07, $0C, $0D, $0B, $0C, $50, $47, $08, $09, $0A, $08, $01, $03, $02
		dc.b    $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $1B, $1A, $19
		dc.b    $1B, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $11, $12, $10, $11
		dc.b    $50, $47, $08, $09, $0A, $08, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01
		dc.b    $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03, $02, $01, $03
		dc.b    $02, $01, $03, $02, $01, $03, $1E, $1D, $1A, $1E, $01, $06, $07, $01, $06, $07
		dc.b    $01, $06, $07, $01, $06, $07, $01, $06, $07, $01, $06, $07, $01, $06, $07, $01
		dc.b    $06, $07, $01, $06, $07, $14, $15, $13, $14, $85, $9E, $00, $00, $10, $CB, $BB		
Fire_In_Bowl: ; loc_4E86C:
		BINCLUDE  "data\sprites\firebowl.dat"  
Filler_1: ; loc_4EC6C: ; Filler
		org $4EE00
Unknow_Data_0x04EE00: ; loc_4EE00:
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $18, $18, $18, $18, $18
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20
		dc.b    $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $00, $00, $00, $00, $00, $00, $00, $20, $20
		dc.b    $20, $20, $20, $25, $25, $25, $25, $25, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $05, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $04, $04, $04, $04, $04, $00, $10, $10, $10, $10, $10, $10, $10, $10, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $08, $08, $29, $29, $29, $29, $29, $29, $29, $29, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $29, $29, $29, $29, $29, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $19, $19, $19, $19, $19, $19, $19, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $01, $01, $04, $04, $04, $04, $14, $14
		dc.b    $14, $14, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05
		dc.b    $05, $01, $01, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $10, $10, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $08, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $00, $00, $00, $10, $10
		dc.b    $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00
		dc.b    $00, $00, $00, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $28, $28, $28
		dc.b    $28, $28, $28, $28, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $18, $18, $18, $18, $18, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00
		dc.b    $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20
		dc.b    $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $00
		dc.b    $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $25, $25, $25, $25, $25
		dc.b    $05, $05, $05, $05, $05, $05, $05, $05, $05, $04, $04, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20
		dc.b    $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10, $10, $10, $10
		dc.b    $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04, $04, $00, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $29, $29, $29
		dc.b    $29, $29, $29, $29, $29, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $29
		dc.b    $29, $29, $29, $29, $09, $09, $09, $09, $09, $09, $09, $09, $09, $19, $19, $19
		dc.b    $19, $19, $19, $19, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $01, $01, $04, $04, $04, $04, $14, $14, $14, $14, $10, $10, $10, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $05, $05, $05, $05, $05, $01, $01, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $01, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20
		dc.b    $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $10
		dc.b    $10, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $00, $00, $00, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20
		dc.b    $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08, $08, $08, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $28, $28, $28, $28, $28, $28, $28, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $10, $10
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $18, $18, $18, $18, $18
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $20, $20, $20, $20, $20
		dc.b    $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $00, $00, $00, $00, $00, $00, $00, $20, $20
		dc.b    $20, $20, $20, $25, $25, $25, $25, $25, $05, $05, $05, $05, $05, $05, $05, $05
		dc.b    $05, $04, $04, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $20, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $04, $04, $04, $04, $04, $00, $10, $10, $10, $10, $10, $10, $10, $10, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $08, $08, $29, $29, $29, $29, $29, $29, $29, $29, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $29, $29, $29, $29, $29, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $19, $19, $19, $19, $19, $19, $19, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $01, $01, $04, $04, $04, $04, $14, $14
		dc.b    $14, $14, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
		dc.b    $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05
		dc.b    $05, $01, $01, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $20, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $10, $10, $10, $10, $10, $10, $10, $10, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $08, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
		dc.b    $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $00, $00, $00, $10, $10
		dc.b    $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00
		dc.b    $00, $00, $00, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $28, $28, $28
		dc.b    $28, $28, $28, $28, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $20, $20, $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $10, $10, $10, $10, $10, $10, $10, $10, $00, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08, $08, $08, $08, $08
		dc.b    $08, $08, $08, $08, $08, $08, $08, $08, $08, $00, $00, $00, $00, $00, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $00, $00		

; For whatever reason (presumably due to decompiler weirdness), the rest of the data above is missing,
; so this has been placed so all other data lines up with the original ROM
		align $50000
;---------------------------------------------------------------------------------------
; Uncompressed art
; Patterns for Sonic  ; ArtUnc_50000:
;---------------------------------------------------------------------------------------
	align $20
ArtUnc_Sonic:	BINCLUDE	"art/uncompressed/Sonic's art.bin"
;--------------------------------------------------------------------------------------
; Sprite Mappings
; Sonic			; MapUnc_614C0: Sonic_Mappings:
;--------------------------------------------------------------------------------------
MapUnc_Sonic:	BINCLUDE	"mappings/sprite/Sonic.bin"
Tails_Sprites: ; loc_6254C:
		BINCLUDE  "data\sprites\tails.dat"              
;--------------------------------------------------------------------------------------
; Sprite Dynamic Pattern Reloading
; Sonic DPLCs   		; MapRUnc_6DA4C: Sonic_Dyn_Script:
;--------------------------------------------------------------------------------------
MapRUnc_Sonic:	BINCLUDE	"mappings/spriteDPLC/Sonic.bin"

ArtNem_Shield: ; loc_6DF8E:
		BINCLUDE  "data\sprites\shield.nem"  
Invencibility_Stars: ; loc_6E114:		              
		BINCLUDE  "data\sprites\invstars.nem"  
Unused_Dust: ; loc_6E1FC:   
		BINCLUDE  "data\sprites\dust.dat"		 
Tails_Mappings: ; loc_6FB3C: 
		dc.w    loc_6FC46-Tails_Mappings
		dc.w    loc_6FC48-Tails_Mappings
		dc.w    loc_6FC5A-Tails_Mappings
		dc.w    loc_6FC6C-Tails_Mappings
		dc.w    loc_6FC7E-Tails_Mappings
		dc.w    loc_6FC90-Tails_Mappings
		dc.w    loc_6FC9A-Tails_Mappings
		dc.w    loc_6FCA4-Tails_Mappings
		dc.w    loc_6FCB6-Tails_Mappings
		dc.w    loc_6FCC8-Tails_Mappings
		dc.w    loc_6FCD2-Tails_Mappings
		dc.w    loc_6FCDC-Tails_Mappings
		dc.w    loc_6FCE6-Tails_Mappings
		dc.w    loc_6FCF0-Tails_Mappings
		dc.w    loc_6FCFA-Tails_Mappings
		dc.w    loc_6FD14-Tails_Mappings
		dc.w    loc_6FD2E-Tails_Mappings
		dc.w    loc_6FD48-Tails_Mappings
		dc.w    loc_6FD62-Tails_Mappings
		dc.w    loc_6FD7C-Tails_Mappings
		dc.w    loc_6FD96-Tails_Mappings
		dc.w    loc_6FDB0-Tails_Mappings
		dc.w    loc_6FDCA-Tails_Mappings
		dc.w    loc_6FDE4-Tails_Mappings
		dc.w    loc_6FDFE-Tails_Mappings
		dc.w    loc_6FE18-Tails_Mappings
		dc.w    loc_6FE32-Tails_Mappings
		dc.w    loc_6FE4C-Tails_Mappings
		dc.w    loc_6FE66-Tails_Mappings
		dc.w    loc_6FE80-Tails_Mappings
		dc.w    loc_6FE9A-Tails_Mappings
		dc.w    loc_6FEB4-Tails_Mappings
		dc.w    loc_6FECE-Tails_Mappings
		dc.w    loc_6FEE8-Tails_Mappings
		dc.w    loc_6FF02-Tails_Mappings
		dc.w    loc_6FF1C-Tails_Mappings
		dc.w    loc_6FF36-Tails_Mappings
		dc.w    loc_6FF50-Tails_Mappings
		dc.w    loc_6FF6A-Tails_Mappings
		dc.w    loc_6FF7C-Tails_Mappings
		dc.w    loc_6FF96-Tails_Mappings
		dc.w    loc_6FFA8-Tails_Mappings
		dc.w    loc_6FFC2-Tails_Mappings
		dc.w    loc_6FFD4-Tails_Mappings
		dc.w    loc_6FFEE-Tails_Mappings
		dc.w    loc_70000-Tails_Mappings
		dc.w    loc_7001A-Tails_Mappings
		dc.w    loc_7002C-Tails_Mappings
		dc.w    loc_7003E-Tails_Mappings
		dc.w    loc_70050-Tails_Mappings
		dc.w    loc_70062-Tails_Mappings
		dc.w    loc_70074-Tails_Mappings
		dc.w    loc_70086-Tails_Mappings
		dc.w    loc_700A0-Tails_Mappings
		dc.w    loc_700BA-Tails_Mappings
		dc.w    loc_700D4-Tails_Mappings
		dc.w    loc_700EE-Tails_Mappings
		dc.w    loc_70108-Tails_Mappings
		dc.w    loc_70122-Tails_Mappings
		dc.w    loc_7013C-Tails_Mappings
		dc.w    loc_70156-Tails_Mappings
		dc.w    loc_7013C-Tails_Mappings
		dc.w    loc_70170-Tails_Mappings
		dc.w    loc_7018A-Tails_Mappings
		dc.w    loc_701A4-Tails_Mappings
		dc.w    loc_701BE-Tails_Mappings
		dc.w    loc_701D8-Tails_Mappings
		dc.w    loc_701F2-Tails_Mappings
		dc.w    loc_7020C-Tails_Mappings
		dc.w    loc_70226-Tails_Mappings
		dc.w    loc_70240-Tails_Mappings
		dc.w    loc_7024A-Tails_Mappings
		dc.w    loc_70254-Tails_Mappings
		dc.w    loc_7025E-Tails_Mappings
		dc.w    loc_70268-Tails_Mappings
		dc.w    loc_70272-Tails_Mappings
		dc.w    loc_7027C-Tails_Mappings
		dc.w    loc_70286-Tails_Mappings
		dc.w    loc_70290-Tails_Mappings
		dc.w    loc_7029A-Tails_Mappings
		dc.w    loc_702A4-Tails_Mappings
		dc.w    loc_702AE-Tails_Mappings
		dc.w    loc_702B8-Tails_Mappings
		dc.w    loc_702C2-Tails_Mappings
		dc.w    loc_702CC-Tails_Mappings
		dc.w    loc_702D6-Tails_Mappings
		dc.w    loc_702E0-Tails_Mappings
		dc.w    loc_702EA-Tails_Mappings
		dc.w    loc_702F4-Tails_Mappings
		dc.w    loc_702FE-Tails_Mappings
		dc.w    loc_70310-Tails_Mappings
		dc.w    loc_70322-Tails_Mappings
		dc.w    loc_7032C-Tails_Mappings
		dc.w    loc_70336-Tails_Mappings
		dc.w    loc_70340-Tails_Mappings
		dc.w    loc_70352-Tails_Mappings
		dc.w    loc_70364-Tails_Mappings
		dc.w    loc_7036E-Tails_Mappings
		dc.w    loc_70378-Tails_Mappings
		dc.w    loc_70382-Tails_Mappings
		dc.w    loc_70394-Tails_Mappings
		dc.w    loc_703A6-Tails_Mappings
		dc.w    loc_703B8-Tails_Mappings
		dc.w    loc_703CA-Tails_Mappings
		dc.w    loc_703DC-Tails_Mappings
		dc.w    loc_703EE-Tails_Mappings
		dc.w    loc_70400-Tails_Mappings
		dc.w    loc_70412-Tails_Mappings
		dc.w    loc_7041C-Tails_Mappings
		dc.w    loc_7042E-Tails_Mappings
		dc.w    loc_70440-Tails_Mappings
		dc.w    loc_70452-Tails_Mappings
		dc.w    loc_70464-Tails_Mappings
		dc.w    loc_70476-Tails_Mappings
		dc.w    loc_70488-Tails_Mappings
		dc.w    loc_7049A-Tails_Mappings
		dc.w    loc_704AC-Tails_Mappings
		dc.w    loc_704B6-Tails_Mappings
		dc.w    loc_704C0-Tails_Mappings
		dc.w    loc_704D2-Tails_Mappings
		dc.w    loc_704DC-Tails_Mappings
		dc.w    loc_704E6-Tails_Mappings
		dc.w    loc_704F0-Tails_Mappings
		dc.w    loc_704FA-Tails_Mappings
		dc.w    loc_70504-Tails_Mappings
		dc.w    loc_7050E-Tails_Mappings
		dc.w    loc_70518-Tails_Mappings
		dc.w    loc_70522-Tails_Mappings
		dc.w    loc_70534-Tails_Mappings
		dc.w    loc_70546-Tails_Mappings
		dc.w    loc_70550-Tails_Mappings
		dc.w    loc_7055A-Tails_Mappings
		dc.w    loc_70564-Tails_Mappings
loc_6FC46:
		dc.w    $0000
loc_6FC48:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FC5A:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FC6C:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FC7E:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FC90:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFF4
loc_6FC9A:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFF4
loc_6FCA4:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FCB6:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF4, $00090006, $0003FFF4
loc_6FCC8:
		dc.w    $0001
		dc.l    $F0070000, $0000FFEC
loc_6FCD2:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFE4
loc_6FCDC:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFE4
loc_6FCE6:
		dc.w    $0001
		dc.l    $00090000, $0000FFE4
loc_6FCF0:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFE4
loc_6FCFA:
		dc.w    $0003
		dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
		dc.l    $FC09000E, $0007FFE2
loc_6FD14:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
		dc.l    $0009000E, $0007FFE4
loc_6FD2E:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF3
		dc.l    $FD09000C, $0006FFE4
loc_6FD48:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
		dc.l    $FD09000C, $0006FFE6
loc_6FD62:
		dc.w    $0003
		dc.l    $EC090000, $0000FFF0, $FC0D0006, $0003FFF0
		dc.l    $FC09000E, $0007FFE2
loc_6FD7C:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF3, $000D0006, $0003FFF0
		dc.l    $0009000E, $0007FFE4
loc_6FD96:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF1
		dc.l    $FD09000C, $0006FFE4
loc_6FDB0:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF2, $00090006, $0003FFF2
		dc.l    $FD09000C, $0006FFE6
loc_6FDCA:
		dc.w    $0003
		dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
		dc.l    $F30B0006, $0003FFF4
loc_6FDE4:
		dc.w    $0003
		dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
		dc.l    $FE050010, $00080006
loc_6FDFE:
		dc.w    $0003
		dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
		dc.l    $F60B0008, $0004FFF7
loc_6FE18:
		dc.w    $0003
		dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
		dc.l    $FB010012, $0009000C
loc_6FE32:
		dc.w    $0003
		dc.l    $E3010000, $0000FFF3, $F3030002, $0001FFEC
		dc.l    $F30B0006, $0003FFF4
loc_6FE4C:
		dc.w    $0003
		dc.l    $E7050000, $0000FFF6, $F70B0004, $0002FFEE
		dc.l    $FF050010, $00080006
loc_6FE66:
		dc.w    $0003
		dc.l    $E6050000, $0000FFF8, $F6030004, $0002FFEF
		dc.l    $F60B0008, $0004FFF7
loc_6FE80:
		dc.w    $0003
		dc.l    $E3010000, $0000FFF7, $F30F0002, $0001FFEC
		dc.l    $03010012, $0009000C
loc_6FE9A:
		dc.w    $0003
		dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
		dc.l    $06070010, $0008FFFC
loc_6FEB4:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $00080000
loc_6FECE:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $0008FFFD
loc_6FEE8:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $0008FFFD
loc_6FF02:
		dc.w    $0003
		dc.l    $F0070000, $0000FFEC, $F0070008, $0004FFFC
		dc.l    $06070010, $0008FFFC
loc_6FF1C:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $00080000
loc_6FF36:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $0008FFFD
loc_6FF50:
		dc.w    $0003
		dc.l    $F0070000, $0000FFF0, $F0070008, $00040000
		dc.l    $04070010, $0008FFFD
loc_6FF6A:
		dc.w    $0002
		dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
loc_6FF7C:
		dc.w    $0003
		dc.l    $E2050000, $0000FFF8, $FA010004, $0002FFF0
		dc.l    $F20F0006, $0003FFF8
loc_6FF96:
		dc.w    $0002
		dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
loc_6FFA8:
		dc.w    $0003
		dc.l    $FC010000, $0000FFEF, $E5010002, $0001FFFF
		dc.l    $F50F0004, $0002FFF7
loc_6FFC2:
		dc.w    $0002
		dc.l    $04010000, $0000FFEB, $F40F0002, $0001FFF3
loc_6FFD4:
		dc.w    $0003
		dc.l    $E2010000, $00000000, $FA010002, $0001FFF0
		dc.l    $F20F0004, $0002FFF8
loc_6FFEE:
		dc.w    $0002
		dc.l    $F9010000, $0000FFEC, $F10F0002, $0001FFF4
loc_70000:
		dc.w    $0003
		dc.l    $E4010000, $0000FFFF, $FC010002, $0001FFEF
		dc.l    $F40F0004, $0002FFF7
loc_7001A:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
loc_7002C:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
loc_7003E:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F8050010, $0008FFEA
loc_70050:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F8051010, $1008FFEA
loc_70062:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F0070010, $0008FFEA
loc_70074:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $F0071810, $1808FFEA
loc_70086:
		dc.w    $0003
		dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
		dc.l    $FE0B000E, $0007FFE8
loc_700A0:
		dc.w    $0003
		dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
		dc.l    $04050010, $0008FFEF
loc_700BA:
		dc.w    $0003
		dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
		dc.l    $0405000E, $0007FFEF
loc_700D4:
		dc.w    $0003
		dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
		dc.l    $04050010, $0008FFEF
loc_700EE:
		dc.w    $0003
		dc.l    $E4010000, $0000FFFA, $F40B0002, $0001FFF0
		dc.l    $FC0B000E, $0007FFEA
loc_70108:
		dc.w    $0003
		dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF0
		dc.l    $E90B1810, $1808FFF2
loc_70122:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
		dc.l    $060D000E, $0007FFF0
loc_7013C:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
		dc.l    $0605000E, $0007FFF8
loc_70156:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
		dc.l    $0605000E, $0007FFF8
loc_70170:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
		dc.l    $060D000E, $0007FFF0
loc_7018A:
		dc.w    $0003
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
		dc.l    $060D000E, $0007FFF0
loc_701A4:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $FE0B0810, $08080000
loc_701BE:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $01050810, $08080004
loc_701D8:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $01050810, $08080004
loc_701F2:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $01050810, $08080004
loc_7020C:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $FC0B0810, $0808FFFE
loc_70226:
		dc.w    $0003
		dc.l    $F80B0000, $0000FFEC, $F805000C, $00060004
		dc.l    $FC0B1010, $10080006
loc_70240:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_7024A:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_70254:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_7025E:
		dc.w    $0001
		dc.l    $F8090000, $0000FFDC
loc_70268:
		dc.w    $0001
		dc.l    $F8090000, $0000FFDC
loc_70272:
		dc.w    $0001
		dc.l    $F8090000, $0000FFDC
loc_7027C:
		dc.w    $0001
		dc.l    $F8090000, $0000FFDC
loc_70286:
		dc.w    $0001
		dc.l    $07090000, $0000FFE1
loc_70290:
		dc.w    $0001
		dc.l    $07090000, $0000FFE1
loc_7029A:
		dc.w    $0001
		dc.l    $07090000, $0000FFE1
loc_702A4:
		dc.w    $0001
		dc.l    $07090000, $0000FFE1
loc_702AE:
		dc.w    $0001
		dc.l    $0C070000, $0000FFF8
loc_702B8:
		dc.w    $0001
		dc.l    $0C070000, $0000FFF8
loc_702C2:
		dc.w    $0001
		dc.l    $0C070000, $0000FFF8
loc_702CC:
		dc.w    $0001
		dc.l    $0C070000, $0000FFF8
loc_702D6:
		dc.w    $0001
		dc.l    $07070000, $00000007
loc_702E0:
		dc.w    $0001
		dc.l    $07070000, $00000007
loc_702EA:
		dc.w    $0001
		dc.l    $07070000, $00000007
loc_702F4:
		dc.w    $0001
		dc.l    $07070000, $00000007
loc_702FE:
		dc.w    $0002
		dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
loc_70310:
		dc.w    $0002
		dc.l    $E8050000, $0000FFF8, $F80B0004, $0002FFF0
loc_70322:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFF9
loc_7032C:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_70336:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_70340:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $E40D0010, $0008FFEA
loc_70352:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFF0, $E40D0810, $0808FFEA
loc_70364:
		dc.w    $0001
		dc.l    $F40F0000, $0000FFF0
loc_7036E:
		dc.w    $0001
		dc.l    $F40F0000, $0000FFF0
loc_70378:
		dc.w    $0001
		dc.l    $F40F0000, $0000FFF0
loc_70382:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF8, $000D0006, $0003FFF0
loc_70394:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
loc_703A6:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
loc_703B8:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF8, $00090006, $0003FFF8
loc_703CA:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
loc_703DC:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF0, $000D0006, $0003FFF0
loc_703EE:
		dc.w    $0002
		dc.l    $F8010000, $0000FFF0, $F00B0002, $0001FFF8
loc_70400:
		dc.w    $0002
		dc.l    $F0090000, $0000FFF8, $000D0006, $0003FFF0
loc_70412:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_7041C:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
loc_7042E:
		dc.w    $0002
		dc.l    $F00F0000, $0000FFEC, $F0030010, $0008000C
loc_70440:
		dc.w    $0002
		dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
loc_70452:
		dc.w    $0002
		dc.l    $F0070000, $0000FFF0, $F0070800, $08000000
loc_70464:
		dc.w    $0002
		dc.l    $F8050800, $08000004, $F00B0804, $0802FFEC
loc_70476:
		dc.w    $0002
		dc.l    $F0070000, $0000FFF0, $F8050008, $00040000
loc_70488:
		dc.w    $0002
		dc.l    $F0070800, $08000000, $F8050808, $0804FFF0
loc_7049A:
		dc.w    $0002
		dc.l    $F8050000, $0000FFEC, $F00B0004, $0002FFFC
loc_704AC:
		dc.w    $0001
		dc.l    $F00F0000, $0000FFF0
loc_704B6:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFF1
loc_704C0:
		dc.w    $0002
		dc.l    $E4050000, $0000FFF8, $F40B0004, $0002FFF1
loc_704D2:
		dc.w    $0001
		dc.l    $F20B0000, $0000FFF2
loc_704DC:
		dc.w    $0001
		dc.l    $F40B0000, $0000FFF0
loc_704E6:
		dc.w    $0001
		dc.l    $F30B0000, $0000FFF2
loc_704F0:
		dc.w    $0001
		dc.l    $F20B0000, $0000FFF2
loc_704FA:
		dc.w    $0001
		dc.l    $F20B0000, $0000FFF2
loc_70504:
		dc.w    $0001
		dc.l    $F00B0000, $0000FFF1
loc_7050E:
		dc.w    $0001
		dc.l    $ED0B0000, $0000FFF0
loc_70518:
		dc.w    $0001
		dc.l    $EC0B0000, $0000FFF1
loc_70522:
		dc.w    $0002
		dc.l    $F4090000, $0000FFF3, $04050006, $0003FFF3
loc_70534:
		dc.w    $0002
		dc.l    $F2070000, $0000FFF0, $EC030008, $00040000
loc_70546:
		dc.w    $0001
		dc.l    $F8090000, $0000FFE0
loc_70550:
		dc.w    $0001
		dc.l    $F8090000, $0000FFE0
loc_7055A:
		dc.w    $0001
		dc.l    $F8090000, $0000FFE0
loc_70564:
		dc.w    $0001
		dc.l    $F8090000, $0000FFE0
Tails_Dyn_Script: ; loc_7056E:   
		dc.w    loc_70678-Tails_Dyn_Script
		dc.w    loc_7067A-Tails_Dyn_Script
		dc.w    loc_70680-Tails_Dyn_Script
		dc.w    loc_70686-Tails_Dyn_Script
		dc.w    loc_7068C-Tails_Dyn_Script
		dc.w    loc_70692-Tails_Dyn_Script
		dc.w    loc_70696-Tails_Dyn_Script
		dc.w    loc_7069A-Tails_Dyn_Script
		dc.w    loc_706A0-Tails_Dyn_Script
		dc.w    loc_706A6-Tails_Dyn_Script
		dc.w    loc_706AA-Tails_Dyn_Script
		dc.w    loc_706AE-Tails_Dyn_Script
		dc.w    loc_706B2-Tails_Dyn_Script
		dc.w    loc_706B6-Tails_Dyn_Script
		dc.w    loc_706BA-Tails_Dyn_Script
		dc.w    loc_706C2-Tails_Dyn_Script
		dc.w    loc_706CA-Tails_Dyn_Script
		dc.w    loc_706D2-Tails_Dyn_Script
		dc.w    loc_706DA-Tails_Dyn_Script
		dc.w    loc_706E2-Tails_Dyn_Script
		dc.w    loc_706EA-Tails_Dyn_Script
		dc.w    loc_706F2-Tails_Dyn_Script
		dc.w    loc_706FA-Tails_Dyn_Script
		dc.w    loc_70702-Tails_Dyn_Script
		dc.w    loc_7070A-Tails_Dyn_Script
		dc.w    loc_70712-Tails_Dyn_Script
		dc.w    loc_7071A-Tails_Dyn_Script
		dc.w    loc_70722-Tails_Dyn_Script
		dc.w    loc_7072A-Tails_Dyn_Script
		dc.w    loc_70732-Tails_Dyn_Script
		dc.w    loc_7073A-Tails_Dyn_Script
		dc.w    loc_70742-Tails_Dyn_Script
		dc.w    loc_7074A-Tails_Dyn_Script
		dc.w    loc_70752-Tails_Dyn_Script
		dc.w    loc_7075A-Tails_Dyn_Script
		dc.w    loc_70762-Tails_Dyn_Script
		dc.w    loc_7076A-Tails_Dyn_Script
		dc.w    loc_70772-Tails_Dyn_Script
		dc.w    loc_7077A-Tails_Dyn_Script
		dc.w    loc_70780-Tails_Dyn_Script
		dc.w    loc_70788-Tails_Dyn_Script
		dc.w    loc_7078E-Tails_Dyn_Script
		dc.w    loc_70796-Tails_Dyn_Script
		dc.w    loc_7079C-Tails_Dyn_Script
		dc.w    loc_707A4-Tails_Dyn_Script
		dc.w    loc_707AA-Tails_Dyn_Script
		dc.w    loc_707B2-Tails_Dyn_Script
		dc.w    loc_707B8-Tails_Dyn_Script
		dc.w    loc_707BE-Tails_Dyn_Script
		dc.w    loc_707B8-Tails_Dyn_Script
		dc.w    loc_707C4-Tails_Dyn_Script
		dc.w    loc_707CA-Tails_Dyn_Script
		dc.w    loc_707D0-Tails_Dyn_Script
		dc.w    loc_707D8-Tails_Dyn_Script
		dc.w    loc_707E0-Tails_Dyn_Script
		dc.w    loc_707E8-Tails_Dyn_Script
		dc.w    loc_707F0-Tails_Dyn_Script
		dc.w    loc_707F8-Tails_Dyn_Script
		dc.w    loc_70800-Tails_Dyn_Script
		dc.w    loc_70808-Tails_Dyn_Script
		dc.w    loc_70810-Tails_Dyn_Script
		dc.w    loc_70808-Tails_Dyn_Script
		dc.w    loc_70818-Tails_Dyn_Script
		dc.w    loc_70820-Tails_Dyn_Script
		dc.w    loc_70828-Tails_Dyn_Script
		dc.w    loc_70830-Tails_Dyn_Script
		dc.w    loc_70838-Tails_Dyn_Script
		dc.w    loc_70840-Tails_Dyn_Script
		dc.w    loc_70848-Tails_Dyn_Script
		dc.w    loc_70850-Tails_Dyn_Script
		dc.w    loc_70858-Tails_Dyn_Script
		dc.w    loc_7085C-Tails_Dyn_Script
		dc.w    loc_70860-Tails_Dyn_Script
		dc.w    loc_70864-Tails_Dyn_Script
		dc.w    loc_70868-Tails_Dyn_Script
		dc.w    loc_7086C-Tails_Dyn_Script
		dc.w    loc_70870-Tails_Dyn_Script
		dc.w    loc_70874-Tails_Dyn_Script
		dc.w    loc_70878-Tails_Dyn_Script
		dc.w    loc_7087C-Tails_Dyn_Script
		dc.w    loc_70880-Tails_Dyn_Script
		dc.w    loc_70884-Tails_Dyn_Script
		dc.w    loc_70888-Tails_Dyn_Script
		dc.w    loc_7088C-Tails_Dyn_Script
		dc.w    loc_70890-Tails_Dyn_Script
		dc.w    loc_70894-Tails_Dyn_Script
		dc.w    loc_70898-Tails_Dyn_Script
		dc.w    loc_7089C-Tails_Dyn_Script
		dc.w    loc_708A0-Tails_Dyn_Script
		dc.w    loc_708A4-Tails_Dyn_Script
		dc.w    loc_708AA-Tails_Dyn_Script
		dc.w    loc_708B0-Tails_Dyn_Script
		dc.w    loc_708B4-Tails_Dyn_Script
		dc.w    loc_708B8-Tails_Dyn_Script
		dc.w    loc_708BC-Tails_Dyn_Script
		dc.w    loc_708BC-Tails_Dyn_Script
		dc.w    loc_708C2-Tails_Dyn_Script
		dc.w    loc_708C6-Tails_Dyn_Script
		dc.w    loc_708CA-Tails_Dyn_Script
		dc.w    loc_708CE-Tails_Dyn_Script
		dc.w    loc_708D4-Tails_Dyn_Script
		dc.w    loc_708DA-Tails_Dyn_Script
		dc.w    loc_708E0-Tails_Dyn_Script
		dc.w    loc_708E6-Tails_Dyn_Script
		dc.w    loc_708EC-Tails_Dyn_Script
		dc.w    loc_708F2-Tails_Dyn_Script
		dc.w    loc_708F8-Tails_Dyn_Script
		dc.w    loc_708FE-Tails_Dyn_Script
		dc.w    loc_70902-Tails_Dyn_Script
		dc.w    loc_70908-Tails_Dyn_Script
		dc.w    loc_7090E-Tails_Dyn_Script
		dc.w    loc_70914-Tails_Dyn_Script
		dc.w    loc_7090E-Tails_Dyn_Script
		dc.w    loc_7091A-Tails_Dyn_Script
		dc.w    loc_7091A-Tails_Dyn_Script
		dc.w    loc_70920-Tails_Dyn_Script
		dc.w    loc_70926-Tails_Dyn_Script
		dc.w    loc_7092A-Tails_Dyn_Script
		dc.w    loc_7092E-Tails_Dyn_Script
		dc.w    loc_70934-Tails_Dyn_Script
		dc.w    loc_70938-Tails_Dyn_Script
		dc.w    loc_7093C-Tails_Dyn_Script
		dc.w    loc_70940-Tails_Dyn_Script
		dc.w    loc_70944-Tails_Dyn_Script
		dc.w    loc_70948-Tails_Dyn_Script
		dc.w    loc_7094C-Tails_Dyn_Script
		dc.w    loc_70950-Tails_Dyn_Script
		dc.w    loc_70954-Tails_Dyn_Script
		dc.w    loc_7095A-Tails_Dyn_Script
		dc.w    loc_70864-Tails_Dyn_Script
		dc.w    loc_70868-Tails_Dyn_Script
		dc.w    loc_7086C-Tails_Dyn_Script
		dc.w    loc_70870-Tails_Dyn_Script
loc_70678:
		dc.w    $0000
loc_7067A:
		dc.w    $0002
		dc.w    $5000, $5006
loc_70680:
		dc.w    $0002
		dc.w    $500C, $5006
loc_70686:
		dc.w    $0002
		dc.w    $5012, $5006
loc_7068C:
		dc.w    $0002
		dc.w    $5018, $5006
loc_70692:
		dc.w    $0001
		dc.w    $B01E
loc_70696:
		dc.w    $0001
		dc.w    $B02A
loc_7069A:
		dc.w    $0002
		dc.w    $5036, $503C
loc_706A0:
		dc.w    $0002
		dc.w    $5036, $5042
loc_706A6:
		dc.w    $0001
		dc.w    $7048
loc_706AA:
		dc.w    $0001
		dc.w    $B050
loc_706AE:
		dc.w    $0001
		dc.w    $B05C
loc_706B2:
		dc.w    $0001
		dc.w    $5068
loc_706B6:
		dc.w    $0001
		dc.w    $B06E
loc_706BA:
		dc.w    $0003
		dc.w    $507A, $7080, $50CA
loc_706C2:
		dc.w    $0003
		dc.w    $5088, $708E, $50D0
loc_706CA:
		dc.w    $0003
		dc.w    $5096, $509C, $50D6
loc_706D2:
		dc.w    $0003
		dc.w    $50A2, $50A8, $50DC
loc_706DA:
		dc.w    $0003
		dc.w    $507A, $70AE, $50CA
loc_706E2:
		dc.w    $0003
		dc.w    $5088, $70B6, $50D0
loc_706EA:
		dc.w    $0003
		dc.w    $5096, $50BE, $50D6
loc_706F2:
		dc.w    $0003
		dc.w    $50A2, $50C4, $50DC
loc_706FA:
		dc.w    $0003
		dc.w    $10E2, $30E4, $B0E8
loc_70702:
		dc.w    $0003
		dc.w    $30F4, $B0F8, $3104
loc_7070A:
		dc.w    $0003
		dc.w    $3108, $310C, $B110
loc_70712:
		dc.w    $0003
		dc.w    $111C, $F11E, $112E
loc_7071A:
		dc.w    $0003
		dc.w    $10E2, $30E4, $B130
loc_70722:
		dc.w    $0003
		dc.w    $30F4, $B13C, $3148
loc_7072A:
		dc.w    $0003
		dc.w    $3108, $310C, $B14C
loc_70732:
		dc.w    $0003
		dc.w    $111C, $F158, $1168
loc_7073A:
		dc.w    $0003
		dc.w    $716A, $7172, $71CA
loc_70742:
		dc.w    $0003
		dc.w    $717A, $7182, $71D2
loc_7074A:
		dc.w    $0003
		dc.w    $718A, $7192, $71DA
loc_70752:
		dc.w    $0003
		dc.w    $719A, $71A2, $71E2
loc_7075A:
		dc.w    $0003
		dc.w    $716A, $71AA, $71CA
loc_70762:
		dc.w    $0003
		dc.w    $717A, $71B2, $71D2
loc_7076A:
		dc.w    $0003
		dc.w    $718A, $71BA, $71DA
loc_70772:
		dc.w    $0003
		dc.w    $719A, $71C2, $71E2
loc_7077A:
		dc.w    $0002
		dc.w    $11EA, $F1EC
loc_70780:
		dc.w    $0003
		dc.w    $31FC, $1200, $F202
loc_70788:
		dc.w    $0002
		dc.w    $1212, $F214
loc_7078E:
		dc.w    $0003
		dc.w    $1224, $1226, $F228
loc_70796:
		dc.w    $0002
		dc.w    $11EA, $F238
loc_7079C:
		dc.w    $0003
		dc.w    $1248, $1200, $F24A
loc_707A4:
		dc.w    $0002
		dc.w    $1212, $F25A
loc_707AA:
		dc.w    $0003
		dc.w    $126A, $1224, $F26C
loc_707B2:
		dc.w    $0002
		dc.w    $F27C, $729C
loc_707B8:
		dc.w    $0002
		dc.w    $F28C, $32A4
loc_707BE:
		dc.w    $0002
		dc.w    $F27C, $32A8
loc_707C4:
		dc.w    $0002
		dc.w    $F27C, $72AC
loc_707CA:
		dc.w    $0002
		dc.w    $F28C, $72AC
loc_707D0:
		dc.w    $0003
		dc.w    $12B4, $B2B6, $B2D2
loc_707D8:
		dc.w    $0003
		dc.w    $32C2, $B2C6, $32DE
loc_707E0:
		dc.w    $0003
		dc.w    $12B4, $B2B6, $32E2
loc_707E8:
		dc.w    $0003
		dc.w    $32C2, $B2C6, $32E6
loc_707F0:
		dc.w    $0003
		dc.w    $12B4, $B2B6, $B2EA
loc_707F8:
		dc.w    $0003
		dc.w    $32C2, $B2C6, $B2EA
loc_70800:
		dc.w    $0003
		dc.w    $52F6, $72FC, $7312
loc_70808:
		dc.w    $0003
		dc.w    $5304, $730A, $331E
loc_70810:
		dc.w    $0003
		dc.w    $52F6, $72FC, $331A
loc_70818:
		dc.w    $0003
		dc.w    $52F6, $72FC, $7322
loc_70820:
		dc.w    $0003
		dc.w    $5304, $730A, $7322
loc_70828:
		dc.w    $0003
		dc.w    $B32A, $3336, $B2D2
loc_70830:
		dc.w    $0003
		dc.w    $B33A, $3346, $32DE
loc_70838:
		dc.w    $0003
		dc.w    $B32A, $3336, $32E2
loc_70840:
		dc.w    $0003
		dc.w    $B33A, $3346, $32E6
loc_70848:
		dc.w    $0003
		dc.w    $B32A, $3336, $B2EA
loc_70850:
		dc.w    $0003
		dc.w    $B33A, $3346, $B2EA
loc_70858:
		dc.w    $0001
		dc.w    $F34A
loc_7085C:
		dc.w    $0001
		dc.w    $F35A
loc_70860:
		dc.w    $0001
		dc.w    $F36A
loc_70864:
		dc.w    $0001
		dc.w    $50CA
loc_70868:
		dc.w    $0001
		dc.w    $50D0
loc_7086C:
		dc.w    $0001
		dc.w    $50D6
loc_70870:
		dc.w    $0001
		dc.w    $50DC
loc_70874:
		dc.w    $0001
		dc.w    $537A
loc_70878:
		dc.w    $0001
		dc.w    $5380
loc_7087C:
		dc.w    $0001
		dc.w    $5386
loc_70880:
		dc.w    $0001
		dc.w    $538C
loc_70884:
		dc.w    $0001
		dc.w    $71CA
loc_70888:
		dc.w    $0001
		dc.w    $71D2
loc_7088C:
		dc.w    $0001
		dc.w    $71DA
loc_70890:
		dc.w    $0001
		dc.w    $71E2
loc_70894:
		dc.w    $0001
		dc.w    $7392
loc_70898:
		dc.w    $0001
		dc.w    $739A
loc_7089C:
		dc.w    $0001
		dc.w    $73A2
loc_708A0:
		dc.w    $0001
		dc.w    $73AA
loc_708A4:
		dc.w    $0002
		dc.w    $33B2, $B3B6
loc_708AA:
		dc.w    $0002
		dc.w    $33B2, $B3C2
loc_708B0:
		dc.w    $0001
		dc.w    $B3CE
loc_708B4:
		dc.w    $0001
		dc.w    $F3DA
loc_708B8:
		dc.w    $0001
		dc.w    $F3EA
loc_708BC:
		dc.w    $0002
		dc.w    $F3FA, $740A
loc_708C2:
		dc.w    $0001
		dc.w    $F412
loc_708C6:
		dc.w    $0001
		dc.w    $F422
loc_708CA:
		dc.w    $0001
		dc.w    $F432
loc_708CE:
		dc.w    $0002
		dc.w    $5442, $7448
loc_708D4:
		dc.w    $0002
		dc.w    $5442, $5450
loc_708DA:
		dc.w    $0002
		dc.w    $5442, $5456
loc_708E0:
		dc.w    $0002
		dc.w    $5442, $545C
loc_708E6:
		dc.w    $0002
		dc.w    $5462, $7468
loc_708EC:
		dc.w    $0002
		dc.w    $5470, $7476
loc_708F2:
		dc.w    $0002
		dc.w    $147E, $B480
loc_708F8:
		dc.w    $0002
		dc.w    $548C, $7492
loc_708FE:
		dc.w    $0001
		dc.w    $F49A
loc_70902:
		dc.w    $0002
		dc.w    $F4AA, $34BA
loc_70908:
		dc.w    $0002
		dc.w    $F4BE, $34CE
loc_7090E:
		dc.w    $0002
		dc.w    $34D2, $B4D6
loc_70914:
		dc.w    $0002
		dc.w    $74E2, $74E2
loc_7091A:
		dc.w    $0002
		dc.w    $74EA, $34F2
loc_70920:
		dc.w    $0002
		dc.w    $34F6, $B4FA
loc_70926:
		dc.w    $0001
		dc.w    $F506
loc_7092A:
		dc.w    $0001
		dc.w    $B516
loc_7092E:
		dc.w    $0002
		dc.w    $3522, $B526
loc_70934:
		dc.w    $0001
		dc.w    $B532
loc_70938:
		dc.w    $0001
		dc.w    $B53E
loc_7093C:
		dc.w    $0001
		dc.w    $B54A
loc_70940:
		dc.w    $0001
		dc.w    $B556
loc_70944:
		dc.w    $0001
		dc.w    $B562
loc_70948:
		dc.w    $0001
		dc.w    $B56E
loc_7094C:
		dc.w    $0001
		dc.w    $B57A
loc_70950:
		dc.w    $0001
		dc.w    $B586
loc_70954:
		dc.w    $0002
		dc.w    $5592, $3598
loc_7095A:
		dc.w    $0002
		dc.w    $759C, $35A4		             
SegaLogo: ; loc_70960:		
		BINCLUDE  "data\sprites\sega.nem"
SegaLogo_Mappings: ; loc_70DD0:
		BINCLUDE  "data\all\sega.eni"
TS_Wings_MapUnc_Sonic: ; loc_70ECC: 
		BINCLUDE  "data\all\titlescr.eni"
Title_Screen_Bg_Mappings: ; loc_71024:
		BINCLUDE  "data\all\titscrbg.eni"
Title_Screen_R_Bg_Mappings: ; loc_712D8:		
		BINCLUDE  "data\all\titscrb2.eni"
Title_Screen_Bg_Wings: ; loc_71520: 
		BINCLUDE  "data\sprites\titlescr.nem" ; Title Screen Wings and background
Title_Screen_Sonic_Tails: ; loc_72E82: 
		BINCLUDE  "data\sprites\sontascr.nem" ; Sonic And Tails in Title Screen  
FireBall: ; loc_739C6:		 
		BINCLUDE  "data\sprites\fireball.nem"
; --------------------------------------------------------------------
; Nemesis compressed art
; Waterfall in GHZ			; ArtNem_73B3C: Ghz_Waterfall:
		even
ArtNem_GHZ_Waterfall:	BINCLUDE	"art/nemesis/GHZ waterfall tiles.bin"

Htz_Lava_Bubble: ; loc_73C42:   
		BINCLUDE  "data\htz\lvbubble.nem"              
; --------------------------------------------------------------------
; Nemesis compressed art
; Bridge in GHZ				; ArtNem_73D90: Ghz_Bridge:
		even
ArtNem_GHZ_Bridge:	BINCLUDE	"art/nemesis/GHZ bridge.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Diagonally moving lift in HTZ		; ArtNem_73E68: Htz_Teleferic:
	even
ArtNem_HtzZipline:	BINCLUDE	"art/nemesis/HTZ zip-line platform.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; One way barrier from HTZ		; ArtNem_7415C: Htz_Automatic_Door:
	even
ArtNem_HtzValveBarrier:	BINCLUDE	"art/nemesis/One way barrier from HTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art (24 blocks)
; See-saw in HTZ			; ArtNem_741D4: Htz_See_saw:
	even
ArtNem_HtzSeeSaw:	BINCLUDE	"art/nemesis/See-saw in HTZ.bin"

Fireball_1: ; loc_7436C: 
		BINCLUDE  "data\sprites\firebal1.nem"		
; --------------------------------------------------------------------
; Nemesis compressed art
; Rock from HTZ				; ArtNem_7447A: Htz_Rock:
	even
ArtNem_HtzRock:	BINCLUDE	"art/nemesis/Rock from HTZ.bin"

Htz_See_saw_badnick: ; loc_745B0: 
		BINCLUDE  "data\htz\see-sawb.nem" 
; --------------------------------------------------------------------
; Nemesis compressed art
; Large spinning wheel from MTZ		; ArtNem_7461C: Mz_Rotating_Gear:
	even
ArtNem_MtzWheel:	BINCLUDE	"art/nemesis/Large spinning wheel from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Indent in large spinning wheel from MTZ	; ArtNem_74A74: Mz_Machine_Ball:
	even
ArtNem_MtzWheelIndent:	BINCLUDE	"art/nemesis/Large spinning wheel from MTZ - indent.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Spike block from MTZ			; ArtNem_74B1C: Mz_Block:
	even
ArtNem_MtzSpikeBlock:	BINCLUDE	"art/nemesis/MTZ spike block.bin"

Mz_Steam: ; loc_74BEA:  
		BINCLUDE  "data\mz\steam.nem"		 
; --------------------------------------------------------------------
; Nemesis compressed art
; Spike from MTZ			; ArtNem_74CF4: Mz_Harpoon:
	even
ArtNem_MtzSpike:	BINCLUDE	"art/nemesis/Spike from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Similarly shaded blocks from MTZ	; ArtNem_74DB6: Mz_Screw_Nut:
	even
ArtNem_MtzAsstBlocks:	BINCLUDE	"art/nemesis/Similarly shaded blocks from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Lava bubble from MTZ			; ArtNem_74E2C: Mz_Lava_Bubble:
	even
ArtNem_MtzLavaBubble:	BINCLUDE	"art/nemesis/Lava bubble from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Lava cup				; ArtNem_74EE2:
	even
ArtNem_LavaCup:	BINCLUDE	"art/nemesis/Lava cup from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Paralellogram platform from MTZ	; ArtNem_74F52: Mz_Parallelogram_Elevator:
	even
ArtNem_MTZ_Platform:	BINCLUDE	"art/nemesis/Paralellogram platform from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; End of a bolt and rope from MTZ	; ArtNem_751FE:
	even
ArtNem_BoltEnd_Rope:	BINCLUDE	"art/nemesis/Bolt end and rope from MTZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Small cog from MTZ			; ArtNem_752A0: Mz_Mini_Gear:
	even
ArtNem_MtzCog:	BINCLUDE	"art/nemesis/Small cog from MTZ.bin"

Mz_Teleport: ; Mz_Four_Block: ; loc_75382:		 
		dc.b    $00, $04, $86, $71, $00, $FF, $00, $00, $00, $00, $00, $00				 
; ---------------------------------------------------------------------
; Nemesis compressed art
; Bridge in HPZ				; ArtNem_7538E: Hpz_Bridge:
	even
ArtNem_HPZ_Bridge:	BINCLUDE	"art/nemesis/HPZ bridge.bin"
; ---------------------------------------------------------------------
; Waterfall in HPZ			; Artnem_75506: Hpz_Waterfall:
	even
ArtNem_HPZ_Waterfall:	BINCLUDE	"art/nemesis/HPZ waterfall tiles.bin"
; ---------------------------------------------------------------------
; (meant to be breakable) emerald from HPZ	; Artnem_75868: Hpz_Emerald:
	even
ArtNem_HPZ_Emerald:	BINCLUDE	"art/nemesis/Emerald from HPZ.bin"
; ---------------------------------------------------------------------
; Collapsing platform from HPZ		; ArtNem_75ADA: Hpz_Platform:
	even
ArtNem_HPZPlatform:	BINCLUDE	"art/nemesis/Collapsing platform from HPZ.bin"
; ---------------------------------------------------------------------
; Nemesis compressed art
; Glowing orb from HPZ			; ArtNem_75B8A: Hpz_Orbs_Comp:
	even
ArtNem_HPZOrb:		BINCLUDE	"art/nemesis/Pulsing orb from HPZ.bin"

Hpz_Unknow_Platform: ; loc_75DD6: 
		BINCLUDE  "data\hpz\unkptfm.nem"  
; ---------------------------------------------------------------------
; Nemesis compressed art
; Raising platform from OOZ		; ArtNem_75F70: OOz_Elevator:
	even
ArtNem_OOZElevator:	BINCLUDE	"art/nemesis/Rising platform from OOZ.bin"

OOz_Giant_Spikeball: ; loc_76060:  
		BINCLUDE  "data\ooz\gspkball.nem"   
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Green platform over the burners in OOZ	; ArtNem_80274: OOz_Touch_Boost_Up:
	even
ArtNem_BurnerLid:	BINCLUDE	"art/nemesis/Burner platform from OOZ.bin"

OOz_Break_Boost: ; loc_762EE:  
		BINCLUDE  "data\ooz\brkboost.nem"		    
OOz_Oil: ; loc_7635A:  
		BINCLUDE  "data\ooz\oil.nem" 
OOz_Tube_Oil: ; loc_764D6:  
		BINCLUDE  "data\ooz\tube_oil.nem"   
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Ball thing from OOZ				; ArtNem_76602: OOz_Ball:
	even
ArtNem_OOZBall:		BINCLUDE	"art/nemesis/Ball on spring from OOZ.bin"

OOz_Cannon: ; loc_76722:  
		BINCLUDE  "data\ooz\cannon.nem"  
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Collapsing platform from OOZ			; ArtNem_76A12: OOz_Collapsing_Platform:
	even
ArtNem_OOZPlatform:	BINCLUDE	"art/nemesis/OOZ collapsing platform.bin"

OOz_Spring_Push_Boost: ; loc_76CA6:   
		BINCLUDE  "data\ooz\spngpush.nem"  
OOz_Swing_Platform: ; loc_76E68:   
		BINCLUDE  "data\ooz\swngptfm.nem" 
; --------------------------------------------------------------------
; Nemesis compressed art
; Large wooden box from DHZ			; ArtNem_7708A: Dhz_Box:
	even
ArtNem_Crate:	BINCLUDE	"art/nemesis/Large wooden box from DHZ.bin"
; --------------------------------------------------------------------
; Nemesis compressed art
; Collapsing platform from DHZ			; ArtNem_772C8: Dhz_Collapsing_Platform:
	even
ArtNem_DHZCollapsePlat:	BINCLUDE	"art/nemesis/Collapsing platform from DHZ.bin"

Dhz_Vines: ; loc_77472:   
		BINCLUDE  "data\dhz\vines.nem" 
Dhz_Vines_1: ; loc_7756A:   
		BINCLUDE  "data\dhz\vines_1.nem"  
; --------------------------------------------------------------------
; Nemesis compressed art
; Log viewed from the end for folding gates in DHZ	; ArtNem_77614: Dhz_Bridge:
	even
ArtNem_DHZGateLog:	BINCLUDE	"art/nemesis/Drawbridge logs from DHZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art 
; Large moving platform from CPZ	; ArtNem_77684: Cpz_Elevator:
	even
ArtNem_CPZElevator:	BINCLUDE	"art/nemesis/Large moving platform from CNZ.bin"

Water_Surface: ; loc_777D2: 
		BINCLUDE  "data\sprites\watrsurf.nem"  
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Booster things in CPZ			; ArtNem_77942: Cpz_Speed_Booster:
	even
ArtNem_CPZBooster:	BINCLUDE	"art/nemesis/Speed booster from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; CPZ droplet chain enemy		; ArtNem_779AA: Cpz_Worms:
	even
ArtNem_CPZDroplet:	BINCLUDE	"art/nemesis/CPZ worm enemy.bin"

Cpz_Metal_Structure: ; loc_77A1C:      
		BINCLUDE  "data\cpz\metal_st.nem" 
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; CPZ metal block			; ArtNem_77C26:
	even
ArtNem_CPZMetalBlock:	BINCLUDE	"art/nemesis/CPZ large moving platform blocks.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Yellow and black stripy tiles from DEZ	; ArtNem_77C66: Cpz_Automatic_Door:
	even
ArtNem_ConstructionStripes:	BINCLUDE	"art/nemesis/Stripy blocks from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Yellow flipping platforms and stuff CPZ	; ArtNem_77CD2: Cpz_Open_Close_Platform:
	even
ArtNem_CPZAnimatedBits:	BINCLUDE	"art/nemesis/Small yellow moving platform from CPZ.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Moving block from CPZ			; ArtNem_77EB4: Cpz_Platforms:
	even
ArtNem_CPZStairBlock:	BINCLUDE	"art/nemesis/Moving block from CPZ.bin"	   
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Spring that covers tube in CPZ	; ArtNem_78074: Cpz_Spring_Tubes:
	even
ArtNem_CPZTubeSpring:	BINCLUDE	"art/nemesis/CPZ spintube exit cover.bin"

Nghz_Water_Surface: ; loc_78270:      
		BINCLUDE  "data\nghz\watrsurf.nem"   
Nghz_Leaves: ; loc_78356:     
		BINCLUDE  "data\nghz\leaves.nem"						 
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Arrow shooter and arrow from ARZ	; ArtNem_783E2: Nghz_Arrow_Shooter:
	even
ArtNem_ArrowAndShooter:	BINCLUDE	"art/nemesis/Arrow shooter and arrow from NGHZ.bin"

Nghz_Water_Splash: ; loc_78540:				  
		BINCLUDE  "data\nghz\w_splash.nem"						             
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Button				; ArtNem_78580: Switch:
	even
ArtNem_Button:	BINCLUDE	"art/nemesis/Button.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Vertical Spring			; ArtNem_78658: Vertical_Spring:
	even
ArtNem_VrtclSprng:	BINCLUDE	"art/nemesis/Vertical spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Horizontal Spring			; ArtNem_78774: Horizontal_Spring:
	even
ArtNem_HrzntlSprng:	BINCLUDE	"art/nemesis/Horizontal spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Diagonal Spring			; ArtNem_7883E: Diagonal_Spring:
	even
ArtNem_DignlSprng:	BINCLUDE	"art/nemesis/Diagonal spring.bin"

Head_up_display_Sprites: ; loc_78A12: 
		BINCLUDE  "data\sprites\hud.nem" ; Head-up display  
Head_up_display_Sonic: ; loc_78B1A:
		BINCLUDE	"art/nemesis/Sonic lives counter.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Ring					; ArtNem_78C30: Rings:
	even
ArtNem_Ring:	BINCLUDE	"art/nemesis/Ring.bin"
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Monitors and powerups			; ArtNem_78D24: Monitors:
	even
ArtNem_Powerups:	BINCLUDE	"art/nemesis/Monitor and contents.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art (8 blocks)
; Spikes				; ArtNem_7914E: Spikes:
	even
ArtNem_Spikes:	BINCLUDE	"art/nemesis/Spikes.bin"

Enemy_Points_Spr: ; loc_7919E:
		BINCLUDE  "data\sprites\points.nem"				               
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Checkpoint (unused)			; ArtNem_79278: Lamp_Post:
	even
ArtNem_Checkpoint:	BINCLUDE	"art/nemesis/Checkpoint.bin"	
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Singpost				; ArtNem_7931E: Signpost:
	even
ArtNem_Signpost:	BINCLUDE	"art/nemesis/Signpost.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Lever spring				; ArtNem_798F4: Diagonal_Spring_1:
	even
ArtNem_LeverSpring:	BINCLUDE	"art/nemesis/Lever spring.bin"
;---------------------------------------------------------------------------------------
; Nemesis compressed art
; Long horizontal spike			; ArtNem_79A44: Dhz_Horizontal_Spikes:
	even
ArtNem_HorizSpike:	BINCLUDE	"art/nemesis/Long horizontal spike.bin"

Air_Bubbles_Numbers: ; loc_79AC0: 
		BINCLUDE  "data\sprites\airbubls.nem"		     
Hpz_Crocobot: ; loc_7A11A: 
		BINCLUDE  "data\hpz\Crocobot.nem" 
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Buzzer (not Bomber)			; ArtNem_7A4BC: Ghz_Buzzer_Bomber:
	even
ArtNem_Buzzer:	BINCLUDE	"art/nemesis/Buzzer enemy.bin"
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Batbot (bat badnik from HPZ)		; ArtNem_7A6A2: Hpz_Batbot:
	even
ArtNem_Batbot:	BINCLUDE	"art/nemesis/Batbot enemy.bin"
OOz_Octus: ; loc_7A9F8: 
		BINCLUDE  "data\ooz\octus.nem"		 
Hpz_Rhinobot: ; loc_7AD18: 
		BINCLUDE  "data\hpz\rhinobot.nem"				 
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Redz (red dinosaur badnik from HPZ)	; ArtNem_7A6A2: Hpz_Dinobot:
	even
ArtNem_Redz:	BINCLUDE	"art/nemesis/Redz enemy.bin"

Hpz_Piranha: ; loc_7B4EA: 
		BINCLUDE  "data\hpz\piranha.nem"  
OOz_Aquis: ; loc_7B9E2: 
		BINCLUDE  "data\ooz\aquis.nem" 
Spinning_Ball: ; loc_7BE30: 
		BINCLUDE  "data\sprites\spinball.nem"   
Blink: ; loc_7C0C6: 
		BINCLUDE  "data\sprites\blink.nem"    
Bubble_Monster: ; loc_7C2F2: 
		BINCLUDE  "data\sprites\bmonster.nem"								 
;--------------------------------------------------------------------------------------
; Nemesis compressed art
; Snail badnik from GHZ			; ArtNem_7C514: Ghz_Motobug:
	even
ArtNem_Snail:	BINCLUDE	"art/nemesis/Snail badnik from GHZ.bin"

Crawl: ; loc_7C710: 
		BINCLUDE  "data\cnz\crawl.nem"		
; --------------------------------------------------------------------------------------
; Nemesis compressed art
; Fish badnik from GHZ			; ArtNem_7CA92: Ghz_Chopper
		even
ArtNem_Masher:	BINCLUDE	"art/nemesis/GHZ Pirahna badnik.bin"

Robotnik_Ship: ; loc_7CC9E: 
		BINCLUDE  "data\sprites\robotnik.nem"  
Cpz_Boss: ; loc_7D3DA: 
		BINCLUDE  "data\cpz\boss.nem" 
Boss_Explosions: ; loc_7D938: 
		BINCLUDE  "data\sprites\bossexpl.nem"		 
Ship_Boost: ; loc_7DFC0: 
		BINCLUDE  "data\sprites\shpboost.nem"    
Boss_Smoke: ; loc_7E03E: 
		BINCLUDE  "data\sprites\b_smoke.nem"										           
Ghz_Boss_Car: ; loc_7E124: 
		BINCLUDE  "data\ghz\boss_car.nem"										
Ghz_Boss_Blades: ; loc_7E910: 
		BINCLUDE  "data\ghz\b_blades.nem"		 
Title_Cards: ; loc_7EA04:		 
		BINCLUDE  "data\sprites\titlcard.nem" ; Title Cards
Explosion: ; loc_7F012:  
		BINCLUDE  "data\sprites\explosn.nem"
Game_Time_Over: ; loc_7F678:
		BINCLUDE  "data\sprites\gt_over.nem"
Vertical_Springs_Sonic_1: ; loc_7F80A:		
		BINCLUDE  "data\sprites\vspng_s1.nem"  
Horizontal_Springs_Sonic_1: ; loc_7F90C:		
		BINCLUDE  "data\sprites\hspng_s1.nem"		 
Big_Ring_Flash: ; loc_7F9E8:
		BINCLUDE  "data\sprites\rngflash.nem"		  
Hidden_Points: ; loc_7FB5C:
		BINCLUDE  "data\sprites\h_points.nem" 
Sonic_Continue_Screen: ; loc_7FE5E:
		BINCLUDE  "data\sprites\sonicctn.nem"   
Continue_Special_Stage_Results_Screen: ; loc_8010E:
		BINCLUDE  "data\sprites\cont_ss.nem"								               
Rabbit: ; loc_80348:
		BINCLUDE  "data\sprites\rabbit.nem"
White_Bird: ; loc_804A0:  
		BINCLUDE  "data\sprites\wthebird.nem"
Black_Bird: ; loc_805FC:  
		BINCLUDE  "data\sprites\blckbird.nem"     
Seal: ; loc_80778:  
		BINCLUDE  "data\sprites\seal.nem" 
Pig: ; loc_80894:  
		BINCLUDE  "data\sprites\pig.nem" 
Blue_Bird: ; loc_809CA:  
		BINCLUDE  "data\sprites\bluebird.nem"						     
Bear: ; loc_80B04:  
		BINCLUDE  "data\sprites\bear.nem"						            
; ---------------------------------------------------------------------------------
; GHZ 16x16 block mappings (uncompressed)
; LevBlock_80C60: Green_Hill_16x16_Map:
BM16_GHZ:	BINCLUDE	"mappings/16x16/GHZ.bin"
; ----------------------------------------------------------------------------------
; GHZ/HTZ main level patterns (Nemesis compression)
; ArtNem_81C00: Green_Hill_8x8_Tiles:
ArtNem_GHZ:	BINCLUDE	"art/nemesis/GHZ and HTZ primary.bin"
; ---------------------------------------------------------------------------------
; HTZ 16x16 block mappings (uncompressed)
; LevBlock_84A50: Hill_Top_16x16_Map:
BM16_HTZ:	BINCLUDE	"mappings/16x16/HTZ.bin"
; ----------------------------------------------------------------------------------
; HTZ secondary level patterns (Nemesis compression)
; ArtNem_85200: Hill_Top_8x8_Tiles:
ArtNem_HTZ:	BINCLUDE	"art/nemesis/HTZ secondary.bin"


Htz_Init_Sprites_Dyn_Reload: ; loc_86626:    
		BINCLUDE  "data\htz\init_spr.nem"		             
; ----------------------------------------------------------------------------------
; EHZ/HTZ 128x128 block mappings (Kosinski compression)
; LevChunk_8692E: Green_Hill_128x128_Map:
BM128_GHZ:	BINCLUDE	"mappings/128x128/GHZ and HTZ.bin"
; ----------------------------------------------------------------------------------
; WZ 16x16 block mappings (uncompressed)
; LevBlock_89B8E: Wood_16x16_Map:
BM16_WZ:	BINCLUDE	"mappings/16x16/WZ.bin"
; ----------------------------------------------------------------------------------
; WZ main level patterns (Nemesis compression)
; ArtNem_8AB2E: Wood_8x8_Tiles:
ArtNem_WZ:	BINCLUDE	"art/nemesis/WZ primary.bin"

Waterfall: ; loc_8E6C6:  
		BINCLUDE  "data\sprites\watrfall.nem"		
; ----------------------------------------------------------------------------------
; WZ 128x128 block mappings (Kosinski compression)
; LevChunk_8E826: Wood_128x128_Map:
BM128_WZ:	BINCLUDE	"mappings/128x128/WZ.bin"
;-----------------------------------------------------------------------------------
; MTZ 16x16 block mappings (uncompressed)
; LevBlock_90456: Metropolis_16x16_Map:
BM16_MTZ:	BINCLUDE	"mappings/16x16/MTZ.bin"
; ----------------------------------------------------------------------------------
; MTZ main level patterns (Nemesis compression)
; ArtNem_91160: Metropolis_8x8_Tiles:
ArtNem_MTZ:	BINCLUDE	"art/nemesis/MTZ primary.bin"



Mz_Init_Sprites_Dyn_Reload: ; loc_94994:  
		BINCLUDE  "data\mz\init_spr.nem"		  
; ----------------------------------------------------------------------------------
; MTZ 128x128 block mappings (Kosinski compression)
; LevChunk_94C56: Metropolis_128x128_Map:
BM128_MTZ:	BINCLUDE	"mappings/128x128/MTZ.bin"
;-----------------------------------------------------------------------------------
; HPZ 16x16 block mappings (uncompressed)
; LevBlock_97596: Hidden_Palace_16x16_Map:
BM16_HPZ:	BINCLUDE	"mappings/16x16/HPZ.bin"
; ----------------------------------------------------------------------------------
; HPZ main level patterns (Nemesis compression)
; ArtNem_98B76: Hidden_Palace_8x8_Tiles:
ArtNem_HPZ:	BINCLUDE	"art/nemesis/HPZ primary.bin"

Hpz_Init_Sprites_Dyn_Reload: ; loc_9B884: ;  Orbs
		BINCLUDE  "data\hpz\init_spr.nem"  

; ----------------------------------------------------------------------------------
; HPZ 128x128 block mappings (Kosinski compression)
; LevChunk_9B9F8: Hidden_Palace_128x128_Map:
BM128_HPZ:	BINCLUDE	"mappings/128x128/HPZ.bin"
;-----------------------------------------------------------------------------------
; OOZ 16x16 block mappings (uncompressed)
; LevBlock_9D778: Oil_Ocean_16x16_Map:
BM16_OOZ:	BINCLUDE	"mappings/16x16/OOZ.bin"
; ----------------------------------------------------------------------------------
; OOZ main level patterns (Nemesis compression)
; ArtNem_9ED58: Oil_Ocean_8x8_Tiles:
ArtNem_OOZ:	BINCLUDE	"art/nemesis/OOZ primary.bin"

OOz_Init_Sprites_Dyn_Reload: ; loc_A186A: ;  red ball, oil ...
		BINCLUDE  "data\ooz\init_spr.nem" 

; ----------------------------------------------------------------------------------
; OOZ 128x128 block mappings (Kosinski compression)
; LevChunk_A1A58: Oil_Ocean_128x128_Map:
BM128_OOZ:	BINCLUDE	"mappings/128x128/OOZ.bin"
;-----------------------------------------------------------------------------------
; DHZ 16x16 block mappings (uncompressed)
; LevBlock_A3F88: Dust_Hill_16x16_Map:
BM16_DHZ:	BINCLUDE	"mappings/16x16/DHZ.bin"
; ----------------------------------------------------------------------------------
; OOZ main level patterns (Nemesis compression)
; ArtNem_A5248: Dust_Hill_8x8_Tiles:
ArtNem_DHZ:	BINCLUDE	"art/nemesis/DHZ primary.bin"
; ----------------------------------------------------------------------------------
; DHZ 128x128 block mappings (Kosinski compression)
; LevChunk_A8B6A: Dust_Hill_128x128_Map:
BM128_DHZ:	BINCLUDE	"mappings/128x128/DHZ.bin"
;-----------------------------------------------------------------------------------
; CNZ 16x16 block mappings (uncompressed)
; LevBlock_AB5CA: Casino_Night_16x16_Map:
BM16_CNZ:	BINCLUDE	"mappings/16x16/CNZ.bin"
; ----------------------------------------------------------------------------------
; CNZ main level patterns (Nemesis compression)
; ArtNem_ABF2A: Casino_Night_8x8_Tiles:
ArtNem_CNZ:	BINCLUDE	"art/nemesis/CNZ primary.bin"

Cnz_Cards: ; loc_AEF3C:               
		BINCLUDE  "data\cnz\cards.nem"
; ----------------------------------------------------------------------------------
; CNZ 128x128 block mappings (Kosinski compression)
; LevChunk_AF026: Casino_Night_128x128_Map:
BM128_CNZ:	BINCLUDE	"mappings/128x128/CNZ.bin"
;-----------------------------------------------------------------------------------
; CPZ 16x16 block mappings (uncompressed)
; LevBlock_B0F26: Chemical_Plant_16x16_Map:
BM16_CPZ:	BINCLUDE	"mappings/16x16/CPZ.bin"
; ----------------------------------------------------------------------------------
; CPZ main level patterns (Nemesis compression)
; ArtNem_B2506: Chemical_Plant_8x8_Tiles:
ArtNem_CPZ:	BINCLUDE	"art/nemesis/CPZ primary.bin"

Cpz_Init_Sprites_Dyn_Reload: ; loc_B602E:  
		BINCLUDE  "data\cpz\init_spr.nem"

; ----------------------------------------------------------------------------------
; CPZ 128x128 block mappings (Kosinski compression)
; LevChunk_B6058: Chemical_Plant_128x128_Map:
BM128_CPZ:	BINCLUDE	"mappings/128x128/CPZ.bin"
;-----------------------------------------------------------------------------------
; NGHZ 16x16 block mappings (uncompressed)
; LevBlock_B8558: Neo_Green_Hill_16x16_Map:
BM16_NGHZ:	BINCLUDE	"mappings/16x16/NGHZ.bin"
; ----------------------------------------------------------------------------------
; NGHZ main level patterns (Nemesis compression)
; ArtNem_B9E58: Neo_Green_Hill_8x8_Tiles:
ArtNem_NGHZ:	BINCLUDE	"art/nemesis/NGHZ primary.bin"

Nghz_Init_Sprites_Dyn_Reload: ; loc_BF408:  Waterfalls
		BINCLUDE  "data\nghz\init_spr.nem"  

; ----------------------------------------------------------------------------------
; NGHZ 128x128 block mappings (Kosinski compression)
; LevChunk_BF568: Neo_Green_Hill_128x128_Map:
BM128_NGHZ:	BINCLUDE	"mappings/128x128/NGHZ.bin"

; For whatever reason, the assembler compiled the end of the NGHZ chunk data twice...
; word_C2138:
		dc.w	$C00B, $F8C4, $C00B, $5200, $F8C0, $F80E, $F0, 0

Unknow_Uncompressed_12x128_Map: ; loc_C2148:				            
		BINCLUDE  "data\all\unk_128.dat" 
BM16_CPZ_Previous_Builder: ; loc_C943C:				            
		BINCLUDE  "data\all\cpz_16.dat"		 
ArtNem_CPZ_Previous_Builder: ; loc_CAA1C:				            
		BINCLUDE  "data\sprites\cpz_8.nem"  
Cpz_Building: ; loc_CDFC6: ;  Left over						        
		BINCLUDE  "data\sprites\building.nem"   
BM128_CPZ_Previous_Builder:  ; loc_CE03A:				              
		BINCLUDE  "data\all\cpz_128.dat"		  
BM16_NGHZ_Previous_Builder: ; loc_D603A:				            
		BINCLUDE  "data\all\nghz_16.dat"		              
ArtNem_NGHZ_Previous_Builder: ; loc_D793A:				            
		BINCLUDE  "data\nghz\nghz_8.nem"				             
Nghz_Init_Sprites_Dyn_Reload_2: ; loc_DCEEA: ; Waterfalls  ; Left over
		BINCLUDE  "data\nghz\init_spr.nem"		  
BM128_NGHZ_Previous_Builder: ; loc_DD04A:				   
		BINCLUDE  "data\all\nghz_128.dat"		  
Neo_Green_Hill_8x8_Incomplete_Tiles_Previous_Builder: ; loc_E504A:				   
		BINCLUDE  "data\sprites\nghz_8.nem"				
Nghz_Init_Sprites_Dyn_Reload_3: ; loc_E57E6: ; Waterfalls  ; Left over
		BINCLUDE  "data\nghz\init_spr.nem"

; ===========================================================================
; Uncompiled Neo Green Hill Zone chunk data; it can be opened in any
; text editor, but the Japanese at the top won't display correctly
; loc_E5946: Uncompiled_ASM:
		BINCLUDE	"Data/all/Uncompiled chunk data for NGHZ.bin"

; ===========================================================================
; Unused duplicate Sega sound
Sega_SndDup:	BINCLUDE	"sound/Unused Sega PCM.bin"

; ===========================================================================
; Moving the music and sound effects would cause them to break due to using
; hardcoded pointers; I have already have converted the music to ASM, but
; the sound effects are still data
;
; $E8000 => Duplicate Sega PCM (shorter than used version)
; $ED000 => DAC samples
; $F0000 => Music $98 to $9F
; $F1E8C => Sega PCM
; $F8000 => Music $81 to $97
; $FF000 => Sounds $A0 to $E0

; ===========================================================================
; ---------------------------------------------------------------------------
; Subroutine to load the sound driver
; ---------------------------------------------------------------------------

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||

; loc_EC000:
SoundDriverLoad:
		move	sr,-(sp)
		movem.l	d0-a6,-(sp)
		move	#$2700,sr
		lea	(Z80_Bus_Request).l,a3
		lea	(Z80_Reset).l,a2
		moveq	#0,d2
		move.w	#$100,d1
		move.w	d1,(a3)	; get Z80 bus
		move.w	d1,(a2)	; release Z80 reset (was held high by console on startup)

-		btst	d2,(a3)
		bne.s	-	; wait until the 68000 has the bus
		jsr	DecompressSoundDriver(pc)
		move.w	d2,(a2)
		move.w	d2,(a3)
		moveq	#$17,d0

-		dbf	d0,-		; wait for 2,314 cycles
		move.w	d1,(a2)		; release Z80 reset
		movem.l	(sp)+,d0-a6
		move	(sp)+,sr
		rts

; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
; Handles the decompression of the sound driver (Saxman compression, an LZSS variant)
; https://segaretro.org/Saxman_compression

; a4 == start of decompressed data (used for dictionary match offsets)
; a5 == current address of end of decompressed data
; a6 == current address in compressed sound driver
; d3 == length of match minus 1
; d4 == offset into decompressed data of dictionary match
; d5 == number of bytes decompressed so far
; d6 == descriptor field
; d7 == bytes left to decompress

; Interestingly, this suggests the 68k version IS the original, rather than
; the Z80 version used for most songs in the final

; loc_EC03E: Sound_Driver_002: 
DecompressSoundDriver:
		lea	Snd_Driver(pc),a6

movewz80CompSize:
		move.w	#Snd_Driver_End-Snd_Driver,d7 ; patched (by fixpointer.exe) after compression since the exact size can't be known beforehand
		moveq	#0,d6		; the decompressor knows it's run out of descriptor bits when it starts reading 0's in bit 8
		lea	(Z80_RAM).l,a5
		moveq	#0,d5
		lea	(Z80_RAM).l,a4
; loc_EC054:
SaxDec_Loop:		
		lsr.w	#1,d6		; next descriptor bit
		btst	#8,d6		; check if we've run out of bits
		bne.s	.nobitsleft	; (lsr 'shifts in' 0's)
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d6
		ori.w	#$FF00,d6	; these set bits will disappear from the high byte as the register is shifted
; loc_EC066:
.nobitsleft:  
		btst	#0,d6
		beq.s	SaxDec_ReadCompressed

; loc_EC06C: SaxDec_ReadUncompressed:
		jsr	SaxDec_GetByte(pc)
		move.b	d0,(a5)+
		addq.w	#1,d5
		bra.w	SaxDec_Loop
; ---------------------------------------------------------------------------

SaxDec_ReadCompressed:
		jsr	SaxDec_GetByte(pc)
		moveq	#0,d4
		move.b	d0,d4
		jsr	SaxDec_GetByte(pc)
		move.b	d0,d3
		andi.w	#$F,d3
		addq.w	#2,d3	; d3 is the length of the match minus 1
		andi.w	#$F0,d0
		lsl.w	#4,d0
		add.w	d0,d4
		addi.w	#$12,d4
		andi.w	#$FFF,d4	; d4 is the offset into the current $1000-byte window
		; This part is a little tricky. You see, d4 currently contains the low three nibbles of an offset into the decompressed data,
		; where the dictionary match lies. The way the high nibble is decided is first by taking it from d5 - the offset of the end
		; of the decompressed data so far. Then, we see if the resulting offset in d4 is somehow higher than d5.
		; If it is, then it's invalid... *unless* you subtract $1000 from it, in which case it refers to data in the previous $1000 block of bytes.
		; This is all just a really gimmicky way of having an offset with a range of $1000 bytes from the end of the decompressed data.
		; If, however, we cannot subtract $1000 because that would put the pointer before the start of the decompressed data, then
		; this is actually a 'zero-fill' match, which encodes a series of zeroes.
		move.w	d5,d0
		andi.w	#$F000,d0
		add.w	d0,d4
		cmp.w	d4,d5
		bcc.s	SaxDec_IsDictionaryReference
		subi.w	#$1000,d4
		bcc.s	SaxDec_IsDictionaryReference

; SaxDec_IsSequenceOfZeroes:
		add.w	d3,d5
		addq.w	#1,d5

-		move.b	#0,(a5)+
		addq.w	#1, d4
		dbf	d3,-
		bra.w	SaxDec_Loop
; ---------------------------------------------------------------------------

SaxDec_IsDictionaryReference:		
		add.w	d3,d5
		addq.w	#1,d5

-		move.b	(a4,d4.w),(a5)+
		addq.w	#1,d4
		dbf	d3,-

		bra.w	SaxDec_Loop
; End of function DecompressSoundDriver


; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||


SaxDec_GetByte:		
		move.b	(a6)+,d0
		subq.w	#1,d7	; decrement the remaining number of bytes
		bne.s	+
		addq.w	#4,sp	; exit the decompressor by messing with the track
+
		rts
; End of function SaxDec_GetByte

; ===========================================================================
; ---------------------------------------------------------------------------
; Sound driver (Saxman-compressed)
;
; Evidently, it's similar to the final, just lacking several features (such
; as Saxman-compressed music), so it is possible to replace songs using a
; program like SMPS2ASM
; ---------------------------------------------------------------------------

Snd_Driver:
	save
	include "s2b.sounddriver.asm" ; CPU Z80
	restore
	padding off
	!org (Snd_Driver+Size_of_Snd_driver_guess) ; don't worry; I know what I'm doing
Snd_Driver_End:

; ---------------------------------------------------------------------------
; Filler (free space)
; ---------------------------------------------------------------------------
	; the DAC data has to line up with the end of the bank.

	; actually it only has to fit within one bank, but we'll line it up to the end anyway
	; because the padding gives the sound driver some room to grow
	cnop -Size_of_DAC_samples, $8000
; ---------------------------------------------------------------------------
; DAC samples
; ---------------------------------------------------------------------------
; loc_ED000:
DACSamples_Start:
DAC_Sample01:	BINCLUDE	"sound/DAC/Sample 1.bin"
DAC_Sample01_End:

DAC_Sample02:	BINCLUDE	"sound/DAC/Sample 2.bin"
DAC_Sample02_End:

DAC_Sample05:	BINCLUDE	"sound/DAC/Sample 5.bin"
DAC_Sample05_End:

DAC_Sample06:	BINCLUDE	"sound/DAC/Sample 6.bin"
DAC_Sample06_End:

DAC_Sample03:	BINCLUDE	"sound/DAC/Sample 3.bin"
DAC_Sample03_End:

DAC_Sample04:	BINCLUDE	"sound/DAC/Sample 4.bin"
DAC_Sample04_End:
DACSamples_End:

	if DACSamples_End - DACSamples_Start > $8000
		fatal "DAC samples must fit within $8000 bytes, but you have $\{DACSamples_End-DACSamples_Start } bytes of DAC samples."
	endif
	if DACSamples_End - DACSamples_Start > Size_of_DAC_samples
		fatal "Size_of_DAC_samples = $\{Size_of_DAC_samples}, but you have $\{DACSamples_End-DACSamples_Start} bytes of DAC samples."
	endif

	org $F0000
; ---------------------------------------------------------------------------
; Music pointers
; ---------------------------------------------------------------------------
; loc_F0000:
MusicPoint1:
MusPtr_ExtraLife:	rom_ptr_z80	Mus_ExtraLife	; $98
MusPtr_Title:		rom_ptr_z80	Mus_Title	; $99
MusPtr_ActClear:	rom_ptr_z80	Mus_ActClear	; $9A
MusPtr_GameOver:	rom_ptr_z80	Mus_GameOver	; $9B
MusPtr_Continue:	rom_ptr_z80	Mus_Continue	; $9C
MusPtr_Emerald:		rom_ptr_z80	Mus_Emerald	; $9D-$9F

; loc_F000C:
Mus_ExtraLife:	include		"sound/music/Extra life.asm"
Mus_Title:	include		"sound/music/Title screen.asm"
Mus_ActClear:	include		"sound/music/End of level.asm"
Mus_GameOver:	include		"sound/music/Game over.asm"
Mus_Continue:	include		"sound/music/Continue.asm"
Mus_Emerald:	include		"sound/music/Got an emerald.asm"

; ----------------------------------------------------------------------------------
; Filler (free space)
; ----------------------------------------------------------------------------------
	; the PCM data has to line up with the end of the bank.
	cnop -Size_of_SEGA_sound, $8000
; -------------------------------------------------------------------------------
; Sega Intro Sound
; 8-bit unsigned raw audio at 16Khz
; -------------------------------------------------------------------------------
; loc_F1E8C:
Sega_Snd:	BINCLUDE	"sound/Sega PCM.bin"
Sega_Snd_End:

	if Sega_Snd_End - Sega_Snd > $8000
		fatal "Sega sound must fit within $8000 bytes, but you have a $\{Sega_Snd_End-Sega_Snd} byte Sega sound."
	endif
	if Sega_Snd_End - Sega_Snd > Size_of_SEGA_sound
		fatal "Size_of_SEGA_sound = $\{Size_of_SEGA_sound}, but you have a $\{Sega_Snd_End-Sega_Snd} byte Sega sound."
	endif

	org $F8000
; ------------------------------------------------------------------------------
; Music pointers
; ------------------------------------------------------------------------------
; loc_F8000: Music_81_To_97:
MusicPoint2:
MusPtr_OOZ:		rom_ptr_z80	Mus_OOZ		; $81
MusPtr_GHZ:		rom_ptr_z80	Mus_GHZ		; $82
MusPtr_MTZ:		rom_ptr_z80	Mus_MTZ		; $83
MusPtr_CNZ:		rom_ptr_z80	Mus_CNZ		; $84
MusPtr_DHZ:		rom_ptr_z80	Mus_DHZ		; $85
MusPtr_HPZ:		rom_ptr_z80	Mus_HPZ		; $86
MusPtr_NGHZ:		rom_ptr_z80	Mus_NGHZ	; $87
MusPtr_DEZ:		rom_ptr_z80	Mus_DEZ		; $88
MusPtr_SpecStg:		rom_ptr_z80	Mus_SpecStg	; $89
MusPtr_LevelSel:	rom_ptr_z80	Mus_LevelSel	; $8A
MusPtr_LevelSelDup:	rom_ptr_z80	Mus_LevelSel	; $8B ; yes, the same song is referenced twice
MusPtr_FinalBoss:	rom_ptr_z80	Mus_FinalBoss	; $8C
MusPtr_CPZ:		rom_ptr_z80	Mus_CPZ		; $8D
MusPtr_Boss:		rom_ptr_z80	Mus_Boss	; $8E
MusPtr_RWZ:		rom_ptr_z80	Mus_RWZ		; $8F
MusPtr_SSZ:		rom_ptr_z80	Mus_SSZ		; $90 and $91
MusPtr_Unused1:		rom_ptr_z80	Mus_Unused1	; $92
MusPtr_BOZ:		rom_ptr_z80	Mus_BOZ		; $93
MusPtr_Unused2:		rom_ptr_z80	Mus_Unused2	; $94
MusPtr_Invinc:		rom_ptr_z80	Mus_Invinc	; $95
MusPtr_HTZ:		rom_ptr_z80	Mus_HTZ		; $96 and $97

; loc_F802A:
Mus_OOZ:	include		"sound/music/OOZ.asm"		; CNZ 2-player theme in final
Mus_GHZ:	include		"sound/music/GHZ.asm"
Mus_MTZ:	include		"sound/music/MTZ.asm"
Mus_CNZ:	include		"sound/music/CNZ.asm"
Mus_DHZ:	include		"sound/music/DHZ.asm"
Mus_HPZ:	include		"sound/music/HPZ.asm"		; DHZ/MCZ 2-player theme in final
Mus_NGHZ:	include		"sound/music/NGHZ.asm"
Mus_DEZ:	include		"sound/music/DEZ.asm"		; Technically used in this build for the extra life jingle when collecting 100
								; or 200 rings, but labeled as DEZ regardless to prevent confusion
Mus_SpecStg:	include		"sound/music/Special Stage.asm"
Mus_LevelSel:	include		"sound/music/Level select.asm"
Mus_FinalBoss:	include		"sound/music/Final boss.asm"
Mus_CPZ:	include		"sound/music/CPZ.asm"
Mus_Boss	include		"sound/music/Boss.asm"
Mus_RWZ:	include		"sound/music/RWZ.asm"		; SCZ theme in final
Mus_SSZ:	include		"sound/music/SSZ.asm"		; OOZ theme in final
Mus_Unused1:	include		"sound/music/Unused 1.asm"	; WFZ theme in final
Mus_BOZ:	include		"sound/music/BOZ.asm"		; GHZ/EHZ 2-player theme in final
Mus_Unused2:	include		"sound/music/Unused 2.asm"	; 2-player results theme in final
Mus_Invinc:	include		"sound/music/Invincible.asm"	; Super Sonic theme in final
Mus_HTZ:	include		"sound/music/HTZ.asm"

	org $FF000
; loc_FF000: Sfx_A0_To_F9:
SoundIndex:
		rom_ptr_z80	Sfx_A0
		rom_ptr_z80	Sfx_A1
		rom_ptr_z80	Sfx_A2
		rom_ptr_z80	Sfx_A3
		rom_ptr_z80	Sfx_A4
		rom_ptr_z80	Sfx_A5
		rom_ptr_z80	Sfx_A6
		rom_ptr_z80	Sfx_A7
		rom_ptr_z80	Sfx_A8
		rom_ptr_z80	Sfx_A9
		rom_ptr_z80	Sfx_AA
		rom_ptr_z80	Sfx_AB
		rom_ptr_z80	Sfx_AC
		rom_ptr_z80	Sfx_AD
		rom_ptr_z80	Sfx_AE
		rom_ptr_z80	Sfx_AF
		rom_ptr_z80	Sfx_B0
		rom_ptr_z80	Sfx_B1
		rom_ptr_z80	Sfx_B2
		rom_ptr_z80	Sfx_B3
		rom_ptr_z80	Sfx_B4
		rom_ptr_z80	Sfx_B5
		rom_ptr_z80	Sfx_B6
		rom_ptr_z80	Sfx_B7
		rom_ptr_z80	Sfx_B8
		rom_ptr_z80	Sfx_B9
		rom_ptr_z80	Sfx_BA
		rom_ptr_z80	Sfx_BB
		rom_ptr_z80	Sfx_BC
		rom_ptr_z80	Sfx_BD
		rom_ptr_z80	Sfx_BE
		rom_ptr_z80	Sfx_BF
		rom_ptr_z80	Sfx_C0
		rom_ptr_z80	Sfx_C1
		rom_ptr_z80	Sfx_C2
		rom_ptr_z80	Sfx_C3
		rom_ptr_z80	Sfx_C4
		rom_ptr_z80	Sfx_C5
		rom_ptr_z80	Sfx_C6
		rom_ptr_z80	Sfx_C7
		rom_ptr_z80	Sfx_C8
		rom_ptr_z80	Sfx_C9
		rom_ptr_z80	Sfx_CA
		rom_ptr_z80	Sfx_CB
		rom_ptr_z80	Sfx_CC
		rom_ptr_z80	Sfx_CD
		rom_ptr_z80	Sfx_CE
		rom_ptr_z80	Sfx_CF
		rom_ptr_z80	Sfx_D0
		rom_ptr_z80	Sfx_D1
		rom_ptr_z80	Sfx_D2
		rom_ptr_z80	Sfx_D3
		rom_ptr_z80	Sfx_D4
		rom_ptr_z80	Sfx_D5
		rom_ptr_z80	Sfx_D6
		rom_ptr_z80	Sfx_D7
		rom_ptr_z80	Sfx_D8
		rom_ptr_z80	Sfx_D9
		rom_ptr_z80	Sfx_DA
		rom_ptr_z80	Sfx_DB
		rom_ptr_z80	Sfx_DC
		rom_ptr_z80	Sfx_DD
		rom_ptr_z80	Sfx_DE
		rom_ptr_z80	Sfx_DF
		rom_ptr_z80	Sfx_E0
Sfx_A0: ; loc_FF082:          
		dc.b    $00, $00, $01, $01, $80, $80, $8C, $F0, $F4, $00, $F5, $00, $9E, $05, $F0, $02
		dc.b    $01, $F8, $65, $A3, $15, $F2  
Sfx_A1: ; loc_FF098:		
		dc.b    $A2, $F0, $01, $01, $80, $05, $BB, $F0, $00, $01, $3C, $05, $0A, $01, $01, $56
		dc.b    $5C, $5C, $5C, $0E, $11, $11, $11, $09, $06, $0A, $0A, $4F, $3F, $3F, $3F, $17
		dc.b    $20, $80, $80, $EF, $00, $BD, $06, $BA, $16, $F2
Sfx_A2: ; loc_FF0C2: 
		dc.b    $00, $00, $01, $01, $80, $C0, $CC, $F0, $00, $00, $F0, $01, $01, $F0, $08, $F3
		dc.b    $E7, $C0, $04, $CA, $04, $C0, $01, $EC, $01, $F7, $00, $06, $D7, $F0, $F2
Sfx_A3: ; loc_FF0E1:		       
		dc.b    $FA, $F0, $01, $01, $80, $05, $EB, $F0, $F4, $00, $EF, $00, $B0, $07, $E7, $AD
		dc.b    $01, $E6, $01, $F7, $00, $2F, $F1, $F0, $F2, $30, $30, $30, $30, $30, $9E, $DC
		dc.b    $D8, $DC, $0E, $04, $0A, $05, $08, $08, $08, $08, $BF, $BF, $BF, $BF, $14, $14
		dc.b    $3C, $80
Sfx_A4: ; loc_FF113:		 
		dc.b    $00, $00, $01, $02, $80, $A0, $23, $F1, $F4, $00, $80, $C0, $35, $F1, $F4, $00
		dc.b    $F5, $00, $AF, $01, $80, $AF, $80, $03, $AF, $01, $80, $01, $F7, $00, $0B, $2B
		dc.b    $F1, $F2, $F5, $00, $80, $01, $AD, $80, $AD, $80, $03, $AD, $01, $80, $01, $F7
		dc.b    $00, $0B, $3E, $F1, $F2		 
Sfx_A5: ; loc_FF148:		    
		dc.b    $5B, $F1, $01, $01, $80, $05, $52, $F1, $00, $00, $EF, $00, $80, $01, $8B, $0A
		dc.b    $80, $02, $F2, $FA, $21, $10, $30, $32, $2F, $2F, $1F, $2F, $05, $09, $08, $02
		dc.b    $06, $06, $0F, $02, $1F, $4F, $2F, $2F, $0F, $0E, $1A, $80 
Sfx_A6: ; loc_FF174:  
		dc.b    $8A, $F1, $01, $01, $80, $05, $7E, $F1, $F2, $00, $EF, $00, $F0, $01, $01, $10
		dc.b    $FF, $CF, $05, $D7, $25, $F2, $3B, $3C, $30, $39, $31, $DF, $1F, $1F, $DF, $04
		dc.b    $04, $05, $01, $04, $04, $04, $02, $FF, $1F, $0F, $AF, $29, $0F, $20, $80
Sfx_A7: ; loc_FF1A3:    
		dc.b    $B9, $F1, $01, $01, $80, $04, $AD, $F1, $00, $06, $EF, $00, $8F, $07, $80, $02
		dc.b    $8F, $06, $80, $10, $ED, $F2, $FA, $21, $10, $30, $32, $1F, $1F, $1F, $1F, $05
		dc.b    $09, $18, $02, $06, $06, $0F, $02, $1F, $4F, $2F, $2F, $0F, $0E, $0E, $80
Sfx_A8: ; loc_FF1D2:    
		dc.b    $8A, $F1, $01, $01, $80, $05, $DC, $F1, $F2, $04, $EF, $00, $A6, $02, $E7, $A4
		dc.b    $01, $E7, $E9, $02, $F7, $00, $26, $DF, $F1, $F2
Sfx_A9: ; loc_FF1EC:  
		dc.b    $00, $00, $01, $01, $80, $A0, $F6, $F1, $00, $00, $F0, $01, $01, $E6, $35, $8E
		dc.b    $06, $F2
Sfx_AA: ; loc_FF1FE:   
		dc.b    $26, $F2, $01, $02, $80, $C0, $0E, $F2, $00, $00, $80, $05, $21, $F2, $00, $03
		dc.b    $F5, $00, $F3, $E7, $C2, $05, $C6, $05, $E7, $07, $EC, $01, $E7, $F7, $00, $0F
		dc.b    $17, $F2, $F2, $EF, $00, $A6, $14, $F2, $00, $00, $02, $03, $00, $D9, $1F, $DF
		dc.b    $1F, $12, $14, $11, $0F, $0A, $0A, $00, $0D, $FF, $FF, $FF, $FF, $22, $27, $07
		dc.b    $80               
Sfx_AB: ; loc_FF23F:   
		dc.b    $00, $00, $01, $01, $80, $C0, $49, $F2, $00, $00, $F5, $00, $F3, $E7, $C6, $03
		dc.b    $80, $03, $C6, $01, $E7, $01, $EC, $01, $E7, $F7, $00, $15, $54, $F2, $F2
Sfx_AC: ; loc_FF25E:    
		dc.b    $79, $F2, $01, $01, $80, $05, $68, $F2, $00, $00, $EF, $00, $F0, $01, $01, $0C
		dc.b    $01, $81, $0A, $E6, $10, $F7, $00, $04, $6F, $F2, $F2, $F9, $21, $10, $30, $32
		dc.b    $1F, $1F, $1F, $1F, $05, $09, $18, $02, $0B, $10, $1F, $05, $1F, $4F, $2F, $2F
		dc.b    $0E, $04, $07, $80
Sfx_AD: ; loc_FF292:  
		dc.b    $AF, $F2, $01, $01, $80, $05, $9C, $F2, $0E, $00, $EF, $00, $F0, $01, $01, $21
		dc.b    $6E, $A6, $07, $80, $06, $F0, $01, $01, $44, $1E, $AD, $08, $F2, $35, $05, $08
		dc.b    $09, $07, $1E, $0D, $0D, $0E, $0C, $03, $15, $06, $16, $09, $0E, $10, $2F, $1F
		dc.b    $2F, $1F, $15, $12, $12, $80
Sfx_AE: ; loc_FF2C8:
		dc.b    $F9, $F2, $01, $02, $80, $05, $D8, $F2, $00, $00, $80, $C0, $E6, $F2, $00, $00
		dc.b    $EF, $00, $80, $01, $F0, $01, $01, $40, $48, $83, $06, $85, $02, $F2, $F5, $00
		dc.b    $80, $0B, $F3, $E7, $C6, $01, $E7, $02, $EC, $01, $E7, $F7, $00, $10, $EF, $F2
		dc.b    $F2, $FA, $02, $00, $03, $05, $12, $0F, $11, $13, $05, $09, $18, $02, $06, $06
		dc.b    $0F, $02, $1F, $4F, $2F, $2F, $2F, $0E, $1A, $80		  
Sfx_AF: ; loc_FF312:   
		dc.b    $26, $F3, $01, $01, $80, $05, $1C, $F3, $0C, $00, $EF, $00, $80, $01, $A3, $05
		dc.b    $E7, $A4, $26, $F2, $30, $30, $30, $30, $30, $9E, $AC, $A8, $DC, $0E, $04, $0A
		dc.b    $05, $08, $08, $08, $08, $BF, $BF, $BF, $BF, $04, $14, $2C, $80             
Sfx_B0: ; loc_FF33F:     
		dc.b    $57, $F3, $01, $01, $80, $05, $49, $F3, $FB, $05, $EF, $00, $DF, $7F, $DF, $02
		dc.b    $E6, $01, $F7, $00, $1B, $4D, $F3, $F2, $83, $1F, $1F, $15, $1F, $1F, $1F, $1F
		dc.b    $1F, $00, $00, $00, $00, $02, $02, $02, $02, $2F, $FF, $2F, $3F, $0B, $01, $16
		dc.b    $82     
Sfx_B1: ; loc_FF370:		  
		dc.b    $83, $F3, $01, $01, $80, $05, $7A, $F3, $FB, $02, $EF, $00, $B3, $05, $80, $01
		dc.b    $B3, $09, $F2, $83, $12, $13, $10, $1E, $1F, $1F, $1F, $1F, $00, $00, $00, $00
		dc.b    $02, $02, $02, $02, $2F, $FF, $2F, $3F, $05, $34, $10, $87
Sfx_B2: ; loc_FF39C:    
		dc.b    $D2, $F3, $01, $02, $80, $04, $BE, $F3, $0C, $04, $80, $05, $AC, $F3, $0E, $02
		dc.b    $EF, $00, $F0, $01, $01, $83, $0C, $8A, $05, $05, $E6, $03, $F7, $00, $0A, $B3
		dc.b    $F3, $F2, $80, $06, $EF, $00, $F0, $01, $01, $6F, $0E, $8D, $04, $05, $E6, $03
		dc.b    $F7, $00, $0A, $C7, $F3, $F2, $35, $14, $04, $1A, $09, $0E, $11, $10, $0E, $0C
		dc.b    $03, $15, $06, $16, $09, $0E, $10, $2F, $4F, $2F, $4F, $2F, $12, $12, $80
Sfx_B3: ; loc_FF3EB:
		dc.b    $F9, $F2, $01, $02, $80, $05, $FB, $F3, $00, $00, $80, $C0, $09, $F4, $00, $00
		dc.b    $EF, $00, $80, $01, $F0, $01, $01, $40, $48, $83, $06, $85, $02, $F2, $F5, $00
		dc.b    $80, $0B, $F3, $E7, $A7, $25, $E7, $02, $EC, $01, $E7, $F7, $00, $10, $12, $F4
		dc.b    $F2  
Sfx_B4: ; loc_FF41C:
		dc.b    $45, $F4, $01, $03, $80, $05, $32, $F4, $00, $00, $80, $04, $37, $F4, $00, $00
		dc.b    $80, $02, $40, $F4, $00, $02, $EF, $00, $F6, $3D, $F4, $EF, $00, $E1, $07, $80
		dc.b    $01, $BA, $20, $F2, $EF, $01, $9A, $03, $F2, $3C, $05, $0A, $01, $01, $56, $5C
		dc.b    $5C, $5C, $0E, $11, $11, $11, $09, $06, $0A, $0A, $4F, $3F, $3F, $3F, $1F, $2B
		dc.b    $80, $80, $05, $00, $00, $00, $00, $1F, $1F, $1F, $1F, $12, $0C, $0C, $0C, $12
		dc.b    $08, $08, $08, $1F, $5F, $5F, $5F, $07, $80, $80, $80 

Sfx_B5: ; loc_FF477:
		dc.b    $47, $F8, $01, $01, $80, $05, $81, $F4, $00, $05, $EF, $00, $E0, $40, $C1, $05
		dc.b    $C4, $05, $C9, $1B, $F2 
Sfx_B6: ; loc_FF48C:  
		dc.b    $00, $00, $01, $01, $80, $C0, $96, $F4, $00, $00, $F0, $01, $01, $F0, $08, $F3
		dc.b    $E7, $C1, $07, $D0, $01, $EC, $01, $F7, $00, $0C, $9F, $F4, $F2
Sfx_B7: ; loc_FF4A9:
		dc.b    $CB, $F4, $01, $01, $80, $05, $B3, $F4, $00, $00, $EF, $00, $F0, $01, $01, $20
		dc.b    $08, $8B, $0A, $F7, $00, $08, $BA, $F4, $8B, $10, $E6, $03, $F7, $00, $09, $C1
		dc.b    $F4, $F2, $FA, $21, $10, $30, $32, $1F, $1F, $1F, $1F, $05, $09, $18, $02, $06
		dc.b    $06, $0F, $02, $1F, $4F, $2F, $2F, $0F, $0E, $1A, $80
Sfx_B8: ; loc_FF4E4:
		dc.b    $00, $00, $01, $01, $80, $C0, $EE, $F4, $00, $00, $F0, $01, $01, $F0, $08, $F3
		dc.b    $E7, $B4, $08, $B0, $02, $EC, $01, $F7, $00, $03, $F7, $F4, $F2    
Sfx_B9: ; loc_FF501:   
		dc.b    $79, $F2, $01, $04, $80, $02, $1D, $F5, $10, $00, $80, $04, $28, $F5, $00, $00
		dc.b    $80, $05, $24, $F5, $10, $00, $80, $C0, $39, $F5, $00, $00, $E0, $40, $80, $02
		dc.b    $F6, $28, $F5, $E0, $80, $80, $01, $EF, $00, $F0, $03, $01, $20, $04, $81, $18
		dc.b    $E6, $0A, $F7, $00, $06, $2F, $F5, $F2, $F0, $01, $01, $0F, $05, $F3, $E7, $B0
		dc.b    $18, $E7, $EC, $03, $F7, $00, $05, $40, $F5, $F2
Sfx_BA: ; loc_FF54B:
		dc.b    $5A, $F5, $01, $01, $80, $05, $55, $F5, $00, $07, $EF, $00, $AE, $08, $F2, $1C
		dc.b    $2E, $0F, $02, $02, $1F, $1F, $1F, $1F, $18, $14, $0F, $0E, $00, $00, $00, $00
		dc.b    $FF, $FF, $FF, $FF, $20, $1B, $80, $80 
Sfx_BB: ; loc_FF573:
		dc.b    $85, $F5, $01, $01, $80, $05, $7D, $F5, $F4, $00, $EF, $00, $9B, $04, $80, $A0
		dc.b    $06, $F2, $3C, $00, $00, $00, $00, $1F, $1F, $1F, $1F, $00, $0F, $16, $0F, $00
		dc.b    $00, $00, $00, $0F, $FF, $AF, $FF, $00, $0A, $80, $80
Sfx_BC: ; loc_FF59E:
		dc.b    $C6, $F5, $01, $02, $80, $05, $AE, $F5, $90, $00, $80, $C0, $B8, $F5, $00, $00
		dc.b    $EF, $00, $F0, $01, $01, $C5, $1A, $CD, $07, $F2, $F5, $07, $80, $07, $F0, $01
		dc.b    $02, $05, $FF, $F3, $E7, $BB, $4F, $F2, $FD, $09, $00, $03, $00, $1F, $1F, $1F
		dc.b    $1F, $10, $0C, $0C, $0C, $0B, $10, $1F, $05, $1F, $4F, $2F, $2F, $09, $92, $84
		dc.b    $8E           
Sfx_BD: ; loc_FF5DF:
		dc.b    $00, $F6, $01, $02, $80, $05, $EF, $F5, $10, $0A, $80, $04, $F9, $F5, $00, $00
		dc.b    $EF, $00, $F0, $01, $01, $60, $01, $A7, $08, $F2, $80, $08, $EF, $01, $84, $22
		dc.b    $F2, $FA, $21, $19, $3A, $30, $1F, $1F, $1F, $1F, $05, $09, $18, $02, $0B, $10
		dc.b    $1F, $05, $1F, $4F, $2F, $2F, $0E, $04, $07, $80, $FA, $31, $10, $30, $32, $1F
		dc.b    $1F, $1F, $1F, $05, $05, $18, $10, $0B, $10, $1F, $10, $1F, $1F, $2F, $2F, $0D
		dc.b    $01, $00, $80               
Sfx_BE: ; loc_FF632:
		dc.b    $53, $F6, $01, $01, $80, $04, $3C, $F6, $0C, $05, $EF, $00, $80, $01, $F0, $03
		dc.b    $01, $09, $FF, $CA, $25, $F4, $E7, $E6, $01, $D0, $02, $F7, $00, $2A, $48, $F6
		dc.b    $F2, $3C, $00, $02, $44, $02, $1F, $1F, $1F, $15, $00, $00, $1F, $00, $00, $00
		dc.b    $00, $00, $0F, $0F, $0F, $0F, $0D, $28, $00, $00
Sfx_BF: ; loc_FF66C:
		dc.b    $C5, $F6, $01, $03, $80, $02, $82, $F6, $F4, $06, $80, $04, $9D, $F6, $F4, $06
		dc.b    $80, $05, $B2, $F6, $F4, $06, $EF, $00, $C9, $07, $CD, $D0, $CB, $CE, $D2, $CD
		dc.b    $D0, $D4, $CE, $D2, $D5, $D0, $07, $D4, $D7, $E6, $05, $F7, $00, $08, $91, $F6
		dc.b    $F2, $EF, $00, $E1, $01, $80, $07, $CD, $15, $CE, $D0, $D2, $D4, $15, $E6, $05
		dc.b    $F7, $00, $08, $A8, $F6, $F2, $EF, $00, $E1, $01, $C9, $15, $CB, $CD, $CE, $D0
		dc.b    $15, $E6, $05, $F7, $00, $08, $BB, $F6, $F2, $14, $25, $36, $33, $11, $1F, $1F
		dc.b    $1F, $1F, $15, $1C, $18, $13, $0B, $0D, $08, $09, $0F, $8F, $9F, $0F, $24, $0A
		dc.b    $05, $80               
Sfx_C0: ; loc_FF6DE:
		dc.b    $F3, $F6, $01, $01, $80, $05, $E8, $F6, $00, $03, $EF, $00, $94, $05, $80, $05
		dc.b    $94, $04, $80, $04, $F2, $38, $08, $08, $08, $08, $1F, $1F, $1F, $0E, $00, $00
		dc.b    $00, $00, $00, $00, $00, $00, $0F, $0F, $0F, $1F, $00, $00, $00, $80
Sfx_C1: ; loc_FF70C:
		dc.b    $2D, $F7, $01, $02, $80, $05, $1C, $F7, $00, $00, $80, $C0, $26, $F7, $00, $02
		dc.b    $F0, $03, $01, $72, $0B, $EF, $00, $BA, $16, $F2, $F5, $01, $F3, $E7, $B0, $1B
		dc.b    $F2, $3C, $0F, $03, $01, $01, $1F, $1F, $1F, $1F, $19, $19, $12, $0E, $05, $00
		dc.b    $12, $0F, $0F, $FF, $7F, $FF, $00, $00, $80, $80               
Sfx_C2: ; loc_FF746:
		dc.b    $C5, $F6, $01, $01, $80, $05, $50, $F7, $0C, $08, $EF, $00, $BA, $08, $BA, $25
		dc.b    $F2
Sfx_C3: ; loc_FF757:
		dc.b    $86, $F7, $01, $02, $80, $04, $67, $F7, $0C, $00, $80, $05, $73, $F7, $00, $13
		dc.b    $EF, $01, $80, $01, $A2, $08, $EF, $00, $E7, $AD, $26, $F2, $EF, $02, $F0, $06
		dc.b    $01, $03, $FF, $80, $0A, $C3, $06, $F7, $00, $05, $7C, $F7, $C3, $17, $F2, $30
		dc.b    $30, $34, $5C, $30, $9E, $AC, $A8, $DC, $0E, $04, $0A, $05, $08, $08, $08, $08
		dc.b    $BF, $BF, $BF, $BF, $24, $04, $1C, $80, $30, $30, $34, $5C, $30, $9E, $AC, $A8
		dc.b    $DC, $0E, $04, $0A, $05, $08, $08, $08, $08, $BF, $BF, $BF, $BF, $24, $04, $2C
		dc.b    $80, $04, $37, $77, $72, $49, $1F, $1F, $1F, $1F, $07, $07, $0A, $0D, $00, $00
		dc.b    $0B, $0B, $1F, $1F, $0F, $0F, $13, $13, $81, $88
Sfx_C4: ; loc_FF7D1:
		dc.b    $E0, $F7, $01, $01, $80, $05, $DB, $F7, $00, $00, $EF, $00, $8A, $22, $F2, $FA
		dc.b    $21, $10, $30, $32, $1F, $1F, $1F, $1F, $05, $05, $18, $10, $0B, $10, $1F, $10
		dc.b    $1F, $4F, $2F, $2F, $0D, $04, $07, $80
Sfx_C5: ; loc_FF7F9:
		dc.b    $2E, $F8, $01, $03, $80, $05, $0F, $F8, $00, $00, $80, $04, $18, $F8, $00, $00
		dc.b    $80, $C0, $1F, $F8, $00, $00, $EF, $00, $8A, $08, $80, $02, $8A, $08, $F2, $EF
		dc.b    $01, $80, $12, $C6, $55, $F2, $F5, $02, $F3, $E7, $80, $02, $C2, $05, $C4, $04
		dc.b    $C2, $05, $C4, $04, $F2, $3B, $03, $02, $02, $06, $18, $1A, $1A, $96, $17, $0A
		dc.b    $0E, $10, $00, $00, $00, $00, $FF, $FF, $FF, $FF, $00, $39, $28, $80, $04, $37
		dc.b    $77, $72, $49, $1F, $1F, $1F, $1F, $07, $07, $0A, $0D, $00, $00, $0B, $0B, $1F
		dc.b    $1F, $0F, $0F, $23, $23, $80, $80
Sfx_C6: ; loc_FF860:
		dc.b    $47, $F8, $01, $02, $80, $04, $70, $F8, $00, $05, $80, $05, $7C, $F8, $00, $08
		dc.b    $EF, $00, $C6, $02, $05, $05, $05, $05, $05, $05, $3A, $F2, $EF, $00, $80, $02
		dc.b    $C4, $02, $05, $15, $02, $05, $32, $F2               
Sfx_C7: ; loc_FF888:
		dc.b    $9D, $F8, $01, $01, $80, $05, $92, $F8, $00, $00, $EF, $00, $BE, $05, $80, $04
		dc.b    $BE, $04, $80, $04, $F2, $28, $2F, $37, $5F, $2B, $1F, $1F, $1F, $1F, $15, $15
		dc.b    $15, $13, $13, $0D, $0C, $10, $2F, $3F, $2F, $2F, $00, $1F, $10, $80
Sfx_C8: ; loc_FF8B6:
		dc.b    $00, $00, $01, $01, $80, $C0, $C0, $F8, $00, $00, $F5, $00, $F3, $E7, $A7, $25
		dc.b    $F2
Sfx_C9: ; loc_FF8C7:
		dc.b    $DB, $F8, $01, $01, $80, $05, $D1, $F8, $0E, $00, $EF, $00, $F0, $01, $01, $33
		dc.b    $18, $B9, $1A, $F2, $3B, $0A, $05, $31, $02, $5F, $5F, $5F, $5F, $04, $16, $14
		dc.b    $0C, $00, $00, $04, $00, $1F, $D8, $6F, $FF, $03, $00, $25, $80
Sfx_CA: ; loc_FF8F4:
		dc.b    $08, $F9, $01, $01, $80, $05, $FE, $F8, $00, $02, $EF, $00, $F0, $01, $01, $5B
		dc.b    $02, $CC, $65, $F2, $20, $36, $30, $35, $31, $41, $3B, $49, $4B, $09, $09, $06
		dc.b    $08, $01, $02, $03, $A9, $0F, $0F, $0F, $0F, $29, $23, $27, $80               
Sfx_CB: ; loc_FF921:
		dc.b    $79, $F2, $01, $02, $80, $05, $31, $F9, $00, $00, $80, $C0, $42, $F9, $00, $00
		dc.b    $EF, $00, $F0, $03, $01, $20, $04, $81, $18, $E6, $0A, $F7, $00, $06, $38, $F9
		dc.b    $F2, $F0, $01, $01, $0F, $05, $F3, $E7, $B0, $18, $E7, $EC, $03, $F7, $00, $05
		dc.b    $49, $F9, $F2
Sfx_CC: ; loc_FF954:
		dc.b    $75, $F9, $01, $01, $80, $04, $5E, $F9, $00, $02, $EF, $00, $80, $01, $F0, $03
		dc.b    $01, $5D, $0F, $B0, $0C, $F4, $E7, $E6, $02, $BD, $02, $F7, $00, $19, $6A, $F9
		dc.b    $F2, $20, $36, $30, $35, $31, $DF, $9F, $DF, $9F, $07, $09, $06, $06, $07, $06
		dc.b    $06, $08, $2F, $1F, $1F, $FF, $16, $13, $30, $80           
Sfx_CD: ; loc_FF98E:
		dc.b    $00, $00, $01, $01, $80, $C0, $98, $F9, $00, $00, $BB, $02, $F2               
Sfx_CE: ; loc_FF99B:
		dc.b    $47, $F8, $01, $01, $80, $04, $A5, $F9, $00, $05, $EF, $00, $E0, $80, $C1, $04
		dc.b    $C4, $05, $C9, $1B, $F2
Sfx_CF: ; loc_FF9B0:
		dc.b    $CE, $F9, $01, $02, $80, $04, $C0, $F9, $27, $03, $80, $05, $C2, $F9, $27, $00
		dc.b    $80, $04, $EF, $00, $B4, $05, $E6, $02, $F7, $00, $15, $C4, $F9, $F2, $F4, $06
		dc.b    $0F, $04, $0E, $1F, $1F, $1F, $1F, $00, $0B, $00, $0B, $00, $05, $00, $08, $0F
		dc.b    $FF, $0F, $FF, $0C, $03, $8B, $80
Sfx_D0: ; loc_FF9E7:
		dc.b    $02, $FA, $01, $01, $80, $05, $F1, $F9, $00, $00, $EF, $00, $9D, $05, $9D, $02
		dc.b    $AD, $05, $9D, $02, $AD, $05, $9D, $02, $AD, $05, $F2, $3B, $70, $53, $70, $51
		dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $00, $0F, $00, $00, $00, $00, $0F, $0F, $0F, $0F
		dc.b    $0E, $2F, $0C, $80
Sfx_D1: ; loc_FFA1B:
		dc.b    $2A, $FA, $01, $01, $80, $05, $25, $FA, $00, $01, $EF, $00, $81, $05, $F2, $35
		dc.b    $02, $01, $00, $04, $1F, $1F, $1F, $1F, $00, $19, $12, $14, $00, $00, $0C, $0F
		dc.b    $0F, $FF, $EF, $FF, $00, $00, $00, $80               
Sfx_D2: ; loc_FFA43:
		dc.b    $5B, $FA, $01, $01, $80, $05, $4D, $FA, $00, $00, $EF, $00, $F0, $01, $01, $2D
		dc.b    $21, $81, $26, $81, $26, $81, $26, $F2, $0E, $05, $06, $04, $0F, $1F, $1F, $1F
		dc.b    $1F, $1F, $1F, $1F, $1F, $05, $08, $05, $05, $0F, $0F, $0F, $0F, $51, $82, $44
		dc.b    $97    
Sfx_D3: ; loc_FFA74:
		dc.b    $88, $FA, $01, $01, $80, $05, $7E, $FA, $00, $00, $EF, $00, $F0, $01, $02, $3F
		dc.b    $04, $96, $3A, $F2, $05, $07, $30, $0F, $0A, $30, $1F, $1F, $1F, $03, $03, $03
		dc.b    $03, $1F, $0F, $0F, $0F, $AF, $AF, $AF, $AF, $4D, $80, $80, $80
Sfx_D4: ; loc_FFAA1:
		dc.b    $C7, $FA, $01, $02, $80, $04, $B1, $FA, $00, $00, $80, $05, $BB, $FA, $00, $00
		dc.b    $EF, $00, $F0, $01, $01, $E7, $01, $93, $17, $F2, $EF, $00, $E1, $02, $F0, $01
		dc.b    $01, $E7, $01, $93, $17, $F2, $3E, $20, $0E, $0F, $0F, $1F, $1F, $1F, $1F, $1F
		dc.b    $1F, $1F, $1F, $0F, $0E, $0F, $0E, $0F, $0F, $0F, $0F, $8E, $80, $80, $80
Sfx_D5: ; loc_FFAE0:
		dc.b    $F4, $FA, $01, $01, $80, $05, $EA, $FA, $00, $00, $EF, $00, $F0, $01, $01, $02
		dc.b    $02, $B1, $15, $F2, $35, $29, $09, $08, $0F, $1A, $1F, $10, $1F, $0F, $1F, $1F
		dc.b    $1F, $0C, $0D, $0E, $0E, $0F, $0F, $0F, $0F, $80, $80, $80, $80
Sfx_D6: ; loc_FFB0D:
		dc.b    $3A, $FB, $01, $02, $80, $04, $1D, $FB, $00, $08, $80, $05, $1D, $FB, $0C, $08
		dc.b    $EF, $00, $F0, $01, $01, $12, $FF, $8F, $45, $F0, $00, $00, $00, $00, $E7, $E6
		dc.b    $03, $A0, $01, $E6, $02, $E7, $0A, $F7, $00, $07, $30, $FB, $F2, $34, $01, $0B
		dc.b    $0E, $09, $9F, $AF, $AF, $CF, $02, $00, $02, $00, $07, $0A, $04, $05, $BF, $BF
		dc.b    $BF, $BF, $50, $1C, $00, $80               
Sfx_D7: ; loc_FFB53:
		dc.b    $67, $FB, $01, $01, $80, $05, $5D, $FB, $00, $06, $EF, $00, $F0, $01, $01, $07
		dc.b    $01, $99, $1B, $F2, $3E, $20, $0F, $1F, $0F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
		dc.b    $1F, $0F, $0E, $0F, $0E, $0F, $0F, $0F, $0F, $8C, $80, $80, $80
Sfx_D8: ; loc_FFB80:
		dc.b    $9E, $FB, $01, $01, $80, $05, $8A, $FB, $00, $00, $EF, $00, $B7, $03, $BB, $03
		dc.b    $C7, $0A, $E6, $08, $C7, $05, $80, $05, $F7, $00, $03, $92, $FB, $F2, $3C, $05
		dc.b    $0A, $01, $01, $56, $5C, $5C, $5C, $0E, $11, $11, $11, $09, $06, $0A, $0A, $4F
		dc.b    $3F, $3F, $3F, $17, $20, $80, $80
Sfx_D9: ; loc_FFBB7:
		dc.b    $ED, $FB, $01, $03, $80, $80, $CD, $FB, $EC, $00, $80, $A0, $CD, $FB, $EA, $00
		dc.b    $80, $05, $DC, $FB, $00, $00, $F0, $01, $01, $81, $45, $9C, $05, $EC, $02, $F7
		dc.b    $00, $02, $D2, $FB, $F2, $EF, $00, $F0, $01, $01, $0C, $01, $92, $07, $E6, $0A
		dc.b    $F7, $00, $03, $E3, $FB, $F2, $43, $01, $01, $01, $01, $5F, $5F, $5F, $5F, $0E
		dc.b    $11, $11, $11, $09, $06, $0A, $0A, $4F, $3F, $3F, $3F, $17, $20, $80, $80
Sfx_DA: ; loc_FFC06:
		dc.b    $2E, $FC, $01, $02, $80, $C0, $16, $FC, $00, $02, $80, $05, $1D, $FC, $00, $00
		dc.b    $F3, $E7, $F5, $01, $CC, $29, $F2, $EF, $00, $F0, $01, $01, $7F, $F1, $AA, $0A
		dc.b    $E6, $0C, $F7, $00, $03, $24, $FC, $F2, $47, $03, $02, $02, $04, $5F, $5F, $5F
		dc.b    $5F, $0E, $1A, $11, $0A, $09, $0A, $0A, $0A, $4F, $3F, $3F, $3F, $7F, $80, $80
		dc.b    $A3               
Sfx_DB: ; loc_FFC47:
		dc.b    $64, $FC, $01, $01, $80, $C0, $51, $FC, $00, $00, $F5, $00, $F3, $E7, $C5, $01
		dc.b    $CE, $02, $E7, $02, $EC, $01, $E7, $F7, $00, $14, $5A, $FC, $F2
Sfx_DC: ; loc_FFC64:
		dc.b    $A8, $FC, $01, $03, $80, $04, $7A, $FC, $00, $00, $80, $05, $81, $FC, $00, $00
		dc.b    $80, $C0, $8A, $FC, $00, $00, $EF, $00, $8D, $06, $8D, $30, $F2, $80, $0C, $EF
		dc.b    $00, $8D, $06, $8D, $30, $F2, $F5, $00, $F3, $E7, $F0, $01, $01, $01, $01, $99
		dc.b    $0F, $F0, $01, $01, $05, $05, $95, $1F, $E7, $12, $EC, $01, $E7, $0F, $F7, $00
		dc.b    $1F, $9E, $FC, $F2, $38, $71, $00, $00, $60, $0A, $0A, $0F, $0F, $00, $00, $00
		dc.b    $12, $00, $09, $07, $0B, $0F, $0F, $0F, $0F, $11, $04, $0E, $80           
Sfx_DD: ; loc_FFCC1:
		dc.b    $D2, $FC, $01, $01, $80, $05, $CB, $FC, $00, $00, $EF, $00, $BB, $05, $BB, $05
		dc.b    $F2, $3E, $20, $3F, $1F, $BF, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F, $0F, $0F
		dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $8C, $80, $80, $80               
Sfx_DE: ; loc_FFCEB:
		dc.b    $0F, $FD, $01, $01, $80, $05, $F5, $FC, $00, $00, $EF, $00, $F0, $01, $01, $0F
		dc.b    $FE, $93, $43, $F0, $01, $01, $03, $03, $9F, $0F, $E7, $03, $E6, $01, $F7, $00
		dc.b    $23, $05, $FD, $F2, $3C, $00, $02, $40, $02, $1F, $1F, $1F, $15, $00, $00, $1F
		dc.b    $00, $00, $00, $00, $00, $0F, $0F, $0F, $0F, $0D, $28, $00, $00
Sfx_DF: ; loc_FFD28:
		dc.b    $5A, $FD, $01, $02, $80, $05, $38, $FD, $15, $00, $80, $02, $49, $FD, $F4, $05
		dc.b    $EF, $00, $F0, $01, $01, $19, $31, $9D, $3A, $E6, $05, $F7, $00, $02, $3F, $FD
		dc.b    $F2, $EF, $00, $F0, $01, $01, $19, $31, $9D, $3A, $E6, $05, $F7, $00, $02, $50
		dc.b    $FD, $F2, $30, $30, $30, $30, $3C, $9E, $AC, $A8, $DF, $0E, $04, $0A, $00, $08
		dc.b    $08, $08, $08, $BF, $BF, $BF, $BF, $04, $14, $2C, $80
Sfx_E0: ; loc_FFD73:
		dc.b    $CF, $FD, $01, $03, $80, $05, $89, $FD, $00, $00, $80, $02, $A6, $FD, $F7, $00
		dc.b    $80, $C0, $C3, $FD, $00, $00, $EF, $00, $F0, $01, $01, $19, $F6, $C4, $25, $F0
		dc.b    $01, $01, $00, $00, $E7, $E6, $0F, $D0, $0F, $E7, $03, $E6, $02, $F7, $00, $13
		dc.b    $9C, $FD, $F2, $EF, $00, $F0, $01, $01, $19, $F6, $D5, $25, $F0, $01, $01, $00
		dc.b    $00, $E7, $E6, $0F, $DB, $0F, $E7, $03, $E6, $02, $F7, $00, $13, $B9, $FD, $F2
		dc.b    $F5, $01, $F3, $E7, $F0, $01, $01, $01, $01, $AC, $24, $F2, $34, $00, $03, $0C
		dc.b    $09, $9F, $AC, $AF, $D5, $06, $00, $02, $00, $02, $0A, $04, $08, $BF, $BF, $BF
		dc.b    $BF, $00, $1C, $00, $80

; end of 'ROM'
	if padToPowerOfTwo && (*)&(*-1)
		cnop	-1,2<<lastbit(*-1)
		dc.b	0
paddingSoFar	:= paddingSoFar+1
	else
		even
	endif
	if MOMPASS=2
		; "About" because it will be off by the same amount that Size_of_Snd_driver_guess is incorrect (if you changed it), and because I may have missed a small amount of internal padding somewhere
		message "ROM size is $\{*} bytes (\{*/1024.0} kb). About $\{paddingSoFar} bytes are padding. "
	endif
		shared movewz80CompSize
EndOfRom:
		END